Index: test/unit/src/org/kuali/kfs/gl/service/OrganizationReversionLogicTest.java
===================================================================
--- test/unit/src/org/kuali/kfs/gl/service/OrganizationReversionLogicTest.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/gl/service/OrganizationReversionLogicTest.java	(working copy)
@@ -255,7 +255,7 @@
         clearBatchFiles();
         persistenceService.clearCache();
         
-        Map jobParameters = organizationReversionProcessService.getJobParameters();
+        Map<String, ?> jobParameters = organizationReversionProcessService.getJobParameters();
         currentFiscalYear = new Integer(((Number)jobParameters.get(KFSConstants.UNIV_FISCAL_YR)).intValue() + 1);
         previousFiscalYear = new Integer(((Number)jobParameters.get(KFSConstants.UNIV_FISCAL_YR)).intValue());
         Map<String, Integer> organizationReversionCounts = new HashMap<String, Integer>();
Index: test/unit/src/org/kuali/kfs/gl/batch/service/PosterServiceTest.java
===================================================================
--- test/unit/src/org/kuali/kfs/gl/batch/service/PosterServiceTest.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/gl/batch/service/PosterServiceTest.java	(working copy)
@@ -621,7 +621,7 @@
 
         assertOriginEntries(2, outputTransactions);
 
-        List trans = unitTestSqlDao.sqlSelect("select * from GL_EXPEND_TRN_T order by account_nbr");
+        List trans = unitTestSqlDao.sqlSelect("select * from GL_EXPEND_TRN_MT order by account_nbr");
 
         assertEquals("Wrong number of transactions", 4, trans.size());
         Map acct4031407 = (Map) trans.get(0);
@@ -685,23 +685,23 @@
 //    public void testIcrGeneration() throws Exception {
 //        LOG.debug("testIcrGeneration() started");
 //        // Load the expenditure table
-//        unitTestSqlDao.sqlCommand("delete from gl_expend_trn_t");
+//        unitTestSqlDao.sqlCommand("delete from GL_EXPEND_TRN_MT");
 //
 //        // This one shouldn't generate any entries
-//        unitTestSqlDao.sqlCommand("INSERT INTO GL_EXPEND_TRN_T (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) VALUES ('2004', 'BL', '1031400', '-----', '4166', '---', 'AC', 'EX', '07', '----------', '12345678', 10000)");
+//        unitTestSqlDao.sqlCommand("INSERT INTO GL_EXPEND_TRN_MT (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) VALUES ('2004', 'BL', '1031400', '-----', '4166', '---', 'AC', 'EX', '07', '----------', '12345678', 10000)");
 //
 //        // This one is fin_series_id 001 3.13% to 1 account (2 gl entries)
-//        unitTestSqlDao.sqlCommand("INSERT INTO GL_EXPEND_TRN_T (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) VALUES ('2004', 'BL', '4531407', '-----', '4166', '---', 'AC', 'EX', '07', '----------', '12345678', 10000)");
+//        unitTestSqlDao.sqlCommand("INSERT INTO GL_EXPEND_TRN_MT (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) VALUES ('2004', 'BL', '4531407', '-----', '4166', '---', 'AC', 'EX', '07', '----------', '12345678', 10000)");
 //
 //        // This one is fin_series_id 002 3.8% to 2 accounts (2.0% & 1.8%)
-//        unitTestSqlDao.sqlCommand("INSERT INTO GL_EXPEND_TRN_T (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) VALUES ('2004', 'BL', '4531408', '-----', '4166', '---', 'AC', 'EX', '07', '----------', '12345678', 10000)");
+//        unitTestSqlDao.sqlCommand("INSERT INTO GL_EXPEND_TRN_MT (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) VALUES ('2004', 'BL', '4531408', '-----', '4166', '---', 'AC', 'EX', '07', '----------', '12345678', 10000)");
 //
 //        // Clear origin entry & origin entry group
 //        clearOriginEntryTables();
 //
 //        posterService.generateIcrTransactions();
 //
-//        List results = unitTestSqlDao.sqlSelect("select * from gl_expend_trn_t");
+//        List results = unitTestSqlDao.sqlSelect("select * from GL_EXPEND_TRN_MT");
 //        assertEquals("Should be no expenditure rows left", 0, results.size());
 //
 //        results = unitTestSqlDao.sqlSelect("select * from gl_origin_entry_t order by origin_entry_id");
Index: test/unit/src/org/kuali/kfs/gl/businessobject/OriginEntryTestBase.java
===================================================================
--- test/unit/src/org/kuali/kfs/gl/businessobject/OriginEntryTestBase.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/gl/businessobject/OriginEntryTestBase.java	(working copy)
@@ -254,7 +254,7 @@
      * Deletes everything in the expenditure transaction table
      */
     protected void clearExpenditureTable() {
-        unitTestSqlDao.sqlCommand("delete from GL_EXPEND_TRN_T");
+        unitTestSqlDao.sqlCommand("delete from GL_EXPEND_TRN_MT");
     }
 
     /**
@@ -413,7 +413,7 @@
      * @throws Exception if the parameters could not be reset for some reason
      */
     protected void resetAllEnhancementFlags() throws Exception {
-        setApplicationConfigurationFlag((Class) FLEXIBLE_OFFSET_ENABLED_FLAG[0], (String) FLEXIBLE_OFFSET_ENABLED_FLAG[1], false);
+        setApplicationConfigurationFlag((Class<?>) FLEXIBLE_OFFSET_ENABLED_FLAG[0], (String) FLEXIBLE_OFFSET_ENABLED_FLAG[1], false);
     }
 
     /**
@@ -424,7 +424,7 @@
      * @param value the new value for the parameter
      * @throws Exception thrown if some vague thing goes wrong
      */
-    protected void setApplicationConfigurationFlag(Class componentClass, String name, boolean value) throws Exception {
+    protected void setApplicationConfigurationFlag(Class<?> componentClass, String name, boolean value) throws Exception {
         TestUtils.setSystemParameter(componentClass, name, value ? "Y" : "N");
     }
 
@@ -435,10 +435,10 @@
      * @param list a List, presumably of Origin entries, but really, it could be anything
      * @param name the name of the list to display in the output
      */
-    protected void traceList(List list, String name) {
+    protected void traceList(List<?> list, String name) {
         trace("StartList " + name + "( " + list.size() + " elements): ", 0);
 
-        for (Iterator iterator = list.iterator(); iterator.hasNext();) {
+        for (Iterator<?> iterator = list.iterator(); iterator.hasNext();) {
             trace(iterator.next(), 1);
         }
 
Index: test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/RequisitionDocumentRuleTest.java
===================================================================
--- test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/RequisitionDocumentRuleTest.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/module/purap/document/validation/impl/RequisitionDocumentRuleTest.java	(working copy)
@@ -20,11 +20,13 @@
 import java.util.Map;
 
 import org.kuali.kfs.module.purap.PurapKeyConstants;
+import org.kuali.kfs.module.purap.PurapParameterConstants;
 import org.kuali.kfs.module.purap.document.RequisitionDocument;
 import org.kuali.kfs.module.purap.document.validation.PurapRuleTestBase;
 import org.kuali.kfs.module.purap.fixture.AmountsLimitsFixture;
 import org.kuali.kfs.module.purap.fixture.RequisitionDocumentFixture;
 import org.kuali.kfs.sys.ConfigureContext;
+import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.validation.GenericValidation;
 import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEventBase;
@@ -78,7 +80,11 @@
                 
         PurchasingProcessVendorValidation validation = (PurchasingProcessVendorValidation)validations.get("Purchasing-processVendorValidation-test");        
         assertFalse( validation.validate(new AttributedDocumentEventBase("","", req)) );
-        assertTrue(GlobalVariables.getMessageMap().containsMessageKey(PurapKeyConstants.ERROR_DEBARRED_VENDOR));
+        if (SpringContext.getBean(ParameterService.class).getIndicatorParameter(KFSConstants.ParameterNamespaces.PURCHASING, "Requisition", PurapParameterConstants.SHOW_DEBARRED_VENDOR_WARNING_IND)) {
+            assertTrue(GlobalVariables.getMessageMap().hasWarnings());
+        } else {
+            assertTrue(GlobalVariables.getMessageMap().containsMessageKey(PurapKeyConstants.ERROR_DEBARRED_VENDOR));
+        }
     }
     
     //Inactive Vendor should fail the vendor validation.
Index: test/unit/src/org/kuali/kfs/module/cg/service/CloseServiceTest.java
===================================================================
--- test/unit/src/org/kuali/kfs/module/cg/service/CloseServiceTest.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/module/cg/service/CloseServiceTest.java	(working copy)
@@ -26,6 +26,7 @@
 import org.kuali.kfs.module.cg.businessobject.Proposal;
 import org.kuali.kfs.module.cg.businessobject.defaultvalue.NextProposalNumberFinder;
 import org.kuali.kfs.module.cg.document.ProposalAwardCloseDocument;
+import org.kuali.kfs.module.cg.service.CloseService;
 import org.kuali.kfs.sys.ConfigureContext;
 import org.kuali.kfs.sys.DocumentTestUtils;
 import org.kuali.kfs.sys.context.KualiTestBase;
Index: test/unit/src/org/kuali/kfs/module/cg/service/CfdaServiceTest.java
===================================================================
--- test/unit/src/org/kuali/kfs/module/cg/service/CfdaServiceTest.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/module/cg/service/CfdaServiceTest.java	(working copy)
@@ -1,44 +0,0 @@
-/*
- * Copyright 2007 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.cg.service;
-
-import java.io.IOException;
-
-import org.kuali.kfs.sys.ConfigureContext;
-import org.kuali.kfs.sys.context.KualiTestBase;
-
-@ConfigureContext
-public class CfdaServiceTest extends KualiTestBase {
-
-//    public void testPatternExtraction() {
-//
-//        String[] table = { "<TD ALIGN=\"Center\" NOWRAP valign=\"TOP\"  WIDTH=\"0\"><A HREF=\"CATALOG.PROGRAM_TEXT_RPT.SHOW?p_arg_names=prog_nbr&p_arg_values=10.001\"><FONT STYLE = \"font-family:Arial; color:#00008B; font-size:10pt; \"><B><U>10.001</U></B></FONT></A></TD>\n", "<TD ALIGN=\"Left\" NOWRAP valign=\"TOP\"  WIDTH=\"0\"><FONT STYLE = \"font-family:Arial; font-size:10pt; \">USDA</FONT></TD>\n", "<TD ALIGN=\"Left\" NOWRAP valign=\"TOP\"  WIDTH=\"666\"><FONT STYLE = \"font-family:Arial; font-size:10pt; \">Agricultural Research_Basic and Applied Research</FONT></TD>" };
-//
-//        String n = ((CfdaServiceImpl)SpringContext.getBean(CfdaService.class)).extractCfdaNumberFrom(table[0]);
-//        String a = ((CfdaServiceImpl)SpringContext.getBean(CfdaService.class)).extractCfdaAgencyFrom(table[1]);
-//        String t = ((CfdaServiceImpl)SpringContext.getBean(CfdaService.class)).extractCfdaTitleFrom(table[2]);
-//
-//        assertEquals("Number extraction failed", "10.001", n);
-//        assertEquals("Agency extraction failed", "USDA", a);
-//        assertEquals("Title extraction failed", "Agricultural Research_Basic and Applied Research", t);
-//    }
-
-    public void testUpdate() throws IOException {
-        // Commented out since causing unit tests to pause for 15 minutes (and doesn't really test anything anyway)
-        //CfdaUpdateResults results = SpringContext.getBean(CfdaService.class).update();
-    }
-
-}
Index: test/unit/src/org/kuali/kfs/sys/service/IsDebitTestUtils.java
===================================================================
--- test/unit/src/org/kuali/kfs/sys/service/IsDebitTestUtils.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/sys/service/IsDebitTestUtils.java	(working copy)
@@ -18,6 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.fp.document.AdvanceDepositDocument;
 import org.kuali.kfs.fp.document.CashReceiptDocument;
 import org.kuali.kfs.fp.document.CreditCardReceiptDocument;
@@ -54,8 +55,8 @@
         public static final KualiDecimal NEGATIVE = new KualiDecimal("-5");
     }
 
-    private static Map<Class<? extends TransactionalDocument>, String> sourceLines = new HashMap<Class<? extends TransactionalDocument>, String>();
-    private static Map<Class<? extends TransactionalDocument>, String> targetLines = new HashMap<Class<? extends TransactionalDocument>, String>();
+    private static Map<String, String> sourceLines = new HashMap<String, String>();
+    private static Map<String, String> targetLines = new HashMap<String, String>();
 
     private static class BaChartObjectCodes {
         public static final String EXPENSE = "5000";
@@ -75,28 +76,28 @@
 
 
     static {
-        sourceLines.put(AdvanceDepositDocument.class, ImportLines.WITH_DESCRIPTION);
-        sourceLines.put(CashReceiptDocument.class, ImportLines.WITH_DESCRIPTION);
-        sourceLines.put(CreditCardReceiptDocument.class, ImportLines.WITH_DESCRIPTION);
-        sourceLines.put(DisbursementVoucherDocument.class, ImportLines.WITH_DESCRIPTION);
-        sourceLines.put(DistributionOfIncomeAndExpenseDocument.class, ImportLines.DEFAULT);
-        sourceLines.put(GeneralErrorCorrectionDocument.class, ImportLines.WITH_ORIGIN_CODE_AND_REF_NUM_AND_DESCRIPTION);
-        sourceLines.put(IndirectCostAdjustmentDocument.class, ImportLines.WITHOUT_OBJECT_CODE);
-        sourceLines.put(InternalBillingDocument.class, ImportLines.DEFAULT);
-        sourceLines.put(NonCheckDisbursementDocument.class, ImportLines.WITH_REF_NUM_AND_DESCRIPTION);
-        sourceLines.put(PreEncumbranceDocument.class, ImportLines.DEFAULT);
-        sourceLines.put(ServiceBillingDocument.class, ImportLines.WITH_DESCRIPTION);
-        sourceLines.put(TransferOfFundsDocument.class, ImportLines.DEFAULT);
+        sourceLines.put("AD", ImportLines.WITH_DESCRIPTION);
+        sourceLines.put("CR", ImportLines.WITH_DESCRIPTION);
+        sourceLines.put("CCR", ImportLines.WITH_DESCRIPTION);
+        sourceLines.put("DV", ImportLines.WITH_DESCRIPTION);
+        sourceLines.put("DI", ImportLines.DEFAULT);
+        sourceLines.put("GEC", ImportLines.WITH_ORIGIN_CODE_AND_REF_NUM_AND_DESCRIPTION);
+        sourceLines.put("ICA", ImportLines.WITHOUT_OBJECT_CODE);
+        sourceLines.put("IB", ImportLines.DEFAULT);
+        sourceLines.put("ND", ImportLines.WITH_REF_NUM_AND_DESCRIPTION);
+        sourceLines.put("PE", ImportLines.DEFAULT);
+        sourceLines.put("SB", ImportLines.WITH_DESCRIPTION);
+        sourceLines.put("TF", ImportLines.DEFAULT);
     }
 
     static {
-        targetLines.put(DistributionOfIncomeAndExpenseDocument.class, ImportLines.DEFAULT);
-        targetLines.put(GeneralErrorCorrectionDocument.class, ImportLines.WITH_ORIGIN_CODE_AND_REF_NUM_AND_DESCRIPTION);
-        targetLines.put(IndirectCostAdjustmentDocument.class, ImportLines.WITHOUT_OBJECT_CODE);
-        targetLines.put(InternalBillingDocument.class, ImportLines.DEFAULT);
-        targetLines.put(PreEncumbranceDocument.class, ImportLines.WITH_REF_NUM);
-        targetLines.put(ServiceBillingDocument.class, ImportLines.WITH_DESCRIPTION);
-        targetLines.put(TransferOfFundsDocument.class, ImportLines.DEFAULT);
+        targetLines.put("DI", ImportLines.DEFAULT);
+        targetLines.put("GEC", ImportLines.WITH_ORIGIN_CODE_AND_REF_NUM_AND_DESCRIPTION);
+        targetLines.put("ICA", ImportLines.WITHOUT_OBJECT_CODE);
+        targetLines.put("IB", ImportLines.DEFAULT);
+        targetLines.put("PE", ImportLines.WITH_REF_NUM);
+        targetLines.put("SB", ImportLines.WITH_DESCRIPTION);
+        targetLines.put("TF", ImportLines.DEFAULT);
     }
 
     /**
@@ -126,17 +127,19 @@
         String unparsedLine = null;
         AccountingLine line = null;
         if (SourceAccountingLine.class.isAssignableFrom(lineClass)) {
-            unparsedLine = sourceLines.get(financialDocument.getClass());
+            unparsedLine = sourceLines.get(getDocumentTypeCode(financialDocument));
             if (unparsedLine == null) {
                 throw new IllegalArgumentException("no value found in sourceMap for: " + financialDocument.getClass() + ";" + lineClass);
             }
+            unparsedLine = removeChartIfNotNeeded(unparsedLine);
             line = financialDocument.getAccountingLineParser().parseSourceAccountingLine(financialDocument, unparsedLine);
         }
         else if (TargetAccountingLine.class.isAssignableFrom(lineClass)) {
-            unparsedLine = targetLines.get(financialDocument.getClass());
+            unparsedLine = targetLines.get(getDocumentTypeCode(financialDocument));
             if (unparsedLine == null) {
                 throw new IllegalArgumentException("no value found in targetMap for: " + financialDocument.getClass() + ";" + lineClass);
             }
+            unparsedLine = removeChartIfNotNeeded(unparsedLine);
             line = financialDocument.getAccountingLineParser().parseTargetAccountingLine(financialDocument, unparsedLine);
         }
         else {
@@ -147,6 +150,30 @@
         line.setFinancialObjectCode(objectCode);
         return line;
     }
+    
+    /**
+     * Returns the document type name for the given document
+     * @param financialDocument the document to find a doc type name for
+     * @return the doc type name
+     */
+    private static String getDocumentTypeCode(AccountingDocument financialDocument) {
+        final DataDictionaryService dataDictionaryService = SpringContext.getBean(DataDictionaryService.class);
+        final String docTypeName = dataDictionaryService.getDocumentTypeNameByClass(financialDocument.getClass());
+        return docTypeName;
+    }
+    
+    /**
+     * Checks if accounts can cross charts; if not, removes chart from accounting line
+     * @param accountingLine the accounting line to potentially correct
+     * @return the accounting line, with perhaps the chart removed
+     */
+    private static String removeChartIfNotNeeded(String accountingLine) {
+        final AccountService accountService = SpringContext.getBean(AccountService.class);
+        final String updatedAccountingLine = (!accountService.accountsCanCrossCharts()) ?
+                accountingLine.substring(3) :
+                accountingLine;
+        return updatedAccountingLine;
+    }
 
     /**
      * @param financialDocument
Index: test/unit/src/org/kuali/kfs/sys/businessobject/AccountingLineOverrideTest.java
===================================================================
--- test/unit/src/org/kuali/kfs/sys/businessobject/AccountingLineOverrideTest.java	(revision 37217)
+++ test/unit/src/org/kuali/kfs/sys/businessobject/AccountingLineOverrideTest.java	(working copy)
@@ -216,7 +216,7 @@
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
@@ -229,7 +229,7 @@
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
@@ -242,7 +242,7 @@
         line.setAccount(getExpiredAccount());
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(true, line.getAccountExpiredOverride());
         assertEquals(true, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.EXPIRED_ACCOUNT, line.getOverrideCode());
@@ -255,7 +255,7 @@
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
@@ -268,7 +268,7 @@
         line.setAccount(getExpiredAccount());
         line.setAccountExpiredOverride(true);
         line.setAccountExpiredOverrideNeeded(true);
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(true, line.getAccountExpiredOverride());
         assertEquals(true, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.EXPIRED_ACCOUNT, line.getOverrideCode());
@@ -281,7 +281,7 @@
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(true, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
@@ -294,7 +294,7 @@
         line.setAccount(getUnexpiredAccount());
         line.setAccountExpiredOverride(true);
         line.setAccountExpiredOverrideNeeded(true);
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(true, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.EXPIRED_ACCOUNT, line.getOverrideCode());
@@ -307,7 +307,7 @@
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
-        AccountingLineOverride.processForOutput(line);
+        AccountingLineOverride.processForOutput(null,line);
         assertEquals(false, line.getAccountExpiredOverride());
         assertEquals(false, line.getAccountExpiredOverrideNeeded());
         assertEquals(AccountingLineOverride.CODE.NONE, line.getOverrideCode());
Index: work/src/org/kuali/kfs/coa/service/impl/AccountPersistenceStructureServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/coa/service/impl/AccountPersistenceStructureServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/coa/service/impl/AccountPersistenceStructureServiceImpl.java	(working copy)
@@ -15,6 +15,7 @@
  */
 package org.kuali.kfs.coa.service.impl;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -31,9 +32,13 @@
 import org.kuali.rice.krad.bo.PersistableBusinessObject;
 import org.kuali.rice.krad.service.impl.PersistenceStructureServiceImpl;
 import org.kuali.rice.krad.util.KRADConstants;
+import org.springframework.beans.factory.InitializingBean;
 
-public class AccountPersistenceStructureServiceImpl extends PersistenceStructureServiceImpl implements AccountPersistenceStructureService {
-                
+public class AccountPersistenceStructureServiceImpl extends PersistenceStructureServiceImpl implements AccountPersistenceStructureService, InitializingBean {
+    
+    protected List<AccountReferencePersistenceExemption> accountReferencePersistenceExemptions;
+    protected Map<Class<?>, List<AccountReferencePersistenceExemption>> accountReferencePersistenceExemptionsMap;
+    
     /* 
      * The following list is commented out as it's not used in code anymore, but still can server as a reference for testing. 
      * The list causes problems when referencing AwardAccount.class, a class in optional module;
@@ -203,7 +208,12 @@
                 // as it shall be editable when a new Account is being created; so we shall exclude such case 
                 List<String> pks = listPrimaryKeyFieldNames(bo.getClass());
                 if (bo instanceof Account && pks.contains(coaCodeName) && pks.contains(acctNumName )) 
-                    continue;                
+                    continue;
+                
+                // if this relationship is specifically exempted then exempt it
+                if (isExemptedFromAccountsCannotCrossChartsRules(bo.getClass(), coaCodeName, acctNumName)) {
+                    continue;
+                }
                                 
                 // exclude non-maintainable account field
                 String docTypeName = maintenanceDocumentDictionaryService.getDocumentTypeName(bo.getClass());
@@ -249,7 +259,12 @@
                 List<String> pks = listPrimaryKeyFieldNames(bo.getClass());
                 if (bo instanceof Account && pks.contains(coaCodeName) && pks.contains(acctNumName )) 
                     continue;                
-                
+
+                // if this relationship is specifically exempted then exempt it
+                if (isExemptedFromAccountsCannotCrossChartsRules(bo.getClass(), coaCodeName, acctNumName)) {
+                    continue;
+                }
+
                 // exclude non-maintainable account field
                 String docTypeName = maintenanceDocumentDictionaryService.getDocumentTypeName(bo.getClass());
                 if (maintenanceDocumentDictionaryService.getMaintainableField(docTypeName, coaCodeName) == null ||
@@ -294,5 +309,52 @@
         }
         return Collections.emptyMap();
     }
+
+    /**
+     * Determines if the relationship to an Account or Account-like business object, with keys of chartOfAccountsCodePropertyName and accountNumberPropertyName,
+     * is exempted from accounts cannot cross charts roles
+     * @param relationshipOwningClass the business object which possibly has an exempted relationship to Account
+     * @param chartOfAccountsCodePropertyName the property name of the relationshipOwningClass which represents the chart of accounts code part of the foreign key
+     * @param accountNumberPropertyName the property name of the relationshipOwningClass which represents the account number part of the foreign key
+     * @return true if the relationship is exempted, false otherwise
+     */
+    public boolean isExemptedFromAccountsCannotCrossChartsRules(Class<?> relationshipOwningClass, String chartOfAccountsCodePropertyName, String accountNumberPropertyName) {
+        final List<AccountReferencePersistenceExemption> exemptionList = accountReferencePersistenceExemptionsMap.get(relationshipOwningClass);
+        if (exemptionList != null) {
+            for (AccountReferencePersistenceExemption exemption : exemptionList) {
+                if (exemption.matches(chartOfAccountsCodePropertyName, accountNumberPropertyName)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Sets the list of classes and relationships which are exempted from the accounts can't cross charts rules
+     * @param accountReferencePersistenceExemptions the list of classes and relationships which are exempted from the accounts can't cross charts rules
+     */
+    public void setAccountReferencePersistenceExemptions(List<AccountReferencePersistenceExemption> accountReferencePersistenceExemptions) {
+        this.accountReferencePersistenceExemptions = accountReferencePersistenceExemptions;
+    }
+
+    /**
+     * Implemented to build the AccountReferencePersistenceExemptionsMap from the AccoutnReferencePersistenceExemptions List after intialization
+     * @throws Exception well, we're not going to throw an exception
+     */
+    @Override
+    public void afterPropertiesSet() throws Exception {
+        accountReferencePersistenceExemptionsMap = new HashMap<Class<?>, List<AccountReferencePersistenceExemption>>();
+        if (accountReferencePersistenceExemptions != null) {
+            for (AccountReferencePersistenceExemption exemption : accountReferencePersistenceExemptions) {
+                List<AccountReferencePersistenceExemption> exemptionList = accountReferencePersistenceExemptionsMap.get(exemption.getParentBusinessObjectClass());
+                if (exemptionList == null) {
+                    exemptionList = new ArrayList<AccountReferencePersistenceExemption>();
+                }
+                exemptionList.add(exemption);
+                accountReferencePersistenceExemptionsMap.put(exemption.getParentBusinessObjectClass(), exemptionList);
+            }
+        }
+    }
     
 }
Index: work/src/org/kuali/kfs/coa/spring-coa.xml
===================================================================
--- work/src/org/kuali/kfs/coa/spring-coa.xml	(revision 37217)
+++ work/src/org/kuali/kfs/coa/spring-coa.xml	(working copy)
@@ -54,8 +54,14 @@
 		<property name="jobNames">
 			<list>
 				<value>populatePriorYearDataJob</value>
+				<value>cfdaJob</value>
 			</list>
 		</property>
+		<property name="triggerNames">
+			<list>
+				<value>cfdaJobTrigger</value>
+			</list>
+		</property>
         <property name="fiscalYearMakers">
           <list>
             <ref bean="organizationReversionFiscalYearMaker" />
@@ -94,12 +100,24 @@
 			<ref bean="parameterService" />
 		</property>
 	</bean>
+	
+	<bean id="AccountReferenceExemption" abstract="true" parent="AccountReferenceExemption-parentBean"/>
+	<bean id="AccountReferenceExemption-parentBean" abstract="true" class="org.kuali.kfs.coa.service.impl.AccountReferencePersistenceExemption">
+		<property name="chartOfAccountsCodePropertyName" value="chartOfAccountsCode"/>
+		<property name="accountNumberPropertyName" value="accountNumber"/>
+	</bean>
 
-	<bean id="AccountPersistenceStructureService"  parent="AccountPersistenceStructureService-parentBean"/>
-	<bean id="AccountPersistenceStructureService-parentBean" class="org.kuali.kfs.coa.service.impl.AccountPersistenceStructureServiceImpl" abstract="true">
+	<bean id="AccountPersistenceStructureService" parent="AccountPersistenceStructureService-parentBean" />
+	
+	<bean id="AccountPersistenceStructureService-parentBean" abstract="true" class="org.kuali.kfs.coa.service.impl.AccountPersistenceStructureServiceImpl">
 		<property name="persistenceStructureServiceJpa" ref="persistenceStructureServiceJpa" />
     	<property name="persistenceStructureServiceOjb" ref="persistenceStructureServiceOjb" />
     	<property name="maintenanceDocumentDictionaryService" ref="maintenanceDocumentDictionaryService" />
+    	<property name="accountReferencePersistenceExemptions">
+    		<list>
+    			<bean parent="AccountReferenceExemption" p:parentBusinessObjectClass="org.kuali.kfs.coa.businessobject.Organization" p:accountNumberPropertyName="organizationDefaultAccountNumber"/> 
+    		</list>
+    	</property>
 	</bean>
 
 	<bean id="projectCodeService"  parent="projectCodeService-parentBean"/>
@@ -118,6 +136,7 @@
 
 	<bean id="subObjectCodeService"  parent="subObjectCodeService-parentBean"/>
 	<bean id="subObjectCodeService-parentBean" class="org.kuali.kfs.coa.service.impl.SubObjectCodeServiceImpl" abstract="true">
+
 		<property name="universityDateService">
 			<ref bean="universityDateService" />
 		</property>
@@ -329,7 +348,7 @@
 		</property>
 	</bean>
 	
-	<bean id="populatePriorYearDataJob" parent="unscheduledJobDescriptor">
+	<bean id="populatePriorYearDataJob" parent="scheduledJobDescriptor">
 		<property name="steps">
 			<list>
 				<ref bean="updatePriorYearDataStep" />
@@ -580,9 +599,39 @@
     	
 	<bean id="chartLedgerReferenceValuePreparedStatementCachingDao" parent="preparedStatementCachingDao" class="org.kuali.kfs.coa.batch.dataaccess.impl.LedgerReferenceValuePreparedStatementCachingDaoJdbc" />
 
-	<bean id="orgReviewRoleService"  parent="orgReviewRoleService-parentBean"/>
-	<bean id="orgReviewRoleService-parentBean" class="org.kuali.kfs.coa.service.impl.OrgReviewRoleServiceImpl" abstract="true" >
-		<property name="documentTypeService" ref="rice.kew.documentTypeService" />
+	<bean id="orgReviewRoleService" class="org.kuali.kfs.coa.service.impl.OrgReviewRoleServiceImpl" />
+	 <bean id="cfdaService" class="org.kuali.kfs.coa.service.impl.CfdaServiceImpl">
+        <property name="businessObjectService">
+            <ref bean="businessObjectService" />
+        </property>
+    </bean>
+       
+	
+    <bean id="cfdaBatchStep" class="org.kuali.kfs.coa.batch.CfdaBatchStep" parent="step">
+        <property name="cfdaService">
+            <ref bean="cfdaService" />
+        </property>
+        <property name="mailService">
+            <ref bean="mailService" />
+        </property>
+        <property name="parameterService">
+            <ref bean="parameterService" />
+        </property>
+        <property name="configurationService" ref="kualiConfigurationService" />
+    </bean>
+
+    <bean id="cfdaJob" parent="scheduledJobDescriptor">
+		<property name="steps">
+			<list>
+				<ref bean="cfdaBatchStep" />
+			</list>
+		</property>
 	</bean>
+
+	<bean id="cfdaJobTrigger" parent="cronTrigger">
+		<property name="jobName" value="cfdaJob" />
+		<property name="cronExpression" value="00 00 00 1 1,4,7,10  ?" />
+	</bean>
+	 
 	 <import resource="spring-coa-bus-exports.xml"/>
 </beans>
Index: work/src/org/kuali/kfs/coa/businessobject/datadictionary/OrganizationReversionGlobalDetail.xml
===================================================================
--- work/src/org/kuali/kfs/coa/businessobject/datadictionary/OrganizationReversionGlobalDetail.xml	(revision 37217)
+++ work/src/org/kuali/kfs/coa/businessobject/datadictionary/OrganizationReversionGlobalDetail.xml	(working copy)
@@ -26,6 +26,7 @@
         <ref bean="OrganizationReversionGlobalDetail-organizationReversionCategoryCode"/>
         <ref bean="OrganizationReversionGlobalDetail-organizationReversionObjectCode"/>
         <ref bean="OrganizationReversionGlobalDetail-organizationReversionCode"/>
+        <ref bean="OrganizationReversionGlobalDetail-objectCodeNames"/>
         <bean parent="GenericAttributes-newCollectionRecord"/>
       </list>
     </property>
@@ -72,5 +73,10 @@
       <bean parent="SelectControlDefinition" p:valuesFinderClass="org.kuali.kfs.coa.businessobject.options.OrganizationReversionCodeValuesFinder" p:includeKeyInLabel="false"/>
     </property>
   </bean>
+  
+  <bean id="OrganizationReversionGlobalDetail-objectCodeNames" parent="OrganizationReversionGlobalDetail-objectCodeNames-parentBean" />
+  <bean id="OrganizationReversionGlobalDetail-objectCodeNames-parentBean" abstract="true" parent="ObjectCode-financialObjectCodeName">
+  	<property name="name" value="objectCodeNames" />
+  </bean>
 
 </beans>
Index: work/src/org/kuali/kfs/coa/businessobject/Account.java
===================================================================
--- work/src/org/kuali/kfs/coa/businessobject/Account.java	(revision 37217)
+++ work/src/org/kuali/kfs/coa/businessobject/Account.java	(working copy)
@@ -30,7 +30,7 @@
 import org.kuali.kfs.coa.service.SubFundGroupService;
 import org.kuali.kfs.gl.businessobject.SufficientFundRebuild;
 import org.kuali.kfs.integration.cg.ContractsAndGrantsAccountAwardInformation;
-import org.kuali.kfs.integration.cg.ContractsAndGrantsCfda;
+import org.kuali.kfs.coa.businessobject.CFDA;
 import org.kuali.kfs.integration.cg.ContractsAndGrantsModuleService;
 import org.kuali.kfs.integration.ld.LaborBenefitRateCategory;
 import org.kuali.kfs.sys.KFSConstants;
@@ -126,7 +126,7 @@
     protected PostalCodeEbo postalZipCode;
     protected BudgetRecordingLevel budgetRecordingLevel;
     protected SufficientFundsCode sufficientFundsCode;
-    protected ContractsAndGrantsCfda cfda;
+    protected CFDA cfda;
 
     protected Chart fringeBenefitsChartOfAccount;
     protected Chart continuationChartOfAccount;
@@ -686,8 +686,8 @@
      * 
      * @return a CFDA record
      */
-    public ContractsAndGrantsCfda getCfda() {
-        return cfda = (ContractsAndGrantsCfda) SpringContext.getBean(KualiModuleService.class).getResponsibleModuleService(ContractsAndGrantsCfda.class).retrieveExternalizableBusinessObjectIfNecessary(this, cfda, "cfda");
+    public CFDA getCfda() {
+        return cfda ;
     }
     
     public List<ContractsAndGrantsAccountAwardInformation> getAwards() {
@@ -1013,7 +1013,8 @@
     }
     
     /**
-     * @see org.kuali.rice.krad.bo.PersistableBusinessObjectBase#refreshReferenceObject(java.lang.String)
+     * This fix is temporary until Jonathan's fix is reflected to Rice
+     * @see org.kuali.rice.kns.bo.PersistableBusinessObjectBase#refreshReferenceObject(java.lang.String)
      */
     public void refreshReferenceObject(String referenceObjectName) {
         if (referenceObjectName.equals("accountFiscalOfficerUser") ||
@@ -1506,7 +1507,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
      */
     protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
         LinkedHashMap m = new LinkedHashMap();
@@ -1764,7 +1765,7 @@
     public void setContractsAndGrantsAccountResponsibilityId(Integer contractsAndGrantsAccountResponsibilityId) {
         this.contractsAndGrantsAccountResponsibilityId = contractsAndGrantsAccountResponsibilityId;
     }
-
+    
     /**
      * Gets the laborBenefitRateCategoryCode attribute. 
      * @return Returns the laborBenefitRateCategoryCode.
@@ -1870,9 +1871,11 @@
    public void setContractControlChartOfAccounts(Chart contractControlChartOfAccounts) {
        this.contractControlChartOfAccounts = contractControlChartOfAccounts;
    }    
-
+   
    /**
-    * @see org.kuali.rice.krad.bo.PersistableBusinessObjectBase#buildListOfDeletionAwareLists()
+    * Gets the indirectCostRcvyChartOfAccounts attribute.
+    * 
+    * @return Returns the indirectCostRcvyChartOfAccounts.
     */
    @Override
    public List<Collection<PersistableBusinessObject>> buildListOfDeletionAwareLists() {
Index: work/src/org/kuali/kfs/coa/ojb-coa.xml
===================================================================
--- work/src/org/kuali/kfs/coa/ojb-coa.xml	(revision 37217)
+++ work/src/org/kuali/kfs/coa/ojb-coa.xml	(working copy)
@@ -69,6 +69,10 @@
     <reference-descriptor name="chartOfAccounts" class-ref="org.kuali.kfs.coa.businessobject.Chart" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
         <foreignkey field-ref="chartOfAccountsCode" />
     </reference-descriptor>
+    
+    <reference-descriptor name="cfda" class-ref="org.kuali.kfs.coa.businessobject.CFDA" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
+        <foreignkey field-ref="accountCfdaNumber" />
+    </reference-descriptor>
 
     <reference-descriptor name="organization" class-ref="org.kuali.kfs.coa.businessobject.Organization" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
         <foreignkey field-ref="chartOfAccountsCode" />
@@ -1876,6 +1880,21 @@
     <field-descriptor name="orgReviewRoleMemberId" column="ORG_TYP_CD" jdbc-type="VARCHAR" primarykey="true" index="true" />
   </class-descriptor>
    -->
+   
+<!-- 
+ 
+ CATALOG OF FEDERAL DOMESTIC ASSISTANCE REFERENCE (CFDA)
 
+-->
+<class-descriptor class="org.kuali.kfs.coa.businessobject.CFDA" table="CA_CFDA_REF_T">
+    <field-descriptor name="cfdaNumber" column="CG_CFDA_NBR" jdbc-type="VARCHAR" primarykey="true" index="true" />
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />
+    <field-descriptor name="cfdaProgramTitleName" column="CG_CFDA_PGM_TTL_NM" jdbc-type="VARCHAR" />
+    <!--field-descriptor name="cfdaStatusCode" column="CG_CFDA_STAT_CD" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanFieldAIConversion"/-->
+    <field-descriptor name="cfdaMaintenanceTypeId" column="CG_CFDA_MAINT_TYP_ID" jdbc-type="VARCHAR" />
+    <field-descriptor name="active" column="ROW_ACTV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion" />
+</class-descriptor>
+
 </descriptor-repository>
 
Index: work/src/org/kuali/kfs/coa/document/OrganizationReversionGlobalMaintainableImpl.java
===================================================================
--- work/src/org/kuali/kfs/coa/document/OrganizationReversionGlobalMaintainableImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/coa/document/OrganizationReversionGlobalMaintainableImpl.java	(working copy)
@@ -20,7 +20,9 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Map;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.coa.businessobject.OrganizationReversion;
 import org.kuali.kfs.coa.businessobject.OrganizationReversionCategory;
 import org.kuali.kfs.coa.businessobject.OrganizationReversionGlobal;
@@ -28,10 +30,13 @@
 import org.kuali.kfs.coa.businessobject.OrganizationReversionGlobalOrganization;
 import org.kuali.kfs.coa.service.OrganizationReversionService;
 import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.FinancialSystemGlobalMaintainable;
 import org.kuali.rice.krad.bo.PersistableBusinessObject;
 import org.kuali.rice.krad.maintenance.MaintenanceLock;
+import org.kuali.rice.kns.web.ui.Column;
+import org.kuali.rice.kns.web.ui.ResultRow;
 
 /**
  * This class provides some specific functionality for the {@link OrganizationReversionGlobal} maintenance document inner class for
@@ -144,6 +149,7 @@
      * 
      * @see org.kuali.rice.kns.maintenance.KualiMaintainableImpl#isRelationshipRefreshable(java.lang.Class, java.lang.String)
      */
+    @SuppressWarnings("unchecked")
     @Override
     protected boolean isRelationshipRefreshable(Class boClass, String relationshipName) {
         if (relationshipName.equals("organizationReversionGlobalDetails")) {
@@ -168,7 +174,47 @@
         }
     }
 
+    /**
+     * 
+     * @see org.kuali.rice.kns.maintenance.KualiMaintainableImpl#refresh(java.lang.String, java.util.Map, org.kuali.rice.kns.document.MaintenanceDocument)
+     */
+    @SuppressWarnings("unchecked")
     @Override
+    public void refresh(String refreshCaller, Map fieldValues, MaintenanceDocument document) {
+        super.refresh(refreshCaller, fieldValues, document);
+        final String lookupBusinessObjectClassName = (String)fieldValues.get(KFSConstants.LOOKUP_RESULTS_BO_CLASS_NAME);
+        if (!StringUtils.isBlank(lookupBusinessObjectClassName)) {
+            if (lookupBusinessObjectClassName.equals(OrganizationReversion.class.getName())) {
+                final String lookupResultsSequenceNumber = (String)fieldValues.get(KFSConstants.LOOKUP_RESULTS_SEQUENCE_NUMBER);
+                if (!StringUtils.isBlank(lookupResultsSequenceNumber)) {
+                    final LookupResultsService lookupResultsService = SpringContext.getBean(LookupResultsService.class);
+                    try {
+                        final List<ResultRow> resultRows = lookupResultsService.retrieveResultsTable(lookupResultsSequenceNumber, GlobalVariables.getUserSession().getPrincipalId());
+                        if (!resultRows.isEmpty()) {
+                            final ResultRow topRow = resultRows.get(0);
+                            for (Column column : topRow.getColumns()) {
+                                if (column.getPropertyName().equals(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR)) {
+                                    final String universityFiscalYearAsString = column.getPropertyValue();
+                                    final Integer universityFiscalYear = Integer.parseInt(universityFiscalYearAsString);
+                                    
+                                    final OrganizationReversionGlobal orgRevGlobal = ((OrganizationReversionGlobal)document.getNewMaintainableObject().getBusinessObject());
+                                    orgRevGlobal.setUniversityFiscalYear(universityFiscalYear);
+                                }
+                            }
+                        }
+                    }
+                    catch (Exception ex) {
+                        throw new RuntimeException("Could not retrieve lookup results to populate fiscal year", ex);
+                    }
+                    
+                    
+                }
+            }
+        }
+        
+    }
+
+    @Override
     public Class<? extends PersistableBusinessObject> getPrimaryEditedBusinessObjectClass() {
         return OrganizationReversion.class;
     }
Index: work/src/org/kuali/kfs/coa/document/datadictionary/OrganizationReversionGlobalMaintenanceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/coa/document/datadictionary/OrganizationReversionGlobalMaintenanceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/coa/document/datadictionary/OrganizationReversionGlobalMaintenanceDocument.xml	(working copy)
@@ -70,7 +70,7 @@
         <bean parent="MaintainableCollectionDefinition">
           <property name="name" value="organizationReversionGlobalOrganizations"/>
           <property name="businessObjectClass" value="org.kuali.kfs.coa.businessobject.OrganizationReversionGlobalOrganization"/>
-          <property name="sourceClassName" value="org.kuali.kfs.coa.businessobject.Organization"/>
+          <property name="sourceClassName" value="org.kuali.kfs.coa.businessobject.OrganizationReversion"/>
           <property name="summaryTitle" value="Organization"/>
           <property name="summaryFields">
             <list>
Index: work/src/org/kuali/kfs/gl/batch/ScrubberSortComparator.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/ScrubberSortComparator.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/ScrubberSortComparator.java	(working copy)
@@ -18,36 +18,53 @@
 import java.util.Comparator;
 import java.util.Map;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.gl.GeneralLedgerConstants;
 import org.kuali.kfs.gl.businessobject.OriginEntryFieldUtil;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 
-public class ScrubberSortComparator implements Comparator {
+public class ScrubberSortComparator implements Comparator<String> {
 
-    public int compare(Object object1, Object object2) {
-        OriginEntryFieldUtil oefu = new OriginEntryFieldUtil();
-        Map<String, Integer> pMap = oefu.getFieldBeginningPositionMap();
-            
-        String string1 = (String) object1;
-        String string2 = (String) object2;
-        string1 = org.apache.commons.lang.StringUtils.rightPad(string1, GeneralLedgerConstants.getSpaceAllOriginEntryFields().length(), ' ');
-        string2 = org.apache.commons.lang.StringUtils.rightPad(string2, GeneralLedgerConstants.getSpaceAllOriginEntryFields().length(), ' ');
+    OriginEntryFieldUtil oefu = new OriginEntryFieldUtil();
+    Map<String, Integer> pMap = oefu.getFieldBeginningPositionMap();
+    int originEntryRecordLength = GeneralLedgerConstants.getSpaceAllOriginEntryFields().length(); 
+    
+    private class Range {
+        public Range( int start, int end ) { this.start = start; this.end = end; }
+        public int start;
+        public int end;
+    }
+    
+    Range[] compareRanges;
+    {
+        compareRanges = new Range[6];
+        compareRanges[0] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER));
+        compareRanges[1] = new Range(pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_CODE));
+        compareRanges[2] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE));
+        compareRanges[3] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_REVERSAL_DATE), pMap.get(KFSPropertyConstants.TRANSACTION_ENCUMBRANCE_UPDT_CD));
+        compareRanges[4] = new Range(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE));
+        compareRanges[5] = new Range(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE));
+    }
+    
+    public int compare(String string1, String string2) {
+        string1 = StringUtils.rightPad(string1, originEntryRecordLength, ' ');
+        string2 = StringUtils.rightPad(string2, originEntryRecordLength, ' ');
 
-        StringBuffer sb1 = new StringBuffer();
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_REVERSAL_DATE), pMap.get(KFSPropertyConstants.TRANSACTION_ENCUMBRANCE_UPDT_CD)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE)));
+        StringBuilder sb1 = new StringBuilder();
+        sb1.append(string1.substring(compareRanges[0].start,compareRanges[0].end));
+        sb1.append(string1.substring(compareRanges[1].start,compareRanges[1].end));
+        sb1.append(string1.substring(compareRanges[2].start,compareRanges[2].end));
+        sb1.append(string1.substring(compareRanges[3].start,compareRanges[3].end));
+        sb1.append(string1.substring(compareRanges[4].start,compareRanges[4].end));
+        sb1.append(string1.substring(compareRanges[5].start,compareRanges[5].end));
             
-        StringBuffer sb2 = new StringBuffer();
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_REVERSAL_DATE), pMap.get(KFSPropertyConstants.TRANSACTION_ENCUMBRANCE_UPDT_CD)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE)));
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(string2.substring(compareRanges[0].start,compareRanges[0].end));
+        sb2.append(string2.substring(compareRanges[1].start,compareRanges[1].end));
+        sb2.append(string2.substring(compareRanges[2].start,compareRanges[2].end));
+        sb2.append(string2.substring(compareRanges[3].start,compareRanges[3].end));
+        sb2.append(string2.substring(compareRanges[4].start,compareRanges[4].end));
+        sb2.append(string2.substring(compareRanges[5].start,compareRanges[5].end));
             
         return sb1.toString().compareTo(sb2.toString());
     }
Index: work/src/org/kuali/kfs/gl/batch/PosterSortStep.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/PosterSortStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/PosterSortStep.java	(working copy)
@@ -1,59 +0,0 @@
-/*
- * Copyright 2005-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.gl.batch;
-
-import java.io.File;
-import java.util.Date;
-
-import org.kuali.kfs.gl.GeneralLedgerConstants;
-import org.kuali.kfs.sys.batch.AbstractStep;
-import org.springframework.util.StopWatch;
-
-/**
- * A step to run the scrubber process.
- */
-public class PosterSortStep extends AbstractStep {
-    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PosterSortStep.class);
-    protected String batchFileDirectoryName;
-    
-    /**
-     * Runs the scrubber process.
-     * 
-     * @param jobName the name of the job this step is being run as part of
-     * @param jobRunDate the time/date the job was started
-     * @return true if the job completed successfully, false if otherwise
-     * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String)
-     */
-    public boolean execute(String jobName, Date jobRunDate) {
-        StopWatch stopWatch = new StopWatch();
-        stopWatch.start(jobName);
-        String inputFile = batchFileDirectoryName + File.separator + GeneralLedgerConstants.BatchFileSystem.DEMERGER_VAILD_OUTPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        String outputFile = batchFileDirectoryName + File.separator + GeneralLedgerConstants.BatchFileSystem.POSTER_INPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION; 
-        
-        BatchSortUtil.sortTextFileWithFields(inputFile, outputFile, new PosterSortComparator());
-
-        stopWatch.stop();
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("scrubber step of " + jobName + " took " + (stopWatch.getTotalTimeSeconds() / 60.0) + " minutes to complete");
-        }
-        return true;
-    }
-    
-    public void setBatchFileDirectoryName(String batchFileDirectoryName) {
-        this.batchFileDirectoryName = batchFileDirectoryName;
-    }
-
-}
Index: work/src/org/kuali/kfs/gl/batch/BatchSortUtil.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/BatchSortUtil.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/BatchSortUtil.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008-2009 The Kuali Foundation
+ * Copyright 2008-2009 The Kuali Foundation
  * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,14 +16,17 @@
 package org.kuali.kfs.gl.batch;
 
 import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
+import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.List;
+import java.util.UUID;
 
 /**
  * This class...
@@ -31,48 +34,197 @@
 public class BatchSortUtil {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(BatchSortUtil.class);
     
-    static public void sortTextFileWithFields(String inputFileName, String outputFileName, Comparator comparator){
-        FileReader inputFile = null;
-        PrintStream outputFileStream = null;
+    private static File tempDir;
+    
+    private static File getTempDirectory() {
+        if ( tempDir == null ) {
+            tempDir = new File( SpringContext.getBean(KualiConfigurationService.class).getPropertyString(KFSConstants.TEMP_DIRECTORY_KEY) );
+        }
+        return tempDir;
+    }
+    
+    static public void sortTextFileWithFields(String inputFileName, String outputFileName, @SuppressWarnings("rawtypes") Comparator comparator){
+        // create a directory for the interim files
+        String tempSortDirName = UUID.randomUUID().toString();
+        File tempSortDir = new File( getTempDirectory(), tempSortDirName );
+        // ensure the directory is empty
+        FileUtils.deleteQuietly(tempSortDir);
         try {
-            inputFile = new FileReader(inputFileName);
-            outputFileStream = new PrintStream(outputFileName);
+            FileUtils.forceMkdir(tempSortDir);
+        } catch (IOException ex) {
+            LOG.fatal( "Unable to create temporary sort directory", ex );
+            throw new RuntimeException( "Unable to create temporary sort directory", ex );
         }
-        catch (FileNotFoundException e) {
-            throw new RuntimeException(e);
-        }
-        catch (IOException e) {
-            throw new RuntimeException(e);
-        }
+        
+        int numFiles = sortToTempFiles( inputFileName, tempSortDir, comparator );
 
-//        String lineLengh = GeneralLedgerConstants.getSpaceAllOriginEntryFields();
-//        File inputFile = new File(inputFileName);
-//        Long lineNumber = inputFile.length() / (lineLengh.length()+1);
-
+        // now that the sort is complete - merge the sorted files
+        mergeFiles(tempSortDir, numFiles, outputFileName, comparator);
         
-        List<String> lineList = new ArrayList();
-        BufferedReader inputBufferedReader = new BufferedReader(inputFile);
-        
+        // remove the temporary sort directory
+        FileUtils.deleteQuietly(tempSortDir);
+    }
+    
+    static int linesPerFile = 10000;
+    
+    /* Code below derived from code originally written by Sammy Larbi and
+     * downloaded from www.codeodor.com.
+     * 
+     * http://www.codeodor.com/index.cfm/2007/5/14/Re-Sorting-really-BIG-files---the-Java-source-code/1208
+     */
+    private static int sortToTempFiles(String inputFileName, File tempSortDir, Comparator<String> comparator) {
+        BufferedReader inputFile;
+         try {
+             inputFile = new BufferedReader(new FileReader(inputFileName));
+         } catch ( FileNotFoundException ex ) {
+             LOG.fatal( "Unable to find input file: " + inputFileName, ex );
+             throw new RuntimeException( "Unable to find input file: " + inputFileName, ex );
+         }
+         try {
+             String line = "";
+             ArrayList<String> batchLines = new ArrayList<String>( linesPerFile );
+                         
+             int numFiles = 0;
+             while ( line !=null ) {
+                 // get 10k rows
+                 for ( int i = 0; i < linesPerFile; i++ ) {
+                     line = inputFile.readLine();
+                     if ( line != null ) {
+                         batchLines.add(line);
+                     }
+                 }
+                 // sort the rows
+//                 batchLines = mergeSort(batchLines, comparator);
+                 Collections.sort(batchLines, comparator);
+                 
+                 // write to disk
+                 BufferedWriter bw = new BufferedWriter(new FileWriter( new File( tempSortDir,  "chunk_" + numFiles ) ));
+                 for( int i = 0; i < batchLines.size(); i++) {
+                     bw.append(batchLines.get(i)).append('\n');
+                 }
+                 bw.close();
+                 numFiles++;
+                 batchLines.clear(); // empty the array for the next pass
+             }
+             inputFile.close();
+             return numFiles;
+         } catch (Exception ex) {
+             LOG.fatal( "Exception processing sort to temp files.", ex );
+             throw new RuntimeException( ex );
+         }         
+    }    
+    
+    private static void mergeFiles(File tempSortDir, int numFiles, String outputFileName, Comparator<String> comparator ) {
         try {
-            String currentLine = inputBufferedReader.readLine();
-            while (currentLine != null) {
-                lineList.add(currentLine);
-                currentLine = inputBufferedReader.readLine();
+            ArrayList<FileReader> mergefr = new ArrayList<FileReader>( numFiles );
+            ArrayList<BufferedReader> mergefbr = new ArrayList<BufferedReader>( numFiles );
+            // temp buffer for writing - contains the minimum record from each file
+            ArrayList<String> fileRows = new ArrayList<String>( numFiles ); 
+            
+            BufferedWriter bw = new BufferedWriter(new FileWriter(outputFileName));
+                
+            boolean someFileStillHasRows = false;
+            
+            // Iterate over all the files, getting the first line in each file
+            for ( int i = 0; i < numFiles; i++) {
+                // open a file reader for each file
+                mergefr.add(new FileReader(new File( tempSortDir, "chunk_"+i) ) );
+                mergefbr.add(new BufferedReader(mergefr.get(i)));
+                                
+                // get the first row
+                String line = mergefbr.get(i).readLine();
+                if (line != null) {
+                    fileRows.add(line);
+                    someFileStillHasRows = true;
+                } else  {
+                    fileRows.add(null);
+                }                    
             }
-            inputBufferedReader.close();    
             
-        } catch (IOException e) {
-            LOG.error("sortTextFileWithFields() Stopped: " + e.getMessage());
-            throw new RuntimeException("sortTextFileWithFields() Stopped: " + e.getMessage(), e);
+            while (someFileStillHasRows) {
+                String min = null;
+                int minIndex = 0; // index of the file with the minimum record
+                
+                // init for later compare - assume the first file has the minimum
+                String line = fileRows.get(0);
+                if (line!=null) {
+                    min = line;
+                    minIndex = 0;
+                } else {
+                    min = null;
+                    minIndex = -1;
+                }
+                
+                // determine the minimum record of the top lines of each file
+                // check which one is min
+                for( int i = 1; i < fileRows.size(); i++ ) {
+                    line = fileRows.get(i);
+                    if ( line != null ) {
+                        if ( min != null ) {
+                            if( comparator.compare(line, min) < 0 ) {
+                                minIndex = i;
+                                min = line;
+                            }
+                        } else {
+                            min = line;
+                            minIndex = i;
+                        }
+                    }
+                }
+                
+                if (minIndex < 0) {
+                    someFileStillHasRows=false;
+                } else {
+                    // write to the sorted file
+                    bw.append(fileRows.get(minIndex)).append('\n');
+                    
+                    // get another row from the file that had the min
+                    line = mergefbr.get(minIndex).readLine();
+                    if (line != null) {
+                        fileRows.set(minIndex,line);
+                    } else { // file is out of rows, set to null so it is ignored
+                        fileRows.set(minIndex,null);
+                    }
+                }                                 
+                // check if one still has rows
+                for( int i = 0; i < fileRows.size(); i++) {                    
+                    someFileStillHasRows = false;
+                    if(fileRows.get(i)!=null)  {
+                        if (minIndex < 0) {
+                            throw new RuntimeException( "minIndex < 0 and row found in chunk file " + i + " : " + fileRows.get(i) );
+                        }
+                        someFileStillHasRows = true;
+                        break;
+                    }
+                }
+                
+                // check the actual files one more time
+                if (!someFileStillHasRows) {                    
+                    //write the last one not covered above
+                    for(int i=0; i<fileRows.size(); i++) {
+                        if (fileRows.get(i) == null) {
+                            line = mergefbr.get(i).readLine();
+                            if (line!=null) {
+                                someFileStillHasRows=true;
+                                fileRows.set(i,line);
+                            }
+                        }                                
+                    }
+                }
+            }
+            
+            // close all the files
+            bw.close();
+            for(BufferedReader br : mergefbr ) {
+                br.close();
+            }
+            for(FileReader fr : mergefr ) {
+                fr.close();
+            }
+        } catch (Exception ex) {
+            LOG.error( "Exception merging the sorted files", ex );
+            throw new RuntimeException( "Exception merging the sorted files", ex );
         }
-        Collections.sort(lineList, comparator);
-
-        for (String line: lineList){
-            outputFileStream.printf("%s\n", line);
-        }
-        outputFileStream.close();
-             
-    }
+   }    
     
-    
 }
Index: work/src/org/kuali/kfs/gl/batch/DemergerSortComparator.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/DemergerSortComparator.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/DemergerSortComparator.java	(working copy)
@@ -21,29 +21,33 @@
 import org.kuali.kfs.gl.businessobject.OriginEntryFieldUtil;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 
-public class DemergerSortComparator implements Comparator {
+public class DemergerSortComparator implements Comparator<String> {
 
-    public int compare(Object object1, Object object2) {
-        OriginEntryFieldUtil oefu = new OriginEntryFieldUtil();
-        Map<String, Integer> pMap = oefu.getFieldBeginningPositionMap();
-            
-        String string1 = (String) object1;
-        String string2 = (String) object2;
-        
-        StringBuffer sb1 = new StringBuffer();
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
+    OriginEntryFieldUtil oefu = new OriginEntryFieldUtil();
+    Map<String, Integer> pMap = oefu.getFieldBeginningPositionMap();
 
-        StringBuffer sb2 = new StringBuffer();
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-            
-        int returnValue = sb1.toString().compareTo(sb2.toString());
-        if (returnValue == 0) {
-            sb1.append(string1.substring(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER), pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC)));  // reverse???
-            sb2.append(string2.substring(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER), pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC)));
-            returnValue =  sb2.toString().compareTo(sb1.toString());               
-        }
-            
-        return returnValue;
-            
+    private class Range {
+        public Range( int start, int end ) { this.start = start; this.end = end; }
+        public int start;
+        public int end;
     }
+
+    Range[] compareRanges;
+    {
+        compareRanges = new Range[2];
+        compareRanges[0] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE),             pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER));
+        compareRanges[1] = new Range(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER),        pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC));
+    }    
+    
+    public int compare(String string1, String string2) {
+        StringBuilder sb1 = new StringBuilder();
+        sb1.append(string1.substring(compareRanges[0].start,compareRanges[0].end));
+        sb1.append(string1.substring(compareRanges[1].start,compareRanges[1].end));
+
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(string2.substring(compareRanges[0].start,compareRanges[0].end));
+        sb2.append(string2.substring(compareRanges[1].start,compareRanges[1].end));
+
+        return sb1.toString().compareTo(sb2.toString());
+    }
 }
\ No newline at end of file
Index: work/src/org/kuali/kfs/gl/batch/dataaccess/impl/LedgerPreparedStatementCachingDaoJdbc.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/dataaccess/impl/LedgerPreparedStatementCachingDaoJdbc.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/dataaccess/impl/LedgerPreparedStatementCachingDaoJdbc.java	(working copy)
@@ -46,9 +46,9 @@
         sql.put(RETRIEVE_PREFIX + Encumbrance.class, "select TRN_ENCUM_DESC, TRN_ENCUM_DT, ACLN_ENCUM_AMT, ACLN_ENCUM_CLS_AMT, ACLN_ENCUM_PRG_CD from GL_ENCUMBRANCE_T where univ_fiscal_yr = ? and fin_coa_cd = ? and account_nbr = ? and sub_acct_nbr = ? and fin_object_cd = ? and fin_sub_obj_cd = ? and fin_balance_typ_cd = ? and fdoc_typ_cd = ? and fs_origin_cd = ? and fdoc_nbr = ?");
         sql.put(INSERT_PREFIX + Encumbrance.class, "insert into GL_ENCUMBRANCE_T (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FDOC_TYP_CD, FS_ORIGIN_CD, FDOC_NBR, TRN_ENCUM_DESC, TRN_ENCUM_DT, ACLN_ENCUM_AMT, ACLN_ENCUM_CLS_AMT, ACLN_ENCUM_PRG_CD, TIMESTAMP) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
         sql.put(UPDATE_PREFIX + Encumbrance.class, "update GL_ENCUMBRANCE_T set TRN_ENCUM_DESC = ?, TRN_ENCUM_DT = ?, ACLN_ENCUM_AMT = ?, ACLN_ENCUM_CLS_AMT = ?, ACLN_ENCUM_PRG_CD = ?, TIMESTAMP = ? where univ_fiscal_yr = ? and fin_coa_cd = ? and account_nbr = ? and sub_acct_nbr = ? and fin_object_cd = ? and fin_sub_obj_cd = ? and fin_balance_typ_cd = ? and fdoc_typ_cd = ? and fs_origin_cd = ? and fdoc_nbr = ?");
-        sql.put(RETRIEVE_PREFIX + ExpenditureTransaction.class, "select ACCT_OBJ_DCST_AMT from GL_EXPEND_TRN_T where UNIV_FISCAL_YR = ? and FIN_COA_CD = ? and ACCOUNT_NBR = ? and SUB_ACCT_NBR = ? and FIN_OBJECT_CD = ? and FIN_SUB_OBJ_CD = ? and FIN_BALANCE_TYP_CD = ? and FIN_OBJ_TYP_CD = ? and UNIV_FISCAL_PRD_CD = ? and PROJECT_CD = ? and ORG_REFERENCE_ID = ?");
-        sql.put(INSERT_PREFIX + ExpenditureTransaction.class, "insert into GL_EXPEND_TRN_T (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) values (?,?,?,?,?,?,?,?,?,?,?,?)");
-        sql.put(UPDATE_PREFIX + ExpenditureTransaction.class, "update GL_EXPEND_TRN_T set ACCT_OBJ_DCST_AMT = ? where UNIV_FISCAL_YR = ? and FIN_COA_CD = ? and ACCOUNT_NBR = ? and SUB_ACCT_NBR = ? and FIN_OBJECT_CD = ? and FIN_SUB_OBJ_CD = ? and FIN_BALANCE_TYP_CD = ? and FIN_OBJ_TYP_CD = ? and UNIV_FISCAL_PRD_CD = ? and PROJECT_CD = ? and ORG_REFERENCE_ID = ?");
+        sql.put(RETRIEVE_PREFIX + ExpenditureTransaction.class, "select ACCT_OBJ_DCST_AMT from GL_EXPEND_TRN_MT where UNIV_FISCAL_YR = ? and FIN_COA_CD = ? and ACCOUNT_NBR = ? and SUB_ACCT_NBR = ? and FIN_OBJECT_CD = ? and FIN_SUB_OBJ_CD = ? and FIN_BALANCE_TYP_CD = ? and FIN_OBJ_TYP_CD = ? and UNIV_FISCAL_PRD_CD = ? and PROJECT_CD = ? and ORG_REFERENCE_ID = ?");
+        sql.put(INSERT_PREFIX + ExpenditureTransaction.class, "insert into GL_EXPEND_TRN_MT (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, FIN_BALANCE_TYP_CD, FIN_OBJ_TYP_CD, UNIV_FISCAL_PRD_CD, PROJECT_CD, ORG_REFERENCE_ID, ACCT_OBJ_DCST_AMT) values (?,?,?,?,?,?,?,?,?,?,?,?)");
+        sql.put(UPDATE_PREFIX + ExpenditureTransaction.class, "update GL_EXPEND_TRN_MT set ACCT_OBJ_DCST_AMT = ? where UNIV_FISCAL_YR = ? and FIN_COA_CD = ? and ACCOUNT_NBR = ? and SUB_ACCT_NBR = ? and FIN_OBJECT_CD = ? and FIN_SUB_OBJ_CD = ? and FIN_BALANCE_TYP_CD = ? and FIN_OBJ_TYP_CD = ? and UNIV_FISCAL_PRD_CD = ? and PROJECT_CD = ? and ORG_REFERENCE_ID = ?");
         sql.put(RETRIEVE_PREFIX + SufficientFundBalances.class, "select ACCT_SF_CD, CURR_BDGT_BAL_AMT, ACCT_ACTL_XPND_AMT, ACCT_ENCUM_AMT from GL_SF_BALANCES_T where UNIV_FISCAL_YR = ? and FIN_COA_CD = ? and ACCOUNT_NBR = ? and FIN_OBJECT_CD = ?");
         sql.put(INSERT_PREFIX + SufficientFundBalances.class, "insert into GL_SF_BALANCES_T (UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, FIN_OBJECT_CD, ACCT_SF_CD, CURR_BDGT_BAL_AMT, ACCT_ACTL_XPND_AMT, ACCT_ENCUM_AMT, TIMESTAMP) values (?,?,?,?,?,?,?,?,?)");
         sql.put(UPDATE_PREFIX + SufficientFundBalances.class, "update GL_SF_BALANCES_T set ACCT_SF_CD = ?, CURR_BDGT_BAL_AMT = ?, ACCT_ACTL_XPND_AMT = ?, ACCT_ENCUM_AMT = ?, TIMESTAMP = ? where UNIV_FISCAL_YR = ? and FIN_COA_CD = ? and ACCOUNT_NBR = ? and FIN_OBJECT_CD = ?");
Index: work/src/org/kuali/kfs/gl/batch/ScrubberSortStep.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/ScrubberSortStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/ScrubberSortStep.java	(working copy)
@@ -1,61 +0,0 @@
-/*
- * Copyright 2005-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.gl.batch;
-
-import java.io.File;
-import java.util.Date;
-
-import org.kuali.kfs.gl.GeneralLedgerConstants;
-import org.kuali.kfs.sys.batch.AbstractStep;
-import org.springframework.util.StopWatch;
-
-/**
- * A step to run the scrubber process.
- */
-public class ScrubberSortStep extends AbstractStep {
-    protected static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(ScrubberSortStep.class);
-    protected String batchFileDirectoryName;
-    
-    /**
-     * Runs the scrubber process.
-     * 
-     * @param jobName the name of the job this step is being run as part of
-     * @param jobRunDate the time/date the job was started
-     * @return true if the job completed successfully, false if otherwise
-     * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String)
-     */
-    public boolean execute(String jobName, Date jobRunDate) {
-        StopWatch stopWatch = new StopWatch();
-        stopWatch.start(jobName);
-        String inputFile = batchFileDirectoryName + File.separator + GeneralLedgerConstants.BatchFileSystem.PRE_SCRUBBER_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        String outputFile = batchFileDirectoryName + File.separator + GeneralLedgerConstants.BatchFileSystem.SCRUBBER_INPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        if ( new File( inputFile ).exists() ) {
-            BatchSortUtil.sortTextFileWithFields(inputFile, outputFile, new ScrubberSortComparator());
-        } else {
-            LOG.warn( "Unable to find " + inputFile + ", sorting skipped.  No output file created." );
-        }
-        stopWatch.stop();
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("scrubber step of " + jobName + " took " + (stopWatch.getTotalTimeSeconds() / 60.0) + " minutes to complete");
-        }
-        return true;
-    }
-   
-    public void setBatchFileDirectoryName(String batchFileDirectoryName) {
-        this.batchFileDirectoryName = batchFileDirectoryName;
-    }
-
-}
Index: work/src/org/kuali/kfs/gl/batch/PosterSortComparator.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/PosterSortComparator.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/PosterSortComparator.java	(working copy)
@@ -21,23 +21,32 @@
 import org.kuali.kfs.gl.businessobject.OriginEntryFieldUtil;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 
-public class PosterSortComparator implements Comparator {
+public class PosterSortComparator implements Comparator<String> {
+    OriginEntryFieldUtil oefu = new OriginEntryFieldUtil();
+    Map<String, Integer> pMap = oefu.getFieldBeginningPositionMap();
 
-    public int compare(Object object1, Object object2) {
-        OriginEntryFieldUtil oefu = new OriginEntryFieldUtil();
-        Map<String, Integer> pMap = oefu.getFieldBeginningPositionMap();
-            
-        String string1 = (String) object1;
-        String string2 = (String) object2;
-        
-        StringBuffer sb1 = new StringBuffer();
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.PROJECT_CODE), pMap.get(KFSPropertyConstants.REFERENCE_FIN_DOCUMENT_TYPE_CODE)));
-            
-        StringBuffer sb2 = new StringBuffer();
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.PROJECT_CODE), pMap.get(KFSPropertyConstants.REFERENCE_FIN_DOCUMENT_TYPE_CODE)));
+    private class Range {
+        public Range( int start, int end ) { this.start = start; this.end = end; }
+        public int start;
+        public int end;
+    }
 
+    Range[] compareRanges;
+    {
+        compareRanges = new Range[2];
+        compareRanges[0] = new Range(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR),             pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER));
+        compareRanges[1] = new Range(pMap.get(KFSPropertyConstants.PROJECT_CODE),                       pMap.get(KFSPropertyConstants.REFERENCE_FIN_DOCUMENT_TYPE_CODE));
+    }
+
+    public int compare(String string1, String string2) {
+        StringBuilder sb1 = new StringBuilder();
+        sb1.append(string1.substring(compareRanges[0].start,compareRanges[0].end));
+        sb1.append(string1.substring(compareRanges[1].start,compareRanges[1].end));
+
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(string2.substring(compareRanges[0].start,compareRanges[0].end));
+        sb2.append(string2.substring(compareRanges[1].start,compareRanges[1].end));
+
         return sb1.toString().compareTo(sb2.toString());
     }
 }
Index: work/src/org/kuali/kfs/gl/batch/service/impl/EnterpriseFeederNotificationServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/EnterpriseFeederNotificationServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/EnterpriseFeederNotificationServiceImpl.java	(working copy)
@@ -89,10 +89,13 @@
         try {
             if (isStatusNotifiable(feederProcessName, status, doneFileDescription, dataFileDescription, reconFileDescription, errorMessages)) {
                 Set<String> toEmailAddresses = generateToEmailAddresses(feederProcessName, status, doneFileDescription, dataFileDescription, reconFileDescription, errorMessages);
-                String fromEmailAddress = mailService.getBatchMailingList();
 
                 MailMessage mailMessage = new MailMessage();
-                mailMessage.setFromAddress(fromEmailAddress);
+                String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.GL, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+                if(StringUtils.isEmpty(returnAddress)) {
+                    returnAddress = mailService.getBatchMailingList();
+                }
+                mailMessage.setFromAddress(returnAddress);
                 mailMessage.setToAddresses(toEmailAddresses);
                 mailMessage.setSubject(getSubjectLine(doneFileDescription, dataFileDescription, reconFileDescription, errorMessages, feederProcessName, status));
                 mailMessage.setMessage(buildFileFeedStatusMessage(doneFileDescription, dataFileDescription, reconFileDescription, errorMessages, feederProcessName, status));
Index: work/src/org/kuali/kfs/gl/batch/service/impl/BalancingServiceBaseImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/BalancingServiceBaseImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/BalancingServiceBaseImpl.java	(working copy)
@@ -157,6 +157,11 @@
         LOG.debug("Comparing custom, if any, history table with the PRD counterpart.");
         Map<String, Integer> countCustomComparisionFailures = this.customCompareHistory();
 
+        if (!historyTablesPopulated) {
+            reportWriterService.writeNewLines(1);
+            reportWriterService.writeFormattedMessageLine(kualiConfigurationService.getPropertyString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_FILE_LISTING), this.getFilenames());
+        }
+        
         LOG.debug("Writing statistics section");
         reportWriterService.writeStatisticLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.REPORT_FISCAL_YEARS_INCLUDED), ledgerBalanceHistoryBalancingDao.findDistinctFiscalYears());
         reportWriterService.writeStatisticLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.REPORT_HISTORY_TABLES_INITIALIZED), historyTablesPopulated ? "Yes" : "No");
Index: work/src/org/kuali/kfs/gl/batch/service/impl/BalancingServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/BalancingServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/BalancingServiceImpl.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 The Kuali Foundation
+ * Copyright 2007-2009 The Kuali Foundation
  * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,11 +57,11 @@
 @Transactional
 public class BalancingServiceImpl extends BalancingServiceBaseImpl<EntryHistory, BalanceHistory> implements BalancingService {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(BalancingServiceImpl.class);
-
+    
     protected BalancingDao balancingDao;
     protected AccountBalanceDao accountBalanceDao;
     protected EncumbranceDao encumbranceDao;
-
+    
     protected File posterInputFile = null;
     protected File posterErrorOutputFile = null;
 
@@ -71,7 +71,7 @@
     protected File icrInputFile = null;
     protected File icrErrorOutputFile = null;
 
-
+    
     @Override
     public boolean runBalancing() {
         // clear out the file cache, otherwise, it won't update the history tables with the latest poster files
@@ -89,7 +89,9 @@
         if (posterInputFile != null) {
             return posterInputFile;
         }
-        return posterInputFile = getFile(GeneralLedgerConstants.BatchFileSystem.POSTER_INPUT_FILE, GeneralLedgerConstants.BatchFileSystem.EXTENSION);
+        return posterInputFile = getFile(
+                GeneralLedgerConstants.BatchFileSystem.POSTER_INPUT_FILE, 
+                GeneralLedgerConstants.BatchFileSystem.EXTENSION);
     }
 
     /**
@@ -100,50 +102,60 @@
         if (posterErrorOutputFile != null) {
             return posterErrorOutputFile;
         }
-        return posterErrorOutputFile = getFile(GeneralLedgerConstants.BatchFileSystem.POSTER_ERROR_OUTPUT_FILE, GeneralLedgerConstants.BatchFileSystem.EXTENSION);
+        return posterErrorOutputFile = getFile(
+                GeneralLedgerConstants.BatchFileSystem.POSTER_ERROR_OUTPUT_FILE, 
+                GeneralLedgerConstants.BatchFileSystem.EXTENSION);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getReversalInputFile()
      */
-    public File getReversalInputFile() {
+    public File getReversalInputFile(){
         if (reversalInputFile != null) {
             return reversalInputFile;
         }
-        return reversalInputFile = getFile(GeneralLedgerConstants.BatchFileSystem.REVERSAL_POSTER_VALID_OUTPUT_FILE, GeneralLedgerConstants.BatchFileSystem.EXTENSION);
+        return reversalInputFile = getFile(
+                GeneralLedgerConstants.BatchFileSystem.REVERSAL_POSTER_VALID_OUTPUT_FILE, 
+                GeneralLedgerConstants.BatchFileSystem.EXTENSION);
     }
 
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getReversalErrorOutputFile()
      */
-    public File getReversalErrorOutputFile() {
+    public File getReversalErrorOutputFile(){
         if (reversalErrorOutputFile != null) {
             return reversalErrorOutputFile;
         }
-        return reversalErrorOutputFile = getFile(GeneralLedgerConstants.BatchFileSystem.REVERSAL_POSTER_ERROR_OUTPUT_FILE, GeneralLedgerConstants.BatchFileSystem.EXTENSION);
+        return reversalErrorOutputFile = getFile(
+                GeneralLedgerConstants.BatchFileSystem.REVERSAL_POSTER_ERROR_OUTPUT_FILE, 
+                GeneralLedgerConstants.BatchFileSystem.EXTENSION);
     }
 
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getICRInputFile()
      */
-    public File getICRInputFile() {
+    public File getICRInputFile(){
         if (icrInputFile != null) {
             return icrInputFile;
         }
-        return icrInputFile = getFile(GeneralLedgerConstants.BatchFileSystem.ICR_POSTER_INPUT_FILE, GeneralLedgerConstants.BatchFileSystem.EXTENSION);
+        return icrInputFile = getFile(
+                GeneralLedgerConstants.BatchFileSystem.ICR_POSTER_INPUT_FILE, 
+                GeneralLedgerConstants.BatchFileSystem.EXTENSION);
     }
 
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getICRErrorOutputFile()
      */
-    public File getICRErrorOutputFile() {
+    public File getICRErrorOutputFile(){
         if (icrErrorOutputFile != null) {
             return icrErrorOutputFile;
         }
-        return icrErrorOutputFile = getFile(GeneralLedgerConstants.BatchFileSystem.ICR_POSTER_ERROR_OUTPUT_FILE, GeneralLedgerConstants.BatchFileSystem.EXTENSION);
+        return icrErrorOutputFile = getFile(
+                GeneralLedgerConstants.BatchFileSystem.ICR_POSTER_ERROR_OUTPUT_FILE, 
+                GeneralLedgerConstants.BatchFileSystem.EXTENSION);
     }
-
-    public File getFile(final String fileName, final String fileExtension) {
+    
+    public File getFile(final String fileName, final String fileExtension){
         FilenameFilter filenameFilter = new FilenameFilter() {
             public boolean accept(File dir, String name) {
                 return (name.startsWith(fileName) && name.endsWith(fileExtension));
@@ -151,21 +163,21 @@
         };
         return FileUtil.getNewestFile(new File(batchFileDirectoryName), filenameFilter);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getPastFiscalYearsToConsider()
      */
     public int getPastFiscalYearsToConsider() {
         return Integer.parseInt(parameterService.getParameterValueAsString(PosterBalancingStep.class, GeneralLedgerConstants.Balancing.NUMBER_OF_PAST_FISCAL_YEARS_TO_INCLUDE));
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getComparisonFailuresToPrintPerReport()
      */
     public int getComparisonFailuresToPrintPerReport() {
         return Integer.parseInt(parameterService.getParameterValueAsString(PosterBalancingStep.class, GeneralLedgerConstants.Balancing.NUMBER_OF_COMPARISON_FAILURES_TO_PRINT_PER_REPORT));
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getShortTableLabel(java.lang.String)
      */
@@ -182,7 +194,7 @@
 
         return names.get(businessObjectName) == null ? kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.REPORT_UNKNOWN_LABEL) : names.get(businessObjectName);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getOriginEntry(java.lang.String, int)
      */
@@ -190,10 +202,10 @@
         // We need a OriginEntryFull because that's what updateBalanceHistory is looking for
         OriginEntryFull originEntry = new OriginEntryFull();
         originEntry.setFromTextFileForBatch(inputLine, lineNumber);
-
+        
         return originEntry;
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#updateEntryHistory(org.kuali.kfs.gl.businessobject.OriginEntryInformation)
      * @see org.kuali.kfs.gl.batch.service.impl.PostEntry#post(org.kuali.kfs.gl.businessobject.Transaction, int, java.util.Date)
@@ -203,15 +215,15 @@
         EntryHistory entryHistory = new EntryHistory(originEntry);
 
         EntryHistory retrievedEntryHistory = (EntryHistory) businessObjectService.retrieve(entryHistory);
-        if (ObjectUtils.isNotNull(retrievedEntryHistory)) {
+        if(ObjectUtils.isNotNull(retrievedEntryHistory)) {
             entryHistory = retrievedEntryHistory;
         }
-
+        
         entryHistory.addAmount(originEntry.getTransactionLedgerEntryAmount());
-
+        
         businessObjectService.save(entryHistory);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#updateBalanceHistory(org.kuali.kfs.gl.businessobject.OriginEntryInformation)
      * @see org.kuali.kfs.gl.batch.service.impl.PostBalance#post(org.kuali.kfs.gl.businessobject.Transaction, int, java.util.Date)
@@ -220,12 +232,12 @@
         // TODO Retrieve and update 1 by 1? Is a HashMap or cache better so that storing only occurs once at the end?
         OriginEntryFull originEntryFull = (OriginEntryFull) originEntry;
         BalanceHistory balanceHistory = new BalanceHistory(originEntryFull);
-
+        
         BalanceHistory retrievedBalanceHistory = (BalanceHistory) businessObjectService.retrieve(balanceHistory);
-        if (ObjectUtils.isNotNull(retrievedBalanceHistory)) {
+        if(ObjectUtils.isNotNull(retrievedBalanceHistory)) {
             balanceHistory = retrievedBalanceHistory;
         }
-
+        
         KualiDecimal amount = originEntryFull.getTransactionLedgerEntryAmount();
 
         // Make sure the amount update properly recognized debit / credit logic. This is modeled after PostBalance#post
@@ -238,10 +250,10 @@
         }
 
         balanceHistory.addAmount(originEntryFull.getUniversityFiscalPeriodCode(), amount);
-
+        
         businessObjectService.save(balanceHistory);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getBalance(org.kuali.kfs.gl.businessobject.LedgerBalanceHistory)
      */
@@ -249,15 +261,19 @@
         Balance balance = new Balance((BalanceHistory) ledgerBalanceHistory);
         return (Balance) businessObjectService.retrieve(balance);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#clearPosterFileCache()
      */
     public void clearPosterFileCache() {
         this.posterInputFile = null;
         this.posterErrorOutputFile = null;
+        this.reversalInputFile = null;
+        this.reversalErrorOutputFile = null;
+        this.icrInputFile = null;
+        this.icrErrorOutputFile = null;
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#customPopulateHistoryTables(java.lang.Integer)
      */
@@ -266,15 +282,16 @@
         balancingDao.populateAccountBalancesHistory(fiscalYear);
         balancingDao.populateEncumbranceHistory(fiscalYear);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#doesCustomHistoryExist(java.lang.Integer)
      */
     @Override
     protected boolean doesCustomHistoryExist(Integer fiscalYear) {
-        return (this.getHistoryCount(fiscalYear, AccountBalanceHistory.class) > 0 && this.getHistoryCount(fiscalYear, EncumbranceHistory.class) > 0);
+        return (this.getHistoryCount(fiscalYear, AccountBalanceHistory.class) > 0 &&
+                this.getHistoryCount(fiscalYear, EncumbranceHistory.class) > 0);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#deleteCustomHistory(java.lang.Integer)
      */
@@ -286,7 +303,7 @@
         reportWriterService.writeFormattedMessageLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_OBSOLETE_FISCAL_YEAR_DATA_DELETED), (AccountBalanceHistory.class).getSimpleName(), (EncumbranceHistory.class).getSimpleName(), fiscalYear);
         reportWriterService.writeNewLines(1);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#updateCustomHistory(org.kuali.kfs.gl.businessobject.OriginEntryInformation)
      */
@@ -295,14 +312,12 @@
         this.updateAccountBalanceHistory(originEntry);
         this.updateEncumbranceHistory(originEntry);
     }
-
-
+    
+    
     /**
      * Update the account balance history table
-     * 
      * @param originEntry representing the update details
-     * @see org.kuali.kfs.gl.batch.service.impl.PostAccountBalance#post(org.kuali.kfs.gl.businessobject.Transaction, int,
-     *      java.util.Date)
+     * @see org.kuali.kfs.gl.batch.service.impl.PostAccountBalance#post(org.kuali.kfs.gl.businessobject.Transaction, int, java.util.Date)
      */
     protected void updateAccountBalanceHistory(OriginEntryInformation originEntry) {
         OriginEntryFull originEntryFull = (OriginEntryFull) originEntry;
@@ -314,9 +329,9 @@
         if ((originEntryFull.getFinancialBalanceTypeCode().equals(originEntryFull.getOption().getActualFinancialBalanceTypeCd()) || originEntryFull.getFinancialBalanceTypeCode().equals(originEntryFull.getOption().getBudgetCheckingBalanceTypeCd())) || (originEntryFull.getFinancialBalanceTypeCode().equals(originEntryFull.getOption().getExtrnlEncumFinBalanceTypCd()) || originEntryFull.getFinancialBalanceTypeCode().equals(originEntryFull.getOption().getIntrnlEncumFinBalanceTypCd()) || originEntryFull.getFinancialBalanceTypeCode().equals(originEntryFull.getOption().getPreencumbranceFinBalTypeCd()) || originEntryFull.getFinancialBalanceTypeCode().equals(originEntryFull.getOption().getCostShareEncumbranceBalanceTypeCd())) && (!originEntryFull.getFinancialObjectTypeCode().equals(originEntryFull.getOption().getFinObjectTypeFundBalanceCd()))) {
             // TODO Retrieve and update 1 by 1? Is a HashMap or cache better so that storing only occurs once at the end?
             AccountBalanceHistory accountBalanceHistory = new AccountBalanceHistory(originEntry);
-
+    
             AccountBalanceHistory retrievedAccountBalanceHistory = (AccountBalanceHistory) businessObjectService.retrieve(accountBalanceHistory);
-            if (ObjectUtils.isNotNull(retrievedAccountBalanceHistory)) {
+            if(ObjectUtils.isNotNull(retrievedAccountBalanceHistory)) {
                 accountBalanceHistory = retrievedAccountBalanceHistory;
             }
 
@@ -327,39 +342,46 @@
             }
         }
     }
-
+    
     /**
+     * 
      * @see org.kuali.kfs.gl.batch.service.BalancingService#clearBalanceHistory()
      */
-
+   
     public void clearHistories() {
         Map<String, Object> fieldValues = new HashMap<String, Object>();
         businessObjectService.deleteMatching(EntryHistory.class, fieldValues);
         businessObjectService.deleteMatching(BalanceHistory.class, fieldValues);
         businessObjectService.deleteMatching(EncumbranceHistory.class, fieldValues);
         businessObjectService.deleteMatching(AccountBalanceHistory.class, fieldValues);
-
-        reportWriterService.writeFormattedMessageLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_HISTORY_PURGED));
-
-
+        
+        reportWriterService.writeFormattedMessageLine(kualiConfigurationService.getPropertyString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_HISTORY_PURGED));
     }
-
+    
     /**
+     * @see org.kuali.kfs.gl.batch.service.BalancingService#getFilenames()
+     */
+    public String getFilenames() {
+        return (this.posterInputFile == null ? null : this.posterInputFile.getName()) + "\n"
+          + (this.posterErrorOutputFile == null ? null : this.posterErrorOutputFile.getName()) + "\n"
+          + (this.reversalInputFile == null ? null : this.reversalInputFile.getName()) + "\n"
+          + (this.reversalErrorOutputFile == null ? null : this.reversalErrorOutputFile.getName()) + "\n"
+          + (this.icrInputFile == null ? null : this.icrInputFile.getName()) + "\n"
+          + (this.icrErrorOutputFile == null ? null : this.icrErrorOutputFile.getName());
+    }
+    
+    /**
      * Compares entries in the Balance and BalanceHistory tables to ensure the amounts match.
-     * 
      * @return count is compare failures
      */
     protected Integer compareBalanceHistory() {
         Integer countComparisionFailures = 0;
-        String balanceTable = persistenceStructureService.getTableName(Balance.class);
-        String historyTable = persistenceStructureService.getTableName(balanceHistoryPersistentClass);
-        int fiscalYear = universityDateService.getCurrentFiscalYear();
+        
+        List<Balance> data = ledgerEntryBalanceCachingDao.compareBalanceHistory(Balance.class, balanceHistoryPersistentClass, getPastFiscalYearsToConsider());
 
-        List data = ledgerEntryBalanceCachingDao.compareBalanceHistory(balanceTable, historyTable, getPastFiscalYearsToConsider(), fiscalYear);
-
         if (!data.isEmpty()) {
-            for (Iterator itr = data.iterator(); itr.hasNext();) {
-                BalanceHistory balance = createBalanceFromMap((Map) itr.next());
+            for (Iterator<Balance> itr = data.iterator(); itr.hasNext();) {
+                BalanceHistory balance = createBalanceFromMap((Map<String, Object>)itr.next());
                 countComparisionFailures++;
                 if (countComparisionFailures <= this.getComparisonFailuresToPrintPerReport()) {
                     reportWriterService.writeError(balance, new Message(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_RECORD_FAILED_BALANCING), Message.TYPE_WARNING, balance.getClass().getSimpleName()));
@@ -369,40 +391,34 @@
 
         return countComparisionFailures;
     }
-
+    
     /**
      * Compares entries in the Entry and EntryHistory tables to ensure the amounts match.
-     * 
      * @return count is compare failures
      */
     protected Integer compareEntryHistory() {
         Integer countComparisionFailures = 0;
-        String entryTable = persistenceStructureService.getTableName(Entry.class);
-        String historyTable = persistenceStructureService.getTableName(entryHistoryPersistentClass);
-        int fiscalYear = universityDateService.getCurrentFiscalYear();
-
-        List data = ledgerEntryBalanceCachingDao.compareEntryHistory(entryTable, historyTable, getPastFiscalYearsToConsider(), fiscalYear);
-
+        
+        List<Entry> data = ledgerEntryBalanceCachingDao.compareEntryHistory(Entry.class, entryHistoryPersistentClass, getPastFiscalYearsToConsider());
+        
         if (!data.isEmpty()) {
-            for (Iterator itr = data.iterator(); itr.hasNext();) {
-                EntryHistory entry = createEntryHistoryFromMap((Map) itr.next());
+            for (Iterator<Entry> itr = data.iterator(); itr.hasNext();) {
+                EntryHistory entry = createEntryHistoryFromMap((Map<String, Object>)itr.next());
                 countComparisionFailures++;
                 if (countComparisionFailures <= this.getComparisonFailuresToPrintPerReport()) {
                     reportWriterService.writeError(entry, new Message(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_RECORD_FAILED_BALANCING), Message.TYPE_WARNING, entry.getClass().getSimpleName()));
                 }
-
+                
             }
         }
-
+        
         return countComparisionFailures;
     }
-
+    
     /**
      * Update the encumbrance history table
-     * 
      * @param originEntry representing the update details
-     * @see org.kuali.kfs.gl.batch.service.impl.PostEncumbrance#post(org.kuali.kfs.gl.businessobject.Transaction, int,
-     *      java.util.Date)
+     * @see org.kuali.kfs.gl.batch.service.impl.PostEncumbrance#post(org.kuali.kfs.gl.businessobject.Transaction, int, java.util.Date)
      */
     protected void updateEncumbranceHistory(OriginEntryInformation originEntry) {
         OriginEntryFull originEntryFull = (OriginEntryFull) originEntry;
@@ -417,7 +433,7 @@
         if ((StringUtils.isBlank(originEntryFull.getTransactionEncumbranceUpdateCode())) || " ".equals(originEntryFull.getTransactionEncumbranceUpdateCode()) || KFSConstants.ENCUMB_UPDT_NO_ENCUMBRANCE_CD.equals(originEntryFull.getTransactionEncumbranceUpdateCode()) || originEntryFull.getOption().getFinObjectTypeFundBalanceCd().equals(originEntryFull.getFinancialObjectTypeCode())) {
             return;
         }
-
+        
         EncumbranceHistory encumbranceHistory = new EncumbranceHistory(originEntryFull);
         if (KFSConstants.ENCUMB_UPDT_REFERENCE_DOCUMENT_CD.equals(originEntryFull.getTransactionEncumbranceUpdateCode())) {
             encumbranceHistory.setDocumentNumber(originEntryFull.getReferenceFinancialDocumentNumber());
@@ -426,18 +442,19 @@
         }
         // TODO Retrieve and update 1 by 1? Is a HashMap or cache better so that storing only occurs once at the end?
         EncumbranceHistory retrievedEncumbranceHistory = (EncumbranceHistory) businessObjectService.retrieve(encumbranceHistory);
-
-        if (ObjectUtils.isNotNull(retrievedEncumbranceHistory)) {
+        
+        if(ObjectUtils.isNotNull(retrievedEncumbranceHistory)) {
             encumbranceHistory = retrievedEncumbranceHistory;
         }
-
+        
         // Following is a copy & paste of PostEncumbrance.updateEncumbrance since the balancing process is to do this independently
         encumbranceHistory.addAmount(originEntryFull);
-
+        
         businessObjectService.save(encumbranceHistory);
     }
-
-
+    
+    
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#customCompareHistory()
      */
@@ -445,31 +462,27 @@
     protected Map<String, Integer> customCompareHistory() {
         Integer countAccountBalanceComparisionFailure = this.accountBalanceCompareHistory();
         Integer countEncumbranceComparisionFailure = this.encumbranceCompareHistory();
-
+        
         // Using LinkedHashMap because we want it ordered
         Map<String, Integer> countMap = new LinkedHashMap<String, Integer>();
         countMap.put((AccountBalanceHistory.class).getSimpleName(), countAccountBalanceComparisionFailure);
         countMap.put((EncumbranceHistory.class).getSimpleName(), countEncumbranceComparisionFailure);
-
+        
         return countMap;
     }
-
+    
     /**
      * Does comparision, error printing and returns failure count for account balances
-     * 
      * @return failure count
      */
     protected Integer accountBalanceCompareHistory() {
         Integer countComparisionFailures = 0;
-        String accountBalanceTable = persistenceStructureService.getTableName(AccountBalance.class);
-        String historyTable = persistenceStructureService.getTableName(AccountBalanceHistory.class);
-        int fiscalYear = universityDateService.getCurrentFiscalYear();
+        
+        List<AccountBalance> data = ledgerEntryBalanceCachingDao.accountBalanceCompareHistory(AccountBalance.class, AccountBalanceHistory.class, getPastFiscalYearsToConsider());
 
-        List data = ledgerEntryBalanceCachingDao.accountBalanceCompareHistory(accountBalanceTable, historyTable, getPastFiscalYearsToConsider(), fiscalYear);
-
         if (!data.isEmpty()) {
-            for (Iterator itr = data.iterator(); itr.hasNext();) {
-                AccountBalanceHistory accountBalanceHistory = createAccountBalanceHistoryFromMap((Map) itr.next());
+            for (Iterator<AccountBalance> itr = data.iterator(); itr.hasNext();) {
+                AccountBalanceHistory accountBalanceHistory = createAccountBalanceHistoryFromMap((Map<String, Object>)itr.next());
                 countComparisionFailures++;
                 if (countComparisionFailures <= this.getComparisonFailuresToPrintPerReport()) {
                     reportWriterService.writeError(accountBalanceHistory, new Message(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_RECORD_FAILED_BALANCING), Message.TYPE_WARNING, accountBalanceHistory.getClass().getSimpleName()));
@@ -483,23 +496,19 @@
         }
         return countComparisionFailures;
     }
-
+    
     /**
      * Does comparision, error printing and returns failure count for encumbrances
-     * 
      * @return failure count
      */
     protected Integer encumbranceCompareHistory() {
         Integer countComparisionFailures = 0;
-        String encumbranceTable = persistenceStructureService.getTableName(Encumbrance.class);
-        String historyTable = persistenceStructureService.getTableName(EncumbranceHistory.class);
-        int fiscalYear = universityDateService.getCurrentFiscalYear();
-
-        List data = ledgerEntryBalanceCachingDao.encumbranceCompareHistory(encumbranceTable, historyTable, getPastFiscalYearsToConsider(), fiscalYear);
-
+        
+        List<Encumbrance> data = ledgerEntryBalanceCachingDao.encumbranceCompareHistory(Encumbrance.class, EncumbranceHistory.class, getPastFiscalYearsToConsider());
+        
         if (!data.isEmpty()) {
-            for (Iterator itr = data.iterator(); itr.hasNext();) {
-                EncumbranceHistory encumbranceHistory = createEncumbranceHistoryFromMap((Map) itr.next());
+            for (Iterator<Encumbrance> itr = data.iterator(); itr.hasNext();) {
+                EncumbranceHistory encumbranceHistory = createEncumbranceHistoryFromMap((Map<String, Object>)itr.next());
                 countComparisionFailures++;
                 if (countComparisionFailures <= this.getComparisonFailuresToPrintPerReport()) {
                     reportWriterService.writeError(encumbranceHistory, new Message(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_RECORD_FAILED_BALANCING), Message.TYPE_WARNING, encumbranceHistory.getClass().getSimpleName()));
@@ -511,13 +520,13 @@
             reportWriterService.writeNewLines(1);
             reportWriterService.writeFormattedMessageLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_FAILURE_COUNT), (EncumbranceHistory.class).getSimpleName(), countComparisionFailures, this.getComparisonFailuresToPrintPerReport());
         }
-
-
+        
+        
         countComparisionFailures = data.size();
 
         return countComparisionFailures;
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#customPrintRowCountHistory()
      */
@@ -531,7 +540,7 @@
         reportWriterService.writeStatisticLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.REPORT_ENCUMBRANCE_ROW_COUNT_HISTORY), this.getShortTableLabel((EncumbranceHistory.class).getSimpleName()), "(" + (EncumbranceHistory.class).getSimpleName() + ")", this.getHistoryCount(null, EncumbranceHistory.class));
         reportWriterService.writeStatisticLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.REPORT_ENCUMBRANCE_ROW_COUNT_PRODUCTION), this.getShortTableLabel((Encumbrance.class).getSimpleName()), encumbranceDao.findCountGreaterOrEqualThan(fiscalYear));
     }
-
+    
     /**
      * Sets the BalancingDao
      * 
@@ -540,7 +549,7 @@
     public void setBalancingDao(BalancingDao balancingDao) {
         this.balancingDao = balancingDao;
     }
-
+    
     /**
      * Sets the AccountBalanceDao
      * 
@@ -549,7 +558,7 @@
     public void setAccountBalanceDao(AccountBalanceDao accountBalanceDao) {
         this.accountBalanceDao = accountBalanceDao;
     }
-
+    
     /**
      * Sets the EncumbranceDao
      * 
@@ -558,97 +567,97 @@
     public void setEncumbranceDao(EncumbranceDao encumbranceDao) {
         this.encumbranceDao = encumbranceDao;
     }
-
+    
     protected BalanceHistory createBalanceFromMap(Map<String, Object> map) {
         BalanceHistory balance = new BalanceHistory();
-        balance.setUniversityFiscalYear(((BigDecimal) (map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
-        balance.setChartOfAccountsCode((String) map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
-        balance.setAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
-        balance.setSubAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
-        balance.setObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
-        balance.setSubObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
-        balance.setBalanceTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
-        balance.setObjectTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_TYPE_CODE));
-
-        balance.setAccountLineAnnualBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNTING_LINE_ACTUALS_BALANCE_AMOUNT)));
-        balance.setContractsGrantsBeginningBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.CONTRACT_AND_GRANTS_BEGINNING_BALANCE)));
-        balance.setBeginningBalanceLineAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.BEGINNING_BALANCE)));
-        balance.setMonth1Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_1_ACCT_AMT)));
-        balance.setMonth2Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_2_ACCT_AMT)));
-        balance.setMonth3Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_3_ACCT_AMT)));
-        balance.setMonth4Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_4_ACCT_AMT)));
-        balance.setMonth5Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_5_ACCT_AMT)));
-        balance.setMonth6Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_6_ACCT_AMT)));
-        balance.setMonth7Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_7_ACCT_AMT)));
-        balance.setMonth8Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_8_ACCT_AMT)));
-        balance.setMonth9Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_9_ACCT_AMT)));
-        balance.setMonth10Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_10_ACCT_AMT)));
-        balance.setMonth11Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_11_ACCT_AMT)));
-        balance.setMonth12Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_12_ACCT_AMT)));
-        balance.setMonth13Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_13_ACCT_AMT)));
-
+        balance.setUniversityFiscalYear(((BigDecimal)(map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
+        balance.setChartOfAccountsCode((String)map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
+        balance.setAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
+        balance.setSubAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
+        balance.setObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
+        balance.setSubObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
+        balance.setBalanceTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
+        balance.setObjectTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_TYPE_CODE));
+        
+        balance.setAccountLineAnnualBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNTING_LINE_ACTUALS_BALANCE_AMOUNT)));
+        balance.setContractsGrantsBeginningBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.CONTRACT_AND_GRANTS_BEGINNING_BALANCE)));
+        balance.setBeginningBalanceLineAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.BEGINNING_BALANCE)));
+        balance.setMonth1Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_1_ACCT_AMT)));
+        balance.setMonth2Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_2_ACCT_AMT)));
+        balance.setMonth3Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_3_ACCT_AMT)));
+        balance.setMonth4Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_4_ACCT_AMT)));
+        balance.setMonth5Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_5_ACCT_AMT)));
+        balance.setMonth6Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_6_ACCT_AMT)));
+        balance.setMonth7Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_7_ACCT_AMT)));
+        balance.setMonth8Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_8_ACCT_AMT)));
+        balance.setMonth9Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_9_ACCT_AMT)));
+        balance.setMonth10Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_10_ACCT_AMT)));
+        balance.setMonth11Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_11_ACCT_AMT)));
+        balance.setMonth12Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_12_ACCT_AMT)));
+        balance.setMonth13Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_13_ACCT_AMT)));
+        
         return balance;
-
+        
     }
-
+    
     protected EntryHistory createEntryHistoryFromMap(Map<String, Object> map) {
         EntryHistory entry = new EntryHistory();
-        entry.setUniversityFiscalYear(((BigDecimal) (map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
-        entry.setChartOfAccountsCode((String) map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
-        entry.setFinancialObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
-        entry.setFinancialBalanceTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
-        entry.setUniversityFiscalPeriodCode((String) map.get(GeneralLedgerConstants.ColumnNames.FISCAL_PERIOD_CODE));
-        // entry.setFinancialObjectTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_TYPE_CODE));
-        entry.setTransactionDebitCreditCode((String) map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_DEBIT_CREDIT_CD));
-        entry.setTransactionLedgerEntryAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_LEDGER_ENTRY_AMOUNT)));
-
+        entry.setUniversityFiscalYear(((BigDecimal)(map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
+        entry.setChartOfAccountsCode((String)map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
+        entry.setFinancialObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
+        entry.setFinancialBalanceTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
+        entry.setUniversityFiscalPeriodCode((String)map.get(GeneralLedgerConstants.ColumnNames.FISCAL_PERIOD_CODE));
+       // entry.setFinancialObjectTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_TYPE_CODE));
+        entry.setTransactionDebitCreditCode((String)map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_DEBIT_CREDIT_CD));
+        entry.setTransactionLedgerEntryAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_LEDGER_ENTRY_AMOUNT)));
+        
         return entry;
-
+        
     }
-
+    
     protected AccountBalanceHistory createAccountBalanceHistoryFromMap(Map<String, Object> map) {
         // UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FIN_OBJECT_CD, FIN_SUB_OBJ_CD, CURR_BDLN_BAL_AMT,
         // ACLN_ACTLS_BAL_AMT, ACLN_ENCUM_BAL_AMT
         AccountBalanceHistory accountBalanceHistory = new AccountBalanceHistory();
-        accountBalanceHistory.setUniversityFiscalYear(((BigDecimal) (map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
-        accountBalanceHistory.setChartOfAccountsCode((String) map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
-        accountBalanceHistory.setAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
-        accountBalanceHistory.setSubAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
-        accountBalanceHistory.setObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
-        accountBalanceHistory.setSubObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
-        accountBalanceHistory.setCurrentBudgetLineBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.CURRENT_BUDGET_LINE_BALANCE_AMOUNT)));
-        accountBalanceHistory.setAccountLineActualsBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ACTUALS_BALANCE_AMOUNT)));
-        accountBalanceHistory.setAccountLineEncumbranceBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ENCUMBRANCE_BALANCE_AMOUNT)));
+        accountBalanceHistory.setUniversityFiscalYear(((BigDecimal)(map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
+        accountBalanceHistory.setChartOfAccountsCode((String)map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
+        accountBalanceHistory.setAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
+        accountBalanceHistory.setSubAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
+        accountBalanceHistory.setObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
+        accountBalanceHistory.setSubObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
+        accountBalanceHistory.setCurrentBudgetLineBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.CURRENT_BUDGET_LINE_BALANCE_AMOUNT)));
+        accountBalanceHistory.setAccountLineActualsBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ACTUALS_BALANCE_AMOUNT)));
+        accountBalanceHistory.setAccountLineEncumbranceBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ENCUMBRANCE_BALANCE_AMOUNT)));
 
-
+        
         return accountBalanceHistory;
     }
-
+    
     protected EncumbranceHistory createEncumbranceHistoryFromMap(Map<String, Object> map) {
         EncumbranceHistory encumbranceHistory = new EncumbranceHistory();
-        encumbranceHistory.setUniversityFiscalYear(((BigDecimal) (map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
-        encumbranceHistory.setChartOfAccountsCode((String) map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
-        encumbranceHistory.setAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
-        encumbranceHistory.setSubAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
-        encumbranceHistory.setObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
-        encumbranceHistory.setSubObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
-        encumbranceHistory.setBalanceTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
-        encumbranceHistory.setDocumentTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.FINANCIAL_DOCUMENT_TYPE_CODE));
-        encumbranceHistory.setOriginCode((String) map.get(GeneralLedgerConstants.ColumnNames.ORIGINATION_CODE));
-        encumbranceHistory.setDocumentNumber((String) map.get(GeneralLedgerConstants.ColumnNames.DOCUMENT_NUMBER));
-        encumbranceHistory.setAccountLineEncumbranceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ENCUMBRANCE_AMOUNT)));
-        encumbranceHistory.setAccountLineEncumbranceClosedAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ENCUMBRANCE_CLOSED_AMOUNT)));
+        encumbranceHistory.setUniversityFiscalYear(((BigDecimal)(map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
+        encumbranceHistory.setChartOfAccountsCode((String)map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
+        encumbranceHistory.setAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
+        encumbranceHistory.setSubAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
+        encumbranceHistory.setObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
+        encumbranceHistory.setSubObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
+        encumbranceHistory.setBalanceTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
+        encumbranceHistory.setDocumentTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.FINANCIAL_DOCUMENT_TYPE_CODE));
+        encumbranceHistory.setOriginCode((String)map.get(GeneralLedgerConstants.ColumnNames.ORIGINATION_CODE));
+        encumbranceHistory.setDocumentNumber((String)map.get(GeneralLedgerConstants.ColumnNames.DOCUMENT_NUMBER));
+        encumbranceHistory.setAccountLineEncumbranceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ENCUMBRANCE_AMOUNT)));
+        encumbranceHistory.setAccountLineEncumbranceClosedAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_LINE_ENCUMBRANCE_CLOSED_AMOUNT)));
 
-
+        
         return encumbranceHistory;
     }
-
+    
     protected KualiDecimal convertBigDecimalToKualiDecimal(BigDecimal biggy) {
         if (ObjectUtils.isNull(biggy))
-            return new KualiDecimal(0);
-        else
+            return new KualiDecimal(0);   
+        else 
             return new KualiDecimal(biggy);
-
+    
     }
-
+    
 }
Index: work/src/org/kuali/kfs/gl/batch/service/impl/PosterServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/PosterServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/PosterServiceImpl.java	(working copy)
@@ -229,6 +229,9 @@
             reportSummary.put(poster.getDestinationName() + "," + GeneralLedgerConstants.UPDATE_CODE, new Integer(0));
         }
         int ecount = 0;
+        
+        OriginEntryFull tran = null;
+        Transaction reversalTransaction = null;
         try {
             if ((mode == PosterService.MODE_ENTRIES) || (mode == PosterService.MODE_ICR)) {
                 LOG.debug("postEntries() Processing groups");
@@ -237,7 +240,7 @@
                         ecount++;
 
                         GLEN_RECORD = org.apache.commons.lang.StringUtils.rightPad(GLEN_RECORD, 183, ' ');
-                        OriginEntryFull tran = new OriginEntryFull();
+                        tran = new OriginEntryFull();
 
                         // checking parsing process and stop poster when it has errors. 
                         List<Message> parsingError = new ArrayList();
@@ -272,13 +275,13 @@
                 TransactionListingReport reversalListingReport = new TransactionListingReport();
                 while (reversalTransactions.hasNext()) {
                     ecount++;
-                    Transaction tran = (Transaction) reversalTransactions.next();
+                    reversalTransaction = (Transaction) reversalTransactions.next();
                     addReporting(reportSummary, GL_REVERSAL_T, GeneralLedgerConstants.SELECT_CODE);
 
-                    boolean posted = postTransaction(tran, mode, reportSummary, ledgerSummaryReport, OUTPUT_ERR_FILE_ps, runUniversityDate, GL_REVERSAL_T, OUTPUT_GLE_FILE_ps);
+                    boolean posted = postTransaction(reversalTransaction, mode, reportSummary, ledgerSummaryReport, OUTPUT_ERR_FILE_ps, runUniversityDate, GL_REVERSAL_T, OUTPUT_GLE_FILE_ps);
                     
                     if (posted) {
-                        reversalListingReport.generateReport(reversalReportWriterService, tran);
+                        reversalListingReport.generateReport(reversalReportWriterService, reversalTransaction);
                     }
                     
                     if (ecount % 1000 == 0) {
@@ -296,8 +299,8 @@
             reportWriterService.writeStatisticLine("GLEN RECORDS INSERTED (GL_ENTRY_T)         %,9d", reportSummary.get("GL_ENTRY_T,I"));
             reportWriterService.writeStatisticLine("GLBL RECORDS INSERTED (GL_BALANCE_T)       %,9d", reportSummary.get("GL_BALANCE_T,I"));
             reportWriterService.writeStatisticLine("GLBL RECORDS UPDATED  (GL_BALANCE_T)       %,9d", reportSummary.get("GL_BALANCE_T,U"));
-            reportWriterService.writeStatisticLine("GLEX RECORDS INSERTED (GL_EXPEND_TRN_T)    %,9d", reportSummary.get("GL_EXPEND_TRN_T,I"));
-            reportWriterService.writeStatisticLine("GLEX RECORDS UPDATED  (GL_EXPEND_TRN_T)    %,9d", reportSummary.get("GL_EXPEND_TRN_T,U"));
+            reportWriterService.writeStatisticLine("GLEX RECORDS INSERTED (GL_EXPEND_TRN_MT)    %,9d", reportSummary.get("GL_EXPEND_TRN_MT,I"));
+            reportWriterService.writeStatisticLine("GLEX RECORDS UPDATED  (GL_EXPEND_TRN_MT)    %,9d", reportSummary.get("GL_EXPEND_TRN_MT,U"));
             reportWriterService.writeStatisticLine("GLEC RECORDS INSERTED (GL_ENCUMBRANCE_T)   %,9d", reportSummary.get("GL_ENCUMBRANCE_T,I"));
             reportWriterService.writeStatisticLine("GLEC RECORDS UPDATED  (GL_ENCUMBRANCE_T)   %,9d", reportSummary.get("GL_ENCUMBRANCE_T,U"));
             reportWriterService.writeStatisticLine("GLRV RECORDS INSERTED (GL_REVERSAL_T)      %,9d", reportSummary.get("GL_REVERSAL_T,I"));
@@ -310,6 +313,8 @@
         }
         catch (RuntimeException re) {
             LOG.error("postEntries stopped due to: " + re.getMessage() + " on line number : " + ecount, re);
+            LOG.error("tran failure occured on: " + tran == null ? null : tran.toString());
+            LOG.error("reversalTransaction failure occured on: " + reversalTransaction == null ? null : reversalTransaction.toString());
             throw new RuntimeException("PosterService Stopped: " + re.getMessage(), re);
         }
         catch (IOException e) {
@@ -594,9 +599,9 @@
                 }
             }
             OUTPUT_GLE_FILE_ps.close();
-            reportWriterService.writeStatisticLine("GLEX RECORDS READ               (GL_EXPEND_TRN_T) %,9d", reportExpendTranRetrieved);
-            reportWriterService.writeStatisticLine("GLEX RECORDS DELETED            (GL_EXPEND_TRN_T) %,9d", reportExpendTranDeleted);
-            reportWriterService.writeStatisticLine("GLEX RECORDS KEPT DUE TO ERRORS (GL_EXPEND_TRN_T) %,9d", reportExpendTranKept);
+            reportWriterService.writeStatisticLine("GLEX RECORDS READ               (GL_EXPEND_TRN_MT) %,9d", reportExpendTranRetrieved);
+            reportWriterService.writeStatisticLine("GLEX RECORDS DELETED            (GL_EXPEND_TRN_MT) %,9d", reportExpendTranDeleted);
+            reportWriterService.writeStatisticLine("GLEX RECORDS KEPT DUE TO ERRORS (GL_EXPEND_TRN_MT) %,9d", reportExpendTranKept);
             reportWriterService.writeStatisticLine("TRANSACTIONS GENERATED                            %,9d", reportOriginEntryGenerated);
         }
         catch (FileNotFoundException e) {
@@ -997,7 +1002,7 @@
     protected void addReporting(Map reporting, String destination, String operation) {
         String key = destination + "," + operation;
         //TODO: remove this if block. Added to troubleshoot FSKD-194.
-        if("GL_EXPEND_TRN_T".equals(destination)){
+        if("GL_EXPEND_TRN_MT".equals(destination)){
             LOG.info("Counting GLEX operation: "+operation);
         }
         if (reporting.containsKey(key)) {
Index: work/src/org/kuali/kfs/gl/batch/service/impl/CollectorReportServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/CollectorReportServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/CollectorReportServiceImpl.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2007 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -69,7 +69,7 @@
 
     /**
      * Sends out e-mails about the validation and demerger of the Collector run
-     *
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      * @see org.kuali.kfs.gl.batch.service.CollectorReportService#sendEmails(org.kuali.kfs.gl.report.CollectorReportData)
      */
@@ -82,13 +82,13 @@
             sendValidationEmail(batch, collectorReportData);
             sendDemergerEmail(batch, collectorReportData);
         }
-
+        
         sendEmailSendFailureNotice(collectorReportData);
     }
 
     /**
      * Generates the reports about a given Collector run
-     *
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      * @see org.kuali.kfs.gl.batch.service.CollectorReportService#generateCollectorRunReports(org.kuali.kfs.gl.report.CollectorReportData)
      */
@@ -105,7 +105,7 @@
 
     /**
      * Appends Collector header information to the report writer
-     *
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      */
     protected void appendCollectorHeaderInformation(CollectorReportData collectorReportData) {
@@ -187,7 +187,7 @@
 
     /**
      * Appends header information to the given buffer
-     *
+     * 
      * @param buf the buffer where the message should go
      * @param batch the data from the Collector file
      */
@@ -213,7 +213,7 @@
 
     /**
      * Writes totals information to the report
-     *
+     * 
      * @param buf the buffer where the e-mail report is being written
      * @param batch the data generated by the Collector file upload
      * @param totals the totals to write
@@ -234,7 +234,7 @@
 
     /**
      * Writes the Amount/Count line of the Collector to a buffer
-     *
+     * 
      * @param buf the buffer to write the line to
      * @param countTitle the title of this part of the report
      * @param count the Collector count
@@ -258,14 +258,14 @@
             appendPaddingString(buf, ' ', amountString.length(), 21);
             buf.append(amountString);
         }
-
+        
         buf.append("\n");
 
     }
 
     /**
      * Writes some padding to a buffer
-     *
+     * 
      * @param buf the buffer to write to
      * @param padCharacter the character to repeat in the pad
      * @param valueLength the length of the value being padded
@@ -286,10 +286,10 @@
             new PreScrubberReport().generateReport(collectorReportData.getPreScrubberReportData(), collectorReportWriterService);
         }
     }
-
+    
     /**
      * Writes the results of the Scrubber's run on the Collector data to the report writer
-     *
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      */
     protected void appendScrubberReport(CollectorReportData collectorReportData) {
@@ -298,7 +298,7 @@
         Map<Transaction, List<Message>> aggregateScrubberErrors = new LinkedHashMap<Transaction, List<Message>>();
 
         collectorReportWriterService.pageBreak();
-
+        
         while (batchIter.hasNext()) {
             CollectorBatch batch = batchIter.next();
 
@@ -328,8 +328,8 @@
     }
 
     /**
-     * Writes the report of the demerger run against the Collector data
-     *
+     * Writes the report of the demerger run against the Collector data 
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      * @throws DocumentException the exception thrown if the PDF cannot be written to
      */
@@ -355,7 +355,7 @@
 
     /**
      * Writes information about origin entry and details to the report
-     *
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      * @throws DocumentException the exception thrown if the PDF cannot be written to
      */
@@ -405,7 +405,7 @@
 
     /**
      * Writes information about what details where changed in the Collector to the report
-     *
+     * 
      * @param collectorReportData data gathered from the run of the Collector
      * @throws DocumentException the exception thrown if the PDF cannot be written to
      */
@@ -429,7 +429,7 @@
 
     /**
      * Sets the dateTimeService attribute value.
-     *
+     * 
      * @param dateTimeService The dateTimeService to set.
      */
     public void setDateTimeService(DateTimeService dateTimeService) {
@@ -438,7 +438,7 @@
 
     /**
      * Generate the header for the demerger status report.
-     *
+     * 
      * @param scrubberReportData the data gathered from the run of the scrubber on the collector data
      * @param demergerReport the data gathered from the run of the demerger on the collector data
      * @return list of report summaries to be printed
@@ -455,7 +455,7 @@
 
     /**
      * Adds the ledger report to this Collector report
-     *
+     * 
      * @param collectorReportData the data from the Collector run
      * @throws DocumentException thrown if it is impossible to write to the report
      */
@@ -470,7 +470,7 @@
 
     /**
      * Builds actual error message from error key and parameters.
-     * @param messageMap a map of messages
+     * @param errorMap a map of errors
      * @return List<String> of error message text
      */
     protected List<String> translateErrorsFromMessageMap(MessageMap messageMap) {
@@ -504,10 +504,18 @@
 
         LOG.debug("sendValidationEmail() starting");
         MailMessage message = new MailMessage();
-
-        message.setFromAddress(mailService.getBatchMailingList());
-
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.GL, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
+        
         String subject = parameterService.getParameterValueAsString(CollectorStep.class, SystemGroupParameterNames.COLLECTOR_VALIDATOR_EMAIL_SUBJECT_PARAMETER_NAME);
+        //KFSMI-5918
+        if (errorMap.size() >0){
+            subject = parameterService.getParameterValue(CollectorStep.class, SystemGroupParameterNames.COLLECTOR_VALIDATOR_ERROR_EMAIL_SUBJECT_PARAMETER_NAME);
+        }
         String productionEnvironmentCode = configurationService.getPropertyValueAsString(KFSConstants.PROD_ENVIRONMENT_CODE_KEY);
         String environmentCode = configurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY);
         if (!StringUtils.equals(productionEnvironmentCode, environmentCode)) {
@@ -536,7 +544,7 @@
 
     /**
      * Sends the e-mail about the demerger step
-     *
+     * 
      * @param batch the data from the Collector file
      * @param collectorReportData data gathered from the run of the Collector
      */
@@ -552,9 +560,13 @@
             return;
         }
         MailMessage message = new MailMessage();
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.GL, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
 
-        message.setFromAddress(mailService.getBatchMailingList());
-
         String subject = parameterService.getParameterValueAsString(CollectorStep.class, SystemGroupParameterNames.COLLECTOR_DEMERGER_EMAIL_SUBJECT_PARAMETER_NAME);
         String productionEnvironmentCode = configurationService.getPropertyValueAsString(KFSConstants.PROD_ENVIRONMENT_CODE_KEY);
         String environmentCode = configurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY);
@@ -580,17 +592,21 @@
             collectorReportData.setEmailSendingStatusForParsedBatch(batch, formattedMessage);
         }
     }
-
+    
     /**
      * Sends email message to batch mailing list notifying of email send failures during the collector processing
-     *
+     * 
      * @param collectorReportData - data from collector run
      */
     protected void sendEmailSendFailureNotice(CollectorReportData collectorReportData) {
         MailMessage message = new MailMessage();
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.GL, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
 
-        message.setFromAddress(mailService.getBatchMailingList());
-
         String subject = configurationService.getPropertyValueAsString(KFSKeyConstants.ERROR_COLLECTOR_EMAILSEND_NOTIFICATION_SUBJECT);
         String productionEnvironmentCode = configurationService.getPropertyValueAsString(KFSConstants.PROD_ENVIRONMENT_CODE_KEY);
         String environmentCode = configurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY);
@@ -626,7 +642,7 @@
 
     /**
      * Creates a section about validation messages
-     *
+     * 
      * @param errorMessages a List of errors that happened during the Collector run
      * @param batch the data from the Collector file
      * @param collectorReportData data gathered from the run of the Collector
@@ -649,7 +665,7 @@
 
     /**
      * Generates a String that reports on the validation status of the document
-     *
+     * 
      * @param errorMessages a List of error messages encountered in the Collector process
      * @param notifyIfSuccessful true if a special message for the process running successfully should be added, false otherwise
      * @param numLeftPaddingSpaces the number of spaces to pad on the left
@@ -663,7 +679,7 @@
 
     /**
      * Appends the validation status message to a buffer
-     *
+     * 
      * @param buf a StringBuilder to append error messages to
      * @param errorMessages a List of error messages encountered in the Collector process
      * @param notifyIfSuccessful true if a special message for the process running successfully should be added, false otherwise
@@ -690,7 +706,7 @@
 
     /**
      * Writes the part of the report about the demerger
-     *
+     * 
      * @param batch the data from the Collector file
      * @param collectorReportData data gathered from the run of the Collector
      * @return
@@ -758,7 +774,7 @@
 
     protected static class KualiDecimalFormatter implements Formattable {
         private KualiDecimal number;
-
+        
         public KualiDecimalFormatter(KualiDecimal numberToFormat) {
             this.number = numberToFormat;
         }
Index: work/src/org/kuali/kfs/gl/batch/service/impl/ScrubberProcessImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/ScrubberProcessImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/ScrubberProcessImpl.java	(working copy)
@@ -1185,6 +1185,9 @@
                     capitalizationEntry.setFinancialObject(accountingCycleCachingService.getObjectCode(capitalizationEntry.getUniversityFiscalYear(), capitalizationEntry.getChartOfAccountsCode(), capitalizationEntry.getFinancialObjectCode()));
                 }
 
+                // financialSubObjectCode should always be changed to dashes for capitalization entries
+                capitalizationEntry.setFinancialSubObjectCode(KFSConstants.getDashFinancialSubObjectCode());
+                
                 capitalizationEntry.setFinancialObjectTypeCode(scrubbedEntryOption.getFinancialObjectTypeAssetsCd());
                 capitalizationEntry.setTransactionLedgerEntryDescription(capitalizationDescription);
 
Index: work/src/org/kuali/kfs/gl/batch/service/impl/CollectorHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/impl/CollectorHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/impl/CollectorHelperServiceImpl.java	(working copy)
@@ -335,25 +335,25 @@
      * @param MessageMap the map into which to put errors encountered during validation
      * @return boolean - true if validation was successful, false it not
      */
-    protected boolean performValidation(CollectorBatch batch, MessageMap MessageMap) {
-        boolean valid = performCollectorHeaderValidation(batch, MessageMap);
+    protected boolean performValidation(CollectorBatch batch, MessageMap messageMap) {
+        boolean valid = performCollectorHeaderValidation(batch, messageMap);
         
         performUppercasing(batch);
 
         boolean performDuplicateHeaderCheck = parameterService.getParameterValueAsBoolean(CollectorStep.class, SystemGroupParameterNames.COLLECTOR_PERFORM_DUPLICATE_HEADER_CHECK);
         if (valid && performDuplicateHeaderCheck) {
-            valid = duplicateHeaderCheck(batch, MessageMap);
+            valid = duplicateHeaderCheck(batch, messageMap);
         }
         if (valid) {
-            valid = checkForMixedDocumentTypes(batch, MessageMap);
+            valid = checkForMixedDocumentTypes(batch, messageMap);
         }
 
         if (valid) {
-            valid = checkForMixedBalanceTypes(batch, MessageMap);
+            valid = checkForMixedBalanceTypes(batch, messageMap);
         }
 
         if (valid) {
-            valid = checkDetailKeys(batch, MessageMap);
+            valid = checkDetailKeys(batch, messageMap);
         }
 
         return valid;
@@ -517,7 +517,7 @@
      * @param batch - batch to check document types
      * @return true if there is only one document type, false if multiple document types were found.
      */
-    protected boolean checkForMixedDocumentTypes(CollectorBatch batch, MessageMap MessageMap) {
+    protected boolean checkForMixedDocumentTypes(CollectorBatch batch, MessageMap messageMap) {
         boolean docTypesNotMixed = true;
 
         Set<String> batchDocumentTypes = new HashSet<String>();
@@ -527,7 +527,7 @@
 
         if (batchDocumentTypes.size() > 1) {
             LOG.error("mixed document types found in batch");
-            MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.MIXED_DOCUMENT_TYPES);
+            messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.MIXED_DOCUMENT_TYPES);
 
             docTypesNotMixed = false;
         }
@@ -541,7 +541,7 @@
      * @param batch - batch to check balance types
      * @return true if there is only one balance type, false if multiple balance types were found
      */
-    protected boolean checkForMixedBalanceTypes(CollectorBatch batch, MessageMap MessageMap) {
+    protected boolean checkForMixedBalanceTypes(CollectorBatch batch, MessageMap messageMap) {
         boolean balanceTypesNotMixed = true;
 
         Set<String> balanceTypes = new HashSet<String>();
@@ -551,7 +551,7 @@
 
         if (balanceTypes.size() > 1) {
             LOG.error("mixed balance types found in batch");
-            MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.MIXED_BALANCE_TYPES);
+            messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.MIXED_BALANCE_TYPES);
 
             balanceTypesNotMixed = false;
         }
@@ -566,7 +566,7 @@
      * @param batch - batch to validate
      * @return true if all detail records had matching keys, false otherwise
      */
-    protected boolean checkDetailKeys(CollectorBatch batch, MessageMap MessageMap) {
+    protected boolean checkDetailKeys(CollectorBatch batch, MessageMap messageMap) {
         boolean detailKeysFound = true;
 
         // build a Set of keys from the gl entries to compare with
@@ -579,7 +579,7 @@
             String collectorDetailKey = generateCollectorDetailMatchingKey(collectorDetail, ", ");
             if (!glEntryKeys.contains(collectorDetailKey)) {
                 LOG.error("found detail key without a matching gl entry key " + collectorDetailKey);
-                MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.NONMATCHING_DETAIL_KEY, collectorDetailKey);
+                messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.NONMATCHING_DETAIL_KEY, collectorDetailKey);
 
                 detailKeysFound = false;
             }
@@ -628,13 +628,13 @@
      * @param batch - batch to check totals for
      * @return boolean - true if validation was successful, false it not
      */
-    protected boolean checkTrailerTotals(CollectorBatch batch, CollectorReportData collectorReportData, MessageMap MessageMap) {
+    protected boolean checkTrailerTotals(CollectorBatch batch, CollectorReportData collectorReportData, MessageMap messageMap) {
         boolean trailerTotalsMatch = true;
 
         int actualRecordCount = batch.getOriginEntries().size() + batch.getCollectorDetails().size();
         if (actualRecordCount != batch.getTotalRecords()) {
             LOG.error("trailer check on total count did not pass, expected count: " + String.valueOf(batch.getTotalRecords()) + ", actual count: " + String.valueOf(actualRecordCount));
-            MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_COUNTNOMATCH, String.valueOf(batch.getTotalRecords()), String.valueOf(actualRecordCount));
+            messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_COUNTNOMATCH, String.valueOf(batch.getTotalRecords()), String.valueOf(actualRecordCount));
             trailerTotalsMatch = false;
         }
 
@@ -643,7 +643,7 @@
         if (batch.getOriginEntries().size() == 0) {
             if (!KualiDecimal.ZERO.equals(batch.getTotalAmount())) {
                 LOG.error("trailer total should be zero when there are no origin entries");
-                MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_AMOUNT_SHOULD_BE_ZERO);
+                messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_AMOUNT_SHOULD_BE_ZERO);
             }
             return false;
         }
@@ -664,7 +664,7 @@
             // credits must equal debits must equal total trailer amount
             if (!totals.getCreditAmount().equals(totals.getDebitAmount()) || !totals.getCreditAmount().equals(batch.getTotalAmount())) {
                 LOG.error("trailer check on total amount did not pass, debit should equal credit, should equal trailer total");
-                MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_AMOUNTNOMATCH1, totals.getCreditAmount().toString(), totals.getDebitAmount().toString(), batch.getTotalAmount().toString());
+                messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_AMOUNTNOMATCH1, totals.getCreditAmount().toString(), totals.getDebitAmount().toString(), batch.getTotalAmount().toString());
                 trailerTotalsMatch = false;
             }
         }
@@ -673,7 +673,7 @@
             KualiDecimal totalGlEntries = totals.getCreditAmount().add(totals.getDebitAmount()).add(totals.getOtherAmount());
             if (!totalGlEntries.equals(batch.getTotalAmount())) {
                 LOG.error("trailer check on total amount did not pass, sum of gl entry amounts should equal trailer total");
-                MessageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_AMOUNTNOMATCH2, totalGlEntries.toString(), batch.getTotalAmount().toString());
+                messageMap.putError(KFSConstants.GLOBAL_ERRORS, KFSKeyConstants.Collector.TRAILER_ERROR_AMOUNTNOMATCH2, totalGlEntries.toString(), batch.getTotalAmount().toString());
                 trailerTotalsMatch = false;
             }
         }
Index: work/src/org/kuali/kfs/gl/batch/service/BalancingService.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/service/BalancingService.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/service/BalancingService.java	(working copy)
@@ -116,9 +116,11 @@
     
     /**
      * Removes the data from the History tables.
-     * 
      */
-    
     public abstract void clearHistories();
     
+    /**
+     * Returns filenames used by process. Comma separated
+     */
+    public abstract String getFilenames();
 }
Index: work/src/org/kuali/kfs/gl/batch/DemergerSortStep.java
===================================================================
--- work/src/org/kuali/kfs/gl/batch/DemergerSortStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/batch/DemergerSortStep.java	(working copy)
@@ -1,58 +0,0 @@
-/*
- * Copyright 2005-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.gl.batch;
-
-import java.io.File;
-import java.util.Date;
-
-import org.kuali.kfs.gl.GeneralLedgerConstants;
-import org.kuali.kfs.sys.batch.AbstractStep;
-import org.springframework.util.StopWatch;
-
-/**
- * A step to run the scrubber process.
- */
-public class DemergerSortStep extends AbstractStep {
-    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DemergerSortStep.class);
-    protected String batchFileDirectoryName;
-    
-    /**
-     * Runs the scrubber process.
-     * 
-     * @param jobName the name of the job this step is being run as part of
-     * @param jobRunDate the time/date the job was started
-     * @return true if the job completed successfully, false if otherwise
-     * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String)
-     */
-    public boolean execute(String jobName, Date jobRunDate) {
-        StopWatch stopWatch = new StopWatch();
-        stopWatch.start(jobName);
-        String inputFile = batchFileDirectoryName + File.separator + GeneralLedgerConstants.BatchFileSystem.SCRUBBER_ERROR_OUTPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION; 
-        String outputFile = batchFileDirectoryName + File.separator + GeneralLedgerConstants.BatchFileSystem.SCRUBBER_ERROR_SORTED_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION; 
-            
-        BatchSortUtil.sortTextFileWithFields(inputFile, outputFile, new DemergerSortComparator());
-        
-        stopWatch.stop();
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("scrubber step of " + jobName + " took " + (stopWatch.getTotalTimeSeconds() / 60.0) + " minutes to complete");
-        }
-        return true;
-    }
-
-    public void setBatchFileDirectoryName(String batchFileDirectoryName) {
-        this.batchFileDirectoryName = batchFileDirectoryName;
-    }
-}
Index: work/src/org/kuali/kfs/gl/businessobject/datadictionary/Encumbrance.xml
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/datadictionary/Encumbrance.xml	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/datadictionary/Encumbrance.xml	(working copy)
@@ -1,23 +1,22 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
-	<!--
-		Copyright 2007-2009 The Kuali Foundation Licensed under the
-		Educational Community License, Version 2.0 (the "License"); you may
-		not use this file except in compliance with the License. You may
-		obtain a copy of the License at
+<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
+<!--
+ Copyright 2007-2009 The Kuali Foundation
+ 
+ Licensed under the Educational Community License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl2.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 
-		http://www.opensource.org/licenses/ecl2.php Unless required by
-		applicable law or agreed to in writing, software distributed under the
-		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-		CONDITIONS OF ANY KIND, either express or implied. See the License for
-		the specific language governing permissions and limitations under the
-		License.
-	-->
+  <bean id="Encumbrance" parent="Encumbrance-parentBean"/>
 
-	<bean id="Encumbrance" parent="Encumbrance-parentBean" />
-
   <bean id="Encumbrance-parentBean" abstract="true" parent="BusinessObjectEntry">
     <property name="businessObjectClass" value="org.kuali.kfs.gl.businessobject.Encumbrance"/>
     <property name="inquiryDefinition">
@@ -46,6 +45,7 @@
         <ref bean="Encumbrance-transactionEncumbranceDate"/>
         <ref bean="Encumbrance-timestamp"/>
         <ref bean="Encumbrance-dummyBusinessObject.pendingEntryOption"/>
+        <ref bean="Encumbrance-dummyBusinessObject.zeroEncumbranceOption"/>
         <ref bean="Encumbrance-objectCode.financialObjectLevelCode"/>
         <ref bean="Encumbrance-objectCode.financialObjectLevel.financialConsolidationObjectCode"/>
         <ref bean="Encumbrance-account.organizationCode"/>
@@ -78,10 +78,10 @@
     </property>
   </bean>
 
-	<!-- Attribute Definitions -->
+<!-- Attribute Definitions -->
 
 
-	<bean id="Encumbrance-universityFiscalYear" parent="Encumbrance-universityFiscalYear-parentBean" />
+  <bean id="Encumbrance-universityFiscalYear" parent="Encumbrance-universityFiscalYear-parentBean"/>
 
 	<bean id="Encumbrance-universityFiscalYear-parentBean" abstract="true"
 		parent="GenericAttributes-genericFiscalYear">
@@ -250,11 +250,16 @@
     <bean id="Encumbrance-account.organizationCode-parentBean" abstract="true" parent="Organization-organizationCode">
          <property name="name" value="account.organizationCode"/>
     </bean>   
+  <bean id="Encumbrance-dummyBusinessObject.zeroEncumbranceOption" parent="Encumbrance-dummyBusinessObject.zeroEncumbranceOption-parentBean"/>
+
+  <bean id="Encumbrance-dummyBusinessObject.zeroEncumbranceOption-parentBean" abstract="true" parent="TransientBalanceInquiryAttributes-zeroEncumbranceOption">
+    <property name="name" value="dummyBusinessObject.zeroEncumbranceOption"/>
+  </bean>
     
 	<!-- Business Object Inquiry Definition -->
 
 
-	<bean id="Encumbrance-inquiryDefinition" parent="Encumbrance-inquiryDefinition-parentBean" />
+  <bean id="Encumbrance-inquiryDefinition" parent="Encumbrance-inquiryDefinition-parentBean"/>
 
 	<bean id="Encumbrance-inquiryDefinition-parentBean" abstract="true"
 		parent="InquiryDefinition" p:title="Open Encumbrance">
@@ -283,71 +288,58 @@
 		</property>
 	</bean>
 
-	<!-- Business Object Lookup Definition -->
+<!-- Business Object Lookup Definition -->
 
 
-	<bean id="Encumbrance-lookupDefinition" parent="Encumbrance-lookupDefinition-parentBean" />
+  <bean id="Encumbrance-lookupDefinition" parent="Encumbrance-lookupDefinition-parentBean"/>
 
-	<bean id="Encumbrance-lookupDefinition-parentBean" abstract="true"
-		parent="LookupDefinition">
-		<property name="title" value="Open Encumbrance Lookup" />
-		<property name="lookupableID" value="glEncumbranceLookupable" />
-
-		<property name="defaultSort">
-			<bean parent="SortDefinition">
-				<property name="attributeNames">
-					<list>
-						<value>objectCode</value>
-					</list>
-				</property>
-			</bean>
-		</property>
-		<property name="lookupFields">
-			<list>
-				<bean parent="FieldDefinition" p:attributeName="universityFiscalYear"
-					p:treatWildcardsAndOperatorsAsLiteral="true"
-					p:defaultValueFinderClass="org.kuali.kfs.sys.businessobject.defaultvalue.FiscalYearFinder" />
-				<bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="accountNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="false" />
-				<bean parent="FieldDefinition" p:attributeName="subAccountNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="true" p:forceLookup="true" />
-				<bean parent="FieldDefinition" p:attributeName="objectCode"
-					p:treatWildcardsAndOperatorsAsLiteral="false" />
-				<bean parent="FieldDefinition" p:attributeName="subObjectCode"
-					p:treatWildcardsAndOperatorsAsLiteral="false" />
-				<bean parent="FieldDefinition" p:attributeName="balanceTypeCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true"
-					p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.EncumbranceBalanceTypeOptionFinder" />
-				<bean parent="FieldDefinition" p:attributeName="documentTypeCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="originCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="documentNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.pendingEntryOption"
-					p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.PendingEntryOptionFinder" />
-			</list>
-		</property>
-		<property name="resultFields">
-			<list>
-				<bean parent="FieldDefinition" p:attributeName="universityFiscalYear" />
-				<bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode" />
-				<bean parent="FieldDefinition" p:attributeName="accountNumber" />
-				<bean parent="FieldDefinition" p:attributeName="subAccountNumber" />
-				<bean parent="FieldDefinition" p:attributeName="objectCode" />
-				<bean parent="FieldDefinition" p:attributeName="subObjectCode" />
-				<bean parent="FieldDefinition" p:attributeName="balanceTypeCode" />
-				<bean parent="FieldDefinition" p:attributeName="documentTypeCode" />
-				<bean parent="FieldDefinition" p:attributeName="originCode" />
-				<bean parent="FieldDefinition" p:attributeName="documentNumber" />
-				<bean parent="FieldDefinition" p:attributeName="transactionEncumbranceDescription" />
-				<bean parent="FieldDefinition" p:attributeName="accountLineEncumbranceAmount" />
-				<bean parent="FieldDefinition" p:attributeName="accountLineEncumbranceClosedAmount" />
-				<bean parent="FieldDefinition" p:attributeName="accountLineEncumbranceOutstandingAmount" />
-				<bean parent="FieldDefinition" p:attributeName="transactionEncumbranceDate" />
-			</list>
-		</property>
-	</bean>
+  <bean id="Encumbrance-lookupDefinition-parentBean" abstract="true" parent="LookupDefinition">
+    <property name="title" value="Open Encumbrance Lookup"/>
+    <property name="lookupableID" value="glEncumbranceLookupable"/>
+    
+    <property name="defaultSort">
+      <bean parent="SortDefinition">
+        <property name="attributeNames">
+          <list>
+            <value>objectCode</value>
+          </list>
+        </property>
+      </bean>
+    </property>
+    <property name="lookupFields">
+      <list>
+        <bean parent="FieldDefinition" p:attributeName="universityFiscalYear"  p:treatWildcardsAndOperatorsAsLiteral="true" p:defaultValueFinderClass="org.kuali.kfs.sys.businessobject.defaultvalue.FiscalYearFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="accountNumber" p:treatWildcardsAndOperatorsAsLiteral="false" />
+        <bean parent="FieldDefinition" p:attributeName="subAccountNumber" p:treatWildcardsAndOperatorsAsLiteral="true" p:forceLookup="true"/>
+        <bean parent="FieldDefinition" p:attributeName="objectCode" p:treatWildcardsAndOperatorsAsLiteral="false" />
+        <bean parent="FieldDefinition" p:attributeName="subObjectCode" p:treatWildcardsAndOperatorsAsLiteral="false" />
+        <bean parent="FieldDefinition" p:attributeName="balanceTypeCode" p:treatWildcardsAndOperatorsAsLiteral="true" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.EncumbranceBalanceTypeOptionFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="documentTypeCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="originCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="documentNumber" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.pendingEntryOption" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.PendingEntryOptionFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.zeroEncumbranceOption" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.ZeroEncumbranceOptionFinder"/>
+      </list>
+    </property>
+    <property name="resultFields">
+      <list>
+        <bean parent="FieldDefinition" p:attributeName="universityFiscalYear"/>
+        <bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode"/>
+        <bean parent="FieldDefinition" p:attributeName="accountNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="subAccountNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="objectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="subObjectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="balanceTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="documentTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="originCode"/>
+        <bean parent="FieldDefinition" p:attributeName="documentNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="transactionEncumbranceDescription"/>
+        <bean parent="FieldDefinition" p:attributeName="accountLineEncumbranceAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="accountLineEncumbranceClosedAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="accountLineEncumbranceOutstandingAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="transactionEncumbranceDate"/>
+      </list>
+    </property>
+  </bean>
 </beans>
Index: work/src/org/kuali/kfs/gl/businessobject/datadictionary/Entry.xml
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/datadictionary/Entry.xml	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/datadictionary/Entry.xml	(working copy)
@@ -1,23 +1,22 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
-	<!--
-		Copyright 2006-2009 The Kuali Foundation Licensed under the
-		Educational Community License, Version 2.0 (the "License"); you may
-		not use this file except in compliance with the License. You may
-		obtain a copy of the License at
+<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
+<!--
+ Copyright 2006-2009 The Kuali Foundation
+ 
+ Licensed under the Educational Community License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl2.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 
-		http://www.opensource.org/licenses/ecl2.php Unless required by
-		applicable law or agreed to in writing, software distributed under the
-		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-		CONDITIONS OF ANY KIND, either express or implied. See the License for
-		the specific language governing permissions and limitations under the
-		License.
-	-->
+  <bean id="Entry" parent="Entry-parentBean"/>
 
-	<bean id="Entry" parent="Entry-parentBean" />
-
   <bean id="Entry-parentBean" abstract="true" parent="BusinessObjectEntry">
     <property name="businessObjectClass" value="org.kuali.kfs.gl.businessobject.Entry"/>
     <property name="inquiryDefinition">
@@ -57,6 +56,7 @@
         <ref bean="Entry-transactionPostingDate"/>
         <ref bean="Entry-transactionDateTimeStamp"/>
         <ref bean="Entry-dummyBusinessObject.pendingEntryOption"/>
+        <ref bean="Entry-dummyBusinessObject.debitCreditOption"/>
         <ref bean="Entry-objectCode.financialObjectLevelCode"/>
         <ref bean="Entry-objectCode.financialObjectLevel.financialConsolidationObjectCode"/>
         <ref bean="Entry-account.organizationCode"/>
@@ -98,10 +98,11 @@
     </property>
   </bean>
 
-	<!-- Attribute Definitions -->
+<!-- Attribute Definitions -->
 
-	<bean id="Entry-universityFiscalYear" parent="Entry-universityFiscalYear-parentBean" />
 
+  <bean id="Entry-universityFiscalYear" parent="Entry-universityFiscalYear-parentBean"/>
+
 	<bean id="Entry-universityFiscalYear-parentBean" abstract="true"
 		parent="GenericAttributes-genericFiscalYear">
 		<property name="name" value="universityFiscalYear" />
@@ -353,11 +354,18 @@
     <bean id="Entry-account.organizationCode-parentBean" abstract="true" parent="Organization-organizationCode">
          <property name="name" value="account.organizationCode"/>
     </bean> 
+ <bean id="Entry-dummyBusinessObject.debitCreditOption" parent="Entry-dummyBusinessObject.debitCreditOption-parentBean"/>
+ 
+ <bean id="Entry-dummyBusinessObject.debitCreditOption-parentBean" abstract="true" parent="TransientBalanceInquiryAttributes-debitCreditOption">
+ 	<property name="name" value="dummyBusinessObject.debitCreditOption"/>
+ 	<property name="label" value="Debit/Credit View"/>
+    <property name="shortLabel" value="Debit/Credit"/>
+ </bean>
 
 	<!-- Business Object Inquiry Definition -->
 
 
-	<bean id="Entry-inquiryDefinition" parent="Entry-inquiryDefinition-parentBean" />
+  <bean id="Entry-inquiryDefinition" parent="Entry-inquiryDefinition-parentBean"/>
 
 	<bean id="Entry-inquiryDefinition-parentBean" abstract="true"
 		parent="InquiryDefinition">
@@ -408,100 +416,78 @@
 		</property>
 	</bean>
 
-	<!-- Business Object Lookup Definition -->
+<!-- Business Object Lookup Definition -->
 
 
-	<bean id="Entry-lookupDefinition" parent="Entry-lookupDefinition-parentBean" />
+  <bean id="Entry-lookupDefinition" parent="Entry-lookupDefinition-parentBean"/>
 
-	<bean id="Entry-lookupDefinition-parentBean" abstract="true"
-		parent="LookupDefinition">
-		<property name="title" value="General Ledger Entry Lookup" />
-		<property name="lookupableID" value="glEntryLookupable" />
-		<property name="numOfColumns" value="2" />
-
-		<property name="defaultSort">
-			<bean parent="SortDefinition">
-				<property name="attributeNames">
-					<list>
-						<value>financialObjectCode</value>
-						<value>financialSubObjectCode</value>
-						<value>financialBalanceTypeCode</value>
-						<value>financialObjectTypeCode</value>
-					</list>
-				</property>
-			</bean>
-		</property>
-		<property name="lookupFields">
-			<list>
-				<bean parent="FieldDefinition" p:attributeName="universityFiscalYear"
-					p:treatWildcardsAndOperatorsAsLiteral="true"
-					p:defaultValueFinderClass="org.kuali.kfs.sys.businessobject.defaultvalue.FiscalYearFinder" />
-				<bean parent="FieldDefinition" p:attributeName="financialDocumentTypeCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="financialSystemOriginationCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="accountNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="false" />
-				<bean parent="FieldDefinition" p:attributeName="documentNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="subAccountNumber"
-					p:forceLookup="true" />
-				<bean parent="FieldDefinition" p:attributeName="organizationDocumentNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="financialObjectCode"
-					p:treatWildcardsAndOperatorsAsLiteral="false" />
-				<bean parent="FieldDefinition" p:attributeName="projectCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="financialSubObjectCode"
-					p:treatWildcardsAndOperatorsAsLiteral="false" />
-				<bean parent="FieldDefinition" p:attributeName="organizationReferenceId"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="financialBalanceTypeCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true"
-					p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.ActualBalanceTypeOptionFinder" />
-				<bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentTypeCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="financialObjectTypeCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="referenceFinancialSystemOriginationCode"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="universityFiscalPeriodCode"
-					p:treatWildcardsAndOperatorsAsLiteral="false"
-					p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.PeriodCodeOptionFinder" />
-				<bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentNumber"
-					p:treatWildcardsAndOperatorsAsLiteral="true" />
-				<bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.pendingEntryOption"
-					p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.PendingEntryOptionFinder" />
-			</list>
-		</property>
-		<property name="resultFields">
-			<list>
-				<bean parent="FieldDefinition" p:attributeName="universityFiscalYear" />
-				<bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode" />
-				<bean parent="FieldDefinition" p:attributeName="accountNumber" />
-				<bean parent="FieldDefinition" p:attributeName="subAccountNumber" />
-				<bean parent="FieldDefinition" p:attributeName="financialObjectCode" />
-				<bean parent="FieldDefinition" p:attributeName="financialSubObjectCode" />
-				<bean parent="FieldDefinition" p:attributeName="financialBalanceTypeCode" />
-				<bean parent="FieldDefinition" p:attributeName="financialObjectTypeCode" />
-				<bean parent="FieldDefinition" p:attributeName="universityFiscalPeriodCode" />
-				<bean parent="FieldDefinition" p:attributeName="financialDocumentTypeCode" />
-				<bean parent="FieldDefinition" p:attributeName="financialSystemOriginationCode" />
-				<bean parent="FieldDefinition" p:attributeName="documentNumber" />
-				<bean parent="FieldDefinition" p:attributeName="transactionLedgerEntryDescription" />
-				<bean parent="FieldDefinition" p:attributeName="transactionLedgerEntryAmount" />
-				<bean parent="FieldDefinition" p:attributeName="transactionDebitCreditCode" />
-				<bean parent="FieldDefinition" p:attributeName="transactionDate" />
-				<bean parent="FieldDefinition" p:attributeName="organizationDocumentNumber" />
-				<bean parent="FieldDefinition" p:attributeName="projectCode" />
-				<bean parent="FieldDefinition" p:attributeName="organizationReferenceId" />
-				<bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentTypeCode" />
-				<bean parent="FieldDefinition" p:attributeName="referenceFinancialSystemOriginationCode" />
-				<bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentNumber" />
-				<bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.pendingEntryOption" />
-			</list>
-		</property>
-	</bean>
+  <bean id="Entry-lookupDefinition-parentBean" abstract="true" parent="LookupDefinition">
+    <property name="title" value="General Ledger Entry Lookup"/>
+    <property name="lookupableID" value="glEntryLookupable"/>
+    <property name="numOfColumns" value="2"/>
+    
+    <property name="defaultSort">
+      <bean parent="SortDefinition">
+        <property name="attributeNames">
+          <list>
+            <value>financialObjectCode</value>
+            <value>financialSubObjectCode</value>
+            <value>financialBalanceTypeCode</value>
+            <value>financialObjectTypeCode</value>
+          </list>
+        </property>
+      </bean>
+    </property>
+    <property name="lookupFields">
+      <list>
+        <bean parent="FieldDefinition" p:attributeName="universityFiscalYear" p:treatWildcardsAndOperatorsAsLiteral="true" p:defaultValueFinderClass="org.kuali.kfs.sys.businessobject.defaultvalue.FiscalYearFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentTypeCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="financialSystemOriginationCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="accountNumber" p:treatWildcardsAndOperatorsAsLiteral="false" />
+        <bean parent="FieldDefinition" p:attributeName="documentNumber" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="subAccountNumber" p:forceLookup="true"/>
+        <bean parent="FieldDefinition" p:attributeName="organizationDocumentNumber" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="financialObjectCode" p:treatWildcardsAndOperatorsAsLiteral="false" />
+        <bean parent="FieldDefinition" p:attributeName="projectCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="financialSubObjectCode" p:treatWildcardsAndOperatorsAsLiteral="false" />
+        <bean parent="FieldDefinition" p:attributeName="organizationReferenceId" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="financialBalanceTypeCode" p:treatWildcardsAndOperatorsAsLiteral="true" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.ActualBalanceTypeOptionFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentTypeCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="financialObjectTypeCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="referenceFinancialSystemOriginationCode" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="universityFiscalPeriodCode"  p:treatWildcardsAndOperatorsAsLiteral="false" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.PeriodCodeOptionFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentNumber" p:treatWildcardsAndOperatorsAsLiteral="true" />
+        <bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.pendingEntryOption" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.PendingEntryOptionFinder"/>
+        <bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.debitCreditOption" p:defaultValueFinderClass="org.kuali.kfs.gl.businessobject.options.DebitCreditOptionFinder"/>
+      </list>
+    </property>
+    <property name="resultFields">
+      <list>
+        <bean parent="FieldDefinition" p:attributeName="universityFiscalYear"/>
+        <bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode"/>
+        <bean parent="FieldDefinition" p:attributeName="accountNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="subAccountNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="financialObjectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="financialSubObjectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="financialBalanceTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="financialObjectTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="universityFiscalPeriodCode"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="financialSystemOriginationCode"/>
+        <bean parent="FieldDefinition" p:attributeName="documentNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="transactionLedgerEntryDescription"/>
+        <bean parent="FieldDefinition" p:attributeName="transactionLedgerEntryAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="transactionDebitCreditCode"/>
+        <bean parent="FieldDefinition" p:attributeName="transactionDate"/>
+        <bean parent="FieldDefinition" p:attributeName="organizationDocumentNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="projectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="organizationReferenceId"/>
+        <bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="referenceFinancialSystemOriginationCode"/>
+        <bean parent="FieldDefinition" p:attributeName="referenceFinancialDocumentNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="dummyBusinessObject.pendingEntryOption"/>      
+      </list>
+    </property>
+  </bean>
 </beans>
Index: work/src/org/kuali/kfs/gl/businessobject/datadictionary/TransientBalanceInquiryAttributes.xml
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/datadictionary/TransientBalanceInquiryAttributes.xml	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/datadictionary/TransientBalanceInquiryAttributes.xml	(working copy)
@@ -28,6 +28,8 @@
         <ref bean="TransientBalanceInquiryAttributes-blankLineOption"/>
         <ref bean="TransientBalanceInquiryAttributes-costShareOption"/>
         <ref bean="TransientBalanceInquiryAttributes-linkButtonOption"/>
+        <ref bean="TransientBalanceInquiryAttributes-debitCreditOption"/>
+        <ref bean="TransientBalanceInquiryAttributes-zeroEncumbranceOption"/>
         <ref bean="TransientBalanceInquiryAttributes-genericText"/>
       </list>
     </property>
@@ -109,6 +111,34 @@
       <ref bean="TwoCharacterTextControl" />
     </property>
   </bean>
+  
+  
+  <bean id="TransientBalanceInquiryAttributes-debitCreditOption" parent="TransientBalanceInquiryAttributes-debitCreditOption-parentBean"/>
+
+  <bean id="TransientBalanceInquiryAttributes-debitCreditOption-parentBean" abstract="true" parent="AttributeDefinition">
+     <property name="name" value="debitCreditOption"/>
+    <property name="forceUppercase" value="false"/>
+    <property name="label" value="Debit Credit Option"/>
+    <property name="shortLabel" value="Debit Credit Option"/>
+    <property name="maxLength" value="20"/>
+    <property name="control">
+      <bean parent="RadioControlDefinition" p:valuesFinderClass="org.kuali.kfs.gl.businessobject.options.DebitCreditOptionFinder" p:includeKeyInLabel="false"/>
+    </property>
+  </bean>
+  
+  <bean id="TransientBalanceInquiryAttributes-zeroEncumbranceOption" parent="TransientBalanceInquiryAttributes-zeroEncumbranceOption-parentBean"/>
+
+  <bean id="TransientBalanceInquiryAttributes-zeroEncumbranceOption-parentBean" abstract="true" parent="AttributeDefinition">
+     <property name="name" value="zeroEncumbranceOption"/>
+    <property name="forceUppercase" value="false"/>
+    <property name="label" value="Include Zeroed Out Encumbrances"/>
+    <property name="shortLabel" value="Include Zeroed Encumbrances"/>
+    <property name="maxLength" value="20"/>
+    <property name="control">
+      <bean parent="RadioControlDefinition" p:valuesFinderClass="org.kuali.kfs.gl.businessobject.options.ZeroEncumbranceOptionFinder" p:includeKeyInLabel="false"/>
+    </property>
+  </bean>
+  
   <bean id="TransientBalanceInquiryAttributes-genericText" parent="TransientBalanceInquiryAttributes-genericText-parentBean"/>
 
   <bean id="TransientBalanceInquiryAttributes-genericText-parentBean" abstract="true" parent="AttributeDefinition">
Index: work/src/org/kuali/kfs/gl/businessobject/lookup/EntryLookupableHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/lookup/EntryLookupableHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/lookup/EntryLookupableHelperServiceImpl.java	(working copy)
@@ -28,6 +28,7 @@
 import org.kuali.kfs.gl.businessobject.inquiry.InquirableFinancialDocument;
 import org.kuali.kfs.gl.service.EntryService;
 import org.kuali.kfs.gl.service.ScrubberValidator;
+import org.kuali.kfs.integration.ld.LaborModuleService;
 import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
@@ -51,6 +52,7 @@
 
     private ScrubberValidator scrubberValidator;
     private EntryService entryService;
+    private volatile static LaborModuleService laborModuleService;
 
     /**
      * Validate the university fiscal year that has been queried on
@@ -108,13 +110,16 @@
      * @param bo the business object with a property being drilled down on
      * @param propertyName the name of the property being drilled down on
      * @return a String with the URL of the property
-     * @see org.kuali.rice.kns.lookup.Lookupable#getInquiryUrl(org.kuali.rice.krad.bo.BusinessObject, java.lang.String)
+     * @see org.kuali.rice.kns.lookup.Lookupable#getInquiryUrl(org.kuali.rice.kns.bo.BusinessObject, java.lang.String)
      */
     @Override
     public HtmlData getInquiryUrl(BusinessObject businessObject, String propertyName) {
         if (KFSPropertyConstants.DOCUMENT_NUMBER.equals(propertyName)) {
             if (businessObject instanceof Entry) {
                 Entry entry = (Entry) businessObject;
+                if (getLaborModuleService().getLaborLedgerGLOriginCodes() != null && !getLaborModuleService().getLaborLedgerGLOriginCodes().isEmpty() && getLaborModuleService().getLaborLedgerGLOriginCodes().contains(entry.getFinancialSystemOriginationCode())) {
+                    return getLaborModuleService().getInquiryUrlForGeneralLedgerEntryDocumentNumber(entry);
+                }
                 return new AnchorHtmlData(new InquirableFinancialDocument().getInquirableDocumentUrl(entry), KRADConstants.EMPTY_STRING, "view entry "+entry.toString());
             }
         }
@@ -135,6 +140,8 @@
         // get the pending entry option. This method must be prior to the get search results
         String pendingEntryOption = this.getSelectedPendingEntryOption(fieldValues);
 
+        String debitCreditOption  = this.getDebitCreditOption(fieldValues);
+
         // get the search result collection
         Collection searchResultsCollection = getLookupService().findCollectionBySearch(getBusinessObjectClass(), fieldValues);
 
@@ -215,4 +222,14 @@
     public void setEntryService(EntryService entryService) {
         this.entryService = entryService;
     }
+    
+    /**
+     * @return the system's configured implementation of the LaborModuleService
+     */
+    public LaborModuleService getLaborModuleService() {
+        if (laborModuleService == null) {
+            laborModuleService = SpringContext.getBean(LaborModuleService.class);
+        }
+        return laborModuleService;
+    }
 }
Index: work/src/org/kuali/kfs/gl/businessobject/lookup/EncumbranceLookupableHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/lookup/EncumbranceLookupableHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/lookup/EncumbranceLookupableHelperServiceImpl.java	(working copy)
@@ -22,6 +22,7 @@
 import java.util.Map;
 
 import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.gl.Constant;
 import org.kuali.kfs.gl.OJBUtility;
 import org.kuali.kfs.gl.batch.service.EncumbranceCalculator;
 import org.kuali.kfs.gl.businessobject.Encumbrance;
@@ -118,16 +119,19 @@
 
         // get the pending entry option. This method must be prior to the get search results
         String pendingEntryOption = this.getSelectedPendingEntryOption(fieldValues);
+        
+        final String zeroEncumbranceOption = getSelectedZeroEncumbranceOption(fieldValues); // store in a temporary variable, because the method removes the key from the map
+        final boolean includeZeroEncumbrances = (StringUtils.isBlank(zeroEncumbranceOption) || zeroEncumbranceOption.equals(Constant.ZERO_ENCUMBRANCE_INCLUDE));
 
         // get the search result collection
-        Iterator encumbranceIterator = encumbranceService.findOpenEncumbrance(fieldValues);
+        Iterator encumbranceIterator = encumbranceService.findOpenEncumbrance(fieldValues, includeZeroEncumbrances);
         Collection searchResultsCollection = this.buildEncumbranceCollection(encumbranceIterator);
 
         // update search results according to the selected pending entry option
         updateByPendingLedgerEntry(searchResultsCollection, fieldValues, pendingEntryOption, false, false);
 
         // get the actual size of all qualified search results
-        Integer recordCount = encumbranceService.getOpenEncumbranceRecordCount(fieldValues);
+        Integer recordCount = encumbranceService.getOpenEncumbranceRecordCount(fieldValues, includeZeroEncumbrances);
         Long actualSize = OJBUtility.getResultActualSize(searchResultsCollection, recordCount, fieldValues, new Encumbrance());
 
         return this.buildSearchResultList(searchResultsCollection, actualSize);
@@ -173,6 +177,15 @@
         }
         return encumbranceCollection;
     }
+    
+    /**
+     * Method tests to see if the user selected to include or exclude zero encumbrances
+     * @param fieldValues the lookup field values
+     * @return the value of the zero encumbrance option
+     */
+    protected String getSelectedZeroEncumbranceOption(Map fieldValues) {
+        return (String)fieldValues.remove(Constant.ZERO_ENCUMBRANCE_OPTION);
+    }
 
     /**
      * Sets the postEncumbrance attribute value.
Index: work/src/org/kuali/kfs/gl/businessobject/lookup/AbstractGeneralLedgerLookupableHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/lookup/AbstractGeneralLedgerLookupableHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/lookup/AbstractGeneralLedgerLookupableHelperServiceImpl.java	(working copy)
@@ -15,19 +15,32 @@
  */
 package org.kuali.kfs.gl.businessobject.lookup;
 
+import java.text.DecimalFormat;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
+
+
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.gl.Constant;
+import org.kuali.kfs.gl.service.impl.StringHelper;
 import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.document.service.DebitDeterminerService;
 import org.kuali.kfs.sys.service.GeneralLedgerPendingEntryService;
 import org.kuali.rice.kns.lookup.AbstractLookupableHelperServiceImpl;
 import org.kuali.rice.kns.lookup.HtmlData;
+import org.kuali.rice.kns.util.FieldUtils;
+import org.kuali.rice.kns.util.KualiDecimal;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.web.struts.form.LookupForm;
+import org.kuali.rice.kns.web.ui.Column;
 import org.kuali.rice.kns.web.ui.Field;
+import org.kuali.rice.kns.web.ui.ResultRow;
 import org.kuali.rice.kns.web.ui.Row;
 import org.kuali.rice.krad.bo.BusinessObject;
 import org.kuali.rice.krad.lookup.CollectionIncomplete;
@@ -41,16 +54,10 @@
 
     private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(AbstractGeneralLedgerLookupableHelperServiceImpl.class);
 
-    private GeneralLedgerPendingEntryService generalLedgerPendingEntryService;
+    protected GeneralLedgerPendingEntryService generalLedgerPendingEntryService;
+    protected DebitDeterminerService debitDeterminerService;
 
-    protected GeneralLedgerPendingEntryService getGeneralLedgerPendingEntryService() {
-        return generalLedgerPendingEntryService;
-    }
 
-    public void setGeneralLedgerPendingEntryService(GeneralLedgerPendingEntryService generalLedgerPendingEntryService) {
-        this.generalLedgerPendingEntryService = generalLedgerPendingEntryService;
-    }
-
     /**
      * This method overides that in parent class so that the maintainance actions are surpressed
      *
@@ -63,7 +70,7 @@
     }
 
     /**
-     * This method tests if the user selects to see the general ledager pending entries
+     * This method tests if the user selects to see the general ledger pending entries
      *
      * @param fieldValues the map containing the search fields and values
      * @return the value of pending entry option
@@ -77,6 +84,20 @@
     }
 
     /**
+     * This method tests if the user selects to see the Debit/Credit entries
+     *
+     * @param fieldValues the map containing the search fields and values
+     * @return the value of pending entry option
+     */
+    protected String getDebitCreditOption(Map fieldValues) {
+        // truncate the non-property filed
+        String debitCreditOption = (String) fieldValues.get(Constant.DEBIT_CREDIT_OPTION);
+        fieldValues.remove(Constant.DEBIT_CREDIT_OPTION);
+
+        return debitCreditOption;
+    }
+
+    /**
      * This method tests if the user selects to see the reports by monthly or accumulated
      *
      * @param fieldValues the map containing the search fields and values
@@ -175,6 +196,67 @@
         return searchResults;
     }
 
+    @Override
+    public Collection performLookup(LookupForm lookupForm, Collection resultTable, boolean bounded) {
+        Map fieldsForLookup = new HashMap(lookupForm.getFieldsForLookup());
+        String debitCreditOption = getDebitCreditOption(fieldsForLookup);
+
+        Collection displayList = super.performLookup(lookupForm, resultTable, bounded);
+        updateByDebitCreditOption(resultTable, debitCreditOption);
+        return displayList;
+
+    }
+
+
+
+    protected void updateByDebitCreditOption(Collection resultTable , String debitCreditOption) {
+
+        if (Constant.DEBIT_CREDIT_EXCLUDE.equals(debitCreditOption)){
+            for(Object table : resultTable) {
+                ResultRow  row = (ResultRow)table;
+                List<Column> columns = row.getColumns();
+                ArrayList<Column> newColumnList = new ArrayList<Column>();
+                String debitCreditCode = null;
+                String objectType = null;
+                Column amountCol = null;
+                boolean setAmount = false ;
+                for(Column col: columns) {
+
+                    String propertyName = col.getPropertyName();
+                    if (propertyName.equals(KFSPropertyConstants.TRANSACTION_DEBIT_CREDIT_CODE)) {
+                        debitCreditCode = col.getPropertyValue();
+                    }
+                    else if (!propertyName.equals(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_AMOUNT)){
+                        newColumnList.add(col);
+                    }
+
+                    if(propertyName.equals(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE)) {
+                        objectType = col.getPropertyValue();
+                    }
+
+                    if (propertyName.equals(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_AMOUNT)) {
+                        amountCol = col;
+                    }
+
+                    // determine the amount sign
+                    if (!newColumnList.contains(amountCol)) {
+                        if ((!StringHelper.isNullOrEmpty(objectType)) && (!StringHelper.isNullOrEmpty(debitCreditCode))
+                                && ObjectUtils.isNotNull(amountCol)) {
+                            String amount = debitDeterminerService.getConvertedAmount(objectType, debitCreditCode, amountCol.getPropertyValue());
+                            amountCol.setPropertyValue(amount);
+                            newColumnList.add(amountCol);
+
+                        }
+                    }
+
+                }
+
+                row.setColumns(newColumnList);
+            }
+        }
+
+    }
+
     /**
      * This method is used to update amounts of the given entries with the corresponding pending amounts. It is a factory that
      * executes the update methods of individual derived classes.
@@ -222,4 +304,23 @@
             }
         }
     }
+
+    protected GeneralLedgerPendingEntryService getGeneralLedgerPendingEntryService() {
+        return generalLedgerPendingEntryService;
+    }
+
+    public void setGeneralLedgerPendingEntryService(GeneralLedgerPendingEntryService generalLedgerPendingEntryService) {
+        this.generalLedgerPendingEntryService = generalLedgerPendingEntryService;
+    }
+
+    protected DebitDeterminerService getDebitDeterminerService() {
+        return debitDeterminerService;
+    }
+
+    public void setDebitDeterminerService(DebitDeterminerService debitDeterminerService) {
+        this.debitDeterminerService = debitDeterminerService;
+    }
+
+
+
 }
Index: work/src/org/kuali/kfs/gl/businessobject/lookup/PendingEntryLookupableHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/lookup/PendingEntryLookupableHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/lookup/PendingEntryLookupableHelperServiceImpl.java	(working copy)
@@ -49,7 +49,7 @@
 /**
  * An extension of KualiLookupableImpl to support balance lookups
  */
-public class PendingEntryLookupableHelperServiceImpl extends AbstractLookupableHelperServiceImpl {
+public class PendingEntryLookupableHelperServiceImpl extends AbstractGeneralLedgerLookupableHelperServiceImpl {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(PendingEntryLookupableHelperServiceImpl.class);
 
     private GeneralLedgerPendingEntryService generalLedgerPendingEntryService;
@@ -215,7 +215,14 @@
 
         return new CollectionIncomplete(collection, new Long(collection.size()));
     }
-
+    
+    
+    @Override
+    protected void updateEntryCollection(Collection entryCollection, Map fieldValues, boolean isApproved, boolean isConsolidated, boolean isCostShareInclusive) {
+        // TODO Auto-generated method stub
+        
+    }
+    
     /**
      * Sets the generalLedgerPendingEntryService attribute value.
      * 
Index: work/src/org/kuali/kfs/gl/businessobject/TransientBalanceInquiryAttributes.java
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/TransientBalanceInquiryAttributes.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/TransientBalanceInquiryAttributes.java	(working copy)
@@ -39,6 +39,8 @@
     private String reportingSortCode;
     private String consolidationReportingSortCode;
     private String levelObjectCode;
+    private String debitCreditOption;
+    private String zeroEncumbranceOption;
 
 
     /**
@@ -273,4 +275,39 @@
     public void setBlankLineOption(String blankLineOption) {
         this.blankLineOption = blankLineOption;
     }
+    
+    
+    /**
+     * 
+     * Gets the debitCreditOption attribute value.
+     * 
+     * @return Returns the debitCreditOption
+     */
+    public String getDebitCreditOption() {
+        return debitCreditOption;
+    }
+
+    /**
+     * 
+     * Sets the debitCreditOption attribute
+     * @param debitCreditOption The debitCreditOption to set.
+     */
+    public void setDebitCreditOption(String debitCreditOption) {
+        this.debitCreditOption = debitCreditOption;
+    }
+
+    /**
+     * @return the include option for encumbrances which have gone to zero
+     */
+    public String getZeroEncumbranceOption() {
+        return zeroEncumbranceOption;
+    }
+
+    /**
+     * Sets the include option for encumbrances which have gone to zero
+     * @param includeZeroEncumbranceOption the include option for encumbrances which have gone to zero
+     */
+    public void setZeroEncumbranceOption(String zeroEncumbranceOption) {
+        this.zeroEncumbranceOption = zeroEncumbranceOption;
+    }
 }
Index: work/src/org/kuali/kfs/gl/businessobject/CollectorDetailFieldUtil.java
===================================================================
--- work/src/org/kuali/kfs/gl/businessobject/CollectorDetailFieldUtil.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/businessobject/CollectorDetailFieldUtil.java	(working copy)
@@ -55,6 +55,19 @@
                 KFSPropertyConstants.COLLECTOR_DETAIL_AMOUNT,
                 KFSPropertyConstants.COLLECTOR_DETAIL_GL_CREDIT_CODE,
                 KFSPropertyConstants.COLLECTOR_DETAIL_NOTE_TEXT
-            };
+        };
     }
+
+    /**
+     * 
+     */
+
+    public int getDetailLineTotalLength() {
+        int totalLength = 0;
+        Map<String, Integer> lengthMap = getFieldLengthMap();
+        for (String property : getOrderedProperties()) {
+            totalLength += lengthMap.get(property).intValue();
+        }
+        return totalLength;
+    }
 }
Index: work/src/org/kuali/kfs/gl/dataaccess/EncumbranceDao.java
===================================================================
--- work/src/org/kuali/kfs/gl/dataaccess/EncumbranceDao.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/dataaccess/EncumbranceDao.java	(working copy)
@@ -70,17 +70,19 @@
      * This method finds the open encumbrances according to input fields and values
      * 
      * @param fieldValues the input fields and values
+     * @param includeZeroEncumbrances should the query include encumbrances which have zeroed out?
      * @return a collection of open encumbrances
      */
-    public Iterator findOpenEncumbrance(Map fieldValues);
+    public Iterator findOpenEncumbrance(Map fieldValues, boolean includeZeroEncumbrances);
 
     /**
      * Counts the number of the open encumbrances according to input fields and values
      * 
      * @param fieldValues the input fields and values
+     * @param includeZeroEncumbrances should the query include encumbrances which have zeroed out?
      * @return the number of the open encumbrances
      */
-    public Integer getOpenEncumbranceRecordCount(Map fieldValues);
+    public Integer getOpenEncumbranceRecordCount(Map fieldValues, boolean includeZeroEncumbrances);
     
     /**
      * @param year the given university fiscal year
Index: work/src/org/kuali/kfs/gl/dataaccess/impl/EncumbranceDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/gl/dataaccess/impl/EncumbranceDaoOjb.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/dataaccess/impl/EncumbranceDaoOjb.java	(working copy)
@@ -166,10 +166,10 @@
      * @return a collection of open encumbrances
      * @see org.kuali.kfs.gl.dataaccess.EncumbranceDao#findOpenEncumbrance(java.util.Map)
      */
-    public Iterator findOpenEncumbrance(Map fieldValues) {
+    public Iterator findOpenEncumbrance(Map fieldValues, boolean includeZeroEncumbrances) {
         LOG.debug("findOpenEncumbrance() started");
 
-        Query query = this.getOpenEncumbranceQuery(fieldValues);
+        Query query = this.getOpenEncumbranceQuery(fieldValues, includeZeroEncumbrances);
         OJBUtility.limitResultSize(query);
         return getPersistenceBrokerTemplate().getIteratorByQuery(query);
     }
@@ -181,10 +181,10 @@
      * @return the number of the open encumbrances
      * @see org.kuali.kfs.gl.dataaccess.EncumbranceDao#getOpenEncumbranceRecordCount(java.util.Map)
      */
-    public Integer getOpenEncumbranceRecordCount(Map fieldValues) {
+    public Integer getOpenEncumbranceRecordCount(Map fieldValues, boolean includeZeroEncumbrances) {
         LOG.debug("getOpenEncumbranceRecordCount() started");
 
-        Query query = this.getOpenEncumbranceQuery(fieldValues);
+        Query query = this.getOpenEncumbranceQuery(fieldValues, includeZeroEncumbrances);
         return getPersistenceBrokerTemplate().getCount(query);
     }
 
@@ -192,11 +192,17 @@
      * build the query for encumbrance search
      * 
      * @param fieldValues a Map of values to use as keys for the query
+     * @param includeZeroEncumbrances should the query include encumbrances which have zeroed out?
      * @return an OJB query
      */
-    protected Query getOpenEncumbranceQuery(Map fieldValues) {
+    protected Query getOpenEncumbranceQuery(Map fieldValues, boolean includeZeroEncumbrances) {
         Criteria criteria = OJBUtility.buildCriteriaFromMap(fieldValues, new Encumbrance());
         criteria.addIn(KFSPropertyConstants.BALANCE_TYPE_CODE, Arrays.asList(KFSConstants.ENCUMBRANCE_BALANCE_TYPE));
+        if (!includeZeroEncumbrances) {
+            Criteria nonZeroEncumbranceCriteria = new Criteria();
+            nonZeroEncumbranceCriteria.addNotEqualToField(KFSPropertyConstants.ACCOUNT_LINE_ENCUMBRANCE_AMOUNT, KFSPropertyConstants.ACCOUNT_LINE_ENCUMBRANCE_CLOSED_AMOUNT);
+            criteria.addAndCriteria(nonZeroEncumbranceCriteria);
+        }
         return QueryFactory.newQuery(Encumbrance.class, criteria);
     }
 
Index: work/src/org/kuali/kfs/gl/service/EncumbranceService.java
===================================================================
--- work/src/org/kuali/kfs/gl/service/EncumbranceService.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/service/EncumbranceService.java	(working copy)
@@ -60,15 +60,17 @@
      * This method finds the open encumbrances according to input fields and values
      * 
      * @param fieldValues the input fields and values
+     * @param includeZeroEncumbrances should the query include encumbrances which have zeroed out?
      * @return a collection of open encumbrances
      */
-    public Iterator findOpenEncumbrance(Map fieldValues);
+    public Iterator findOpenEncumbrance(Map fieldValues, boolean includeZeroEncumbrances);
 
     /**
      * This method gets the number of the open encumbrances according to input fields and values
      * 
      * @param fieldValues the input fields and values
+     * @param includeZeroEncumbrances should the query include encumbrances which have zeroed out?
      * @return the number of the open encumbrances
      */
-    public Integer getOpenEncumbranceRecordCount(Map fieldValues);
+    public Integer getOpenEncumbranceRecordCount(Map fieldValues, boolean includeZeroEncumbrances);
 }
Index: work/src/org/kuali/kfs/gl/service/impl/EncumbranceServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/gl/service/impl/EncumbranceServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/service/impl/EncumbranceServiceImpl.java	(working copy)
@@ -90,20 +90,22 @@
     /**
      * Given the fieldValues, forms a query and finds the open encumbrances that match it
      * @param fieldValues the values to form an encumbrance query out of
+     * @param includeZeroEncumbrances
      * @return an Iterator full of qualifying encumbrances
      * @see org.kuali.kfs.gl.service.EncumbranceService#findOpenEncumbrance(java.util.Map)
      */
-    public Iterator findOpenEncumbrance(Map fieldValues) {
-        return encumbranceDao.findOpenEncumbrance(fieldValues);
+    public Iterator findOpenEncumbrance(Map fieldValues, boolean includeZeroEncumbrances) {
+        return encumbranceDao.findOpenEncumbrance(fieldValues, includeZeroEncumbrances);
     }
 
     /**
      * Returns the count of all open encumbrances in the database, matching the given field values
      * @param fieldValues the field values to build an encumbrance query out of
+     * @param includeZeroEncumbrances
      * @return the number of qualifying open encumbrances
      * @see org.kuali.kfs.gl.service.EncumbranceService#getOpenEncumbranceCount(java.util.Map)
      */
-    public Integer getOpenEncumbranceRecordCount(Map fieldValues) {
-        return encumbranceDao.getOpenEncumbranceRecordCount(fieldValues);
+    public Integer getOpenEncumbranceRecordCount(Map fieldValues, boolean includeZeroEncumbrances) {
+        return encumbranceDao.getOpenEncumbranceRecordCount(fieldValues, includeZeroEncumbrances);
     }
 }
Index: work/src/org/kuali/kfs/gl/spring-gl.xml
===================================================================
--- work/src/org/kuali/kfs/gl/spring-gl.xml	(revision 37217)
+++ work/src/org/kuali/kfs/gl/spring-gl.xml	(working copy)
@@ -101,9 +101,6 @@
 		<property name="balanceService">
 			<ref bean="glBalanceService" />
 		</property>
-		<property name="generalLedgerPendingEntryService">
-			<ref bean="generalLedgerPendingEntryService" />
-		</property>
 		<property name="postBalance">
 			<ref bean="glPostBalance" />
 		</property>
@@ -136,9 +133,6 @@
 		<property name="dataDictionaryService">
 			<ref bean="dataDictionaryService" />
 		</property>
-		<property name="generalLedgerPendingEntryService">
-			<ref bean="generalLedgerPendingEntryService" />
-		</property>
 		<property name="postEncumbrance">
 			<ref bean="glPostEncumbrance" />
 		</property>
@@ -177,9 +171,6 @@
 		<property name="balanceService">
 			<ref bean="glBalanceService" />
 		</property>
-		<property name="generalLedgerPendingEntryService">
-			<ref bean="generalLedgerPendingEntryService" />
-		</property>
 		<property name="postBalance">
 			<ref bean="glPostBalance" />
 		</property>
@@ -209,9 +200,6 @@
 		<property name="dataDictionaryService">
 			<ref bean="dataDictionaryService" />
 		</property>
-		<property name="generalLedgerPendingEntryService">
-			<ref bean="generalLedgerPendingEntryService" />
-		</property>
 		<property name="parameterService">
 			<ref bean="parameterService" />
 		</property>
@@ -220,7 +208,7 @@
 	<bean id="glPendingEntryLookupable"  parent="glPendingEntryLookupable-parentBean" scope="prototype"/>
 	<bean id="glPendingEntryLookupable-parentBean" class="org.kuali.rice.kns.lookup.KualiLookupableImpl" abstract="true">
 		<property name="lookupableHelperService">
-			<ref bean="glPendingEntryLookupableHelperServiceImpl" />
+			<ref bean="glPendingEntryLookupableHelperService" />
 		</property>
 	</bean>
 
@@ -241,9 +229,6 @@
 		<property name="dataDictionaryService">
 			<ref bean="dataDictionaryService" />
 		</property>
-		<property name="generalLedgerPendingEntryService">
-			<ref bean="generalLedgerPendingEntryService" />
-		</property>
 		<property name="scrubberValidator">
 			<ref bean="scrubberValidator" />
 		</property>
@@ -1308,6 +1293,7 @@
 		<property name="dependencies">
 			<map>
 				<entry key="processPdpCancelsAndPaidJob" value="hardDependency"/>
+				<entry key="assetDepreciationBatchJob" value="hardDependency"/>
 			</map>
 		</property>
 	</bean>
@@ -1638,16 +1624,22 @@
 	    <property name="reportAggregatorService" ref="reportAggregatorService"/>
 	</bean>
 	
-	<bean id="scrubberSortStep" class="org.kuali.kfs.gl.batch.ScrubberSortStep" parent="step">
-		<property name="batchFileDirectoryName" value="${staging.directory}/gl/originEntry"/>
+	<bean id="scrubberSortStep" parent="flatFileSortStep">
+		<property name="inputFileName" value="${staging.directory}/gl/originEntry/gl_prescrub.data"/>
+		<property name="outputFileName" value="${staging.directory}/gl/originEntry/gl_sortscrb.data"/>
+		<property name="lineComparatorClass" value="org.kuali.kfs.gl.batch.ScrubberSortComparator"/>
 	</bean>
 	
-	<bean id="demergerSortStep" class="org.kuali.kfs.gl.batch.DemergerSortStep" parent="step">
-		<property name="batchFileDirectoryName" value="${staging.directory}/gl/originEntry"/>
+	<bean id="demergerSortStep" parent="flatFileSortStep">
+		<property name="inputFileName" value="${staging.directory}/gl/originEntry/gl_scrberr1.data"/>
+		<property name="outputFileName" value="${staging.directory}/gl/originEntry/gl_sorterr1.data"/>
+		<property name="lineComparatorClass" value="org.kuali.kfs.gl.batch.DemergerSortComparator"/>
 	</bean>
 
-	<bean id="posterSortStep" class="org.kuali.kfs.gl.batch.PosterSortStep" parent="step">
-		<property name="batchFileDirectoryName" value="${staging.directory}/gl/originEntry"/>
+	<bean id="posterSortStep" parent="flatFileSortStep">
+		<property name="inputFileName" value="${staging.directory}/gl/originEntry/gl_scrbout2.data"/>
+		<property name="outputFileName" value="${staging.directory}/gl/originEntry/gl_sortpost.data"/>
+		<property name="lineComparatorClass" value="org.kuali.kfs.gl.batch.PosterSortComparator"/>
 	</bean>
 	
 	<bean id="icrSortStep" class="org.kuali.kfs.gl.batch.IcrSortStep" parent="step">
@@ -2807,4 +2799,15 @@
     <bean id="glcpPreScrubberReportWriterService-parentBean" abstract="true"  parent="preScrubberReportWriterService">
 		<property name="fileNamePrefix" value="glcp-scrubberReports-02-preScrubber"/>
     </bean>
+    
+    <bean id="generalLedgerLookupableHelperService-parentBean" abstract="true"  >
+    	<property name="debitDeterminerService">
+			<ref bean="debitDeterminerService" />
+		</property>
+    	<property name="generalLedgerPendingEntryService">
+			<ref bean="generalLedgerPendingEntryService" />
+		</property>
+		
+    </bean>
+    
 </beans>
Index: work/src/org/kuali/kfs/gl/ojb-gl.xml
===================================================================
--- work/src/org/kuali/kfs/gl/ojb-gl.xml	(revision 37217)
+++ work/src/org/kuali/kfs/gl/ojb-gl.xml	(working copy)
@@ -536,7 +536,7 @@
     </reference-descriptor>
 </class-descriptor>
 
-<class-descriptor class="org.kuali.kfs.gl.businessobject.ExpenditureTransaction" table="GL_EXPEND_TRN_T">
+<class-descriptor class="org.kuali.kfs.gl.businessobject.ExpenditureTransaction" table="GL_EXPEND_TRN_MT">
     <field-descriptor name="universityFiscalYear" column="UNIV_FISCAL_YR" jdbc-type="INTEGER" primarykey="true" />
     <field-descriptor name="chartOfAccountsCode" column="FIN_COA_CD" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="accountNumber" column="ACCOUNT_NBR" jdbc-type="VARCHAR" primarykey="true" />
Index: work/src/org/kuali/kfs/gl/Constant.java
===================================================================
--- work/src/org/kuali/kfs/gl/Constant.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/Constant.java	(working copy)
@@ -43,6 +43,14 @@
     public static final String COST_SHARE_OPTION = "dummyBusinessObject.costShareOption";
     public static final String COST_SHARE_EXCLUDE = "Exclude";
     public static final String COST_SHARE_INCLUDE = "Include";
+    
+    public static final String DEBIT_CREDIT_OPTION = "dummyBusinessObject.debitCreditOption";
+    public static final String DEBIT_CREDIT_INCLUDE = "Include";
+    public static final String DEBIT_CREDIT_EXCLUDE = "Exclude";
+    
+    public static final String ZERO_ENCUMBRANCE_OPTION = "dummyBusinessObject.zeroEncumbranceOption";
+    public static final String ZERO_ENCUMBRANCE_INCLUDE = "Include";
+    public static final String ZERO_ENCUMBRANCE_EXCLUDE = "Exclude";
 
     public static final String SUB_ACCOUNT_OPTION = "subAccountNumber";
 
Index: work/src/org/kuali/kfs/gl/GeneralLedgerConstants.java
===================================================================
--- work/src/org/kuali/kfs/gl/GeneralLedgerConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/gl/GeneralLedgerConstants.java	(working copy)
@@ -23,9 +23,11 @@
 import org.kuali.kfs.coa.businessobject.ObjectCode;
 import org.kuali.kfs.gl.batch.CollectorBatch;
 import org.kuali.kfs.gl.businessobject.CollectorDetail;
+import org.kuali.kfs.gl.businessobject.CollectorDetailFieldUtil;
 import org.kuali.kfs.gl.businessobject.OriginEntryFieldUtil;
 import org.kuali.kfs.gl.businessobject.OriginEntryFull;
 import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.businessobject.BusinessObjectStringParserFieldUtils;
 import org.kuali.kfs.sys.businessobject.OriginationCode;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kns.service.DataDictionaryService;
@@ -491,14 +493,9 @@
     
     public static String getSpaceAllCollectorDetailFields() {
         if (SPACE_ALL_COLLECTOR_DETAIL_FIELDS == null) {
-            List<AttributeDefinition> attributes = SpringContext.getBean(DataDictionaryService.class).getDataDictionary().getBusinessObjectEntry(CollectorDetail.class.getName()).getAttributes();
-
-            int totalLength = 0;
-
-            for ( AttributeDefinition attributeDefinition : attributes ) {
-                totalLength += attributeDefinition.getMaxLength();
-            }
-
+            CollectorDetailFieldUtil collectorDetailFieldUtil = new CollectorDetailFieldUtil();
+            int totalLength = collectorDetailFieldUtil .getDetailLineTotalLength();
+            
             SPACE_ALL_COLLECTOR_DETAIL_FIELDS = StringUtils.rightPad("", totalLength, ' ');
         }
 
Index: work/src/org/kuali/kfs/gl/document/datadictionary/GeneralLedgerCorrectionProcessDocument.xml
===================================================================
--- work/src/org/kuali/kfs/gl/document/datadictionary/GeneralLedgerCorrectionProcessDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/gl/document/datadictionary/GeneralLedgerCorrectionProcessDocument.xml	(working copy)
@@ -25,6 +25,7 @@
     
     <property name="documentTypeName" value="GLCP"/>
     <property name="documentClass" value="org.kuali.kfs.gl.document.GeneralLedgerCorrectionProcessDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.gl.document.GeneralLedgerCorrectionProcessDocument"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.gl.document.authorization.CorrectionDocumentAuthorizer"/>
     <property name="workflowAttributes">
  		<ref bean="GeneralLedgerCorrectionProcessDocument-workflowAttributes"/>
Index: work/src/org/kuali/kfs/integration/ld/LaborModuleServiceNoOp.java
===================================================================
--- work/src/org/kuali/kfs/integration/ld/LaborModuleServiceNoOp.java	(revision 37217)
+++ work/src/org/kuali/kfs/integration/ld/LaborModuleServiceNoOp.java	(working copy)
@@ -107,4 +107,14 @@
         return null;
     }
 
+    public List<String> getLaborLedgerGLOriginCodes() {
+        LOG.warn( "Using No-Op " + getClass().getSimpleName() + " service." );
+        return Collections.emptyList();
+    }
+
+    public HtmlData getInquiryUrlForGeneralLedgerEntryDocumentNumber(Entry entry) {
+        LOG.warn( "Using No-Op " + getClass().getSimpleName() + " service." );
+        return null;
+    }
+
 }
Index: work/src/org/kuali/kfs/integration/ld/LaborModuleService.java
===================================================================
--- work/src/org/kuali/kfs/integration/ld/LaborModuleService.java	(revision 37217)
+++ work/src/org/kuali/kfs/integration/ld/LaborModuleService.java	(working copy)
@@ -172,4 +172,18 @@
      * @return true if the position object group exists, false otherwise
      */
     public boolean doesLaborLedgerPositionObjectGroupExist(String positionObjectGroupCode);
+    
+    /**
+     * A list of the origin codes which will appear in GL entries which should be linked to a labor ledger lookup
+     * @return a list of labor ledger oriented origin codes which appear on general ledger entries
+     */
+    public List<String> getLaborLedgerGLOriginCodes();
+    
+    /**
+     * When handed a GeneralLedger, determines and returns the url which will point to the labor ledger entries "inquiry" related to the given entry.
+     * The url will be linked via the document number
+     * @param entry an entry to find a labor ledger inquiry on the document number was
+     * @return the inquiry HtmlData for the given general ledger entry
+     */
+    public HtmlData getInquiryUrlForGeneralLedgerEntryDocumentNumber(Entry entry);
 }
Index: work/src/org/kuali/kfs/integration/spring-integration.xml
===================================================================
--- work/src/org/kuali/kfs/integration/spring-integration.xml	(revision 37217)
+++ work/src/org/kuali/kfs/integration/spring-integration.xml	(working copy)
@@ -74,7 +74,6 @@
         </property>
         <property name="externalizableBusinessObjectImplementations">
             <map>
-                <entry key="org.kuali.kfs.integration.cg.ContractsAndGrantsCfda" value="org.kuali.kfs.integration.cg.businessobject.CFDA" />
                 <entry key="org.kuali.kfs.integration.cg.ContractsAndGrantsAccountAwardInformation" value="org.kuali.kfs.integration.cg.businessobject.AwardAccount" />
                 <entry key="org.kuali.kfs.integration.cg.ContractsAndGrantsAward" value="org.kuali.kfs.integration.cg.businessobject.Award" />
                 <entry key="org.kuali.kfs.integration.cg.ContractAndGrantsProposal" value="org.kuali.kfs.integration.cg.businessobject.Proposal" />
Index: work/src/org/kuali/kfs/integration/cg/businessobject/datadictionary/CFDA.xml
===================================================================
--- work/src/org/kuali/kfs/integration/cg/businessobject/datadictionary/CFDA.xml	(revision 37217)
+++ work/src/org/kuali/kfs/integration/cg/businessobject/datadictionary/CFDA.xml	(working copy)
@@ -1,64 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
-
-  <bean id="Cfda" parent="Cfda-parentBean"/>
-
-  <bean id="Cfda-parentBean" abstract="true" parent="BusinessObjectEntry">
-    <property name="businessObjectClass" value="org.kuali.kfs.integration.cg.businessobject.CFDA"/>
-    <property name="objectLabel" value="CFDA Reference"/>
-    <property name="attributes">
-      <list>
-        <ref bean="CFDA-cfdaMaintenanceTypeId"/>
-        <ref bean="CFDA-cfdaNumber"/>
-        <ref bean="CFDA-cfdaProgramTitleName"/>
-      </list>
-    </property>
-  </bean>
-
-<!-- Attribute Definitions -->
-
-
-  <bean id="CFDA-cfdaMaintenanceTypeId" parent="CFDA-cfdaMaintenanceTypeId-parentBean"/>
-
-  <bean id="CFDA-cfdaMaintenanceTypeId-parentBean" abstract="true" parent="AttributeDefinition">
-    <property name="name" value="cfdaMaintenanceTypeId"/>
-    <property name="label" value="CFDA Maintenance Type Id"/>
-    <property name="shortLabel" value="Id"/>
-    <property name="maxLength" value="10"/>
-    <property name="validationPattern">
-      <ref bean="AnyCharacterValidation" />
-    </property>
-    <property name="control">
-      <bean parent="TextControlDefinition" p:size="8"/>
-    </property>
-  </bean>
-  <bean id="CFDA-cfdaNumber" parent="CFDA-cfdaNumber-parentBean"/>
-
-  <bean id="CFDA-cfdaNumber-parentBean" abstract="true" parent="AttributeDefinition">
-    <property name="name" value="cfdaNumber"/>
-    <property name="forceUppercase" value="true"/>
-    <property name="label" value="CFDA Number"/>
-    <property name="shortLabel" value="Number"/>
-    <property name="maxLength" value="6"/>
-    <property name="validationPattern">
-      <ref bean="AnyCharacterValidation" />
-    </property>
-    <property name="control">
-      <bean parent="TextControlDefinition" p:size="8"/>
-    </property>
-  </bean>
-  <bean id="CFDA-cfdaProgramTitleName" parent="CFDA-cfdaProgramTitleName-parentBean"/>
-
-  <bean id="CFDA-cfdaProgramTitleName-parentBean" abstract="true" parent="AttributeDefinition">
-    <property name="name" value="cfdaProgramTitleName"/>
-    <property name="label" value="CFDA Program Title Name"/>
-    <property name="shortLabel" value="Name"/>
-    <property name="maxLength" value="300"/>
-    <property name="validationPattern">
-      <ref bean="AnyCharacterWithWhitespaceValidation" />
-    </property>
-    <property name="control">
-      <bean parent="TextareaControlDefinition" p:rows="5" p:cols="80"/>
-    </property>
-  </bean>
-  
-</beans>
Index: work/src/org/kuali/kfs/integration/cg/businessobject/CFDA.java
===================================================================
--- work/src/org/kuali/kfs/integration/cg/businessobject/CFDA.java	(revision 37217)
+++ work/src/org/kuali/kfs/integration/cg/businessobject/CFDA.java	(working copy)
@@ -1,95 +0,0 @@
-/*
- * Copyright 2007-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.kuali.kfs.integration.cg.businessobject;
-
-import org.kuali.kfs.integration.cg.ContractsAndGrantsCfda;
-
-/**
- * Instances of this class refer to Catalog of Federal Domestic Assistance codes. Some of these codes are taken directly from a
- * government web-site. Additional codes can be created manually however. Codes can be updated automatically via the CfdaBatchStep.
- */
-public class CFDA implements ContractsAndGrantsCfda {
-
-    private String cfdaNumber;
-    private String cfdaProgramTitleName;
-    private String cfdaMaintenanceTypeId;
-
-    /**
-     * Default constructor.
-     */
-    public CFDA() {
-    }
-
-    /**
-     * Gets the cfdaNumber attribute.
-     * 
-     * @return Returns the cfdaNumber
-     */
-    public String getCfdaNumber() {
-        return cfdaNumber;
-    }
-
-    /**
-     * Sets the cfdaNumber attribute.
-     * 
-     * @param cfdaNumber The cfdaNumber to set.
-     */
-    public void setCfdaNumber(String cfdaNumber) {
-        this.cfdaNumber = cfdaNumber;
-    }
-
-
-    /**
-     * Gets the cfdaProgramTitleName attribute.
-     * 
-     * @return Returns the cfdaProgramTitleName
-     */
-    public String getCfdaProgramTitleName() {
-        return cfdaProgramTitleName;
-    }
-
-    /**
-     * Sets the cfdaProgramTitleName attribute.
-     * 
-     * @param cfdaProgramTitleName The cfdaProgramTitleName to set.
-     */
-    public void setCfdaProgramTitleName(String cfdaProgramTitleName) {
-        this.cfdaProgramTitleName = cfdaProgramTitleName;
-    }
-   
-    /**
-     * Gets the cfdaMaintenanceTypeId attribute.
-     * 
-     * @return Returns the cfdaMaintenanceTypeId
-     */
-    public String getCfdaMaintenanceTypeId() {
-        return cfdaMaintenanceTypeId;
-    }
-
-    /**
-     * Sets the cfdaMaintenanceTypeId attribute.
-     * 
-     * @param cfdaMaintenanceTypeId The cfdaMaintenanceTypeId to set.
-     */
-    public void setCfdaMaintenanceTypeId(String cfdaMaintenanceTypeId) {
-        this.cfdaMaintenanceTypeId = cfdaMaintenanceTypeId;
-    }
-
-    public void prepareForWorkflow() {}
-
-    public void refresh() {}
-}
Index: work/src/org/kuali/kfs/integration/cg/ContractsAndGrantsCfda.java
===================================================================
--- work/src/org/kuali/kfs/integration/cg/ContractsAndGrantsCfda.java	(revision 37217)
+++ work/src/org/kuali/kfs/integration/cg/ContractsAndGrantsCfda.java	(working copy)
@@ -1,41 +0,0 @@
-/*
- * Copyright 2008 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.integration.cg;
-
-import org.kuali.rice.krad.bo.ExternalizableBusinessObject;
-
-public interface ContractsAndGrantsCfda extends ExternalizableBusinessObject {
-    /**
-     * Gets the cfdaNumber attribute.
-     * 
-     * @return Returns the cfdaNumber
-     */
-    public String getCfdaNumber(); 
-    
-    /**
-     * Gets the cfdaProgramTitleName attribute.
-     * 
-     * @return Returns the cfdaProgramTitleName
-     */
-    public String getCfdaProgramTitleName();
-    
-    /**
-     * Gets the cfdaMaintenanceTypeId attribute.
-     * 
-     * @return Returns the cfdaMaintenanceTypeId
-     */
-    public String getCfdaMaintenanceTypeId();
-}
Index: work/src/org/kuali/kfs/pdp/batch/service/impl/ExtractPaymentServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/pdp/batch/service/impl/ExtractPaymentServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/batch/service/impl/ExtractPaymentServiceImpl.java	(working copy)
@@ -16,6 +16,7 @@
 package org.kuali.kfs.pdp.batch.service.impl;
 
 import java.io.BufferedWriter;
+import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.sql.Timestamp;
@@ -28,6 +29,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.pdp.PdpConstants;
 import org.kuali.kfs.pdp.PdpKeyConstants;
 import org.kuali.kfs.pdp.batch.service.ExtractPaymentService;
@@ -157,6 +159,7 @@
             }
 
             writeCloseTag(os, 0, "canceledChecks");
+            createDoneFile(filename);
         }
         catch (IOException ie) {
             LOG.error("extractCanceledChecks() Problem reading file:  " + filename, ie);
@@ -197,6 +200,7 @@
         BufferedWriter os = null;
 
         writeExtractAchFile(extractedStatus, filename, processDate, sdf);
+        createDoneFile(filename);
 
     }
 
@@ -321,6 +325,7 @@
                 }
             }
             writeCloseTag(os, 0, "checks");
+            createDoneFile(filename);
         }
         catch (IOException ie) {
             LOG.error("extractChecks() Problem reading file:  " + filename, ie);
@@ -541,7 +546,32 @@
         }
         writeCloseTag(os, indent, "payee");
     }
+    
+    /**
+     * Creates a '.done' file with the name of the original file.
+     */
+    protected void createDoneFile(String filename) {
+        String doneFileName =  StringUtils.substringBeforeLast(filename,".") + ".done";
+        File doneFile = new File(doneFileName);
+        
+        if (!doneFile.exists()) {
+            boolean doneFileCreated = false;
+            try {
+                doneFileCreated = doneFile.createNewFile();
+            }
+            catch (IOException e) {
+                LOG.error("unable to create done file " + doneFileName, e);
+                throw new RuntimeException("Errors encountered while saving the file: Unable to create .done file " + doneFileName, e);
+            }
 
+            if (!doneFileCreated) {
+                LOG.error("unable to create done file " + doneFileName);
+                throw new RuntimeException("Errors encountered while saving the file: Unable to create .done file " + doneFileName);
+            }
+        }
+    }
+
+
     protected String escapeString(String input) {
         String output = input.replaceAll("\\&", "&amp;");
         output = output.replaceAll("\"", "&quot;");
Index: work/src/org/kuali/kfs/pdp/batch/LoadFederalReserveBankDataStep.java
===================================================================
--- work/src/org/kuali/kfs/pdp/batch/LoadFederalReserveBankDataStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/batch/LoadFederalReserveBankDataStep.java	(working copy)
@@ -44,7 +44,7 @@
     public boolean execute(String jobName, Date jobRunDate) throws InterruptedException {
         LOG.debug("execute() started");
 
-        String filename = getParameterService().getParameterValueAsString(KfsParameterConstants.PRE_DISBURSEMENT_ALL.class, PdpParameterConstants.ACH_BANK_INPUT_FILE);
+        String filename = getParameterService().getParameterValueAsString(KfsParameterConstants.PRE_DISBURSEMENT_BATCH.class, PdpParameterConstants.ACH_BANK_INPUT_FILE);
 
         return achBankService.reloadTable(directoryName + filename);
     }
Index: work/src/org/kuali/kfs/pdp/batch/paymentDigesterRules.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/batch/paymentDigesterRules.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/batch/paymentDigesterRules.xml	(working copy)
@@ -54,6 +54,7 @@
             <call-method-rule pattern="campus_address_ind" methodname="setCampusAddress" paramcount="0" paramtypes="java.lang.Boolean"/>
             <call-method-rule pattern="payment_date" methodname="setPaymentDate" paramcount="0" />
             <call-method-rule pattern="attachment_ind" methodname="setPymtAttachment" paramcount="0" paramtypes="java.lang.Boolean" />
+            <call-method-rule pattern="immediate_ind" methodname="setProcessImmediate" paramcount="0" paramtypes="java.lang.Boolean" />
             <call-method-rule pattern="special_handling_ind" methodname="setPymtSpecialHandling" paramcount="0" paramtypes="java.lang.Boolean" />
             <call-method-rule pattern="taxable_ind" methodname="setTaxablePayment" paramcount="0" paramtypes="java.lang.Boolean" />
             <call-method-rule pattern="nra_ind" methodname="setNraPayment" paramcount="0" paramtypes="java.lang.Boolean" />
Index: work/src/org/kuali/kfs/pdp/businessobject/PaymentFileLoad.java
===================================================================
--- work/src/org/kuali/kfs/pdp/businessobject/PaymentFileLoad.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/businessobject/PaymentFileLoad.java	(working copy)
@@ -37,7 +37,7 @@
     private String chart;
     private String unit;
     private String subUnit;
-    private Timestamp creationDate;
+    protected Timestamp creationDate;
 
     // trailer fields
     private int paymentCount;
Index: work/src/org/kuali/kfs/pdp/businessobject/datadictionary/PaymentDetail.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/businessobject/datadictionary/PaymentDetail.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/businessobject/datadictionary/PaymentDetail.xml	(working copy)
@@ -257,7 +257,6 @@
       <bean parent="TextControlDefinition" p:size="32"/>
     </property>
   </bean>
-  
   <bean id="PaymentDetail-paymentGroup.disbursementDate" parent="PaymentDetail-paymentGroup.disbursementDate-parentBean"/>
 
   <bean id="PaymentDetail-paymentGroup.disbursementDate-parentBean" abstract="true" parent="PaymentGroup-disbursementDate">
@@ -688,6 +687,7 @@
         <bean parent="FieldDefinition" p:attributeName="accountNbr"/>
         <bean parent="FieldDefinition" p:attributeName="subAccountNbr"/>                   		    
         <bean parent="FieldDefinition" p:attributeName="finObjectCode"/>    
+                    <bean parent="FieldDefinition" p:attributeName="finSubObjectCode"/> 
   		 <bean parent="FieldDefinition" p:attributeName="orgReferenceId"/> 
   		 <bean parent="FieldDefinition" p:attributeName="projectCode"/> 
   		 <bean parent="FieldDefinition" p:attributeName="accountNetAmount"/>                                                   
Index: work/src/org/kuali/kfs/pdp/businessobject/datadictionary/PayeeType.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/businessobject/datadictionary/PayeeType.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/businessobject/datadictionary/PayeeType.xml	(working copy)
@@ -19,6 +19,7 @@
 
   <bean id="PayeeType-parentBean" abstract="true" parent="BusinessObjectEntry">
     <property name="businessObjectClass" value="org.kuali.kfs.pdp.businessobject.PayeeType"/>
+    <property name="titleAttribute" value="code"/>    
     <property name="inquiryDefinition">
       <ref bean="PayeeType-inquiryDefinition"/>
     </property>
@@ -30,6 +31,7 @@
       <list>
         <ref bean="PayeeType-code"/>
         <ref bean="PayeeType-name"/>
+        <ref bean="PayeeType-achEligible"/>
       </list>
     </property>
   </bean>
@@ -64,6 +66,14 @@
     </property>
   </bean>
   
+  <bean id="PayeeType-achEligible" parent="GenericAttributes-genericBoolean-parentBean">
+  	<property name="name" value="achEligible"/>
+  	<property name="label" value="ACH Eligible"/>
+  	<property name="shortLabel" value="ACHEligible"/>
+  	<property name="required" value="true"/>
+  </bean>
+  
+  
 <!-- Business Object Inquiry Definition -->
 
 
@@ -86,10 +96,11 @@
       <list>
         <bean parent="FieldDefinition" p:attributeName="code"/>
         <bean parent="FieldDefinition" p:attributeName="name"/>        
+              <bean parent="FieldDefinition" p:attributeName="achEligible"/>
       </list>
     </property>
   </bean>
-  
+
 <!-- Business Object Lookup Definition -->
 
 
@@ -111,13 +122,14 @@
       <list>
         <bean parent="FieldDefinition" p:attributeName="code"/>
         <bean parent="FieldDefinition" p:attributeName="name"/>
-        
+        <bean parent="FieldDefinition" p:attributeName="achEligible"/>
       </list>
     </property>
     <property name="resultFields">
       <list>
         <bean parent="FieldDefinition" p:attributeName="code"/>
         <bean parent="FieldDefinition" p:attributeName="name"/>
+        <bean parent="FieldDefinition" p:attributeName="achEligible"/>
       </list>
     </property>
   </bean>
Index: work/src/org/kuali/kfs/pdp/businessobject/PayeeACHAccount.java
===================================================================
--- work/src/org/kuali/kfs/pdp/businessobject/PayeeACHAccount.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/businessobject/PayeeACHAccount.java	(working copy)
@@ -16,11 +16,14 @@
 package org.kuali.kfs.pdp.businessobject;
 
 import java.util.LinkedHashMap;
+import java.util.List;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.pdp.PdpPropertyConstants;
 import org.kuali.rice.core.api.mo.common.active.MutableInactivatable;
 import org.kuali.rice.core.api.util.type.KualiInteger;
 import org.kuali.rice.krad.bo.PersistableBusinessObjectBase;
+import org.kuali.rice.kns.util.ObjectUtils;
 
 public class PayeeACHAccount extends PersistableBusinessObjectBase implements MutableInactivatable {
 
@@ -104,11 +107,35 @@
 
 
     /**
-     * Gets the payeeName attribute.
+     * Gets the payee's name from KIM or Vendor data, if the payee type is Employee, Entity or Vendor;
+     * otherwise returns the stored field value.
      * 
-     * @return Returns the payeeName
+     * @return Returns the payee name
      */
     public String getPayeeName() {
+        // for Employee, retrieves from Person table by employee ID
+        if (StringUtils.equalsIgnoreCase(payeeIdentifierTypeCode, PayeeIdTypeCodes.EMPLOYEE)) {
+            Person person = SpringContext.getBean(PersonService.class).getPersonByEmployeeId(payeeIdNumber);
+            if (ObjectUtils.isNotNull(person)) 
+                return person.getName();
+            else return null;
+        }
+        // for Entity, retrieve from Entity table by entity ID
+        else if (StringUtils.equalsIgnoreCase(payeeIdentifierTypeCode, PayeeIdTypeCodes.ENTITY)) {
+            KimEntityDefaultInfo entity = SpringContext.getBean(IdentityManagementService.class).getEntityDefaultInfo(payeeIdNumber);
+            if (ObjectUtils.isNotNull(entity)) 
+                return entity.getDefaultName().getFormattedName();
+            else return null;
+        }
+        // for Vendor, retrieves from Vendor table by vendor number
+        else if (StringUtils.equalsIgnoreCase(payeeIdentifierTypeCode, PayeeIdTypeCodes.VENDOR_ID)) {             
+            VendorDetail vendor = SpringContext.getBean(VendorService.class).getVendorDetail(payeeIdNumber);
+            if (ObjectUtils.isNotNull(vendor)) 
+                return vendor.getVendorName();
+            else return null;
+        }
+
+        // otherwise return field value
         return payeeName;
     }
 
@@ -121,18 +148,43 @@
         this.payeeName = payeeName;
     }
 
-
     /**
-     * Gets the payeeEmailAddress attribute.
+     * Gets the payee's email address from KIM data if the payee type is Employee or Entity;
+     * otherwise, returns the stored field value.
      * 
      * @return Returns the payeeEmailAddress
      */
     public String getPayeeEmailAddress() {
+        // for Employee, retrieve from Person table by employee ID
+        if (StringUtils.equalsIgnoreCase(payeeIdentifierTypeCode, PayeeIdTypeCodes.EMPLOYEE)) {
+            Person person = SpringContext.getBean(PersonService.class).getPersonByEmployeeId(payeeIdNumber);
+            if (ObjectUtils.isNotNull(person)) 
+                return person.getEmailAddress();
+            else return null;
+        }
+        // for Entity, retrieve from Entity table by entity ID then from Person table
+        else if (StringUtils.equalsIgnoreCase(payeeIdentifierTypeCode, PayeeIdTypeCodes.ENTITY)) {
+            KimEntityDefaultInfo entity = SpringContext.getBean(IdentityManagementService.class).getEntityDefaultInfo(payeeIdNumber);
+            if (ObjectUtils.isNotNull(entity)) {
+                List<KimPrincipalInfo> principals = entity.getPrincipals();
+                if (principals.size() > 0 && ObjectUtils.isNotNull(principals.get(0))) {                    
+                    String principalId = principals.get(0).getPrincipalId();
+                    Person person = SpringContext.getBean(PersonService.class).getPerson(principalId);
+                    if (ObjectUtils.isNotNull(person)) 
+                        return person.getEmailAddress();
+                    else return null;
+                }
+                else return null;
+            }
+            else return null;
+        }
+        
+        // otherwise returns the field value
         return payeeEmailAddress;
     }
 
     /**
-     * Sets the payeeEmailAddress attribute.
+     * Sets the payeeEmailAddress attribute if the payee is not Employee or Entity.
      * 
      * @param payeeEmailAddress The payeeEmailAddress to set.
      */
Index: work/src/org/kuali/kfs/pdp/businessobject/PayeeType.java
===================================================================
--- work/src/org/kuali/kfs/pdp/businessobject/PayeeType.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/businessobject/PayeeType.java	(working copy)
@@ -23,7 +23,17 @@
  */
 public class PayeeType extends KualiCodeBase {
 
+    private boolean achEligible;
+    
     public PayeeType() {
     }
 
+    public boolean isAchEligible() {
+        return achEligible;
+    }
+
+    public void setAchEligible(boolean achEligible) {
+        this.achEligible = achEligible;
+    }
+    
 }
Index: work/src/org/kuali/kfs/pdp/businessobject/options/PayeeAchIdTypeValuesFinder.java
===================================================================
--- work/src/org/kuali/kfs/pdp/businessobject/options/PayeeAchIdTypeValuesFinder.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/businessobject/options/PayeeAchIdTypeValuesFinder.java	(working copy)
@@ -18,7 +18,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.kuali.kfs.pdp.PdpConstants;
 import org.kuali.kfs.pdp.businessobject.PayeeType;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.core.api.util.ConcreteKeyValue;
@@ -35,9 +34,8 @@
     public List<KeyValue> getKeyValues() {
         List<PayeeType> boList = (List) SpringContext.getBean(KeyValuesService.class).findAll(PayeeType.class);
         List<KeyValue> keyValues = new ArrayList<KeyValue>();
-        keyValues.add(new ConcreteKeyValue("", ""));
         for (PayeeType element : boList) {
-            if (PdpConstants.PayeeIdTypeCodes.VENDOR_ID.equals(element.getCode()) || PdpConstants.PayeeIdTypeCodes.EMPLOYEE.equals(element.getCode()) || PdpConstants.PayeeIdTypeCodes.ENTITY.equals(element.getCode())) {
+            if (element.isAchEligible()) {
                 keyValues.add(new ConcreteKeyValue(element.getCode(), element.getName()));
             }
         }
Index: work/src/org/kuali/kfs/pdp/spring-pdp.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/spring-pdp.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/spring-pdp.xml	(working copy)
@@ -55,6 +55,7 @@
 		<property name="jobNames">
 			<list>
 				<value>pdpLoadFederalReserveBankDataJob</value>
+				<value>pdpInactivatePayeeAchAccountsJob</value>
 				<value>pdpExtractGlTransactionsStepJob</value>
 				<value>pdpExtractAchPaymentsJob</value>
 				<value>pdpExtractCanceledChecksJob</value>
@@ -69,6 +70,7 @@
 		</property>
 		<property name="triggerNames">
 			<list>
+				<value>pdpInactivatePayeeAchAccountsJobTrigger</value>
 				<value>pdpLoadPaymentsJobTrigger</value>
 				<value>pdpExtractAchPaymentsJobTrigger</value>
 				<value>pdpExtractCanceledChecksJobTrigger</value>
@@ -112,6 +114,11 @@
 				<ref bean="pdpLoadPaymentsStep" />
 			</list>
 		</property>
+		<property name="dependencies">
+			<map>
+				<entry key="purchasingPreDisbursementImmediatesExtractJob" value="softDependency"/>
+			</map>
+		</property>
 	</bean>
 	
 	<bean id="pdpLoadPaymentsJobTrigger" parent="cronTrigger">
@@ -146,14 +153,28 @@
 		</property>
 	</bean>
 
-	<bean id="pdpLoadFederalReserveBankDataJob" parent="unscheduledJobDescriptor">
+	<bean id="pdpLoadFederalReserveBankDataJob" parent="scheduledJobDescriptor">
 		<property name="steps">
 			<list>
+				<ref bean="pdpDownloadFederalReserveBankFileStep" />
 				<ref bean="pdpLoadFederalReserveBankDataStep" />
 			</list>
 		</property>
 	</bean>
+	
+	<bean id="pdpInactivatePayeeAchAccountsJobTrigger" parent="cronTrigger">
+		<property name="jobName" value="pdpInactivatePayeeAchAccountsJob" />
+		<property name="cronExpression" value="00 00 23 ? * THU" />
+	</bean>
 
+	<bean id="pdpInactivatePayeeAchAccountsJob" parent="scheduledJobDescriptor">
+		<property name="steps">
+			<list>
+				<ref bean="pdpInactivatePayeeAchAccountsStep" />
+			</list>
+		</property>
+	</bean>
+
 	<bean id="pdpExtractGlTransactionsStepJob" parent="scheduledJobDescriptor">
 		<property name="steps">
 			<list>
@@ -205,6 +226,7 @@
 		<property name="dependencies">
 			<map>
 				<entry key="pdpExtractGlTransactionsStepJob" value="softDependency"/>
+				<entry key="posterJob" value="hardDependency"/>
 			</map>
 		</property>
 	</bean>
@@ -240,11 +262,24 @@
 		<property name="dailyReportService" ref="pdpDailyReportService"/>
 	</bean>
 
+	<bean id="pdpDownloadFederalReserveBankFileStep" class="org.kuali.kfs.pdp.batch.DownLoadFileViaHttpsStep" parent="step">
+		<property name="targetDirectoryPath" value="${staging.directory}/pdp/bankFederalReserve/" />
+	</bean>
+
 	<bean id="pdpLoadFederalReserveBankDataStep" class="org.kuali.kfs.pdp.batch.LoadFederalReserveBankDataStep" parent="step">
 		<property name="achBankService" ref="pdpAchBankService"/>
 		<property name="directoryName" value="${staging.directory}/pdp/bankFederalReserve/" />
 	</bean>
 
+	<bean id="pdpInactivatePayeeAchAccountsStep" class="org.kuali.kfs.pdp.batch.InactivatePayeeAchAccountsStep" parent="wrappedStep">
+		<property name="wrappingBatchServices">
+			<list>
+				<ref bean="pdpInactivatedPayeeAchAccountsReportWriterService" />
+			</list>
+		</property>    	
+    	<property name="inactivatePayeeAchAccountsService" ref="pdpInactivatePayeeAchAccountsService"/>	
+	</bean>
+
 	<bean id="pdpExtractGlTransactionsStep" class="org.kuali.kfs.pdp.batch.ExtractGlTransactionsStep" parent="wrappedStep">
 		<property name="wrappingBatchServices">
 			<list>
@@ -275,7 +310,7 @@
 	</bean>
 	<bean id="pdpDailyReportService" parent="pdpDailyReportService-parentBean"/>
 
-	<bean id="pdpDailyReportService-parentBean" class="org.kuali.kfs.pdp.batch.service.impl.DailyReportServiceImpl" abstract="true">
+	<bean id="pdpDailyReportService" class="org.kuali.kfs.pdp.batch.service.impl.DailyReportServiceImpl">
 		<property name="directoryName" value="${reports.directory}/pdp/"/>
 		<property name="dateTimeService" ref="dateTimeService"/>
 		<property name="paymentDetailDao" ref="pdpPaymentDetailDao"/>
@@ -407,7 +442,8 @@
 		<property name="documentTypeService" ref="rice.kew.documentTypeService" />
 	</bean>
 	
-	<bean id="paymentInputFileType" class="org.kuali.kfs.pdp.batch.PaymentInputFileType">
+	<bean id="paymentInputFileType" parent="paymentInputFileType-parentBean"/>
+	<bean id="paymentInputFileType-parentBean" class="org.kuali.kfs.pdp.batch.PaymentInputFileType">
     	<property name="directoryPath">
 	       <value>${staging.directory}/pdp/paymentImport</value>
 	    </property>
@@ -595,6 +631,14 @@
     <bean id="pdpAuthorizationService-parentBean" class="org.kuali.kfs.pdp.service.impl.PdpAuthorizationServiceImpl" abstract="true" />
 
     <bean id="pdpExtractGlTransactionsReportWriterService" parent="pdpExtractGlTransactionsReportWriterService-parentBean"/>
+    <bean id="payeeACHAccountRoleTypeService" class="org.kuali.kfs.pdp.identity.PayeeACHAccountRoleTypeServiceImpl"/>
+    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
+	  <property name="serviceDefinition">
+	    <bean parent="kfsService"
+	      p:service-ref="payeeACHAccountRoleTypeService"
+	      p:localServiceName="payeeACHAccountRoleTypeService" />
+	  </property>
+	</bean>
 	<bean id="pdpExtractGlTransactionsReportWriterService-parentBean" parent="reportWriterService" abstract="true">
 		<property name="filePath" value="${reports.directory}/pdp"/>
 		<property name="fileNamePrefix" value="pdp_ledger_"/>
@@ -607,6 +651,32 @@
         	</map>
         </property>
 	</bean>
+	<bean id="pdpInactivatedPayeeAchAccountsReportWriterService" parent="reportWriterService">
+		<property name="filePath" value="${reports.directory}/pdp"/>
+		<property name="fileNamePrefix" value="pdp_payee_ach_account_"/>
+        <property name="title" value="Inactivated Payee ACH Accounts"/>
+        <property name="classToBusinessObjectReportHelperBeanNames">
+        	<map>
+        		<entry key="org.kuali.kfs.pdp.businessobject.PayeeACHAccount" value="pdpInactivatedPayeeAchAccountsReportHelper" />
+        	</map>
+        </property>
+	</bean>
+	
+	<bean id="pdpInactivatedPayeeAchAccountsReportHelper" parent="businessObjectReportHelper">
+		<property name="dataDictionaryBusinessObjectClass" value="org.kuali.kfs.pdp.businessobject.PayeeACHAccount" />
+		<property name="orderedPropertyNameToHeaderLabelMap">
+			<map>
+				<entry key="payeeIdentifierTypeCode" value="Payee ID Type" />
+				<entry key="payeeIdNumber" value="Payee ID Number" />
+				<entry key="achTransactionType" value="Transaction Type" />
+				<entry key="payeeName" value="Payee Name" />
+				<entry key="payeeEmailAddress" value="Payee Email Address" />
+			</map>
+		</property>
+		<property name="columnCount" value="5" />
+	</bean>			
+
+
 	<import resource="spring-pdp-bus-exports.xml"/>
 </beans>
 
Index: work/src/org/kuali/kfs/pdp/ojb-pdp.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/ojb-pdp.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/ojb-pdp.xml	(working copy)
@@ -593,6 +593,7 @@
   <class-descriptor class="org.kuali.kfs.pdp.businessobject.PayeeType" table="PDP_PAYEE_TYP_T">
     <field-descriptor name="code" column="PAYEE_TYP_CD" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="name" column="PAYEE_TYP_DESC" jdbc-type="VARCHAR" />
+    <field-descriptor name="achEligible" column="ACH_ELGBL_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
     <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true"/>
   </class-descriptor>
Index: work/src/org/kuali/kfs/pdp/service/AchService.java
===================================================================
--- work/src/org/kuali/kfs/pdp/service/AchService.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/service/AchService.java	(working copy)
@@ -15,6 +15,8 @@
  */
 package org.kuali.kfs.pdp.service;
 
+import java.util.List;
+
 import org.kuali.kfs.pdp.businessobject.PayeeACHAccount;
 
 /**
@@ -31,4 +33,11 @@
      * @return PayeeAchAccount
      */
     public PayeeACHAccount getAchInformation(String idType, String payeeId, String achTransactionType);
+    
+    /**   
+     * Gets all active PayeeAchAccounts.
+     * @return all active PayeeAchAccounts.
+     */
+    public List<PayeeACHAccount> getActiveAchAccounts();
+    
 }
Index: work/src/org/kuali/kfs/pdp/service/PdpEmailService.java
===================================================================
--- work/src/org/kuali/kfs/pdp/service/PdpEmailService.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/service/PdpEmailService.java	(working copy)
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
 import org.kuali.kfs.pdp.businessobject.Batch;
 import org.kuali.kfs.pdp.businessobject.CustomerProfile;
 import org.kuali.kfs.pdp.businessobject.PaymentDetail;
@@ -106,4 +107,11 @@
      * @return true if email should be sent, false otherwise
      */
     public boolean isPaymentEmailEnabled() ;
+    
+    /**
+     * Sends notification e-mail that an immediate extract Disbursement Voucher has been extracted
+     * @param disbursementVoucher the disbursement voucher which was immediately extracted
+     * @param user the current extracting user
+     */
+    public void sendDisbursementVoucherImmediateExtractEmail(DisbursementVoucherDocument disbursementVoucher, Person user);
 }
Index: work/src/org/kuali/kfs/pdp/service/impl/FormatServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/pdp/service/impl/FormatServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/service/impl/FormatServiceImpl.java	(working copy)
@@ -75,19 +75,19 @@
 public class FormatServiceImpl implements FormatService {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(FormatServiceImpl.class);
 
-    private PaymentDetailDao paymentDetailDao;
-    private PaymentGroupDao paymentGroupDao;
-    private ProcessDao processDao;
-    private AchService achService;
-    private PendingTransactionService glPendingTransactionService;
-    private ParameterService parameterService;
-    private FormatPaymentDao formatPaymentDao;
-    private SchedulerService schedulerService;
-    private BusinessObjectService businessObjectService;
-    private PaymentGroupService paymentGroupService;
-    private DateTimeService dateTimeService;
-    private ExtractPaymentService extractPaymentService;
-    private PersonService personService;
+    protected PaymentDetailDao paymentDetailDao;
+    protected PaymentGroupDao paymentGroupDao;
+    protected ProcessDao processDao;
+    protected AchService achService;
+    protected PendingTransactionService glPendingTransactionService;
+    protected ParameterService parameterService;
+    protected FormatPaymentDao formatPaymentDao;
+    protected SchedulerService schedulerService;
+    protected BusinessObjectService businessObjectService;
+    protected PaymentGroupService paymentGroupService;
+    protected DateTimeService dateTimeService;
+    protected ExtractPaymentService extractPaymentService;
+    protected PersonService<Person> personService;
 
     /**
      * Constructs a FormatServiceImpl.java.
@@ -97,7 +97,7 @@
     }
 
     /**
-     * @see org.kuali.kfs.pdp.service.FormatProcessService#getDataForFormat(org.kuali.rice.kim.api.identity.Person)
+     * @see org.kuali.kfs.pdp.service.FormatProcessService#getDataForFormat(org.kuali.rice.kim.bo.Person)
      */
     public FormatSelection getDataForFormat(Person user) {
 
@@ -140,7 +140,7 @@
     }
 
     /**
-     * @see org.kuali.kfs.pdp.service.FormatService#startFormatProcess(org.kuali.rice.kim.api.identity.Person, java.lang.String,
+     * @see org.kuali.kfs.pdp.service.FormatService#startFormatProcess(org.kuali.rice.kim.bo.Person, java.lang.String,
      *      java.util.List, java.util.Date, java.lang.String)
      */
     public FormatProcessSummary startFormatProcess(Person user, String campus, List<CustomerProfile> customers, Date paydate, String paymentTypes) {
Index: work/src/org/kuali/kfs/pdp/service/impl/AchServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/pdp/service/impl/AchServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/service/impl/AchServiceImpl.java	(working copy)
@@ -15,8 +15,10 @@
  */
 package org.kuali.kfs.pdp.service.impl;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 import org.kuali.kfs.pdp.PdpPropertyConstants;
@@ -62,6 +64,19 @@
     }
 
     /**
+     * @see org.kuali.kfs.pdp.service.AchService#getActiveAchAccounts()
+     */
+    public List<PayeeACHAccount> getActiveAchAccounts() {
+        LOG.debug("getActivePayeeAchAccounts() started");
+
+        Map<String, Object> fields = new HashMap<String, Object>();
+        fields.put(KFSPropertyConstants.ACTIVE, Boolean.TRUE);
+        Collection<PayeeACHAccount> accounts = businessObjectService.findMatchingOrderBy(PayeeACHAccount.class, fields, PdpPropertyConstants.PAYEE_IDENTIFIER_TYPE_CODE, true);
+        
+        return new ArrayList<PayeeACHAccount>(accounts);
+    }
+    
+    /**
      * Sets the businessObjectService attribute value.
      * 
      * @param businessObjectService The businessObjectService to set.
Index: work/src/org/kuali/kfs/pdp/service/impl/PdpEmailServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/pdp/service/impl/PdpEmailServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/service/impl/PdpEmailServiceImpl.java	(working copy)
@@ -25,11 +25,14 @@
 import java.util.Map;
 
 import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
+import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
 import org.kuali.kfs.pdp.PdpKeyConstants;
 import org.kuali.kfs.pdp.PdpParameterConstants;
 import org.kuali.kfs.pdp.PdpPropertyConstants;
 import org.kuali.kfs.pdp.batch.ExtractAchPaymentsStep;
 import org.kuali.kfs.pdp.batch.LoadPaymentsStep;
+import org.kuali.kfs.pdp.batch.SendAchAdviceNotificationsStep;
 import org.kuali.kfs.pdp.businessobject.ACHBank;
 import org.kuali.kfs.pdp.businessobject.Batch;
 import org.kuali.kfs.pdp.businessobject.CustomerProfile;
@@ -41,6 +44,7 @@
 import org.kuali.kfs.pdp.service.CustomerProfileService;
 import org.kuali.kfs.pdp.service.PdpEmailService;
 import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.service.impl.KfsParameterConstants;
 import org.kuali.rice.core.api.config.property.ConfigContext;
@@ -71,7 +75,7 @@
 
     /**
      * @see org.kuali.kfs.pdp.service.PdpEmailService#sendErrorEmail(org.kuali.kfs.pdp.businessobject.PaymentFileLoad,
-     *      org.kuali.rice.krad.util.MessageMap)
+     *      org.kuali.rice.kns.util.ErrorMap)
      */
     public void sendErrorEmail(PaymentFileLoad paymentFile, MessageMap errors) {
         LOG.debug("sendErrorEmail() starting");
@@ -82,8 +86,12 @@
         }
 
         MailMessage message = new MailMessage();
-
-        message.setFromAddress(mailService.getBatchMailingList());
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
         message.setSubject(getEmailSubject(PdpParameterConstants.PAYMENT_LOAD_FAILURE_EMAIL_SUBJECT_PARAMETER_NAME));
 
         StringBuilder body = new StringBuilder();
@@ -146,7 +154,7 @@
             LOG.error("sendErrorEmail() Invalid email address.  Message not sent", e);
         }
     }
-    
+
     /**
      * KFSMI-6475 - Alter the subject and switch all recipients
      * 
@@ -190,8 +198,12 @@
         }
 
         MailMessage message = new MailMessage();
-
-        message.setFromAddress(mailService.getBatchMailingList());
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
         message.setSubject(getEmailSubject(PdpParameterConstants.PAYMENT_LOAD_SUCCESS_EMAIL_SUBJECT_PARAMETER_NAME));
 
         List<String> ccAddresses = new ArrayList<String>( parameterService.getParameterValuesAsString(LoadPaymentsStep.class, PdpParameterConstants.HARD_EDIT_CC) );
@@ -243,8 +255,12 @@
      */
     protected void sendThresholdEmail(boolean fileThreshold, PaymentFileLoad paymentFile, CustomerProfile customer) {
         MailMessage message = new MailMessage();
-
-        message.setFromAddress(mailService.getBatchMailingList());
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
         message.setSubject(getEmailSubject(PdpParameterConstants.PAYMENT_LOAD_THRESHOLD_EMAIL_SUBJECT_PARAMETER_NAME));
 
         StringBuilder body = new StringBuilder();
@@ -296,8 +312,12 @@
         LOG.debug("sendTaxEmail() starting");
 
         MailMessage message = new MailMessage();
-
-        message.setFromAddress(mailService.getBatchMailingList());
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
         message.setSubject(getEmailSubject(PdpParameterConstants.PAYMENT_LOAD_TAX_EMAIL_SUBJECT_PARAMETER_NAME));
 
         StringBuilder body = new StringBuilder();
@@ -344,8 +364,12 @@
         }
 
         MailMessage message = new MailMessage();
-
-        message.setFromAddress(mailService.getBatchMailingList());
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
         message.setSubject(getEmailSubject(PdpParameterConstants.PAYMENT_LOAD_SUCCESS_EMAIL_SUBJECT_PARAMETER_NAME));
 
         StringBuilder body = new StringBuilder();
@@ -388,12 +412,22 @@
         }
 
         MailMessage message = new MailMessage();
-        message.setFromAddress(mailService.getBatchMailingList());
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
 
         StringBuilder body = new StringBuilder();
 
-        String environmentCode = kualiConfigurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY);
-        message.setSubject(getMessage(PdpKeyConstants.MESSAGE_PURAP_EXTRACT_MAX_NOTES_SUBJECT));
+        String productionEnvironmentCode = kualiConfigurationService.getPropertyAsString(KFSConstants.PROD_ENVIRONMENT_CODE_KEY);
+        String environmentCode = kualiConfigurationService.getPropertyAsString(KFSConstants.ENVIRONMENT_KEY);
+        if (StringUtils.equals(productionEnvironmentCode, environmentCode)) {
+            message.setSubject(getMessage(PdpKeyConstants.MESSAGE_PURAP_EXTRACT_MAX_NOTES_SUBJECT));
+        }
+        else {
+            message.setSubject(environmentCode + "-" + getMessage(PdpKeyConstants.MESSAGE_PURAP_EXTRACT_MAX_NOTES_SUBJECT));
+        }
 
         // Get recipient email address
         String toAddresses = parameterService.getParameterValueAsString(KfsParameterConstants.PRE_DISBURSEMENT_ALL.class, PdpParameterConstants.PDP_ERROR_EXCEEDS_NOTE_LIMIT_EMAIL);
@@ -432,9 +466,13 @@
         message.getToAddresses().addAll(toAddressList);
         message.getCcAddresses().addAll(toAddressList);
         message.getBccAddresses().addAll(toAddressList);
+        
+        String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+        if(StringUtils.isEmpty(returnAddress)) {
+            returnAddress = mailService.getBatchMailingList();
+        }
+        message.setFromAddress(returnAddress);
 
-        message.setFromAddress(mailService.getBatchMailingList());
-
         String subject = parameterService.getParameterValueAsString(ExtractAchPaymentsStep.class, PdpParameterConstants.ACH_SUMMARY_EMAIL_SUBJECT_PARAMETER_NAME);
         message.setSubject(subject);
 
@@ -475,12 +513,20 @@
 
         MailMessage message = new MailMessage();
 
-        message.addToAddress(paymentGroup.getAdviceEmailAddress());
-        message.addCcAddress(paymentGroup.getAdviceEmailAddress());
-        message.addBccAddress(paymentGroup.getAdviceEmailAddress());
-        message.setFromAddress(customer.getAdviceReturnEmailAddr());
-        message.setSubject(customer.getAdviceSubjectLine());
-
+        String productionEnvironmentCode = kualiConfigurationService.getPropertyAsString(KFSConstants.PROD_ENVIRONMENT_CODE_KEY);
+        String environmentCode = kualiConfigurationService.getPropertyAsString(KFSConstants.ENVIRONMENT_KEY);
+        if (StringUtils.equals(productionEnvironmentCode, environmentCode)) {
+            message.addToAddress(paymentGroup.getAdviceEmailAddress());
+            message.addCcAddress(paymentGroup.getAdviceEmailAddress());
+            message.addBccAddress(paymentGroup.getAdviceEmailAddress());
+            message.setFromAddress(customer.getAdviceReturnEmailAddr());
+            message.setSubject(customer.getAdviceSubjectLine());
+        }
+        else {
+            message.addToAddress(mailService.getBatchMailingList());
+            message.addCcAddress(mailService.getBatchMailingList());
+            message.addBccAddress(mailService.getBatchMailingList());
+        }
         if (LOG.isDebugEnabled()) {
             LOG.debug("sending email to " + paymentGroup.getAdviceEmailAddress() + " for disb # " + paymentGroup.getDisbursementNbr());
         }
@@ -582,7 +628,11 @@
             // send notification to advice return address with payment details
             message.addToAddress(customer.getAdviceReturnEmailAddr());
             
-            message.setFromAddress(mailService.getBatchMailingList());
+            String returnAddress = parameterService.getParameterValue(KFSConstants.ParameterNamespaces.PDP, "Batch", KFSConstants.FROM_EMAIL_ADDRESS_PARM_NM);
+            if(StringUtils.isEmpty(returnAddress)) {
+                returnAddress = mailService.getBatchMailingList();
+            }
+            message.setFromAddress(returnAddress);
             message.setSubject(getMessage(PdpKeyConstants.MESSAGE_PDP_ACH_ADVICE_INVALID_EMAIL_ADDRESS));
 
             LOG.warn("bouncing email to " + customer.getAdviceReturnEmailAddr() + " for disb # " + paymentGroup.getDisbursementNbr());
@@ -601,15 +651,13 @@
     
     /**
      * 
-     * @see org.kuali.kfs.pdp.service.PdpEmailService#sendCancelEmail(org.kuali.kfs.pdp.businessobject.PaymentGroup, java.lang.String, org.kuali.rice.kim.api.identity.Person)
+     * @see org.kuali.kfs.pdp.service.PdpEmailService#sendCancelEmail(org.kuali.kfs.pdp.businessobject.PaymentGroup, java.lang.String, org.kuali.rice.kim.bo.Person)
      */
     public void sendCancelEmail(PaymentGroup paymentGroup, String note, Person user) {
         LOG.debug("sendCancelEmail() starting");
 
         MailMessage message = new MailMessage();
         
-        String environmentCode = kualiConfigurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY);
-        
         message.setSubject("PDP --- Cancelled Payment by Tax");
 
         CustomerProfile cp = paymentGroup.getBatch().getCustomerProfile();
@@ -745,6 +793,34 @@
     }
 
     /**
+     * Sends notification e-mail that an immediate extract Disbursement Voucher has been extracted
+     * @param disbursementVoucher the disbursement voucher which was immediately extracted
+     * @param user the current extracting user
+     */
+    public void sendDisbursementVoucherImmediateExtractEmail(DisbursementVoucherDocument disbursementVoucher, Person user) {
+        MailMessage message = new MailMessage();
+        
+        final String fromAddress = parameterService.getParameterValue(DisbursementVoucherDocument.class, DisbursementVoucherConstants.IMMEDIATE_EXTRACT_FROM_ADDRESS_PARM_NM);
+        final List<String> toAddresses = parameterService.getParameterValues(DisbursementVoucherDocument.class, DisbursementVoucherConstants.IMMEDIATE_EXTRACT_TO_ADDRESSES_PARM_NM);
+        final String disbursementVoucherDocumentLabel = dataDictionaryService.getDocumentLabelByTypeName(DisbursementVoucherConstants.DOCUMENT_TYPE_CODE);
+        final String subject = getMessage(KFSKeyConstants.MESSAGE_DV_IMMEDIATE_EXTRACT_EMAIL_SUBJECT, disbursementVoucherDocumentLabel, disbursementVoucher.getCampusCode());
+        final String body = getMessage(KFSKeyConstants.MESSAGE_DV_IMMEDIATE_EXTRACT_EMAIL_BODY, disbursementVoucherDocumentLabel, disbursementVoucher.getCampusCode(), disbursementVoucher.getDocumentNumber());
+        
+        message.setFromAddress(fromAddress);
+        for (String toAddress : toAddresses) {
+            message.addToAddress(toAddress);
+        }
+        message.setSubject(subject);
+        message.setMessage(body);
+        try {
+            mailService.sendMessage(message);
+        }
+        catch (InvalidAddressException e) {
+            LOG.error("sendErrorEmail() Invalid email address. Message not sent", e);
+        }
+    }
+
+    /**
      * Reads system parameter indicating whether to status emails should be sent
      * 
      * @return true if email should be sent, false otherwise
Index: work/src/org/kuali/kfs/pdp/PdpConstants.java
===================================================================
--- work/src/org/kuali/kfs/pdp/PdpConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/PdpConstants.java	(working copy)
@@ -33,6 +33,7 @@
     public static final String ACH_BANK_DATA_VIEW_CODE_DEFAULT = "1";
     public static final String ACH_BANK_INSTITUTION_CODE_DEFAULT = "1";
     public static final String PDP_CUST_ID_SEQUENCE_NAME = "PDP_CUST_ID_SEQ";
+    public static final String SECURE_SOCKET_PROTOCOL = "SSL";
     
     public static final int CHECK_NUMBER_PLACEHOLDER_VALUE = -1;
 
Index: work/src/org/kuali/kfs/pdp/PdpParameterConstants.java
===================================================================
--- work/src/org/kuali/kfs/pdp/PdpParameterConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/PdpParameterConstants.java	(working copy)
@@ -26,6 +26,7 @@
     public static final String PAYMENT_LOAD_TAX_EMAIL_SUBJECT_PARAMETER_NAME = "TAX_EMAIL_SUBJECT";
     public static final String ACH_SUMMARY_EMAIL_SUBJECT_PARAMETER_NAME = "ACH_SUMMARY_EMAIL_SUBJECT";
     public static final String ACH_SUMMARY_TO_EMAIL_ADDRESS_PARMAETER_NAME = "ACH_SUMMARY_TO_EMAIL_ADDRESSES";
+    public static final String ACH_SUMMARY_CC_EMAIL_ADDRESSES_PARMAETER_NAME = "ACH_SUMMARY_CC_EMAIL_ADDRESSES";
     public static final String CORPORATION_OWNERSHIP_TYPE_PARAMETER_NAME  = "CORPORATION_OWNERSHIP_TYPE";
     public static final String TAXABLE_PAYMENT_REASON_CODES_BY_OWNERSHIP_CODES_PARAMETER_NAME = "TAXABLE_PAYMENT_REASON_CODES_BY_OWNERSHIP_CODES";
     public static final String NON_TAXABLE_PAYMENT_REASON_CODES_BY_OWNERSHIP_CODES_PARAMETER_NAME = "NON_TAXABLE_PAYMENT_REASON_CODES_BY_OWNERSHIP_CODES";
@@ -33,6 +34,7 @@
     public static final String TAXABLE_PAYMENT_REASON_CODES_BY_CORPORATION_OWNERSHIP_TYPE_CATEGORY_PARAMETER_NAME = "TAXABLE_PAYMENT_REASON_CODES_BY_CORPORATION_OWNERSHIP_TYPE_CATEGORY";
     public static final String NON_TAXABLE_PAYMENT_REASON_CODES_BY_CORPORATION_OWNERSHIP_TYPE_CATEGORY_PARAMETER_NAME = "NON_TAXABLE_PAYMENT_REASON_CODES_BY_CORPORATION_OWNERSHIP_TYPE_CATEGORY";
     
+    public static String FEDERAL_ACH_BANK_FILE_URL = "FEDERAL_ACH_BANK_FILE_URL";
     public static String ACH_BANK_INPUT_FILE = "ACH_BANK_INPUT_FILE";
     
     public static String HARD_EDIT_CC = "HARD_EDIT_TO_EMAIL_ADDRESSES";
Index: work/src/org/kuali/kfs/pdp/PdpPropertyConstants.java
===================================================================
--- work/src/org/kuali/kfs/pdp/PdpPropertyConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/PdpPropertyConstants.java	(working copy)
@@ -45,9 +45,9 @@
     
     public static final String PAYEE_IDENTIFIER_TYPE_CODE = "payeeIdentifierTypeCode";
     public static final String PAYEE_ID_NUMBER = "payeeIdNumber";
+    public static final String PAYEE_NAME = "payeeName";
+    public static final String PAYEE_EMAIL_ADDRESS = "payeeEmailAddress";
     public static final String ACH_TRANSACTION_TYPE = "achTransactionType";
-    public static final String PAYEE_SOCIAL_SECURITY_NUMBER = "payeeSocialSecurityNumber";
-    public static final String PAYEE_FEDERAL_EMPLOYER_IDENTIFICATION_NUMBER = "payeeFederalEmployerIdentificationNumber";
     public static final String PAYEE_CODE = "code";
     
     public static final String CHART_DB_COLUMN_NAME = "fin_coa_cd";
@@ -63,7 +63,6 @@
     public static final String PHYS_CAMPUS_PROCESS_CODE = "physicalCampusProcessCode";
     public static final String BEGIN_DISBURSEMENT_NBR = "beginDisbursementNbr";
     public static final String END_DISBURSEMENT_NBR = "endDisbursementNbr";
-    public static final String PAYEE_NAME = "payeeName";
     public static final String PAYMENT_GROUP = "paymentGroup";
     public static final String PAYMENT_GROUP_HISTORY = "paymentGroupHistory";
     public static final String PROCESS_IND = "processInd";
Index: work/src/org/kuali/kfs/pdp/dwr-pdp.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/dwr-pdp.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/dwr-pdp.xml	(working copy)
@@ -24,7 +24,7 @@
 	    	<param name="beanName" value="pdpAchBankService" />
 	    	<include method="getByPrimaryId" />
 	    </create>
-        <convert converter="bean" match="org.kuali.kfs.pdp.businessobject.AchBank">
+        <convert converter="bean" match="org.kuali.kfs.pdp.businessobject.ACHBank">
             <param name="include" value="bankName" />
         </convert>
     </allow>
Index: work/src/org/kuali/kfs/pdp/document/datadictionary/PayeeTypeMaintenanceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/document/datadictionary/PayeeTypeMaintenanceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/document/datadictionary/PayeeTypeMaintenanceDocument.xml	(working copy)
@@ -32,9 +32,6 @@
       </list>
     </property>
     
-    
-    
-    
     <property name="documentTypeName" value="PYTP"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.FinancialSystemMaintenanceDocumentAuthorizerBase"/>
     <property name="allowsNewOrCopy" value="false"/>
@@ -55,6 +52,7 @@
       <list>
         <bean parent="MaintainableFieldDefinition" p:name="code" p:required="true"/>
         <bean parent="MaintainableFieldDefinition" p:name="name" p:required="true"/>
+        <bean parent="MaintainableFieldDefinition" p:name="achEligible" p:required="true"/>
       </list>
     </property>
   </bean>
Index: work/src/org/kuali/kfs/pdp/document/datadictionary/PayeeACHAccountMaintenanceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/pdp/document/datadictionary/PayeeACHAccountMaintenanceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/pdp/document/datadictionary/PayeeACHAccountMaintenanceDocument.xml	(working copy)
@@ -20,6 +20,10 @@
   <bean id="PayeeACHAccountMaintenanceDocument-parentBean" abstract="true" parent="MaintenanceDocumentEntry">
     <property name="businessObjectClass" value="org.kuali.kfs.pdp.businessobject.PayeeACHAccount"/>
     <property name="maintainableClass" value="org.kuali.kfs.sys.document.FinancialSystemMaintainable"/>
+    <property name="documentTypeName" value="PAAT"/>
+    <property name="businessRulesClass" value="org.kuali.kfs.pdp.document.validation.impl.PayeeAchAccountRule"/>
+    <property name="documentPresentationControllerClass" value="org.kuali.kfs.pdp.document.authorization.PayeeACHAccountMaintenanceDocumentPresentationController"/>        
+    <property name="documentAuthorizerClass" value="org.kuali.kfs.pdp.document.authorization.PayeeACHAccountMaintenanceDocumentAuthorizer"/>        
     <property name="encryptDocumentDataInPersistentSessionStorage" value="true"/>
     <property name="maintainableSections">
       <list>
@@ -35,13 +39,14 @@
     <property name="lockingKeys">
       <list>
         <value>achAccountGeneratedIdentifier</value>
+        <value>payeeIdentifierTypeCode</value>
+        <value>payeeIdNumber</value>
+        <value>achTransactionType</value>
       </list>
     </property>
-    <property name="documentTypeName" value="PAAT"/>
-    <property name="businessRulesClass" value="org.kuali.kfs.pdp.document.validation.impl.PayeeAchAccountRule"/>
-    <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.FinancialSystemMaintenanceDocumentAuthorizerBase"/>
     <property name="webScriptFiles">
       <list>
+        <value>../dwr/interface/AchBankService.js</value>
         <value>../scripts/pdp/objectInfo.js</value>
       </list>
     </property>
@@ -60,8 +65,8 @@
     <property name="maintainableItems">
       <list>
         <bean parent="MaintainableFieldDefinition" p:name="achAccountGeneratedIdentifier" p:unconditionallyReadOnly="true" p:defaultValueFinderClass="org.kuali.kfs.pdp.businessobject.defaultvalue.NextAchAccountIdentifierFinder"/>
-        <bean parent="MaintainableFieldDefinition" p:name="payeeIdentifierTypeCode" p:required="true"/>
-        <bean parent="MaintainableFieldDefinition" p:name="payeeIdNumber" p:required="true"/>   
+        <bean parent="MaintainableFieldDefinition" p:name="payeeIdentifierTypeCode" p:required="true" p:webUILeaveFieldFunction="submit"/>
+        <bean parent="MaintainableFieldDefinition" p:name="payeeIdNumber" p:required="true" p:webUILeaveFieldFunction="submit"/>   
         <bean parent="MaintainableFieldDefinition">
           <property name="name" value="bankRoutingNumber"/>
           <property name="required" value="true"/>
@@ -73,7 +78,7 @@
           <property name="required" value="true"/>
         </bean>
         <bean parent="MaintainableFieldDefinition" p:name="bankAccountTypeCode" p:required="true"/>
-        <bean parent="MaintainableFieldDefinition" p:name="payeeName" p:required="true" p:unconditionallyReadOnly="true"/>
+        <bean parent="MaintainableFieldDefinition" p:name="payeeName" p:required="true"/>
         <bean parent="MaintainableFieldDefinition" p:name="payeeEmailAddress" p:required="true"/>
         <bean parent="MaintainableFieldDefinition" p:name="achTransactionType" p:required="true"/>
         <bean parent="MaintainableFieldDefinition" p:name="active" p:required="true" p:defaultValue="true"/>
Index: work/src/org/kuali/kfs/fp/batch/ProcurementCardCreateDocumentsStep.java
===================================================================
--- work/src/org/kuali/kfs/fp/batch/ProcurementCardCreateDocumentsStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/batch/ProcurementCardCreateDocumentsStep.java	(working copy)
@@ -26,6 +26,15 @@
 public class ProcurementCardCreateDocumentsStep extends AbstractStep {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(ProcurementCardCreateDocumentsStep.class);
     private ProcurementCardCreateDocumentService procurementCardDocumentService;
+    
+    /**
+     * Name of the parameter to use to check if ProcurementCardDefault accounting defaults are turned on
+     */
+    public static final String USE_ACCOUNTING_DEFAULT_PARAMETER_NAME = "PROCUREMENT_CARD_ACCOUNTING_DEFAULT_IND";
+    /**
+     * Name of the parameter to use to check if ProcurementCardDefault card holder defaults are turned on
+     */
+    public static final String USE_CARD_HOLDER_DEFAULT_PARAMETER_NAME = "PROCUREMENT_CARD_HOLDER_DEFAULT_IND";
 
     /**
      * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String, java.util.Date)
Index: work/src/org/kuali/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java	(working copy)
@@ -40,6 +40,7 @@
 import org.kuali.kfs.fp.batch.service.ProcurementCardCreateDocumentService;
 import org.kuali.kfs.fp.businessobject.CapitalAssetInformation;
 import org.kuali.kfs.fp.businessobject.ProcurementCardHolder;
+import org.kuali.kfs.fp.businessobject.ProcurementCardDefault;
 import org.kuali.kfs.fp.businessobject.ProcurementCardSourceAccountingLine;
 import org.kuali.kfs.fp.businessobject.ProcurementCardTargetAccountingLine;
 import org.kuali.kfs.fp.businessobject.ProcurementCardTransaction;
@@ -360,24 +361,51 @@
         ProcurementCardHolder cardHolder = new ProcurementCardHolder();
 
         cardHolder.setDocumentNumber(pcardDocument.getDocumentNumber());
+        cardHolder.setTransactionCreditCardNumber(transaction.getTransactionCreditCardNumber());
+        cardHolder.setChartOfAccountsCode(transaction.getChartOfAccountsCode());
         cardHolder.setAccountNumber(transaction.getAccountNumber());
-        cardHolder.setCardCycleAmountLimit(transaction.getCardCycleAmountLimit());
-        cardHolder.setCardCycleVolumeLimit(transaction.getCardCycleVolumeLimit());
-        cardHolder.setCardHolderAlternateName(transaction.getCardHolderAlternateName());
-        cardHolder.setCardHolderCityName(transaction.getCardHolderCityName());
-        cardHolder.setCardHolderLine1Address(transaction.getCardHolderLine1Address());
-        cardHolder.setCardHolderLine2Address(transaction.getCardHolderLine2Address());
-        cardHolder.setCardHolderName(transaction.getCardHolderName());
-        cardHolder.setCardHolderStateCode(transaction.getCardHolderStateCode());
-        cardHolder.setCardHolderWorkPhoneNumber(transaction.getCardHolderWorkPhoneNumber());
-        cardHolder.setCardHolderZipCode(transaction.getCardHolderZipCode());
-        cardHolder.setCardLimit(transaction.getCardLimit());
-        cardHolder.setCardNoteText(transaction.getCardNoteText());
-        cardHolder.setCardStatusCode(transaction.getCardStatusCode());
-        cardHolder.setChartOfAccountsCode(transaction.getChartOfAccountsCode());
         cardHolder.setSubAccountNumber(transaction.getSubAccountNumber());
-        cardHolder.setTransactionCreditCardNumber(transaction.getTransactionCreditCardNumber());
-
+        
+        if (getParameterService().getIndicatorParameter(ProcurementCardCreateDocumentsStep.class, ProcurementCardCreateDocumentsStep.USE_CARD_HOLDER_DEFAULT_PARAMETER_NAME)) {
+            final ProcurementCardDefault procurementCardDefault = retrieveProcurementCardDefault(transaction.getTransactionCreditCardNumber());
+            if (procurementCardDefault != null) {
+                cardHolder.setCardCycleAmountLimit(procurementCardDefault.getCardCycleAmountLimit());
+                cardHolder.setCardCycleVolumeLimit(procurementCardDefault.getCardCycleVolumeLimit());
+                cardHolder.setCardHolderAlternateName(procurementCardDefault.getCardHolderAlternateName());
+                cardHolder.setCardHolderCityName(procurementCardDefault.getCardHolderCityName());
+                cardHolder.setCardHolderLine1Address(procurementCardDefault.getCardHolderLine1Address());
+                cardHolder.setCardHolderLine2Address(procurementCardDefault.getCardHolderLine2Address());
+                cardHolder.setCardHolderName(procurementCardDefault.getCardHolderName());
+                cardHolder.setCardHolderStateCode(procurementCardDefault.getCardHolderStateCode());
+                cardHolder.setCardHolderWorkPhoneNumber(procurementCardDefault.getCardHolderWorkPhoneNumber());
+                cardHolder.setCardHolderZipCode(procurementCardDefault.getCardHolderZipCode());
+                cardHolder.setCardLimit(procurementCardDefault.getCardLimit());
+                cardHolder.setCardNoteText(procurementCardDefault.getCardNoteText());
+                cardHolder.setCardStatusCode(procurementCardDefault.getCardStatusCode());
+                
+                if (getParameterService().getIndicatorParameter(ProcurementCardCreateDocumentsStep.class, ProcurementCardCreateDocumentsStep.USE_ACCOUNTING_DEFAULT_PARAMETER_NAME)) {
+                    cardHolder.setChartOfAccountsCode(procurementCardDefault.getChartOfAccountsCode());
+                    cardHolder.setAccountNumber(procurementCardDefault.getAccountNumber());
+                    cardHolder.setSubAccountNumber(procurementCardDefault.getSubAccountNumber());
+                }
+            }
+        }
+        if (StringUtils.isEmpty(cardHolder.getCardHolderName())) {
+            cardHolder.setCardCycleAmountLimit(transaction.getCardCycleAmountLimit());
+            cardHolder.setCardCycleVolumeLimit(transaction.getCardCycleVolumeLimit());
+            cardHolder.setCardHolderAlternateName(transaction.getCardHolderAlternateName());
+            cardHolder.setCardHolderCityName(transaction.getCardHolderCityName());
+            cardHolder.setCardHolderLine1Address(transaction.getCardHolderLine1Address());
+            cardHolder.setCardHolderLine2Address(transaction.getCardHolderLine2Address());
+            cardHolder.setCardHolderName(transaction.getCardHolderName());
+            cardHolder.setCardHolderStateCode(transaction.getCardHolderStateCode());
+            cardHolder.setCardHolderWorkPhoneNumber(transaction.getCardHolderWorkPhoneNumber());
+            cardHolder.setCardHolderZipCode(transaction.getCardHolderZipCode());
+            cardHolder.setCardLimit(transaction.getCardLimit());
+            cardHolder.setCardNoteText(transaction.getCardNoteText());
+            cardHolder.setCardStatusCode(transaction.getCardStatusCode());
+        }
+        
         pcardDocument.setProcurementCardHolder(cardHolder);
     }
 
@@ -464,7 +492,7 @@
      * @param docTransactionDetail The transaction detail to create source and target accounting lines from.
      * @return String containing any error messages.
      */
-    protected String createAndValidateAccountingLines(ProcurementCardDocument pcardDocument, ProcurementCardTransaction transaction, ProcurementCardTransactionDetail docTransactionDetail) {
+    protected String createAndValidateAccountingLines(ProcurementCardDocument pcardDocument, ProcurementCardTransaction transaction, ProcurementCardTransactionDetail docTransactionDetail) {        
         // build source lines
         ProcurementCardSourceAccountingLine sourceLine = createSourceAccountingLine(transaction, docTransactionDetail);
         sourceLine.setPostingYear(pcardDocument.getPostingYear());
@@ -492,7 +520,6 @@
      */
     protected ProcurementCardTargetAccountingLine createTargetAccountingLine(ProcurementCardTransaction transaction, ProcurementCardTransactionDetail docTransactionDetail) {
         ProcurementCardTargetAccountingLine targetLine = new ProcurementCardTargetAccountingLine();
-
         targetLine.setDocumentNumber(docTransactionDetail.getDocumentNumber());
         targetLine.setFinancialDocumentTransactionLineNumber(docTransactionDetail.getFinancialDocumentTransactionLineNumber());
         targetLine.setChartOfAccountsCode(transaction.getChartOfAccountsCode());
@@ -502,6 +529,18 @@
         targetLine.setFinancialSubObjectCode(transaction.getFinancialSubObjectCode());
         targetLine.setProjectCode(transaction.getProjectCode());
 
+        if (getParameterService().getIndicatorParameter(ProcurementCardCreateDocumentsStep.class, ProcurementCardCreateDocumentsStep.USE_ACCOUNTING_DEFAULT_PARAMETER_NAME)) {
+            final ProcurementCardDefault procurementCardDefault = retrieveProcurementCardDefault(transaction.getTransactionCreditCardNumber());
+            if (procurementCardDefault != null) {
+                    targetLine.setChartOfAccountsCode(procurementCardDefault.getChartOfAccountsCode());
+                    targetLine.setAccountNumber(procurementCardDefault.getAccountNumber());
+                    targetLine.setFinancialObjectCode(procurementCardDefault.getFinancialObjectCode());
+                    targetLine.setSubAccountNumber(procurementCardDefault.getSubAccountNumber());
+                    targetLine.setFinancialSubObjectCode(procurementCardDefault.getFinancialSubObjectCode());
+                    targetLine.setProjectCode(procurementCardDefault.getProjectCode());
+            }
+        }
+
         if (GL_CREDIT_CODE.equals(transaction.getTransactionDebitCreditCode())) {
             targetLine.setAmount(transaction.getFinancialDocumentTotalAmount().negated());
         }
@@ -634,6 +673,18 @@
     protected String getErrorAccountNumber() {
         return parameterService.getParameterValueAsString(ProcurementCardCreateDocumentsStep.class, ERROR_TRANS_ACCOUNT_PARM_NM);
     }
+    
+    /**
+     * Gets the default Chart Code, Account from the custom Procurement Cardholder table.
+     * 
+     */
+    protected ProcurementCardDefault retrieveProcurementCardDefault(String creditCardNumber) {
+        Map<String, String> pkMap = new HashMap<String, String>();
+        pkMap.put(KFSPropertyConstants.CREDIT_CARD_NUMBER, creditCardNumber);
+        ProcurementCardDefault procurementCardDefault = (ProcurementCardDefault) businessObjectService.findByPrimaryKey(ProcurementCardDefault.class, pkMap);
+                
+        return procurementCardDefault;
+    }
 
     /**
      * Retrieves the default chard code from the parameter table.
@@ -674,6 +725,13 @@
     protected void loadTransactions(List transactions) {
         businessObjectService.save(transactions);
     }
+    
+    /**
+     * @return retrieves the presumably injected implementation of ParameterService to use
+     */
+    public ParameterService getParameterService() {
+        return parameterService;
+    }
 
     /**
      * Sets the parameterService attribute.
Index: work/src/org/kuali/kfs/fp/batch/service/impl/DisbursementVoucherExtractServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/fp/batch/service/impl/DisbursementVoucherExtractServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/batch/service/impl/DisbursementVoucherExtractServiceImpl.java	(working copy)
@@ -134,7 +134,40 @@
 
         return true;
     }
+    
+    /**
+     * Pulls all disbursement vouchers with status of "A" and marked for immediate payment from the database and builds payment records for them
+     * @see org.kuali.kfs.fp.batch.service.DisbursementVoucherExtractService#extractImmediatePayments()
+     */
+    public void extractImmediatePayments() {
+        LOG.debug("extractImmediatePayments() started");
 
+        Date processRunDate = dateTimeService.getCurrentDate();
+
+        String noteLines = parameterService.getParameterValue(KfsParameterConstants.PRE_DISBURSEMENT_ALL.class, PdpParameterConstants.MAX_NOTE_LINES);
+
+        try {
+            maxNoteLines = Integer.parseInt(noteLines);
+        }
+        catch (NumberFormatException nfe) {
+            throw new IllegalArgumentException("Invalid Max Notes Lines parameter");
+        }
+
+        Person uuser = getPersonService().getPersonByPrincipalName(KFSConstants.SYSTEM_USER);
+        if (uuser == null) {
+            LOG.debug("extractPayments() Unable to find user " + KFSConstants.SYSTEM_USER);
+            throw new IllegalArgumentException("Unable to find user " + KFSConstants.SYSTEM_USER);
+        }
+
+        // Get a list of campuses that have documents with an 'A' (approved) status.
+        Set<String> campusList = getImmediatesCampusListByDocumentStatusCode(DisbursementVoucherConstants.DocumentStatusCodes.APPROVED);
+
+        // Process each campus one at a time
+        for (String campusCode : campusList) {
+            extractImmediatePaymentsForCampus(campusCode, uuser, processRunDate);
+        }
+    }
+
     /**
      * This method extracts all outstanding payments from all the disbursement vouchers in approved status for a given campus and
      * adds these payments to a batch file that is uploaded for processing.
@@ -152,7 +185,7 @@
         Integer count = 0;
         KualiDecimal totalAmount = KualiDecimal.ZERO;
 
-        Collection<DisbursementVoucherDocument> dvd = getListByDocumentStatusCodeCampus(DisbursementVoucherConstants.DocumentStatusCodes.APPROVED, campusCode);
+        Collection<DisbursementVoucherDocument> dvd = getListByDocumentStatusCodeCampus(DisbursementVoucherConstants.DocumentStatusCodes.APPROVED, campusCode, false);
         for (DisbursementVoucherDocument document : dvd) {
             addPayment(document, batch, processRunDate);
             count++;
@@ -165,7 +198,34 @@
         businessObjectService.save(batch);
         paymentFileEmailService.sendLoadEmail(batch);
     }
+    
+    /**
+     * Builds payment batch for Disbursement Vouchers marked as immediate
+     * @param campusCode the campus code the disbursement vouchers should be associated with
+     * @param user the user responsible building the payment batch (typically the System User, kfs)
+     * @param processRunDate the time that the job to build immediate payments is run
+     */
+    protected void extractImmediatePaymentsForCampus(String campusCode, Person user, Date processRunDate) {
+        LOG.debug("extractImmediatesPaymentsForCampus() started for campus: " + campusCode);
 
+        Batch batch = createBatch(campusCode, user, processRunDate);
+        Integer count = 0;
+        KualiDecimal totalAmount = KualiDecimal.ZERO;
+
+        Collection<DisbursementVoucherDocument> dvd = getListByDocumentStatusCodeCampus(DisbursementVoucherConstants.DocumentStatusCodes.APPROVED, campusCode, true);
+        for (DisbursementVoucherDocument document : dvd) {
+            addPayment(document, batch, processRunDate);
+            count++;
+            totalAmount = totalAmount.add(document.getDisbVchrCheckTotalAmount());
+        }
+
+        batch.setPaymentCount(new KualiInteger(count));
+        batch.setPaymentTotalAmount(totalAmount);
+
+        businessObjectService.save(batch);
+        paymentFileEmailService.sendLoadEmail(batch);
+    }
+
     /**
      * This method creates a payment group from the disbursement voucher and batch provided and persists that group to the database.
      * 
@@ -627,7 +687,7 @@
 
         Set<String> campusSet = new HashSet<String>();
 
-        Collection<DisbursementVoucherDocument> docs = disbursementVoucherDao.getDocumentsByHeaderStatus(statusCode);
+        Collection<DisbursementVoucherDocument> docs = disbursementVoucherDao.getDocumentsByHeaderStatus(statusCode, false);
         for (DisbursementVoucherDocument element : docs) {
             String dvdCampusCode = element.getCampusCode();
             campusSet.add(dvdCampusCode);
@@ -635,15 +695,36 @@
 
         return campusSet;
     }
+    
+    /**
+     * Retrieves a list of campuses which have Disbursement Vouchers ready to be process which are marked for immediate processing
+     * @param statusCode the status code of the documents to retrieve
+     * @return the Set of campuses which have DV which are up for immediate disbursement
+     */
+    protected Set<String> getImmediatesCampusListByDocumentStatusCode(String statusCode) {
+        LOG.debug("getCampusListByDocumentStatusCode() started");
 
+        Set<String> campusSet = new HashSet<String>();
+
+        Collection<DisbursementVoucherDocument> docs = disbursementVoucherDao.getDocumentsByHeaderStatus(statusCode, true);
+        for (DisbursementVoucherDocument element : docs) {
+            
+            final String dvdCampusCode = element.getCampusCode();
+            campusSet.add(dvdCampusCode);
+        }
+
+        return campusSet;
+    }
+
     /**
      * This method retrieves a list of disbursement voucher documents that are in the status provided for the campus code given.
      * 
      * @param statusCode The status of the disbursement vouchers to be retrieved.
      * @param campusCode The campus code that the disbursement vouchers will be associated with.
+     * @param immediatesOnly only retrieve Disbursement Vouchers marked for immediate payment
      * @return A collection of disbursement voucher objects that meet the search criteria given.
      */
-    protected Collection<DisbursementVoucherDocument> getListByDocumentStatusCodeCampus(String statusCode, String campusCode) {
+    protected Collection<DisbursementVoucherDocument> getListByDocumentStatusCodeCampus(String statusCode, String campusCode, boolean immediatesOnly) {
         LOG.debug("getListByDocumentStatusCodeCampus() started");
 
         Collection<DisbursementVoucherDocument> list = new ArrayList<DisbursementVoucherDocument>();
@@ -654,7 +735,9 @@
                 String dvdCampusCode = element.getCampusCode();
 
                 if (dvdCampusCode.equals(campusCode) && DisbursementVoucherConstants.PAYMENT_METHOD_CHECK.equals(element.getDisbVchrPaymentMethodCode())) {
-                    list.add(element);
+                    if ((immediatesOnly && element.isImmediatePaymentIndicator()) || !immediatesOnly) {
+                        list.add(element);
+                    }
                 }
             }
         }
@@ -795,8 +878,45 @@
             throw new RuntimeException(we);
         }
     }
+    
+    
 
     /**
+     * Extracts a single DisbursementVoucherDocument
+     * @see org.kuali.kfs.fp.batch.service.DisbursementVoucherExtractService#extractImmediatePayment(org.kuali.kfs.fp.document.DisbursementVoucherDocument)
+     */
+    public void extractImmediatePayment(DisbursementVoucherDocument disbursementVoucher) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("extractImmediatePayment(DisbursementVoucherDocument) started");
+        }
+        Date processRunDate = dateTimeService.getCurrentDate();
+        String noteLines = parameterService.getParameterValue(KfsParameterConstants.PRE_DISBURSEMENT_ALL.class, PdpParameterConstants.MAX_NOTE_LINES);
+        try {
+            maxNoteLines = Integer.parseInt(noteLines);
+        }
+        catch (NumberFormatException nfe) {
+            throw new IllegalArgumentException("Invalid Max Notes Lines parameter");
+        }
+        Person user = getPersonService().getPersonByPrincipalName(KFSConstants.SYSTEM_USER);
+        if (user == null) {
+            LOG.debug("extractPayments() Unable to find user " + KFSConstants.SYSTEM_USER);
+            throw new IllegalArgumentException("Unable to find user " + KFSConstants.SYSTEM_USER);
+        }
+
+        Batch batch = createBatch(disbursementVoucher.getCampusCode(), user, processRunDate);
+        KualiDecimal totalAmount = KualiDecimal.ZERO;
+
+        addPayment(disbursementVoucher, batch, processRunDate);
+        totalAmount = totalAmount.add(disbursementVoucher.getDisbVchrCheckTotalAmount());
+
+        batch.setPaymentCount(new KualiInteger(1));
+        batch.setPaymentTotalAmount(totalAmount);
+
+        businessObjectService.save(batch);
+        paymentFileEmailService.sendDisbursementVoucherImmediateExtractEmail(disbursementVoucher, user);
+    }
+
+    /**
      * This method sets the disbursementVoucherDao instance.
      * 
      * @param disbursementVoucherDao The DisbursementVoucherDao to be set.
Index: work/src/org/kuali/kfs/fp/batch/service/DisbursementVoucherExtractService.java
===================================================================
--- work/src/org/kuali/kfs/fp/batch/service/DisbursementVoucherExtractService.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/batch/service/DisbursementVoucherExtractService.java	(working copy)
@@ -32,6 +32,11 @@
     public boolean extractPayments();
     
     /**
+     * Pulls all disbursement voucher which pay checks and which are marked as "immediate payment" from the database and builds payment information for them 
+     */
+    public void extractImmediatePayments();
+    
+    /**
      * Cancels a disbursement voucher completely, because its payment has been canceled
      * @param dv the disbursement voucher to cancel
      */
@@ -56,4 +61,10 @@
      * @param processDate the date when the dv was paid
      */
     public abstract void markDisbursementVoucherAsPaid(DisbursementVoucherDocument dv, java.sql.Date processDate);
+    
+    /**
+     * Creates a batch payment for a single disbursement voucher
+     * @param disbursementVoucher the voucher to immediately extract
+     */
+    public abstract void extractImmediatePayment(DisbursementVoucherDocument disbursementVoucher);
 }
Index: work/src/org/kuali/kfs/fp/businessobject/datadictionary/DisbursementVoucherWireTransfer.xml
===================================================================
--- work/src/org/kuali/kfs/fp/businessobject/datadictionary/DisbursementVoucherWireTransfer.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/businessobject/datadictionary/DisbursementVoucherWireTransfer.xml	(working copy)
@@ -140,7 +140,7 @@
     <property name="name" value="disbVchrPayeeAccountNumber"/>
     <property name="forceUppercase" value="false"/>
     <property name="label" value="Bank Account #"/>
-    <property name="shortLabel" value="Bnk Cntry"/>
+    <property name="shortLabel" value="Bank Account"/>
     <property name="maxLength" value="40"/>
     <property name="required" value="true"/>
     <property name="control">
Index: work/src/org/kuali/kfs/fp/businessobject/lookup/DisbursementPayeeLookupableHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/fp/businessobject/lookup/DisbursementPayeeLookupableHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/businessobject/lookup/DisbursementPayeeLookupableHelperServiceImpl.java	(working copy)
@@ -24,7 +24,9 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.fp.businessobject.DisbursementPayee;
+import org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService;
 import org.kuali.kfs.fp.document.service.DisbursementVoucherPaymentReasonService;
+import org.kuali.kfs.gl.service.impl.StringHelper;
 import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
@@ -52,16 +54,15 @@
 public class DisbursementPayeeLookupableHelperServiceImpl extends KualiLookupableHelperServiceImpl {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DisbursementPayeeLookupableHelperServiceImpl.class);
 
-    private Lookupable vendorLookupable;
-    private DisbursementVoucherPaymentReasonService disbursementVoucherPaymentReasonService;
+    protected Lookupable vendorLookupable;
+    protected DisbursementVoucherPaymentReasonService disbursementVoucherPaymentReasonService;
+    protected DisbursementVoucherPayeeService disbursementVoucherPayeeService;
     
     private static final int NAME_REQUIRED_FILLED_WITH_WILDCARD = 4;
 
     /**
      * @see org.kuali.rice.kns.lookup.AbstractLookupableHelperServiceImpl#performLookup(org.kuali.rice.kns.web.struts.form.LookupForm,
      *      java.util.Collection, boolean)
-     * 
-     * KRAD Conversion: Lookupable performs conditional setting of return urls.
      */
     @Override
     public Collection performLookup(LookupForm lookupForm, Collection resultTable, boolean bounded) {
@@ -114,83 +115,114 @@
     public void validateSearchParameters(Map fieldValues) {
         super.validateSearchParameters(fieldValues);
         
+        if (checkMinimumFieldsFilled(fieldValues)) {
+            validateVendorNameUse(fieldValues);
+            validateTaxNumberCriteria(fieldValues);
+            validateEmployeeNameUse(fieldValues);
+        }
+        if (GlobalVariables.getMessageMap().hasErrors()) {
+            throw new ValidationException("errors in search criteria");
+        }
+    }
+    
+    /**
+     * This method checks if the minimum required fields are filled
+     */
+    public boolean checkMinimumFieldsFilled(Map fieldValues) {
+        if(StringUtils.isBlank((String) fieldValues.get(KFSPropertyConstants.VENDOR_NUMBER)) && StringUtils.isBlank((String) fieldValues.get(KIMPropertyConstants.Person.EMPLOYEE_ID)) && StringUtils.isBlank((String)fieldValues.get(KIMPropertyConstants.Person.FIRST_NAME)) && 
+                StringUtils.isBlank((String)fieldValues.get(KIMPropertyConstants.Person.LAST_NAME)) && StringUtils.isBlank((String)fieldValues.get(KFSPropertyConstants.VENDOR_NAME))) {
+            final String vendorNumberLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NUMBER);
+            final String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
+            final String firstNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
+            final String lastNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
+            final String employeeIdLabel = this.getAttributeLabel(KIMPropertyConstants.Person.EMPLOYEE_ID);
+            
+            GlobalVariables.getMessageMap().putError(KFSPropertyConstants.VENDOR_NUMBER, KFSKeyConstants.ERROR_DV_LOOKUP_NEEDS_SOME_FIELD, new String[] {vendorNumberLabel, employeeIdLabel, vendorNameLabel, firstNameLabel, lastNameLabel});
+            return false;
+        }
+        return true;
+    }
+    
+    /**
+     * This method validates the vendor name usage in lookup
+     */
+    public void validateVendorNameUse(Map fieldValues) {
         final String vendorName = (String) fieldValues.get(KFSPropertyConstants.VENDOR_NAME);
         final String vendorNumber = (String) fieldValues.get(KFSPropertyConstants.VENDOR_NUMBER);
         final String employeeId = (String) fieldValues.get(KIMPropertyConstants.Person.EMPLOYEE_ID);
+        
+        final boolean isVendorInfoEntered = StringUtils.isNotBlank(vendorName) || StringUtils.isNotBlank(vendorNumber);
+        if (isVendorInfoEntered && StringUtils.isNotBlank(employeeId)) {
+            // only can use the vendor name and vendor number fields or the employee id field, but not both.
+            String messageKey = KFSKeyConstants.ERROR_DV_VENDOR_EMPLOYEE_CONFUSION;
+            String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
+            String vendorNumberLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NUMBER);
+            GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.EMPLOYEE_ID, messageKey, this.getAttributeLabel(KIMPropertyConstants.Person.EMPLOYEE_ID), vendorNameLabel, vendorNumberLabel);
+        }
+        
+        if (StringUtils.isBlank(vendorNumber) && !StringUtils.isBlank(vendorName) && !filledEnough(vendorName)) {
+            final String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
+            GlobalVariables.getMessageMap().putError(KFSPropertyConstants.VENDOR_NAME, KFSKeyConstants.ERROR_DV_NAME_NOT_FILLED_ENOUGH, new String[] {vendorNameLabel, Integer.toString(getNameLengthWithWildcardRequirement())});
+        }
+    }
+    
+    /**
+     * This method validates the tax criteria
+     */
+    public void validateTaxNumberCriteria(Map fieldValues) {
+        final String employeeId = (String) fieldValues.get(KIMPropertyConstants.Person.EMPLOYEE_ID);
         final String firstName = (String)fieldValues.get(KIMPropertyConstants.Person.FIRST_NAME);
         final String lastName = (String)fieldValues.get(KIMPropertyConstants.Person.LAST_NAME);
         final String vendorTaxNumber = (String)fieldValues.get(KFSPropertyConstants.TAX_NUMBER);
-        final String vendorTaxNumberLabel = this.getAttributeLabel(KFSPropertyConstants.TAX_NUMBER);        
         
-        final String employeeIdLabel = this.getAttributeLabel(KIMPropertyConstants.Person.EMPLOYEE_ID);
+        // we do not use to use Tax Number field for the lookup on the person...
+        if(StringUtils.isNotBlank(vendorTaxNumber) && StringUtils.isNotBlank(firstName)) {
+            fieldValues.remove(KFSPropertyConstants.TAX_NUMBER);
+            String messageKey = KFSKeyConstants.ERROR_DV_LOOKUP_TAX_NUMBER_EMPLOYEE_DETAILS_CONFUSION;
+            GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.FIRST_NAME, messageKey, this.getAttributeLabel(KFSPropertyConstants.TAX_NUMBER), this.getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME));                
+        }
+        // if tax number and employee last name entered then send an error message...
+        if(StringUtils.isNotBlank(vendorTaxNumber) && StringUtils.isNotBlank(lastName)) {
+            fieldValues.remove(KFSPropertyConstants.TAX_NUMBER);
+            String messageKey = KFSKeyConstants.ERROR_DV_LOOKUP_TAX_NUMBER_EMPLOYEE_DETAILS_CONFUSION;
+            GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.LAST_NAME, messageKey, this.getAttributeLabel(KFSPropertyConstants.TAX_NUMBER), this.getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME));                
+        }
+        // if tax number and employee id entered then send an error message...
+        if(StringUtils.isNotBlank(vendorTaxNumber) && StringUtils.isNotBlank(employeeId)) {
+            fieldValues.remove(KFSPropertyConstants.TAX_NUMBER);
+            String messageKey = KFSKeyConstants.ERROR_DV_LOOKUP_TAX_NUMBER_EMPLOYEE_DETAILS_CONFUSION;
+            GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.EMPLOYEE_ID, messageKey, this.getAttributeLabel(KIMPropertyConstants.Person.EMPLOYEE_ID), this.getAttributeLabel(KFSPropertyConstants.TAX_NUMBER));                
+        }
+    }
+    
+    /**
+     * This method validates the employee name usage in lookup
+     */
+    public void validateEmployeeNameUse(Map fieldValues) {
+        final String firstName = (String)fieldValues.get(KIMPropertyConstants.Person.FIRST_NAME);
+        final String lastName = (String)fieldValues.get(KIMPropertyConstants.Person.LAST_NAME);
+        final String vendorName = (String) fieldValues.get(KFSPropertyConstants.VENDOR_NAME);
+        final String employeeId = (String) fieldValues.get(KIMPropertyConstants.Person.EMPLOYEE_ID);
+        final boolean isPersonNameEntered = StringUtils.isNotBlank(firstName) || StringUtils.isNotBlank(lastName);
         
-        if (StringUtils.isBlank(vendorNumber) && StringUtils.isBlank(employeeId) && StringUtils.isBlank(firstName) && StringUtils.isBlank(lastName) && StringUtils.isBlank(vendorName)) {
-            final String vendorNumberLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NUMBER);
-            final String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
-            final String firstNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
-            final String lastNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
-            GlobalVariables.getMessageMap().putError(KFSPropertyConstants.VENDOR_NUMBER, KFSKeyConstants.ERROR_DV_LOOKUP_NEEDS_SOME_FIELD, new String[] {vendorNumberLabel, employeeIdLabel, vendorNameLabel, firstNameLabel, lastNameLabel});
-        } else {
-            final boolean isVendorInfoEntered = StringUtils.isNotBlank(vendorName) || StringUtils.isNotBlank(vendorNumber);
-            if (isVendorInfoEntered && StringUtils.isNotBlank(employeeId)) {
-                // only can use the vendor name and vendor number fields or the employee id field, but not both.
-                String messageKey = KFSKeyConstants.ERROR_DV_VENDOR_EMPLOYEE_CONFUSION;
-                String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
-                String vendorNumberLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NUMBER);
-                GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.EMPLOYEE_ID, messageKey, employeeIdLabel, vendorNameLabel, vendorNumberLabel);
+        if (isPersonNameEntered && StringUtils.isNotBlank(vendorName)) {
+            // only can use the person first and last name fields or the vendor name field, but not both.
+            String messageKey = KFSKeyConstants.ERROR_DV_VENDOR_NAME_PERSON_NAME_CONFUSION;
+
+            String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
+            String firstNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
+            String lastNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
+            GlobalVariables.getMessageMap().putError(KFSPropertyConstants.VENDOR_NAME, messageKey, vendorNameLabel, firstNameLabel, lastNameLabel);
+        }
+        if (StringUtils.isBlank(employeeId)) {
+            if (StringUtils.isBlank(firstName) && !StringUtils.isBlank(lastName) && !filledEnough(lastName)) {
+                final String label = getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
+                GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.LAST_NAME, KFSKeyConstants.ERROR_DV_NAME_NOT_FILLED_ENOUGH, new String[] { label, Integer.toString(getNameLengthWithWildcardRequirement() ) } );
+            } else if (StringUtils.isBlank(lastName) && !StringUtils.isBlank(firstName) && !filledEnough(firstName)) {
+                final String label = getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
+                GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.FIRST_NAME, KFSKeyConstants.ERROR_DV_NAME_NOT_FILLED_ENOUGH, new String[] { label, Integer.toString(getNameLengthWithWildcardRequirement() ) } );
             }
-            if (StringUtils.isBlank(vendorNumber) && !StringUtils.isBlank(vendorName) && !filledEnough(vendorName)) {
-                final String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
-                GlobalVariables.getMessageMap().putError(KFSPropertyConstants.VENDOR_NAME, KFSKeyConstants.ERROR_DV_NAME_NOT_FILLED_ENOUGH, new String[] {vendorNameLabel, Integer.toString(getNameLengthWithWildcardRequirement())});
-            }
-    
-            final boolean isPersonNameEntered = StringUtils.isNotBlank(firstName) || StringUtils.isNotBlank(lastName);
-            final String employeeFirstNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
-            final String employeeLastNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
-            
-            // we do not use to use Tax Number field for the lookup on the person...
-            if(StringUtils.isNotBlank(vendorTaxNumber) && StringUtils.isNotBlank(firstName)) {
-                fieldValues.remove(KFSPropertyConstants.TAX_NUMBER);
-                String messageKey = KFSKeyConstants.ERROR_DV_LOOKUP_TAX_NUMBER_EMPLOYEE_DETAILS_CONFUSION;
-                GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.FIRST_NAME, messageKey, vendorTaxNumberLabel, employeeFirstNameLabel);                
-            }
-            // if tax number and employee last name entered then send an error message...
-            if(StringUtils.isNotBlank(vendorTaxNumber) && StringUtils.isNotBlank(lastName)) {
-                fieldValues.remove(KFSPropertyConstants.TAX_NUMBER);
-                String messageKey = KFSKeyConstants.ERROR_DV_LOOKUP_TAX_NUMBER_EMPLOYEE_DETAILS_CONFUSION;
-                GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.LAST_NAME, messageKey, vendorTaxNumberLabel, employeeLastNameLabel);                
-            }
-            // if tax number and employee id entered then send an error message...
-            if(StringUtils.isNotBlank(vendorTaxNumber) && StringUtils.isNotBlank(employeeId)) {
-                fieldValues.remove(KFSPropertyConstants.TAX_NUMBER);
-                String messageKey = KFSKeyConstants.ERROR_DV_LOOKUP_TAX_NUMBER_EMPLOYEE_DETAILS_CONFUSION;
-                GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.EMPLOYEE_ID, messageKey, employeeIdLabel, vendorTaxNumberLabel);                
-            }            
-            
-            if (isPersonNameEntered && StringUtils.isNotBlank(vendorName)) {
-                // only can use the person first and last name fields or the vendor name field, but not both.
-                String messageKey = KFSKeyConstants.ERROR_DV_VENDOR_NAME_PERSON_NAME_CONFUSION;
-    
-                String vendorNameLabel = this.getAttributeLabel(KFSPropertyConstants.VENDOR_NAME);
-                String firstNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
-                String lastNameLabel = this.getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
-    
-                GlobalVariables.getMessageMap().putError(KFSPropertyConstants.VENDOR_NAME, messageKey, vendorNameLabel, firstNameLabel, lastNameLabel);
-            }
-            if (StringUtils.isBlank(employeeId)) {
-                if (StringUtils.isBlank(firstName) && !StringUtils.isBlank(lastName) && !filledEnough(lastName)) {
-                    final String label = getAttributeLabel(KIMPropertyConstants.Person.LAST_NAME);
-                    GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.LAST_NAME, KFSKeyConstants.ERROR_DV_NAME_NOT_FILLED_ENOUGH, new String[] { label, Integer.toString(getNameLengthWithWildcardRequirement() ) } );
-                } else if (StringUtils.isBlank(lastName) && !StringUtils.isBlank(firstName) && !filledEnough(firstName)) {
-                    final String label = getAttributeLabel(KIMPropertyConstants.Person.FIRST_NAME);
-                    GlobalVariables.getMessageMap().putError(KIMPropertyConstants.Person.FIRST_NAME, KFSKeyConstants.ERROR_DV_NAME_NOT_FILLED_ENOUGH, new String[] { label, Integer.toString(getNameLengthWithWildcardRequirement() ) } );
-                }
-            }
         }
-        
-        if (GlobalVariables.getMessageMap().hasErrors()) {
-            throw new ValidationException("errors in search criteria");
-        }
     }
     
     /**
@@ -243,24 +275,25 @@
     }
 
     protected DisbursementPayee getPayeeFromVendor(VendorDetail vendorDetail, Map<String, String> fieldValues) {
-        DisbursementPayee payee = DisbursementPayee.getPayeeFromVendor(vendorDetail);
+        DisbursementPayee payee = disbursementVoucherPayeeService.getPayeeFromVendor(vendorDetail);
         payee.setPaymentReasonCode(fieldValues.get(KFSPropertyConstants.PAYMENT_REASON_CODE));
         
         //KFSMI-5497
         //get the attributeSecurity property and mask the field so that on results screen will be shown masked.        
         DataDictionaryService dataDictionaryService = SpringContext.getBean(DataDictionaryService.class);
         AttributeSecurity attributeSecurity =  dataDictionaryService.getAttributeSecurity(DisbursementPayee.class.getName(), "taxNumber");
-        attributeSecurity.setMask(true);
+        if (attributeSecurity != null) {
+            attributeSecurity.setMask(true);
+        }
         
         return payee;
     }
 
     // get the search criteria valid for vendor lookup
-    private Map<String, String> getVendorFieldValues(Map<String, String> fieldValues) {
+    protected Map<String, String> getVendorFieldValues(Map<String, String> fieldValues) {
         Map<String, String> vendorFieldValues = new HashMap<String, String>();
         vendorFieldValues.putAll(fieldValues);
-
-        Map<String, String> fieldConversionMap = DisbursementPayee.getFieldConversionBetweenPayeeAndVendor();
+        Map<String, String> fieldConversionMap = disbursementVoucherPayeeService.getFieldConversionBetweenPayeeAndVendor();
         this.replaceFieldKeys(vendorFieldValues, fieldConversionMap);
 
         String vendorName = this.getVendorName(vendorFieldValues);
@@ -275,7 +308,7 @@
     }
 
     // get the vendor name from the given field value map
-    private String getVendorName(Map<String, String> vendorFieldValues) {
+    protected String getVendorName(Map<String, String> vendorFieldValues) {
         String firstName = vendorFieldValues.get(VendorPropertyConstants.VENDOR_FIRST_NAME);
         String lastName = vendorFieldValues.get(VendorPropertyConstants.VENDOR_LAST_NAME);
 
@@ -305,24 +338,25 @@
     }
 
     protected DisbursementPayee getPayeeFromPerson(Person personDetail, Map<String, String> fieldValues) {
-        DisbursementPayee payee = DisbursementPayee.getPayeeFromPerson(personDetail);
+        DisbursementPayee payee = disbursementVoucherPayeeService.getPayeeFromPerson(personDetail);
         payee.setPaymentReasonCode(fieldValues.get(KFSPropertyConstants.PAYMENT_REASON_CODE));
 
         //KFSMI-5497
         //get the attributeSecurity property and unmask the field so that on results screen, it will set as blank.
         DataDictionaryService dataDictionaryService = SpringContext.getBean(DataDictionaryService.class);
         AttributeSecurity attributeSecurity =  dataDictionaryService.getAttributeSecurity(DisbursementPayee.class.getName(), "taxNumber");
-        attributeSecurity.setMask(false);
+        if (attributeSecurity != null) {
+            attributeSecurity.setMask(false);
+        }
         
         return payee;
     }
 
     // get the search criteria valid for person lookup
-    private Map<String, String> getPersonFieldValues(Map<String, String> fieldValues) {
+    protected Map<String, String> getPersonFieldValues(Map<String, String> fieldValues) {
         Map<String, String> personFieldValues = new HashMap<String, String>();
         personFieldValues.putAll(fieldValues);
-
-        Map<String, String> fieldConversionMap = DisbursementPayee.getFieldConversionBetweenPayeeAndPerson();
+        Map<String, String> fieldConversionMap = disbursementVoucherPayeeService.getFieldConversionBetweenPayeeAndPerson();
         this.replaceFieldKeys(personFieldValues, fieldConversionMap);
 
         personFieldValues.put(KIMPropertyConstants.Person.EMPLOYEE_STATUS_CODE, KFSConstants.EMPLOYEE_ACTIVE_STATUS);
@@ -331,17 +365,17 @@
     }
 
     // replace the keys in fieldValues with the corresponding values defined in fieldConversionMap
-    private void replaceFieldKeys(Map<String, String> fieldValues, Map<String, String> fieldConversionMap) {
+    protected void replaceFieldKeys(Map<String, String> fieldValues, Map<String, String> fieldConversionMap) {
         for (String key : fieldConversionMap.keySet()) {
             if (fieldValues.containsKey(key)) {
                 String value = fieldValues.get(key);
                 String newKey = fieldConversionMap.get(key);
-
-                fieldValues.remove(key);
-                fieldValues.put(newKey, value);
+                    fieldValues.remove(key);
+                    fieldValues.put(newKey, value);
+                }
             }
         }
-    }
+    
 
     // remove its return URLs if a row is not qualified for returning
     protected void filterReturnUrl(List<ResultRow> resultRowList, List<DisbursementPayee> payeeList, String paymentReasonCode) {
@@ -378,5 +412,28 @@
         this.disbursementVoucherPaymentReasonService = disbursementVoucherPaymentReasonService;
     }
     
-    
+    /**
+     * Sets the disbursementVoucherPayeeService attribute value.
+     * 
+     * @param disbursementVoucherPayeeService The disbursementVoucherPayeeService to set.
+     */
+    public void setDisbursementVoucherPayeeService(DisbursementVoucherPayeeService disbursementVoucherPayeeService) {
+        this.disbursementVoucherPayeeService = disbursementVoucherPayeeService;
+    }
+
+    /**
+     * Gets the disbursementVoucherPaymentReasonService attribute. 
+     * @return Returns the disbursementVoucherPaymentReasonService.
+     */
+    public DisbursementVoucherPaymentReasonService getDisbursementVoucherPaymentReasonService() {
+        return disbursementVoucherPaymentReasonService;
+    }
+
+    /**
+     * Gets the disbursementVoucherPayeeService attribute. 
+     * @return Returns the disbursementVoucherPayeeService.
+     */
+    public DisbursementVoucherPayeeService getDisbursementVoucherPayeeService() {
+        return disbursementVoucherPayeeService;
+    }
 }
Index: work/src/org/kuali/kfs/fp/businessobject/DisbursementPayee.java
===================================================================
--- work/src/org/kuali/kfs/fp/businessobject/DisbursementPayee.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/businessobject/DisbursementPayee.java	(working copy)
@@ -55,8 +55,6 @@
     
     private String principalId;
     
-    public final static String addressPattern = "{0}, {1}, {2} {3}";
-
     /**
      * Constructs a DisbursementPayee.java.
      */
@@ -65,7 +63,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
      */
     
     protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
@@ -78,96 +76,6 @@
     }
 
     /**
-     * convert the field names between Payee and Vendor
-     * 
-     * @return a field name map of Payee and Vendor. The map key is a field name of Payee, and its value is a field name of Vendor
-     */
-    public static Map<String, String> getFieldConversionBetweenPayeeAndVendor() {
-        Map<String, String> fieldConversionMap = new HashMap<String, String>();
-
-        fieldConversionMap.put(KFSPropertyConstants.TAX_NUMBER, VendorPropertyConstants.VENDOR_TAX_NUMBER);
-
-        fieldConversionMap.put(KFSPropertyConstants.VENDOR_NAME, KFSPropertyConstants.VENDOR_NAME);
-        fieldConversionMap.put(KFSPropertyConstants.VENDOR_NUMBER, KFSPropertyConstants.VENDOR_NUMBER);
-
-        fieldConversionMap.put(KFSPropertyConstants.PERSON_FIRST_NAME, VendorPropertyConstants.VENDOR_FIRST_NAME);
-        fieldConversionMap.put(KFSPropertyConstants.PERSON_LAST_NAME, VendorPropertyConstants.VENDOR_LAST_NAME);
-
-        fieldConversionMap.put(KRADPropertyConstants.ACTIVE, KFSPropertyConstants.ACTIVE_INDICATOR);
-
-        return fieldConversionMap;
-    }
-
-    /**
-     * convert the field names between Payee and Person
-     * 
-     * @return a field name map of Payee and Person. The map key is a field name of Payee, and its value is a field name of Person
-     */
-    public static Map<String, String> getFieldConversionBetweenPayeeAndPerson() {
-        Map<String, String> fieldConversionMap = new HashMap<String, String>();
-
-    //    fieldConversionMap.put(KFSPropertyConstants.TAX_NUMBER, KIMPropertyConstants.Person.EXTERNAL_ID);
-
-        fieldConversionMap.put(KFSPropertyConstants.PERSON_FIRST_NAME, KIMPropertyConstants.Person.FIRST_NAME);
-        fieldConversionMap.put(KFSPropertyConstants.PERSON_LAST_NAME, KIMPropertyConstants.Person.LAST_NAME);
-
-        fieldConversionMap.put(KFSPropertyConstants.EMPLOYEE_ID, KIMPropertyConstants.Person.EMPLOYEE_ID);
-        fieldConversionMap.put(KRADPropertyConstants.ACTIVE, KRADPropertyConstants.ACTIVE);
-
-        return fieldConversionMap;
-    }
-
-    /**
-     * build a payee object from the given vendor object
-     * 
-     * @param vendorDetail the given vendor object
-     * @return a payee object built from the given vendor object
-     */
-    public static DisbursementPayee getPayeeFromVendor(VendorDetail vendorDetail) {
-        DisbursementPayee disbursementPayee = new DisbursementPayee();
-
-        disbursementPayee.setActive(vendorDetail.isActiveIndicator());
-
-        disbursementPayee.setPayeeIdNumber(vendorDetail.getVendorNumber());
-        disbursementPayee.setPayeeName(vendorDetail.getAltVendorName());
-        disbursementPayee.setTaxNumber(vendorDetail.getVendorHeader().getVendorTaxNumber());
-
-        String vendorTypeCode = vendorDetail.getVendorHeader().getVendorTypeCode();
-        String payeeTypeCode = getVendorPayeeTypeCodeMapping().get(vendorTypeCode);
-        disbursementPayee.setPayeeTypeCode(payeeTypeCode);
-
-        String vendorAddress = MessageFormat.format(addressPattern, vendorDetail.getDefaultAddressLine1(), vendorDetail.getDefaultAddressCity(), vendorDetail.getDefaultAddressStateCode(), vendorDetail.getDefaultAddressCountryCode());
-        disbursementPayee.setAddress(vendorAddress);
-
-        return disbursementPayee;
-    }
-
-    /**
-     * build a payee object from the given person object
-     * 
-     * @param person the given person object
-     * @return a payee object built from the given person object
-     */
-    public static DisbursementPayee getPayeeFromPerson(Person person) {
-        DisbursementPayee disbursementPayee = new DisbursementPayee();
-
-        disbursementPayee.setActive(person.isActive());
-
-        disbursementPayee.setPayeeIdNumber(person.getEmployeeId());
-        disbursementPayee.setPrincipalId(person.getPrincipalId());
-        
-        disbursementPayee.setPayeeName(person.getName());
-        disbursementPayee.setTaxNumber(KFSConstants.BLANK_SPACE);
-        
-        disbursementPayee.setPayeeTypeCode(DisbursementVoucherConstants.DV_PAYEE_TYPE_EMPLOYEE);
-
-        String personAddress = MessageFormat.format(addressPattern, person.getAddressLine1(), person.getAddressCity(), person.getAddressPostalCode(), person.getAddressCountryCode());
-        disbursementPayee.setAddress(personAddress);
-
-        return disbursementPayee;
-    }
-
-    /**
      * Gets the payeeIdNumber attribute.
      * 
      * @return Returns the payeeIdNumber.
@@ -419,15 +327,4 @@
         this.principalId = principalId;
     }
 
-    // do mapping between vendor type code and payee type code 
-    private static Map<String, String> getVendorPayeeTypeCodeMapping() {
-        Map<String, String> payeeVendorTypeCodeMapping = new HashMap<String, String>();
-
-        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.PURCHASE_ORDER, DisbursementVoucherConstants.DV_PAYEE_TYPE_VENDOR);
-        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.DISBURSEMENT_VOUCHER, DisbursementVoucherConstants.DV_PAYEE_TYPE_VENDOR);
-        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.REVOLVING_FUND, DisbursementVoucherConstants.DV_PAYEE_TYPE_REVOLVING_FUND_VENDOR);
-        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.SUBJECT_PAYMENT, DisbursementVoucherConstants.DV_PAYEE_TYPE_SUBJECT_PAYMENT_VENDOR);
-
-        return payeeVendorTypeCodeMapping;
-    }
 }
Index: work/src/org/kuali/kfs/fp/spring-fp.xml
===================================================================
--- work/src/org/kuali/kfs/fp/spring-fp.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/spring-fp.xml	(working copy)
@@ -270,7 +270,8 @@
 		</property>
 	</bean>
 
-	<bean id="procurementCardLoadStep" class="org.kuali.kfs.fp.batch.ProcurementCardLoadStep" parent="step">
+	<bean id="procurementCardLoadStep" parent="procurementCardLoadStep-parentBean"/>
+	<bean id="procurementCardLoadStep-parentBean" abstract="true" class="org.kuali.kfs.fp.batch.ProcurementCardLoadStep" parent="step">
 		<property name="procurementCardLoadTransactionsService">
 			<ref bean="procurementCardLoadTransactionsService" />
 		</property>
@@ -415,7 +416,9 @@
 		</property>
 	</bean>
  
-	<bean id="disbursementPayeeLookupableHelperService" class="org.kuali.kfs.fp.businessobject.lookup.DisbursementPayeeLookupableHelperServiceImpl" scope="prototype" parent="lookupableHelperService">
+	<bean id="disbursementPayeeLookupableHelperService" parent="disbursementPayeeLookupableHelperService-parentBean"/>
+
+	<bean id="disbursementPayeeLookupableHelperService-parentBean" class="org.kuali.kfs.fp.businessobject.lookup.DisbursementPayeeLookupableHelperServiceImpl" scope="prototype" parent="lookupableHelperService">
 		<property name="vendorLookupable">
 			<ref bean="vendorLookupable" />
 		</property>	
@@ -424,7 +427,10 @@
 		</property>			
 		<property name="disbursementVoucherPaymentReasonService">
 			<ref bean="disbursementVoucherPaymentReasonService" />
-		</property>	
+		</property>		
+		<property name="disbursementVoucherPayeeService">
+			<ref bean="disbursementVoucherPayeeService" />
+		</property>
 	</bean>
 	
 	<bean id="disbursementPayeeInquirable" class="org.kuali.kfs.fp.businessobject.inquirable.DisbursementPayeeInquirableImpl" scope="prototype" parent="kualiInquirable"/>
Index: work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/dataaccess/impl/DisbursementVoucherDaoOjb.java	(working copy)
@@ -40,14 +40,17 @@
     }
 
     /**
-     * @see org.kuali.kfs.fp.dataaccess.DisbursementVoucherDao#getDocumentsByHeaderStatus(java.lang.String)
+     * @see org.kuali.kfs.fp.dataaccess.DisbursementVoucherDao#getDocumentsByHeaderStatus(java.lang.String, boolean)
      */
-    public Collection getDocumentsByHeaderStatus(String statusCode) {
+    public Collection getDocumentsByHeaderStatus(String statusCode, boolean immediatesOnly) {
         LOG.debug("getDocumentsByHeaderStatus() started");
 
         Criteria criteria = new Criteria();
         criteria.addEqualTo("documentHeader.financialDocumentStatusCode", statusCode);
         criteria.addEqualTo("disbVchrPaymentMethodCode", DisbursementVoucherConstants.PAYMENT_METHOD_CHECK);
+        if (immediatesOnly) {
+            criteria.addEqualTo("immediatePaymentIndicator", Boolean.TRUE);
+        }
 
         return getPersistenceBrokerTemplate().getCollectionByQuery(new QueryByCriteria(DisbursementVoucherDocument.class, criteria));
     }
Index: work/src/org/kuali/kfs/fp/dataaccess/DisbursementVoucherDao.java
===================================================================
--- work/src/org/kuali/kfs/fp/dataaccess/DisbursementVoucherDao.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/dataaccess/DisbursementVoucherDao.java	(working copy)
@@ -33,8 +33,9 @@
      * Returns a list of disbursement voucher documents with a specific doc header status
      * 
      * @param statusCode
+     * @param immediatesOnly retrieve the only DV's marked for immediate payment
      * @return list of doc headers
      */
-    public Collection getDocumentsByHeaderStatus(String statusCode);
+    public Collection getDocumentsByHeaderStatus(String statusCode, boolean immediatesOnly);
 }
 
Index: work/src/org/kuali/kfs/fp/ojb-fp.xml
===================================================================
--- work/src/org/kuali/kfs/fp/ojb-fp.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/ojb-fp.xml	(working copy)
@@ -16,7 +16,7 @@
 <descriptor-repository version="1.0">
 <!--  INTERNAL BILLING DOCUMENT MAPPINGS -->
 <class-descriptor class="org.kuali.kfs.fp.document.InternalBillingDocument" table="FP_INT_BILL_DOC_T">
-    <!--  common transaction document base attributes -->
+    <!--  common transactional document base attributes -->
     <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
@@ -24,7 +24,7 @@
     <field-descriptor name="nextSourceLineNumber" column="FDOC_NXT_EXP_NBR" jdbc-type="INTEGER" />
     <field-descriptor name="nextTargetLineNumber" column="FDOC_NXT_INC_NBR" jdbc-type="INTEGER" />
 
-    <!--  internal billing specific attributes -->
+    <!--  internal billing specfic attributes -->
     <field-descriptor name="nextItemLineNumber" column="FDOC_NXT_ITM_NBR" jdbc-type="INTEGER" />
 
     <!--  object references -->
@@ -82,7 +82,7 @@
 
 <!--  SERVICE BILLING DOCUMENT MAPPINGS -->
 <class-descriptor class="org.kuali.kfs.fp.document.ServiceBillingDocument" table="FP_INT_BILL_DOC_T">
-    <!--  common transaction document base attributes -->
+    <!--  common transactional document base attributes -->
     <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
@@ -140,7 +140,7 @@
 
 <!-- AUXILIARY VOUCHER DOCUMENT -->
 <class-descriptor class="org.kuali.kfs.fp.document.AuxiliaryVoucherDocument" table="FP_ACRL_VCHR_DOC_T">
-    <!--  common transaction document base attributes -->
+    <!--  common transactional document base attributes -->
     <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
@@ -183,7 +183,7 @@
 
 <!-- PRE-ENCUMBRANCE DOCUMENT -->
 <class-descriptor class="org.kuali.kfs.fp.document.PreEncumbranceDocument" table="FP_PRE_ENCUM_DOC_T">
-    <!--  common transaction document base attributes -->
+    <!--  common transactional document base attributes -->
     <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
@@ -772,9 +772,9 @@
     <field-descriptor name="totalConfirmedCheckAmount" column="FDOC_CNFRMD_CHCK_AMT" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
     <field-descriptor name="totalConfirmedCoinAmount" column="FDOC_CNFRMD_COIN_AMT" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
     <!--
-        <field-descriptor name="totalChangeRequestOutAmount" column="FDOC_CHANGEOUT_AMT" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
-        <field-descriptor name="totalNonCashAmount" column="FDOC_NONCASH_AMT" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
-        <field-descriptor name="totalRevolvingFundOutAmount" column="FDOC_REVOLVFND_AMT" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
+        <field-descriptor name="totalChangeRequestOutAmount" column="FDOC_CHANGEOUT_AMT" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
+        <field-descriptor name="totalNonCashAmount" column="FDOC_NONCASH_AMT" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
+        <field-descriptor name="totalRevolvingFundOutAmount" column="FDOC_REVOLVFND_AMT" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
         <field-descriptor name="nextRevolvingFundOutLineNumber" column="FDOC_NXT_RF_LN_NBR" jdbc-type="INTEGER" />
     -->
     <field-descriptor name="nextCheckSequenceId" column="FDOC_NXT_CK_LN_NBR" jdbc-type="INTEGER" />
@@ -864,7 +864,7 @@
     <field-descriptor name="totalCreditCardAmount" column="FDOC_CRDT_CARD_AMT" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion" jdbc-type="DECIMAL" />
     <field-descriptor name="nextCcCrLineNumber" column="FDC_NXTCC_CRLN_NBR" jdbc-type="INTEGER" />
     <field-descriptor name="depositDate" column="FDOC_DEPOSIT_DT" jdbc-type="DATE" />
-
+	<field-descriptor name="creditCardReceiptBankCode" column="FDOC_BNK_CD" jdbc-type="VARCHAR" />
     <!--   object references -->
     <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
         <foreignkey field-ref="documentNumber" />
@@ -874,6 +874,10 @@
         <foreignkey field-ref="postingYear" />
         <foreignkey field-ref="postingPeriodCode" />
     </reference-descriptor>
+    
+    <reference-descriptor name="bank" class-ref="org.kuali.kfs.sys.businessobject.Bank" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="creditCardReceiptBankCode" />
+    </reference-descriptor>
 
     <!-- collections -->
     <!-- common collections -->
@@ -975,7 +979,7 @@
 		<orderby name="capitalAssetLineNumber" sort="ASC" />
         <inverse-foreignkey field-ref="documentNumber" />
     </collection-descriptor>
-    
+    
 </class-descriptor>
 
 <class-descriptor class="org.kuali.kfs.fp.businessobject.AdvanceDepositDetail" table="FP_ADV_DPST_DTL_T">
@@ -998,7 +1002,7 @@
     <reference-descriptor name="advanceDepositDocument" class-ref="org.kuali.kfs.fp.document.AdvanceDepositDocument" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
         <foreignkey field-ref="documentNumber" />
     </reference-descriptor>
-	-->
+
     <reference-descriptor name="bank" class-ref="org.kuali.kfs.sys.businessobject.Bank" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
         <foreignkey field-ref="financialDocumentBankCode" />
     </reference-descriptor>
@@ -1250,6 +1254,7 @@
     <field-descriptor name="cancelDate" column="DV_CNCL_DT" jdbc-type="DATE" />
     <field-descriptor name="disbVchrPdpBankCode" column="DV_PDP_BNK_CD" jdbc-type="VARCHAR" />   
     <field-descriptor name="disbExcptAttachedIndicator" column="DV_EXCPT_IND" jdbc-type="CHAR" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbCharBooleanConversion" />       
+	<field-descriptor name="immediatePaymentIndicator" column="IMD_PMT_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbCharBooleanConversion"/>       
     <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
         <foreignkey field-ref="documentNumber" />
     </reference-descriptor>
@@ -1726,6 +1731,7 @@
 <class-descriptor class="org.kuali.kfs.fp.businessobject.ProcurementCardSourceAccountingLine" table="FP_PRCRMNT_ACCT_LINES_T">
     <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" index="true" />
     <field-descriptor name="financialDocumentTransactionLineNumber" column="FDOC_TRN_LN_NBR" jdbc-type="INTEGER" primarykey="true" index="true" />
+    <field-descriptor name="financialDocumentLineDescription" column="FDOC_LINE_DESC" jdbc-type="VARCHAR" />
     <field-descriptor name="sequenceNumber" column="FDOC_LINE_NBR" jdbc-type="INTEGER" primarykey="true" index="true" />
     <field-descriptor name="financialDocumentLineTypeCode" column="FDOC_LN_TYP_CD" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
@@ -1783,6 +1789,7 @@
 <class-descriptor class="org.kuali.kfs.fp.businessobject.ProcurementCardTargetAccountingLine" table="FP_PRCRMNT_ACCT_LINES_T">
     <field-descriptor name="documentNumber" column="FDOC_NBR" jdbc-type="VARCHAR" primarykey="true" index="true" />
     <field-descriptor name="financialDocumentTransactionLineNumber" column="FDOC_TRN_LN_NBR" jdbc-type="INTEGER" primarykey="true" index="true" />
+    <field-descriptor name="financialDocumentLineDescription" column="FDOC_LINE_DESC" jdbc-type="VARCHAR" />
     <field-descriptor name="sequenceNumber" column="FDOC_LINE_NBR" jdbc-type="INTEGER" primarykey="true" index="true" />
     <field-descriptor name="financialDocumentLineTypeCode" column="FDOC_LN_TYP_CD" jdbc-type="VARCHAR" primarykey="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
@@ -1837,6 +1844,57 @@
     </reference-descriptor>
 </class-descriptor>
 
+<class-descriptor class="org.kuali.kfs.fp.businessobject.ProcurementCardDefault" table="FP_PRCRMNT_CARD_DFLT_T">
+    <field-descriptor name="creditCardNumber" column="CC_NBR" jdbc-type="VARCHAR" primarykey="true" index="true"/>
+    <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
+    <field-descriptor name="versionNumber" column="VER_NBR" jdbc-type="BIGINT" locking="true" />    
+    <field-descriptor name="cardHolderName" column="CARD_HLDR_NM" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderAlternateName" column="CARD_HLDR_ALTRNT_NM" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderLine1Address" column="CARD_HLDR_LN1_ADDR" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderLine2Address" column="CARD_HLDR_LN2_ADDR" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderCityName" column="CARD_HLDR_CTY_NM" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderStateCode" column="CARD_HLDR_ST_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderZipCode" column="CARD_HLDR_ZIP_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardHolderWorkPhoneNumber" column="CARD_HLDR_WRK_PHN_NBR" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardLimit" column="CARD_LMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" />
+    <field-descriptor name="cardCycleAmountLimit" column="CARD_CYCLE_AMT_LMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" />
+    <field-descriptor name="cardCycleVolumeLimit" column="CARD_CYCLE_VOL_LMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.kns.util.OjbKualiDecimalFieldConversion" />
+    <field-descriptor name="cardStatusCode" column="CARD_STAT_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="cardNoteText" column="CARD_NTE_TXT" jdbc-type="VARCHAR" />
+    <field-descriptor name="chartOfAccountsCode" column="FIN_COA_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="accountNumber" column="ACCOUNT_NBR" jdbc-type="VARCHAR" />
+    <field-descriptor name="subAccountNumber" column="SUB_ACCT_NBR" jdbc-type="VARCHAR" />
+    <field-descriptor name="financialObjectCode" column="FIN_OBJECT_CD" jdbc-type="VARCHAR" />
+    <field-descriptor name="financialSubObjectCode" column="FIN_SUB_OBJ_CD" jdbc-type="VARCHAR" />
+	<field-descriptor name="projectCode" column="PROJECT_CD" jdbc-type="VARCHAR" />
+	<field-descriptor name="active" column="ROW_ACTV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+    <reference-descriptor name="account" class-ref="org.kuali.kfs.coa.businessobject.Account" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="chartOfAccountsCode" />
+        <foreignkey field-ref="accountNumber" />
+    </reference-descriptor>
+    <reference-descriptor name="chartOfAccounts" class-ref="org.kuali.kfs.coa.businessobject.Chart" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="chartOfAccountsCode" />
+    </reference-descriptor>
+    <reference-descriptor name="subAccount" class-ref="org.kuali.kfs.coa.businessobject.SubAccount" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
+        <foreignkey field-ref="chartOfAccountsCode" />
+        <foreignkey field-ref="accountNumber" />
+        <foreignkey field-ref="subAccountNumber" />
+    </reference-descriptor> 
+    <reference-descriptor name="objectCode" class-ref="org.kuali.kfs.coa.businessobject.ObjectCodeCurrent" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
+        <foreignkey field-ref="chartOfAccountsCode" />
+        <foreignkey field-ref="financialObjectCode" />
+    </reference-descriptor>    
+    <reference-descriptor name="subObjectCode" class-ref="org.kuali.kfs.coa.businessobject.SubObjectCodeCurrent" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
+        <foreignkey field-ref="chartOfAccountsCode" />
+        <foreignkey field-ref="accountNumber" />
+        <foreignkey field-ref="financialObjectCode" />
+        <foreignkey field-ref="financialSubObjectCode" />
+    </reference-descriptor>        
+    <reference-descriptor name="project" class-ref="org.kuali.kfs.coa.businessobject.ProjectCode" auto-retrieve="true" auto-upate="none" auto-delete="none" proxy="true">
+    	<foreignkey field-ref="projectCode"/>
+    </reference-descriptor>
+</class-descriptor>
+
 <class-descriptor class="org.kuali.kfs.fp.businessobject.DisbursementVoucherAutomatedClearingHouse" table="FP_DV_ACH_T">
     <field-descriptor name="disbursementVoucherAutomatedClearingHouseProfileNumber" column="DV_ACH_PRFL_NBR" jdbc-type="VARCHAR" primarykey="true" index="true" />
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true" />
Index: work/src/org/kuali/kfs/fp/document/validation/impl/CashReceiptCashDrawerOpenValidation.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/impl/CashReceiptCashDrawerOpenValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/impl/CashReceiptCashDrawerOpenValidation.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2008 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -46,6 +46,9 @@
      */
     @Override
     public boolean validate(AttributedDocumentEvent event) {
+        
+        CashReceiptDocument crDoc = (CashReceiptDocument) getCashReceiptDocumentForValidation();
+        
         CashDrawer cd = getCashDrawerService().getByCampusCode(getCashReceiptDocumentForValidation().getCampusLocationCode());
         if (cd == null) {
             throw new IllegalStateException("There is no cash drawer associated with unitName '" + getCashReceiptDocumentForValidation().getCampusLocationCode() + "' from cash receipt " + getCashReceiptDocumentForValidation().getDocumentNumber());
@@ -106,7 +109,7 @@
     }
 
     /**
-     * Gets the cashReceiptDocumentForValidation attribute.
+     * Gets the cashReceiptDocumentForValidation attribute. 
      * @return Returns the cashReceiptDocumentForValidation.
      */
     public CashReceiptFamilyBase getCashReceiptDocumentForValidation() {
@@ -122,7 +125,7 @@
     }
 
     /**
-     * Gets the cashDrawerService attribute.
+     * Gets the cashDrawerService attribute. 
      * @return Returns the cashDrawerService.
      */
     public CashDrawerService getCashDrawerService() {
@@ -138,7 +141,7 @@
     }
 
     /**
-     * Gets the cashReceiptService attribute.
+     * Gets the cashReceiptService attribute. 
      * @return Returns the cashReceiptService.
      */
     public CashReceiptService getCashReceiptService() {
Index: work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherBankCodeValidation.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherBankCodeValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherBankCodeValidation.java	(working copy)
@@ -35,7 +35,7 @@
         
         DisbursementVoucherDocument dvDocument = (DisbursementVoucherDocument) accountingDocumentForValidation;
         
-        boolean isValid = BankCodeValidation.validate(dvDocument.getDisbVchrBankCode(), KFSPropertyConstants.DISB_VCHR_BANK_CODE, false, true);
+        boolean isValid = BankCodeValidation.validate(dvDocument, dvDocument.getDisbVchrBankCode(), KFSPropertyConstants.DISB_VCHR_BANK_CODE, false, true);
 
         return isValid;
     }
Index: work/src/org/kuali/kfs/fp/document/validation/impl/AdvanceDepositValidation.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/impl/AdvanceDepositValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/impl/AdvanceDepositValidation.java	(working copy)
@@ -29,7 +29,7 @@
  * This class...
  */
 public class AdvanceDepositValidation extends GenericValidation {
-    private AdvanceDepositDetail advanceDepositDetailForValidation;
+    protected AdvanceDepositDetail advanceDepositDetailForValidation;
     /**
      * @see org.kuali.kfs.sys.document.validation.Validation#validate(org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent)
      */
Index: work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherNonEmployeeTravelComanyValidation.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherNonEmployeeTravelComanyValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/impl/DisbursementVoucherNonEmployeeTravelComanyValidation.java	(working copy)
@@ -1,123 +0,0 @@
-/*
- * Copyright 2008 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.fp.document.validation.impl;
-
-import java.text.MessageFormat;
-import java.util.List;
-
-import org.kuali.kfs.fp.businessobject.DisbursementVoucherNonEmployeeExpense;
-import org.kuali.kfs.fp.businessobject.DisbursementVoucherNonEmployeeTravel;
-import org.kuali.kfs.fp.businessobject.TravelCompanyCode;
-import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
-import org.kuali.kfs.sys.KFSKeyConstants;
-import org.kuali.kfs.sys.KFSPropertyConstants;
-import org.kuali.kfs.sys.context.SpringContext;
-import org.kuali.kfs.sys.document.AccountingDocument;
-import org.kuali.kfs.sys.document.validation.GenericValidation;
-import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
-import org.kuali.rice.krad.service.BusinessObjectService;
-import org.kuali.rice.krad.util.GlobalVariables;
-import org.kuali.rice.krad.util.MessageMap;
-import org.kuali.rice.krad.util.ObjectUtils;
-
-public class DisbursementVoucherNonEmployeeTravelComanyValidation extends GenericValidation {
-    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(DisbursementVoucherNonEmployeeTravelComanyValidation.class);
-
-    private AccountingDocument accountingDocumentForValidation;
-
-    public final static String DV_PRE_PAID_EMPLOYEE_EXPENSES_PROPERTY_PATH = KFSPropertyConstants.DOCUMENT + "." + KFSPropertyConstants.DV_NON_EMPLOYEE_TRAVEL + "." + KFSPropertyConstants.DV_PRE_PAID_EMPLOYEE_EXPENSES;
-    public final static String DV_NON_EMPLOYEE_EXPENSES_PROPERTY_PATH = KFSPropertyConstants.DOCUMENT + "." + KFSPropertyConstants.DV_NON_EMPLOYEE_TRAVEL + "." + KFSPropertyConstants.DV_NON_EMPLOYEE_EXPENSES;
-
-    /**
-     * @see org.kuali.kfs.sys.document.validation.Validation#validate(org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent)
-     */
-    public boolean validate(AttributedDocumentEvent event) {
-        LOG.debug("validate start");
-        
-        boolean isValid = true;
-        DisbursementVoucherDocument disbursementVoucherDocument = (DisbursementVoucherDocument) accountingDocumentForValidation;
-        DisbursementVoucherNonEmployeeTravel nonEmployeeTravel = disbursementVoucherDocument.getDvNonEmployeeTravel();
-        
-        MessageMap errors = GlobalVariables.getMessageMap();
-        errors.addToErrorPath(KFSPropertyConstants.DOCUMENT);
-
-        // check non employee travel company exists
-        int index = 0;
-        List<DisbursementVoucherNonEmployeeExpense> expenses = nonEmployeeTravel.getDvNonEmployeeExpenses();
-        for (DisbursementVoucherNonEmployeeExpense expense : expenses) {
-            TravelCompanyCode travelCompanyCode = retrieveCompany(expense.getDisbVchrExpenseCode(), expense.getDisbVchrExpenseCompanyName());
-
-            if (ObjectUtils.isNull(travelCompanyCode)) {
-                String fullPropertyName = this.buildFullPropertyName(DV_NON_EMPLOYEE_EXPENSES_PROPERTY_PATH, index, KFSPropertyConstants.DISB_VCHR_EXPENSE_COMPANY_NAME);
-                errors.putErrorWithoutFullErrorPath(fullPropertyName, KFSKeyConstants.ERROR_EXISTENCE, "Company ");
-                isValid = false;
-            }
-
-            index++;
-        }
-
-        // check prepaid expenses company exists
-        index = 0;
-        List<DisbursementVoucherNonEmployeeExpense> prePaidExpenses = nonEmployeeTravel.getDvPrePaidEmployeeExpenses();
-        for (DisbursementVoucherNonEmployeeExpense prePaidExpense : prePaidExpenses) {
-            TravelCompanyCode travelCompanyCode = retrieveCompany(prePaidExpense.getDisbVchrExpenseCode(), prePaidExpense.getDisbVchrExpenseCompanyName());
-
-            if (ObjectUtils.isNull(travelCompanyCode)) {
-                String fullPropertyName = this.buildFullPropertyName(DV_PRE_PAID_EMPLOYEE_EXPENSES_PROPERTY_PATH, index, KFSPropertyConstants.DISB_VCHR_EXPENSE_COMPANY_NAME);
-                errors.putErrorWithoutFullErrorPath(fullPropertyName, KFSKeyConstants.ERROR_EXISTENCE, "Company ");
-                isValid = false;
-            }
-
-            index++;
-        }
-        
-        errors.removeFromErrorPath(KFSPropertyConstants.DOCUMENT);
-        
-        return isValid;
-    }
-
-    // build the full name of a document property
-    protected String buildFullPropertyName(String propertyPath, int index, String propertyName) {
-        String fileNamePattern = "{0}[{1}].{2}";
-
-        return MessageFormat.format(fileNamePattern, propertyPath, index, propertyName);
-    }
-
-    // Retrieves the Company object from the company name
-    protected TravelCompanyCode retrieveCompany(String companyCode, String companyName) {
-        TravelCompanyCode travelCompanyCode = new TravelCompanyCode();
-        travelCompanyCode.setCode(companyCode);
-        travelCompanyCode.setName(companyName);
-        return (TravelCompanyCode) SpringContext.getBean(BusinessObjectService.class).retrieve(travelCompanyCode);
-    }
-
-    /**
-     * Sets the accountingDocumentForValidation attribute value.
-     * 
-     * @param accountingDocumentForValidation The accountingDocumentForValidation to set.
-     */
-    public void setAccountingDocumentForValidation(AccountingDocument accountingDocumentForValidation) {
-        this.accountingDocumentForValidation = accountingDocumentForValidation;
-    }
-
-    /**
-     * Gets the accountingDocumentForValidation attribute. 
-     * @return Returns the accountingDocumentForValidation.
-     */
-    public AccountingDocument getAccountingDocumentForValidation() {
-        return accountingDocumentForValidation;
-    }
-}
Index: work/src/org/kuali/kfs/fp/document/validation/configuration/CashReceiptValidation.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/configuration/CashReceiptValidation.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/configuration/CashReceiptValidation.xml	(working copy)
@@ -55,9 +55,9 @@
 						</list>
 					</property>
 				</bean>
+				
+				<bean parent="CapitalAccountingLines-capitalAccountingLinesValidations" scope="prototype" />
 				
-				<bean parent="CapitalAccountingLines-capitalAccountingLinesValidations" scope="prototype" />
-				
 				<bean parent="CapitialAssetInformation-capitalAssetInformationValidation" scope="prototype" />  
 			</list>
 		</property>
@@ -118,6 +118,13 @@
 						</list>
 					</property>
 				</bean>
+				<bean parent="CashReceipt-cashManagerValidation" scope="prototype">
+					<property name="parameterProperties">
+						<list>
+							<bean parent="cashRecieptDocumentFieldConversion" />
+						</list>
+					</property>
+				</bean>
 				<bean parent="CashReceipt-cashDrawerOpenValidation" scope="prototype">
 					<property name="parameterProperties">
 						<list>
@@ -140,10 +147,17 @@
 							<bean parent="cashRecieptDocumentFieldConversion" />
 						</list>
 					</property>
-				</bean>
+				</bean>
 				
 				<bean parent="CapitalAccountingLines-capitalAccountingLinesValidations" scope="prototype" />
-				
+				
+				<bean parent="CashReceipt-cashManagerValidation" scope="prototype">
+					<property name="parameterProperties">
+						<list>
+							<bean parent="cashRecieptDocumentFieldConversion" />
+						</list>
+					</property>
+				</bean>
 				<bean parent="CapitialAssetInformation-capitalAssetInformationValidation" scope="prototype" />  
 			</list>
 		</property>
Index: work/src/org/kuali/kfs/fp/document/validation/configuration/FinancialProcessingValidators.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/configuration/FinancialProcessingValidators.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/configuration/FinancialProcessingValidators.xml	(working copy)
@@ -133,6 +133,10 @@
 	
 	<bean id="CashReceipt-checkAmountPositiveValidation" class="org.kuali.kfs.fp.document.validation.impl.CashReceiptCheckAmountPositiveValidation" abstract="true" />
 	
+	<bean id="CashReceipt-cashManagerValidation" class="org.kuali.kfs.fp.document.validation.impl.CashReceiptCashManagerValidation" abstract="true">
+		<property name="validRouteNodeNames" value="CashManagement" />
+	</bean>
+	
 	<bean id="CashReceipt-cashDrawerOpenValidation" class="org.kuali.kfs.fp.document.validation.impl.CashReceiptCashDrawerOpenValidation" abstract="true">
 		<property name="cashDrawerService" ref="cashDrawerService" />
 		<property name="cashReceiptService" ref="cashReceiptService" />
@@ -385,7 +389,7 @@
 	
 	<bean id="DisbursementVoucher-foreignDraftValidation" class="org.kuali.kfs.fp.document.validation.impl.DisbursementVoucherForeignDraftValidation" abstract="true" />
 	
-	<bean id="DisbursementVoucher-nonEmployeeTravelComanyValidation" class="org.kuali.kfs.fp.document.validation.impl.DisbursementVoucherNonEmployeeTravelComanyValidation" abstract="true" />
+	<bean id="DisbursementVoucher-nonEmployeeTravelCompanyValidation" class="org.kuali.kfs.fp.document.validation.impl.DisbursementVoucherNonEmployeeTravelCompanyValidation" abstract="true" />
 	
 	<bean id="DisbursementVoucher-nonEmployeeTravelValidation" class="org.kuali.kfs.fp.document.validation.impl.DisbursementVoucherNonEmployeeTravelValidation" abstract="true">
 		<property name="parameterService" ref="parameterService" />
Index: work/src/org/kuali/kfs/fp/document/validation/configuration/DisbursementVoucherValidation.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/validation/configuration/DisbursementVoucherValidation.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/validation/configuration/DisbursementVoucherValidation.xml	(working copy)
@@ -277,7 +277,7 @@
 						</list>
 					</property>
 				</bean>
-				<bean parent="DisbursementVoucher-nonEmployeeTravelComanyValidation" scope="prototype">
+				<bean parent="DisbursementVoucher-nonEmployeeTravelCompanyValidation" scope="prototype">
 					<property name="parameterProperties">
 						<list>
 							<bean parent="accountingDocumentFieldConversion" />
Index: work/src/org/kuali/kfs/fp/document/datadictionary/YearEndTransferOfFundsDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/YearEndTransferOfFundsDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/YearEndTransferOfFundsDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="YETF"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.YearEndTransferOfFundsDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.YearEndTransferOfFundsDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/YearEndDistributionOfIncomeAndExpenseDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/YearEndDistributionOfIncomeAndExpenseDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/YearEndDistributionOfIncomeAndExpenseDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="YEDI"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.YearEndDistributionOfIncomeAndExpenseDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.YearEndDistributionOfIncomeAndExpenseDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.YearEndDistributionOfIncomeAndExpenseDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.YearEndDistributionOfIncomeAndExpenseDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/AdvanceDepositDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/AdvanceDepositDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/AdvanceDepositDocument.xml	(working copy)
@@ -20,8 +20,10 @@
   <bean id="AdvanceDepositDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="AD"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.AdvanceDepositDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.AdvanceDepositDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
+    <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.AdvanceDepositDocumentPresentationController"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.fp.document.validation.impl.AdvanceDepositDocumentPreRules"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.BasicFormatWithLineDescriptionAccountingLineParser" />
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/CashReceiptDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/CashReceiptDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/CashReceiptDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="CashReceiptDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="CR"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.CashReceiptDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.CashReceiptDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.BasicFormatWithLineDescriptionAccountingLineParser" />
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.CashReceiptDocumentAuthorizer"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/ProcurementCardDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/ProcurementCardDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/ProcurementCardDocument.xml	(working copy)
@@ -19,6 +19,7 @@
   <bean id="ProcurementCardDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="PCDO"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.ProcurementCardDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.ProcurementCardDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.ProcurementCardDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.ProcurementCardDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/JournalVoucherDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/JournalVoucherDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/JournalVoucherDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="JV"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.JournalVoucherDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.JournalVoucherDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/BudgetAdjustmentDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/BudgetAdjustmentDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/BudgetAdjustmentDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="BA"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.BudgetAdjustmentDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.BudgetAdjustmentDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.BudgetAdjustmentDocumentPresentationController"/>    
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.fp.document.validation.impl.BudgetAdjustmentDocumentPreRules"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/InternalBillingDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/InternalBillingDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/InternalBillingDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="IB"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.InternalBillingDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.InternalBillingDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.InternalBillingDocumentAuthorizer"/>
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/GeneralErrorCorrectionDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/GeneralErrorCorrectionDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/GeneralErrorCorrectionDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="GEC"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.GeneralErrorCorrectionDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.GeneralErrorCorrectionDocument"/> 
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.GeneralErrorCorrectionDocumentAccountingLineParser" />
Index: work/src/org/kuali/kfs/fp/document/datadictionary/CreditCardReceiptDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/CreditCardReceiptDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/CreditCardReceiptDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="CreditCardReceiptDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="CCR"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.CreditCardReceiptDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.CreditCardReceiptDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.BasicFormatWithLineDescriptionAccountingLineParser" />
Index: work/src/org/kuali/kfs/fp/document/datadictionary/YearEndBudgetAdjustmentDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/YearEndBudgetAdjustmentDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/YearEndBudgetAdjustmentDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="YEBA"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.YearEndBudgetAdjustmentDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.YearEndBudgetAdjustmentDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.BudgetAdjustmentDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.YearEndBudgetAdjustmentDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/YearEndGeneralErrorCorrectionDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/YearEndGeneralErrorCorrectionDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/YearEndGeneralErrorCorrectionDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="YEGE"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.YearEndGeneralErrorCorrectionDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.YearEndGeneralErrorCorrectionDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/PreEncumbranceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/PreEncumbranceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/PreEncumbranceDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="PE"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.PreEncumbranceDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.PreEncumbranceDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.PreEncumbranceDocumentAccountingLineParser" />
Index: work/src/org/kuali/kfs/fp/document/datadictionary/IndirectCostAdjustmentDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/IndirectCostAdjustmentDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/IndirectCostAdjustmentDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="ICA"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.IndirectCostAdjustmentDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.IndirectCostAdjustmentDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.IndirectCostAdjustmentDocumentAccountingLineParser" />
Index: work/src/org/kuali/kfs/fp/document/datadictionary/DisbursementVoucherDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/DisbursementVoucherDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/DisbursementVoucherDocument.xml	(working copy)
@@ -20,7 +20,7 @@
   <bean id="DisbursementVoucherDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="DV"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.DisbursementVoucherDocument"/>
-	   
+	<property name="baseDocumentClass" value="org.kuali.kfs.fp.document.DisbursementVoucherDocument"/>   
 	<property name="promptBeforeValidationClass" value="org.kuali.kfs.fp.document.validation.impl.DisbursementVoucherDocumentPreRules"/>   
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     
@@ -63,6 +63,7 @@
         <ref bean="DisbursementVoucherDocument-disbVchrBankCode"/>
         <ref bean="DisbursementVoucherDocument-disbVchrPdpBankCode"/>
         <ref bean="DisbursementVoucherDocument-disbExcptAttachedIndicator"/>
+        <ref bean="DisbursementVoucherDocument-immediatePaymentIndicator"/>
       </list>
     </property>
     
@@ -410,6 +411,19 @@
     </property>
   </bean>
   
+  <bean id="DisbursementVoucherDocument-immediatePaymentIndicator" parent="DisbursementVoucherDocument-immediatePaymentIndicator-parentBean"/>
+
+  <bean id="DisbursementVoucherDocument-immediatePaymentIndicator-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="immediatePaymentIndicator"/>
+    <property name="forceUppercase" value="true"/>
+    <property name="label" value="Immediate Payment Indicator"/>
+    <property name="shortLabel" value="Immediate Pay"/>
+    <property name="maxLength" value="1"/>
+    <property name="control">
+      <bean parent="CheckboxControlDefinition"/>
+    </property>
+  </bean>
+  
 	<!-- Exported Workflow Attributes -->
   	<bean id="DisbursementVoucherDocument-workflowAttributes" parent="DisbursementVoucherDocument-workflowAttributes-parentBean"/>
 
Index: work/src/org/kuali/kfs/fp/document/datadictionary/ServiceBillingDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/ServiceBillingDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/ServiceBillingDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="SB"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.ServiceBillingDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.ServiceBillingDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.ServiceBillingDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentPresentationControllerBase"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/AuxiliaryVoucherDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/AuxiliaryVoucherDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/AuxiliaryVoucherDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="AV"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.AuxiliaryVoucherDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.AuxiliaryVoucherDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="sessionDocument" value="true"/>
     <property name="allowsCopy" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/TransferOfFundsDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/TransferOfFundsDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/TransferOfFundsDocument.xml	(working copy)
@@ -26,6 +26,7 @@
     
     <property name="documentTypeName" value="TF"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.TransferOfFundsDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.TransferOfFundsDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/DistributionOfIncomeAndExpenseDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/DistributionOfIncomeAndExpenseDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/DistributionOfIncomeAndExpenseDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="DI"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.DistributionOfIncomeAndExpenseDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.DistributionOfIncomeAndExpenseDocument"/> 
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.DistributionOfIncomeAndExpenseDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.DistributionOfIncomeAndExpenseDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/fp/document/datadictionary/CashManagementDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/CashManagementDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/CashManagementDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="CashManagementDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="CMD"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.CashManagementDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.CashManagementDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.fp.document.validation.impl.CashManagementDocumentRule"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.fp.document.validation.impl.CashManagementDocumentPreRules"/>    
     
Index: work/src/org/kuali/kfs/fp/document/datadictionary/NonCheckDisbursementDocument.xml
===================================================================
--- work/src/org/kuali/kfs/fp/document/datadictionary/NonCheckDisbursementDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/datadictionary/NonCheckDisbursementDocument.xml	(working copy)
@@ -21,8 +21,10 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="ND"/>
     <property name="documentClass" value="org.kuali.kfs.fp.document.NonCheckDisbursementDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.fp.document.NonCheckDisbursementDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
+    <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.NonCheckDisbursementDocumentPresentationController"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.fp.document.validation.impl.NonCheckDisbursementDocumentPreRules"/>
     <property name="importedLineParserClass" value="org.kuali.kfs.fp.businessobject.NonCheckDisbursementDocumentAccountingLineParser" />
     <property name="sessionDocument" value="true"/>
Index: work/src/org/kuali/kfs/fp/document/CreditCardReceiptDocument.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/CreditCardReceiptDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/CreditCardReceiptDocument.java	(working copy)
@@ -55,7 +55,9 @@
 
     // monetary attributes
     protected KualiDecimal totalCreditCardAmount = KualiDecimal.ZERO;
-
+    protected String creditCardReceiptBankCode;
+    protected Bank bank;
+    
     /**
      * Default constructor that calls super.
      */
@@ -268,12 +270,60 @@
     }
     
     /**
+     * Assigns default bank code
+     */
+    public void initiateDocument() {
+        // default bank code
+        Bank defaultBank = SpringContext.getBean(BankService.class).getDefaultBankByDocType(this.getClass());
+        if (defaultBank != null) {
+            this.creditCardReceiptBankCode = defaultBank.getBankCode();
+            this.bank = defaultBank;
+        }
+    }
+    
+    /**
      * Returns the default bank code for Credit Card Receipt documents.
      */
     protected Bank getOffsetBank() {
-        return SpringContext.getBean(BankService.class).getDefaultBankByDocType(this.getClass());
+        return SpringContext.getBean(BankService.class).getByPrimaryId(creditCardReceiptBankCode);
     }
     
+    /**
+     * Gets the creditCardReceiptBankCode attribute. 
+     * @return Returns the creditCardReceiptBankCode.
+     */
+    public String getCreditCardReceiptBankCode() {
+        return creditCardReceiptBankCode;
+    }
+
+
+    /**
+     * Sets the creditCardReceiptBankCode attribute value.
+     * @param creditCardReceiptBankCode The creditCardReceiptBankCode to set.
+     */
+    public void setCreditCardReceiptBankCode(String creditCardReceiptBankCode) {
+        this.creditCardReceiptBankCode = creditCardReceiptBankCode;
+    }
+
+
+    /**
+     * Gets the bank attribute. 
+     * @return Returns the bank.
+     */
+    public Bank getBank() {
+        return bank;
+    }
+
+
+    /**
+     * Sets the bank attribute value.
+     * @param bank The bank to set.
+     */
+    public void setBank(Bank bank) {
+        this.bank = bank;
+    }
+
+
     @Override
     public void postProcessSave(KualiDocumentEvent event) {
         super.postProcessSave(event);
Index: work/src/org/kuali/kfs/fp/document/authorization/DisbursementVoucherDocumentPresentationController.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/authorization/DisbursementVoucherDocumentPresentationController.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/authorization/DisbursementVoucherDocumentPresentationController.java	(working copy)
@@ -43,6 +43,7 @@
         editModes.add(KfsAuthorizationConstants.DisbursementVoucherEditMode.TAX_ENTRY);
         editModes.add(KfsAuthorizationConstants.DisbursementVoucherEditMode.FRN_ENTRY);
         editModes.add(KfsAuthorizationConstants.DisbursementVoucherEditMode.WIRE_ENTRY);
+        editModes.add(KfsAuthorizationConstants.DisbursementVoucherEditMode.IMMEDIATE_DISBURSEMENT_ENTRY);
 
         addFullEntryEntryMode(document, editModes);
         addPayeeEditEntryMode(document, editModes);
Index: work/src/org/kuali/kfs/fp/document/authorization/CashManagementDocumentPresentationControllerBase.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/authorization/CashManagementDocumentPresentationControllerBase.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/authorization/CashManagementDocumentPresentationControllerBase.java	(working copy)
@@ -41,7 +41,11 @@
     @Override
     public Set<String> getEditModes(Document document) {
         Set<String> editModes = super.getEditModes(document);
-
+        
+        if (!this.canHaveBankEntry(document)) {
+            editModes.add(KFSConstants.BANK_ENTRY_VIEWABLE_EDITING_MODE);
+        }
+        
         WorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
         if (workflowDocument.isSaved()) {
             editModes.add(KfsAuthorizationConstants.CashManagementEditMode.ALLOW_CANCEL_DEPOSITS);
@@ -236,4 +240,15 @@
         }
         return cashDrawerMaintainable;
     }
+    
+    @Override
+    public Set<String> getDocumentActions(Document document) {
+        Set<String> documentActions = super.getDocumentActions(document);
+        
+        if (!canHaveBankEntry(document)) {
+            documentActions.add(KFSConstants.KFS_ACTION_CAN_EDIT_BANK);
+        }
+        
+        return documentActions;
+    }
 }
Index: work/src/org/kuali/kfs/fp/document/authorization/DisbursementVoucherDocumentAuthorizer.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/authorization/DisbursementVoucherDocumentAuthorizer.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/authorization/DisbursementVoucherDocumentAuthorizer.java	(working copy)
@@ -19,6 +19,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
 import org.kuali.kfs.sys.businessobject.AccountingLine;
@@ -47,6 +48,11 @@
         if (isAtAccountLevel(disbursementVoucherDocument)) {
             addAccountQualification(getAccountingLines(disbursementVoucherDocument), attributes);
         }
+        
+        // add campus code if we have one
+        if (!StringUtils.isBlank(disbursementVoucherDocument.getCampusCode())) {
+            attributes.put(KfsKimAttributes.CAMPUS_CODE, disbursementVoucherDocument.getCampusCode());
+        }
     }
     
     /**
@@ -54,7 +60,7 @@
      * @param disbursementVoucherDocument a document to get accounting lines from
      * @return a List of accounting lines
      */
-    protected List getAccountingLines(DisbursementVoucherDocument disbursementVoucherDocument) {  
+    protected List<? extends AccountingLine> getAccountingLines(DisbursementVoucherDocument disbursementVoucherDocument) {  
         return disbursementVoucherDocument.getSourceAccountingLines();
     }
 
@@ -64,12 +70,12 @@
      * @param accountingLines a List of AccountingLines
      * @param attributes a Map of role qualification attributes
      */
-    protected void addAccountQualification(List accountingLines, Map<String, String> attributes) {
+    protected void addAccountQualification(List<? extends AccountingLine> accountingLines, Map<String, String> attributes) {
         final Person currentUser = GlobalVariables.getUserSession().getPerson();
         boolean foundQualification = false;
         int count = 0;
         while (!foundQualification && count < accountingLines.size()) {
-            AccountingLine accountingLine = (AccountingLine)accountingLines.get(count);
+            AccountingLine accountingLine = accountingLines.get(count);
             if (ObjectUtils.isNull(accountingLine.getAccount())) {
                 accountingLine.refreshReferenceObject("account");
             }
Index: work/src/org/kuali/kfs/fp/document/authorization/CashReceiptDocumentPresentationController.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/authorization/CashReceiptDocumentPresentationController.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/authorization/CashReceiptDocumentPresentationController.java	(working copy)
@@ -111,4 +111,43 @@
         }
     }
 
+    /**
+     * @see org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentPresentationControllerBase#getEditModes(org.kuali.rice.kns.document.Document)
+     */
+    @Override
+    public Set<String> getEditModes(Document document) {
+        Set<String> editModes = super.getEditModes(document);
+        addFullEntryEntryMode(document, editModes);
+        addChangeRequestMode(document, editModes);
+        
+        return editModes;
+    }
+    
+    protected void addFullEntryEntryMode(Document document, Set<String> editModes) {
+        KualiWorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
+
+        if (workflowDocument.stateIsEnroute()) {
+            List<String> currentRouteLevels = getCurrentRouteLevels(workflowDocument);
+            if(currentRouteLevels.contains("CashManagement")) {
+                editModes.add(KfsAuthorizationConstants.CashReceiptEditMode.CASH_MANAGER_CONFIRM_MODE);
+            }
+        }
+    }
+    
+    protected void addChangeRequestMode(Document document, Set<String> editModes) {
+        boolean IndValue = SpringContext.getBean(ParameterService.class).getIndicatorParameter(CashReceiptDocument.class, "CHANGE_REQUEST_ENABLED_IND");
+        if(IndValue) {
+            editModes.add(KfsAuthorizationConstants.CashReceiptEditMode.CHANGE_REQUEST_MODE);
+        }
+    }
+    
+    protected List<String> getCurrentRouteLevels(KualiWorkflowDocument workflowDocument) {
+        try {
+            return Arrays.asList(workflowDocument.getNodeNames());
+        }
+        catch (WorkflowException e) {
+            throw new RuntimeException(e);
+        }
+    }
+    
 }
Index: work/src/org/kuali/kfs/fp/document/web/struts/CashManagementForm.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/web/struts/CashManagementForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/web/struts/CashManagementForm.java	(working copy)
@@ -544,7 +544,7 @@
         public void resummarize(CashManagementDocument cmDoc) {
             //
             // get all interesting CRs
-            String campusCode = cmDoc.getCampusCode(); 
+            String campusCode = cmDoc.getCampusCode();
             List<CashReceiptDocument> interestingReceipts = SpringContext.getBean(CashReceiptService.class).getCashReceipts(campusCode, INTERESTING_STATII);
 
 
@@ -1155,7 +1155,7 @@
     }
 
     /**
-     * @see org.kuali.rice.kns.web.struts.form.pojo.PojoFormBase#postprocessRequestParameters(java.util.Map)
+     * @see org.kuali.rice.kns.web.struts.pojo.PojoFormBase#postprocessRequestParameters(java.util.Map)
      */
     @Override
     public void postprocessRequestParameters(Map requestParameters) {
Index: work/src/org/kuali/kfs/fp/document/web/struts/CreditCardReceiptAction.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/web/struts/CreditCardReceiptAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/web/struts/CreditCardReceiptAction.java	(working copy)
@@ -27,6 +27,7 @@
 import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.rice.krad.util.GlobalVariables;
+import org.kuali.rice.kns.web.struts.form.KualiDocumentFormBase;
 
 /**
  * This is the action class for the CreditCardReceiptDocument.
@@ -46,6 +47,9 @@
 
             ccrDoc.setTotalCreditCardAmount(ccrDoc.calculateCreditCardReceiptTotal()); // recalc b/c changes to the amounts could
             // have happened
+            
+            //set bank
+            ccrDoc.setBank(SpringContext.getBean(BankService.class).getByPrimaryId(ccrDoc.getCreditCardReceiptBankCode()));
         }
 
         // proceed as usual
@@ -115,4 +119,15 @@
         GlobalVariables.getMessageMap().removeFromErrorPath(KFSPropertyConstants.NEW_CREDIT_CARD_RECEIPT);
         return isValid;
     }
+    
+    /**
+     * Do initialization for a new credit card receipt
+     * 
+     * @see org.kuali.rice.kns.web.struts.action.KualiDocumentActionBase#createDocument(org.kuali.rice.kns.web.struts.form.KualiDocumentFormBase)
+     */
+    @Override
+    protected void createDocument(KualiDocumentFormBase kualiDocumentFormBase) throws WorkflowException {
+        super.createDocument(kualiDocumentFormBase);
+        ((CreditCardReceiptDocument) kualiDocumentFormBase.getDocument()).initiateDocument();
+    }
 }
Index: work/src/org/kuali/kfs/fp/document/web/struts/DepositWizardAction.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/web/struts/DepositWizardAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/web/struts/DepositWizardAction.java	(working copy)
@@ -63,6 +63,7 @@
 import org.kuali.rice.kns.document.authorization.TransactionalDocumentAuthorizer;
 import org.kuali.rice.kns.document.authorization.TransactionalDocumentPresentationController;
 import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.service.DocumentHelperService;
 import org.kuali.rice.kns.web.struts.action.KualiAction;
 import org.kuali.rice.krad.exception.InfrastructureException;
@@ -223,29 +224,28 @@
         final FinancialSystemTransactionalDocumentEntry ddEntry = getCashManagementDataDictionaryEntry();
         final TransactionalDocumentPresentationController presentationController = getCashManagementPresentationController(ddEntry);
         final TransactionalDocumentAuthorizer docAuthorizer = getCashManagementDocumentAuthorizer(ddEntry);
-
+        
         dform.setEditingMode(retrieveEditingModes(dform.getCashManagementDocId(), presentationController, docAuthorizer));
         dform.setDocumentActions(retrieveDocumentActions(dform.getCashManagementDocId(), presentationController, docAuthorizer));
     }
-
+    
     /**
      * @return the class of the cash management document
      */
     protected String getCashManagementDocumentTypeName() {
         return "CMD";
     }
-
+    
     /**
      * @return the data dictionary entry for the cash management class
      */
     private FinancialSystemTransactionalDocumentEntry getCashManagementDataDictionaryEntry() {
         final DataDictionaryService ddService = SpringContext.getBean(DataDictionaryService.class);
-        return (FinancialSystemTransactionalDocumentEntry) ddService.getDataDictionary().getDocumentEntry(getCashManagementDocumentTypeName());
+        return (FinancialSystemTransactionalDocumentEntry)ddService.getDataDictionary().getDocumentEntry(getCashManagementDocumentTypeName());
     }
-
+    
     /**
      * Returns an instance of the document presentation controller for the cash management class
-     * 
      * @param cashManagementEntry the data dictionary entry for the cash management document
      * @return an instance of the proper document presentation controller
      */
@@ -253,7 +253,7 @@
         final Class presentationControllerClass = cashManagementEntry.getDocumentPresentationControllerClass();
         TransactionalDocumentPresentationController presentationController = null;
         try {
-            presentationController = (TransactionalDocumentPresentationController) presentationControllerClass.newInstance();
+            presentationController = (TransactionalDocumentPresentationController)presentationControllerClass.newInstance();
         }
         catch (InstantiationException ie) {
             throw new RuntimeException("Could not instantiate cash management presentation controller of class " + presentationControllerClass.getName(), ie);
@@ -263,10 +263,9 @@
         }
         return presentationController;
     }
-
+    
     /**
      * Returns an instance of the document authorizer for the cash management class
-     * 
      * @param cashManagementEntry the data dictionary entry for the cash management document
      * @return an instance of the proper document authorizer
      */
@@ -274,7 +273,7 @@
         final Class docAuthorizerClass = cashManagementEntry.getDocumentAuthorizerClass();
         TransactionalDocumentAuthorizer docAuthorizer = null;
         try {
-            docAuthorizer = (TransactionalDocumentAuthorizer) docAuthorizerClass.newInstance();
+            docAuthorizer = (TransactionalDocumentAuthorizer)docAuthorizerClass.newInstance();
         }
         catch (InstantiationException ie) {
             throw new RuntimeException("Could not instantiate cash management document authorizer of class " + docAuthorizerClass.getName(), ie);
@@ -284,10 +283,9 @@
         }
         return docAuthorizer;
     }
-
+    
     /**
      * Retrieves the edit modes for the given cash management document
-     * 
      * @param cashManagementDocId the id of the cash management document to check
      * @param presentationController the presentation controller of the cash management document
      * @param docAuthorizer the cash management document authorizer
@@ -296,7 +294,7 @@
     private Map retrieveEditingModes(String cashManagementDocId, TransactionalDocumentPresentationController presentationController, TransactionalDocumentAuthorizer docAuthorizer) {
         Map editModeMap = null;
         try {
-            final CashManagementDocument cmDoc = (CashManagementDocument) SpringContext.getBean(DocumentService.class).getByDocumentHeaderId(cashManagementDocId);
+            final CashManagementDocument cmDoc = (CashManagementDocument)SpringContext.getBean(DocumentService.class).getByDocumentHeaderId(cashManagementDocId);
             Set<String> editModes = presentationController.getEditModes(cmDoc);
             editModes = docAuthorizer.getEditModes(cmDoc, GlobalVariables.getUserSession().getPerson(), editModes);
             editModeMap = convertSetToMap(editModes);
@@ -306,10 +304,9 @@
         }
         return editModeMap;
     }
-
+    
     /**
      * Retrieves the document actions for the given cash management document
-     * 
      * @param cashManagementDocId the id of the cash management document to check
      * @param presentationController the presentation controller of the cash management document
      * @param docAuthorizer the cash management document authorizer
@@ -318,7 +315,7 @@
     private Map retrieveDocumentActions(String cashManagementDocId, TransactionalDocumentPresentationController presentationController, TransactionalDocumentAuthorizer docAuthorizer) {
         Map documentActionsMap = null;
         try {
-            final CashManagementDocument cmDoc = (CashManagementDocument) SpringContext.getBean(DocumentService.class).getByDocumentHeaderId(cashManagementDocId);
+            final CashManagementDocument cmDoc = (CashManagementDocument)SpringContext.getBean(DocumentService.class).getByDocumentHeaderId(cashManagementDocId);
             Set<String> documentActions = presentationController.getDocumentActions(cmDoc);
             documentActions = docAuthorizer.getEditModes(cmDoc, GlobalVariables.getUserSession().getPerson(), documentActions);
             documentActionsMap = convertSetToMap(documentActions);
@@ -328,18 +325,16 @@
         }
         return documentActionsMap;
     }
-
+    
     /**
-     * Converts a set into a map, where each value in the set becomes a key and each value becomes
-     * KRADConstants.KUALI_DEFAULT_TRUE_VALUE
-     * 
+     * Converts a set into a map, where each value in the set becomes a key and each value becomes KNSConstants.KUALI_DEFAULT_TRUE_VALUE
      * @param s a set
      * @return a map
      */
-    protected Map convertSetToMap(Set s) {
+    protected Map convertSetToMap(Set s){
         Map map = new HashMap();
         Iterator i = s.iterator();
-        while (i.hasNext()) {
+        while(i.hasNext()) {
             Object key = i.next();
             map.put(key, KRADConstants.KUALI_DEFAULT_TRUE_VALUE);
         }
@@ -392,9 +387,9 @@
         final CashReceiptService cashReceiptService = SpringContext.getBean(CashReceiptService.class);
         final DocumentService documentService = SpringContext.getBean(DocumentService.class);
         final CashManagementService cashManagementService = SpringContext.getBean(CashManagementService.class);
-
+        
         CurrencyFormatter formatter = new CurrencyFormatter();
-
+        
         // reload edit modes - just in case we have to return to the deposit wizard page
         loadEditModesAndDocumentActions(dform);
 
@@ -759,3 +754,4 @@
         return new ActionForward(cmActionUrl, true);
     }
 }
+
Index: work/src/org/kuali/kfs/fp/document/web/struts/BudgetAdjustmentAction.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/web/struts/BudgetAdjustmentAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/web/struts/BudgetAdjustmentAction.java	(working copy)
@@ -30,6 +30,7 @@
 import org.kuali.kfs.sys.businessobject.AccountingLineOverride;
 import org.kuali.kfs.sys.businessobject.AccountingLineOverride.COMPONENT;
 import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.document.AccountingDocument;
 import org.kuali.kfs.sys.web.struts.KualiAccountingDocumentActionBase;
 import org.kuali.rice.kew.api.exception.WorkflowException;
 import org.kuali.rice.kns.util.KNSGlobalVariables;
@@ -67,20 +68,20 @@
     }
 
     @Override
-    protected void processAccountingLineOverrides(List accountingLines) {
+    protected void processAccountingLineOverrides(AccountingDocument financialDocument, List accountingLines) {
         if (!accountingLines.isEmpty()) {
             SpringContext.getBean(PersistenceService.class).retrieveReferenceObjects(accountingLines, AccountingLineOverride.REFRESH_FIELDS);
 
             for (Iterator i = accountingLines.iterator(); i.hasNext();) {
                 AccountingLine line = (AccountingLine) i.next();
-                processForOutput(line);
+                processForOutput(financialDocument,line);
             }
         }
     }
     
-    protected void processForOutput(AccountingLine line) {
+    protected void processForOutput(AccountingDocument financialDocument,AccountingLine line) {
         AccountingLineOverride fromCurrentCode = AccountingLineOverride.valueOf(line.getOverrideCode());
-        AccountingLineOverride needed = AccountingLineOverride.determineNeededOverrides(line);
+        AccountingLineOverride needed = AccountingLineOverride.determineNeededOverrides(financialDocument,line);
         line.setAccountExpiredOverride(fromCurrentCode.hasComponent(COMPONENT.EXPIRED_ACCOUNT));
         line.setAccountExpiredOverrideNeeded(needed.hasComponent(COMPONENT.EXPIRED_ACCOUNT));
         line.setObjectBudgetOverride(false);
Index: work/src/org/kuali/kfs/fp/document/web/struts/CashReceiptForm.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/web/struts/CashReceiptForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/web/struts/CashReceiptForm.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2005-2006 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -72,7 +72,7 @@
         checkEntryModes = new ArrayList();
         checkEntryModes.add(new LabelValueBean("Individual Checks/Batches", CashReceiptDocument.CHECK_ENTRY_DETAIL));
         checkEntryModes.add(new LabelValueBean("Total Only", CashReceiptDocument.CHECK_ENTRY_TOTAL));
-
+        
         baselineChecks = new ArrayList();
         capitalAssetInformation = new ArrayList<CapitalAssetInformation>();
         this.capitalAccountingLine.setCanCreateAsset(false); //This document can only edit asset information
@@ -82,7 +82,7 @@
     protected String getDefaultDocumentTypeName() {
         return "CR";
     }
-
+    
     @Override
     public void populate(HttpServletRequest request) {
         super.populate(request);
@@ -176,7 +176,7 @@
 
     /**
      * Sets the current List of baseline checks to the given List
-     *
+     * 
      * @param baselineChecks
      */
     public void setBaselineChecks(List baselineChecks) {
@@ -200,7 +200,7 @@
     /**
      * Implementation creates empty Checks as a side-effect, so that Struts' efforts to set fields of lines which haven't been
      * created will succeed rather than causing a NullPointerException.
-     *
+     * 
      * @param index
      * @return baseline Check at the given index
      */
@@ -213,7 +213,7 @@
 
     /**
      * Gets the financialDocumentStatusMessage which is dependent upon document state.
-     *
+     * 
      * @return Returns the financialDocumentStatusMessage.
      */
     public String getFinancialDocumentStatusMessage() {
@@ -252,7 +252,7 @@
 
     /**
      * This method will build out a message in the case the document is ENROUTE and the cash drawer is closed.
-     *
+     * 
      * @return String
      */
     public String getCashDrawerStatusMessage() {
@@ -281,7 +281,7 @@
 
     /**
      * determines if the <code>{@link CashReceiptDocument}</code> is in a state that allows printing of the cover sheet.
-     *
+     * 
      * @return boolean
      */
     public boolean isCoverSheetPrintingAllowed() {
@@ -303,7 +303,7 @@
     public void setCapitalAssetInformation(List<CapitalAssetInformation> capitalAssetInformation) {
         this.capitalAssetInformation = capitalAssetInformation;
     }
-
+    
     /**
      * @see org.kuali.kfs.sys.web.struts.KualiAccountingDocumentFormBase#getExcludedmethodToCall()
      */
@@ -311,7 +311,7 @@
     protected List<String> getExcludedmethodToCall() {
         List<String> execludedMethodToCall = super.getExcludedmethodToCall();
         execludedMethodToCall.add("printCoverSheet");
-
+        
         return execludedMethodToCall;
-    }
+    } 
 }
Index: work/src/org/kuali/kfs/fp/document/DisbursementVoucherConstants.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/DisbursementVoucherConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/DisbursementVoucherConstants.java	(working copy)
@@ -32,6 +32,7 @@
  */
 // TODO: after DisbursementVoucherDocumentRule is remove, it is good to change this interface into a class
 public interface DisbursementVoucherConstants {
+    public static final String DOCUMENT_TYPE_CODE = "DV";
 
     // Text limits
     public static final int MAX_NOTE_LINE_SIZE = 90;
@@ -184,6 +185,9 @@
     public static final String INDIVIDUAL_OWNERSHIP_TYPES_PARM_NM = "INDIVIDUAL_OWNERSHIP_TYPES";
     public static final String PAYMENT_REASONS_REQUIRING_TAX_REVIEW_PARM_NM = "PAYMENT_REASONS_REQUIRING_TAX_REVIEW";
     public static final String CAMPUSES_TAXED_FOR_MOVING_REIMBURSEMENTS_PARM_NM = "CAMPUSES_TAXED_FOR_MOVING_REIMBURSEMENTS";
+    
+    public static final String IMMEDIATE_EXTRACT_FROM_ADDRESS_PARM_NM = "IMMEDIATE_EXTRACT_NOTIFICATION_FROM_EMAIL_ADDRESS";
+    public static final String IMMEDIATE_EXTRACT_TO_ADDRESSES_PARM_NM = "IMMEDIATE_EXTRACT_NOTIFICATION_TO_EMAIL_ADDRESSES";
 
     public static final String TAX_TYPE_SSN = "1";
     public static final String TAX_TYPE_FEIN = "0";
Index: work/src/org/kuali/kfs/fp/document/DisbursementVoucherDocument.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/DisbursementVoucherDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/DisbursementVoucherDocument.java	(working copy)
@@ -32,6 +32,7 @@
 import org.apache.log4j.Logger;
 import org.kuali.kfs.coa.businessobject.ObjectCode;
 import org.kuali.kfs.coa.service.ObjectTypeService;
+import org.kuali.kfs.fp.batch.service.DisbursementVoucherExtractService;
 import org.kuali.kfs.fp.businessobject.DisbursementVoucherDocumentationLocation;
 import org.kuali.kfs.fp.businessobject.DisbursementVoucherNonEmployeeTravel;
 import org.kuali.kfs.fp.businessobject.DisbursementVoucherNonResidentAlienTax;
@@ -124,6 +125,7 @@
     protected static transient DateTimeService dateTimeService;
     protected static transient DisbursementVoucherPaymentReasonService dvPymentReasonService;
     protected static transient IdentityManagementService identityManagementService;
+    protected static transient DisbursementVoucherExtractService disbursementVoucherExtractService;
 
     protected Integer finDocNextRegistrantLineNbr;
     protected String disbVchrContactPersonName;
@@ -154,8 +156,8 @@
 
     protected boolean payeeAssigned = false;
     protected boolean editW9W8BENbox = false;
+    protected boolean immediatePaymentIndicator = false;
     
-    
     protected DocumentHeader financialDocument;
     protected DisbursementVoucherDocumentationLocation disbVchrDocumentationLoc;
     protected DisbursementVoucherNonEmployeeTravel dvNonEmployeeTravel;
@@ -899,16 +901,8 @@
         this.getDvPayeeDetail().setDisbVchrPayeePersonName(vendor.getVendorName());
 
         this.getDvPayeeDetail().setDisbVchrAlienPaymentCode(vendor.getVendorHeader().getVendorForeignIndicator());
+		
 
-        if (ObjectUtils.isNull(vendorAddress) || ObjectUtils.isNull(vendorAddress.getVendorAddressGeneratedIdentifier())) {
-            for (VendorAddress addr : vendor.getVendorAddresses()) {
-                if (addr.isVendorDefaultAddressIndicator()) {
-                    vendorAddress = addr;
-                    break;
-                }
-            }
-        }
-
         if (ObjectUtils.isNotNull(vendorAddress) && ObjectUtils.isNotNull(vendorAddress.getVendorAddressGeneratedIdentifier())) {
             this.getDvPayeeDetail().setDisbVchrVendorAddressIdNumber(vendorAddress.getVendorAddressGeneratedIdentifier().toString());
             this.getDvPayeeDetail().setDisbVchrPayeeLine1Addr(vendorAddress.getVendorLine1Address());
@@ -919,13 +913,13 @@
             this.getDvPayeeDetail().setDisbVchrPayeeCountryCode(vendorAddress.getVendorCountryCode());
         }
         else {
-            this.getDvPayeeDetail().setDisbVchrVendorAddressIdNumber("");
-            this.getDvPayeeDetail().setDisbVchrPayeeLine1Addr("");
-            this.getDvPayeeDetail().setDisbVchrPayeeLine2Addr("");
-            this.getDvPayeeDetail().setDisbVchrPayeeCityName("");
-            this.getDvPayeeDetail().setDisbVchrPayeeStateCode("");
-            this.getDvPayeeDetail().setDisbVchrPayeeZipCode("");
-            this.getDvPayeeDetail().setDisbVchrPayeeCountryCode("");      
+            this.getDvPayeeDetail().setDisbVchrVendorAddressIdNumber(StringUtils.EMPTY);
+            this.getDvPayeeDetail().setDisbVchrPayeeLine1Addr(StringUtils.EMPTY);
+            this.getDvPayeeDetail().setDisbVchrPayeeLine2Addr(StringUtils.EMPTY);
+            this.getDvPayeeDetail().setDisbVchrPayeeCityName(StringUtils.EMPTY);
+            this.getDvPayeeDetail().setDisbVchrPayeeStateCode(StringUtils.EMPTY);
+            this.getDvPayeeDetail().setDisbVchrPayeeZipCode(StringUtils.EMPTY);
+            this.getDvPayeeDetail().setDisbVchrPayeeCountryCode(StringUtils.EMPTY);      
         }
 
         this.getDvPayeeDetail().setDisbVchrAlienPaymentCode(vendor.getVendorHeader().getVendorForeignIndicator());
@@ -1048,9 +1042,9 @@
     
     /**
      * Someday this method will be in Rice.  But...'til it is...lazy loop through the entity entity types in the given
-     * EntityInfo and return the one who has the type of "PERSON"
+     * KimEntityInfo and return the one who has the type of "PERSON"
      * @param entityInfo the entity info to loop through entity entity types of
-     * @return a found entity entity type or null if a PERSON entity entity type is not associated with the given EntityInfo record
+     * @return a found entity entity type or null if a PERSON entity entity type is not associated with the given KimEntityInfo record
      */
     protected EntityTypeContactInfo getPersonEntityEntityType(Entity entity) {
         final List<EntityTypeContactInfo> entityEntityTypes = entity.getEntityTypeContactInfos();
@@ -1068,10 +1062,10 @@
     }
     
     /**
-     * Given a List of EntityAddress and an address type, finds the address in the List with the given type (or null if no matching EntityAddress is found)
-     * @param addresses the List of EntityAddress records to search
+     * Given a List of KimEntityAddress and an address type, finds the address in the List with the given type (or null if no matching KimEntityAddress is found)
+     * @param addresses the List of KimEntityAddress records to search
      * @param addressType the address type of the address to return
-     * @return the found EntityAddress, or null if not found
+     * @return the found KimEntityAddress, or null if not found
      */
     protected EntityAddress findAddressByType(List<? extends EntityAddress> addresses, String addressType) {
         EntityAddress foundAddress = null;
@@ -1079,7 +1073,7 @@
         
         while (count < addresses.size() && foundAddress == null) {
             final EntityAddress currentAddress = addresses.get(count);
-            if (currentAddress.getAddressType().getCode().equals(addressType)) {
+            if (currentAddress.isActive() && currentAddress.getAddressType().getCode().equals(addressType)) {
                 foundAddress = currentAddress;
             }
             count += 1;
@@ -1089,7 +1083,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.Document#prepareForSave()
+     * @see org.kuali.rice.kns.document.Document#prepareForSave()
      */
     @Override
     public void prepareForSave() {
@@ -1169,7 +1163,7 @@
      * computed and saved to the DV Payee Detail BO so they can be serialized to XML for routing. Some of the routing rules rely on
      * these variables.
      * 
-     * @see org.kuali.rice.krad.document.DocumentBase#populateDocumentForRouting()
+     * @see org.kuali.rice.kns.document.DocumentBase#populateDocumentForRouting()
      */
     @Override
     public void populateDocumentForRouting() {
@@ -1240,15 +1234,6 @@
         // clear fields
         setDisbVchrContactPhoneNumber(StringUtils.EMPTY);
         setDisbVchrContactEmailId(StringUtils.EMPTY);
-        getDvPayeeDetail().setDisbVchrPayeePersonName(StringUtils.EMPTY);
-
-        getDvPayeeDetail().setDisbVchrPayeeLine1Addr(StringUtils.EMPTY);
-        getDvPayeeDetail().setDisbVchrPayeeLine2Addr(StringUtils.EMPTY);
-        getDvPayeeDetail().setDisbVchrPayeeCityName(StringUtils.EMPTY);
-        getDvPayeeDetail().setDisbVchrPayeeStateCode(StringUtils.EMPTY);
-        getDvPayeeDetail().setDisbVchrPayeeZipCode(StringUtils.EMPTY);
-        getDvPayeeDetail().setDisbVchrPayeeCountryCode(StringUtils.EMPTY);
-
         setDisbVchrPayeeTaxControlCode(StringUtils.EMPTY);
 
         // clear nra
@@ -1285,9 +1270,14 @@
      * generic, shared logic used to initiate a dv document
      */
     public void initiateDocument() {
+        PhoneNumberService phoneNumberService = SpringContext.getBean(PhoneNumberService.class);
         Person currentUser = GlobalVariables.getUserSession().getPerson();
         setDisbVchrContactPersonName(currentUser.getName());
-        setDisbVchrContactPhoneNumber(currentUser.getPhoneNumber());
+        
+        if(!phoneNumberService.isDefaultFormatPhoneNumber(currentUser.getPhoneNumber())) {
+            setDisbVchrContactPhoneNumber(phoneNumberService.formatNumberIfPossible(currentUser.getPhoneNumber()));
+        }
+        
         setDisbVchrContactEmailId(currentUser.getEmailAddress());
         ChartOrgHolder chartOrg = SpringContext.getBean(org.kuali.kfs.sys.service.FinancialSystemUserService.class).getPrimaryOrganization(currentUser, KFSConstants.ParameterNamespaces.FINANCIAL);
         
@@ -1322,7 +1312,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#buildListOfDeletionAwareLists()
+     * @see org.kuali.rice.kns.document.DocumentBase#buildListOfDeletionAwareLists()
      */
     @SuppressWarnings("unchecked")
     @Override
@@ -1359,8 +1349,8 @@
      * @param accountingLine accounting line in accounting document
      * @return true if document is debit
      * @see IsDebitUtils#isDebitConsideringNothingPositiveOnly(FinancialDocumentRuleBase, FinancialDocument, AccountingLine)
-     * @see org.kuali.rice.krad.rule.AccountingLineRule#isDebit(org.kuali.rice.krad.document.FinancialDocument,
-     *      org.kuali.rice.krad.bo.AccountingLine)
+     * @see org.kuali.rice.kns.rule.AccountingLineRule#isDebit(org.kuali.rice.kns.document.FinancialDocument,
+     *      org.kuali.rice.kns.bo.AccountingLine)
      */
     public boolean isDebit(GeneralLedgerPendingEntrySourceDetail postable) {
         // disallow error corrections
@@ -1380,8 +1370,8 @@
      * @param financialDocument submitted accounting document
      * @param accountingLine accounting line in submitted accounting document
      * @param explicitEntry explicit GLPE
-     * @see org.kuali.module.financial.rules.FinancialDocumentRuleBase#customizeExplicitGeneralLedgerPendingEntry(org.kuali.rice.krad.document.FinancialDocument,
-     *      org.kuali.rice.krad.bo.AccountingLine, org.kuali.module.gl.bo.GeneralLedgerPendingEntry)
+     * @see org.kuali.module.financial.rules.FinancialDocumentRuleBase#customizeExplicitGeneralLedgerPendingEntry(org.kuali.rice.kns.document.FinancialDocument,
+     *      org.kuali.rice.kns.bo.AccountingLine, org.kuali.module.gl.bo.GeneralLedgerPendingEntry)
      */
     @Override
     public void customizeExplicitGeneralLedgerPendingEntry(GeneralLedgerPendingEntrySourceDetail accountingLine, GeneralLedgerPendingEntry explicitEntry) {
@@ -1407,7 +1397,7 @@
      * @param financialDocument submitted financial document
      * @param sequenceHelper helper class to keep track of GLPE sequence
      * @return true if GLPE's are generated successfully
-     * @see org.kuali.rice.krad.rule.GenerateGeneralLedgerDocumentPendingEntriesRule#processGenerateDocumentGeneralLedgerPendingEntries(org.kuali.rice.krad.document.FinancialDocument,org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper)
+     * @see org.kuali.rice.kns.rule.GenerateGeneralLedgerDocumentPendingEntriesRule#processGenerateDocumentGeneralLedgerPendingEntries(org.kuali.rice.kns.document.FinancialDocument,org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper)
      */
     @Override
     public boolean generateDocumentGeneralLedgerPendingEntries(GeneralLedgerPendingEntrySequenceHelper sequenceHelper) {
@@ -1655,8 +1645,23 @@
     }   
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#getDocumentTitle()
+     * @return whether this document should be paid out immediately from PDP
      */
+    public boolean isImmediatePaymentIndicator() {
+        return immediatePaymentIndicator;
+    }
+
+    /**
+     * Sets whether this document should be paid out as quickly as possible from PDP
+     * @param immediatePaymentIndicator true if this should be immediately disbursed; false otherwise
+     */
+    public void setImmediatePaymentIndicator(boolean immediatePaymentIndicator) {
+        this.immediatePaymentIndicator = immediatePaymentIndicator;
+    }
+
+    /**
+     * @see org.kuali.rice.kns.document.DocumentBase#getDocumentTitle()
+     */
     @Override
     public String getDocumentTitle() {
         String documentTitle = super.getDocumentTitle();
@@ -1675,17 +1680,13 @@
             return title;
         }
         
-        Object[] indicators = new String[3];        
+        Object[] indicators = new String[2];        
         indicators[0] = payee.isEmployee() ? AdHocPaymentIndicator.EMPLOYEE_PAYEE : AdHocPaymentIndicator.OTHER;
         indicators[1] = payee.isDisbVchrAlienPaymentCode() ? AdHocPaymentIndicator.ALIEN_PAYEE : AdHocPaymentIndicator.OTHER;
         
-        DisbursementVoucherPaymentReasonService paymentReasonService = SpringContext.getBean(DisbursementVoucherPaymentReasonService.class);
-        boolean isTaxReviewRequired = paymentReasonService.isTaxReviewRequired(payee.getDisbVchrPaymentReasonCode());
-        indicators[2] = isTaxReviewRequired ? AdHocPaymentIndicator.PAYMENT_REASON_REQUIRING_TAX_REVIEW : AdHocPaymentIndicator.OTHER;
-        
         for(Object indicator : indicators) {
             if(!AdHocPaymentIndicator.OTHER.equals(indicator)) {
-                String titlePattern = title + " [{0}:{1}:{2}]";
+                String titlePattern = title + " [{0}:{1}]";
                 return MessageFormat.format(titlePattern, indicators);
             }
         }
@@ -1789,14 +1790,11 @@
             return true;
         }
 
-        boolean isEmployee = this.getDvPayeeDetail().isDisbVchrPayeeEmployeeCode();
-        if (isEmployee) {
-            return true;
-        }
-        
         String payeeTypeCode = this.getDvPayeeDetail().getDisbursementVoucherPayeeTypeCode();
         if (payeeTypeCode.equals(DisbursementVoucherConstants.DV_PAYEE_TYPE_EMPLOYEE)) {
-            return true;
+            return false;
+        } else if (payeeTypeCode.equals(DisbursementVoucherConstants.DV_PAYEE_TYPE_VENDOR)) {
+            return vendorService.isVendorInstitutionEmployee(this.getDvPayeeDetail().getDisbVchrVendorHeaderIdNumberAsInteger());
         }
         
         if (payeeTypeCode.equals(DisbursementVoucherConstants.DV_PAYEE_TYPE_VENDOR) && this.getVendorService().isVendorForeign(getDvPayeeDetail().getDisbVchrVendorHeaderIdNumberAsInteger())) {
@@ -1862,19 +1860,26 @@
         return this.getDvPymentReasonService().isPrepaidTravelPaymentReason(paymentReasonCode) || this.getDvPymentReasonService().isNonEmployeeTravelPaymentReason(paymentReasonCode);
         }
 
-    protected PersonService getPersonService() {
-        if ( personService == null ) {
-            personService = SpringContext.getBean(PersonService.class);
+    /**
+     * Overridden to immediately extract DV, if it has been marked for immediate extract
+     * @see org.kuali.kfs.sys.document.GeneralLedgerPostingDocumentBase#doRouteStatusChange(org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO)
+     */
+    @Override
+    public void doRouteStatusChange(DocumentRouteStatusChangeDTO statusChangeEvent) {
+        super.doRouteStatusChange(statusChangeEvent);
+        if (getDocumentHeader().getWorkflowDocument().stateIsProcessed()) {
+            if (isImmediatePaymentIndicator()) {
+                getDisbursementVoucherExtractService().extractImmediatePayment(this);
+            }
         }
-        return personService;
     }
 
 
-    protected ParameterService getParameterService() {
-        if ( parameterService == null ) {
-            parameterService = SpringContext.getBean(ParameterService.class);
+    protected PersonService<Person> getPersonService() {
+        if ( personService == null ) {
+            personService = SpringContext.getBean(PersonService.class);
         }
-        return parameterService;
+        return personService;
     }
 
 
@@ -1885,14 +1890,6 @@
         return vendorService;
     }
 
-
-    protected BusinessObjectService getBusinessObjectService() {
-        if ( businessObjectService == null ) {
-            businessObjectService = SpringContext.getBean(BusinessObjectService.class);
-        }
-        return businessObjectService;
-    }
-
     /**
      * Gets the dvPymentReasonService attribute.
      * 
@@ -1924,7 +1921,18 @@
     public static void setIdentityManagementService(IdentityManagementService identityManagementService) {
         DisbursementVoucherDocument.identityManagementService = identityManagementService;
     }
+    
     /**
+     * @return the default implementation of the DisbursementVoucherExtractService
+     */
+    public static DisbursementVoucherExtractService getDisbursementVoucherExtractService() {
+        if (disbursementVoucherExtractService == null) {
+            disbursementVoucherExtractService = SpringContext.getBean(DisbursementVoucherExtractService.class);
+        }
+        return disbursementVoucherExtractService;
+    }
+    
+    /**
      * @return Returns the disbExcptAttachedIndicator.
      */
     public boolean isDisbExcptAttachedIndicator() {
Index: work/src/org/kuali/kfs/fp/document/service/impl/DisbursementVoucherPayeeServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/service/impl/DisbursementVoucherPayeeServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/service/impl/DisbursementVoucherPayeeServiceImpl.java	(working copy)
@@ -27,10 +27,12 @@
 import org.kuali.kfs.fp.document.DisbursementVoucherConstants;
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
 import org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService;
+import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentAuthorizerBase;
 import org.kuali.kfs.vnd.VendorConstants;
+import org.kuali.kfs.vnd.VendorPropertyConstants;
 import org.kuali.kfs.vnd.businessobject.VendorDetail;
 import org.kuali.kfs.vnd.businessobject.VendorType;
 import org.kuali.kfs.vnd.document.service.VendorService;
@@ -59,6 +61,8 @@
     private DocumentService documentService;
     private ParameterService parameterService;
     private VendorService vendorService;
+    
+    public final static String addressPattern = "{0}, {1}, {2} {3}";
 
     /**
      * @see org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService#getPayeeTypeDescription(java.lang.String)
@@ -208,8 +212,88 @@
             }
         }
     }
+
+    /**
+     * @see org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService#getFieldConversionBetweenPayeeAndVendor()
+     */
+    public Map<String, String> getFieldConversionBetweenPayeeAndVendor() {
+        Map<String, String> fieldConversionMap = new HashMap<String, String>();
+
+        fieldConversionMap.put(KFSPropertyConstants.TAX_NUMBER, VendorPropertyConstants.VENDOR_TAX_NUMBER);
+
+        fieldConversionMap.put(KFSPropertyConstants.VENDOR_NAME, KFSPropertyConstants.VENDOR_NAME);
+        fieldConversionMap.put(KFSPropertyConstants.VENDOR_NUMBER, KFSPropertyConstants.VENDOR_NUMBER);
+
+        fieldConversionMap.put(KFSPropertyConstants.PERSON_FIRST_NAME, VendorPropertyConstants.VENDOR_FIRST_NAME);
+        fieldConversionMap.put(KFSPropertyConstants.PERSON_LAST_NAME, VendorPropertyConstants.VENDOR_LAST_NAME);
+
+        fieldConversionMap.put(KNSPropertyConstants.ACTIVE, KFSPropertyConstants.ACTIVE_INDICATOR);
+
+        return fieldConversionMap;
+    }
     
     /**
+     * @see org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService#getFieldConversionBetweenPayeeAndPerson()
+     */
+    public Map<String, String> getFieldConversionBetweenPayeeAndPerson() {
+        Map<String, String> fieldConversionMap = new HashMap<String, String>();
+
+    //    fieldConversionMap.put(KFSPropertyConstants.TAX_NUMBER, KIMPropertyConstants.Person.EXTERNAL_ID);
+
+        fieldConversionMap.put(KFSPropertyConstants.PERSON_FIRST_NAME, KIMPropertyConstants.Person.FIRST_NAME);
+        fieldConversionMap.put(KFSPropertyConstants.PERSON_LAST_NAME, KIMPropertyConstants.Person.LAST_NAME);
+
+        fieldConversionMap.put(KFSPropertyConstants.EMPLOYEE_ID, KIMPropertyConstants.Person.EMPLOYEE_ID);
+        fieldConversionMap.put(KNSPropertyConstants.ACTIVE, KNSPropertyConstants.ACTIVE);
+
+        return fieldConversionMap;
+    }
+    
+    /**
+     * @see org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService#getPayeeFromVendor(org.kuali.kfs.vnd.businessobject.VendorDetail)
+     */
+    public DisbursementPayee getPayeeFromVendor(VendorDetail vendorDetail) {
+        DisbursementPayee disbursementPayee = new DisbursementPayee();
+
+        disbursementPayee.setActive(vendorDetail.isActiveIndicator());
+
+        disbursementPayee.setPayeeIdNumber(vendorDetail.getVendorNumber());
+        disbursementPayee.setPayeeName(vendorDetail.getAltVendorName());
+        disbursementPayee.setTaxNumber(vendorDetail.getVendorHeader().getVendorTaxNumber());
+
+        String vendorTypeCode = vendorDetail.getVendorHeader().getVendorTypeCode();
+        String payeeTypeCode = getVendorPayeeTypeCodeMapping().get(vendorTypeCode);
+        disbursementPayee.setPayeeTypeCode(payeeTypeCode);
+
+        String vendorAddress = MessageFormat.format(addressPattern, vendorDetail.getDefaultAddressLine1(), vendorDetail.getDefaultAddressCity(), vendorDetail.getDefaultAddressStateCode(), vendorDetail.getDefaultAddressCountryCode());
+        disbursementPayee.setAddress(vendorAddress);
+
+        return disbursementPayee;
+    }
+    
+    /**
+     * @see org.kuali.kfs.fp.document.service.DisbursementVoucherPayeeService#getPayeeFromPerson(org.kuali.rice.kim.bo.Person)
+     */
+    public DisbursementPayee getPayeeFromPerson(Person person) {
+        DisbursementPayee disbursementPayee = new DisbursementPayee();
+
+        disbursementPayee.setActive(person.isActive());
+
+        disbursementPayee.setPayeeIdNumber(person.getEmployeeId());
+        disbursementPayee.setPrincipalId(person.getPrincipalId());
+        
+        disbursementPayee.setPayeeName(person.getName());
+        disbursementPayee.setTaxNumber(KFSConstants.BLANK_SPACE);
+        
+        disbursementPayee.setPayeeTypeCode(DisbursementVoucherConstants.DV_PAYEE_TYPE_EMPLOYEE);
+
+        String personAddress = MessageFormat.format(addressPattern, person.getAddressLine1(), person.getAddressCityName(), person.getAddressStateCode(), person.getAddressCountryCode());
+        disbursementPayee.setAddress(personAddress);
+
+        return disbursementPayee;
+    }
+
+    /**
      * Creates text for a note which records changes to the payee
      * @param newPayeeDetail the changed payee detail
      * @param oldPayeeDetail the original payee detail
@@ -347,7 +431,19 @@
 
         return false;
     }
+    
+ // do mapping between vendor type code and payee type code 
+    private static Map<String, String> getVendorPayeeTypeCodeMapping() {
+        Map<String, String> payeeVendorTypeCodeMapping = new HashMap<String, String>();
 
+        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.PURCHASE_ORDER, DisbursementVoucherConstants.DV_PAYEE_TYPE_VENDOR);
+        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.DISBURSEMENT_VOUCHER, DisbursementVoucherConstants.DV_PAYEE_TYPE_VENDOR);
+        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.REVOLVING_FUND, DisbursementVoucherConstants.DV_PAYEE_TYPE_REVOLVING_FUND_VENDOR);
+        payeeVendorTypeCodeMapping.put(VendorConstants.VendorTypes.SUBJECT_PAYMENT, DisbursementVoucherConstants.DV_PAYEE_TYPE_SUBJECT_PAYMENT_VENDOR);
+
+        return payeeVendorTypeCodeMapping;
+    }
+
     /**
      * Sets the businessObjectService attribute value.
      * 
Index: work/src/org/kuali/kfs/fp/document/service/impl/CashManagementServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/service/impl/CashManagementServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/service/impl/CashManagementServiceImpl.java	(working copy)
@@ -215,7 +215,7 @@
      * This method creates new cumulative currency and coin details for the document given.
      * 
      * @param cmDoc The cash management document the cumulative details will be associated with.
-     * @param cashieringStatus The cashiering status for the new details.
+     * @param cashieringSource The cashiering record source for the new details.
      */
     public void createNewCashDetails(CashManagementDocument cmDoc, String cashieringStatus) {
         CoinDetail coinDetail = new CoinDetail();
Index: work/src/org/kuali/kfs/fp/document/service/DisbursementVoucherPayeeService.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/service/DisbursementVoucherPayeeService.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/service/DisbursementVoucherPayeeService.java	(working copy)
@@ -15,9 +15,13 @@
  */
 package org.kuali.kfs.fp.document.service;
 
+import java.util.Map;
+
 import org.kuali.kfs.fp.businessobject.DisbursementPayee;
 import org.kuali.kfs.fp.businessobject.DisbursementVoucherPayeeDetail;
 import org.kuali.kfs.fp.document.DisbursementVoucherDocument;
+import org.kuali.kfs.vnd.businessobject.VendorDetail;
+import org.kuali.rice.kim.bo.Person;
 
 /**
  * define a set of service methods related to disbursement payee
@@ -88,4 +92,34 @@
      * @return the ownership type code if the given payee is a vendor; otherwise, return null
      */
     public String getVendorOwnershipTypeCode(DisbursementPayee payee);
+    
+    /**
+     * convert the field names between Payee and Vendor
+     * 
+     * @return a field name map of Payee and Vendor. The map key is a field name of Payee, and its value is a field name of Vendor
+     */
+    public Map<String, String> getFieldConversionBetweenPayeeAndVendor();
+    
+    /**
+     * convert the field names between Payee and Person
+     * 
+     * @return a field name map of Payee and Person. The map key is a field name of Payee, and its value is a field name of Person
+     */
+    public Map<String, String> getFieldConversionBetweenPayeeAndPerson();
+    
+    /**
+     * build a payee object from the given vendor object
+     * 
+     * @param vendorDetail the given vendor object
+     * @return a payee object built from the given vendor object
+     */
+    public DisbursementPayee getPayeeFromVendor(VendorDetail vendorDetail);
+    
+    /**
+     * build a payee object from the given person object
+     * 
+     * @param person the given person object
+     * @return a payee object built from the given person object
+     */
+    public DisbursementPayee getPayeeFromPerson(Person person);
 }
Index: work/src/org/kuali/kfs/fp/document/CashReceiptDocument.java
===================================================================
--- work/src/org/kuali/kfs/fp/document/CashReceiptDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/fp/document/CashReceiptDocument.java	(working copy)
@@ -127,7 +127,7 @@
     public KualiDecimal getTotalCashAmount() {
         return (currencyDetail != null) ? currencyDetail.getTotalAmount() : KualiDecimal.ZERO;
     }
-    
+
     /**
      * Gets the totalConfirmedCashAmount attribute.
      * 
@@ -188,17 +188,8 @@
     public String getCurrencyFormattedTotalCashAmount() {
         return (String) new CurrencyFormatter().format(getTotalCashAmount());
     }
-    
+
     /**
-     * This method returns the confirmed cash total amount as a currency formatted string.
-     * 
-     * @return String
-     */
-    public String getCurrencyFormattedTotalConfirmedCashAmount() {
-        return (String) new CurrencyFormatter().format(getTotalConfirmedCashAmount());
-    }
-    
-    /**
      * Sets the totalCashAmount attribute value.
      * 
      * @param cashAmount The totalCashAmount to set.
@@ -249,7 +240,7 @@
     public void setChecks(List<Check> checks) {
         this.checks = checks;
     }
-    
+
     /**
      * Gets the confirmed checks attribute.
      * 
@@ -309,7 +300,7 @@
 
         setTotalCheckAmount(getTotalCheckAmount().add(check.getAmount()));
     }
-    
+
     /**
      * Adds a new confirmed check to the list.
      * 
@@ -378,7 +369,7 @@
         }
         setTotalCheckAmount(newTotalCheckAmount);
     }
-    
+
     /**
      * This method removes a confirmed check from the list and updates the total appropriately.
      * 
@@ -411,7 +402,7 @@
     public void setNextCheckSequenceId(Integer nextCheckSequenceId) {
         this.nextCheckSequenceId = nextCheckSequenceId;
     }
-    
+
     /**
      * Gets the nextConfirmedCheckSequenceId attribute.
      * 
@@ -441,7 +432,7 @@
         }
         return totalCheckAmount;
     }
-    
+
     /**
      * Gets the totalConfirmedCheckAmount attribute.
      * 
@@ -474,17 +465,6 @@
     public String getCurrencyFormattedTotalCheckAmount() {
         return (String) new CurrencyFormatter().format(getTotalCheckAmount());
     }
-    
-    /**
-     * This method returns the confirmed check total amount as a currency formatted string.
-     * 
-     * @return String
-     */
-    public String getCurrencyFormattedTotalConfirmedCheckAmount() {
-        String amountString = (String) new CurrencyFormatter().format(getTotalConfirmedCheckAmount());        
-        return amountString;
-        
-    }
 
     /**
      * Sets the totalCheckAmount attribute value.
@@ -494,7 +474,7 @@
     public void setTotalCheckAmount(KualiDecimal totalCheckAmount) {
         this.totalCheckAmount = totalCheckAmount;
     }
-    
+
     /**
      * Sets the totalCheckAmount attribute value.
      * 
@@ -512,7 +492,7 @@
     public KualiDecimal getTotalCoinAmount() {
         return (coinDetail != null) ? coinDetail.getTotalAmount() : KualiDecimal.ZERO;
     }
-    
+
     /**
      * Gets the totalConfirmedCoinAmount attribute.
      * 
@@ -539,7 +519,7 @@
     public String getCurrencyFormattedTotalCoinAmount() {
         return (String) new CurrencyFormatter().format(getTotalCoinAmount());
     }
-    
+
     /**
      * This method returns the confirmed coin total amount as a currency formatted string.
      * 
@@ -574,7 +554,7 @@
     public void setTotalCoinAmount(KualiDecimal totalCoinAmount) {
         this.totalCoinAmount = totalCoinAmount;
     }
-    
+
     /**
      * Sets the totalConfirmedCoinAmount attribute value.
      * 
@@ -630,7 +610,7 @@
     public void setCoinDetail(CoinDetail coinDetail) {
         this.coinDetail = coinDetail;
     }
-    
+
     /**
      * Gets the confirmedCoinDetail attribute.
      * 
@@ -684,7 +664,7 @@
     public void setCurrencyDetail(CurrencyDetail currencyDetail) {
         this.currencyDetail = currencyDetail;
     }
-    
+
     /**
      * Gets the confirmedCurrencyDetail attribute.
      * 
@@ -729,7 +709,7 @@
     public String getCurrencyFormattedSumTotalAmount() {
         return (String) new CurrencyFormatter().format(getTotalDollarAmount());
     }
-    
+
     /**
      * Retrieves the confirmed summed total amount in a currency format with commas.
      * 
@@ -790,7 +770,7 @@
 
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#prepareForSave()
+     * @see org.kuali.rice.kns.document.DocumentBase#prepareForSave()
      */
     @Override
     public void prepareForSave() {
@@ -807,7 +787,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#processAfterRetrieve()
+     * @see org.kuali.rice.kns.document.DocumentBase#processAfterRetrieve()
      */
     @Override
     public void processAfterRetrieve() {
@@ -831,7 +811,7 @@
      * is associated with is FINAL approved, this status will be set to APPROVED ("A") to be picked up by the GL for processing.
      * That's done in the doRouteStatusChange() method in the CashManagementDocument.
      * 
-     * @see org.kuali.rice.krad.document.Document#doRouteStatusChange()
+     * @see org.kuali.rice.kns.document.Document#doRouteStatusChange()
      */
     @Override
     public void doRouteStatusChange(DocumentRouteStatusChange statusChangeEvent) {
@@ -849,7 +829,7 @@
     }
     
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#postProcessSave(org.kuali.rice.krad.rule.event.KualiDocumentEvent)
+     * @see org.kuali.rice.kns.document.DocumentBase#postProcessSave(org.kuali.rice.kns.rule.event.KualiDocumentEvent)
      */
     @Override
     public void postProcessSave(KualiDocumentEvent event) {
@@ -895,10 +875,9 @@
             SpringContext.getBean(BusinessObjectService.class).save(getChangeCurrencyDetail());
             SpringContext.getBean(BusinessObjectService.class).save(getChangeCoinDetail());
         }
-        
+
         SpringContext.getBean(BusinessObjectService.class).save(getCurrencyDetail());
         SpringContext.getBean(BusinessObjectService.class).save(getCoinDetail());
-        
                 
         if (!(event instanceof SaveDocumentEvent)) { // don't lock until they route
             String documentTypeName = SpringContext.getBean(DataDictionaryService.class).getDocumentTypeNameByClass(this.getClass());
@@ -948,7 +927,7 @@
     protected CoinDetail retrieveCoinDetail() {
         return (CoinDetail) SpringContext.getBean(BusinessObjectService.class).findByPrimaryKey(CoinDetail.class, getCashDetailPrimaryKey());
     }
-    
+
     /**
      * Get this document's confirmed currency detail from the database
      * 
@@ -1015,7 +994,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.TransactionalDocumentBase#buildListOfDeletionAwareLists()
+     * @see org.kuali.rice.kns.document.TransactionalDocumentBase#buildListOfDeletionAwareLists()
      */
     @Override
     public List buildListOfDeletionAwareLists() {
Index: work/src/org/kuali/kfs/module/ld/batch/LaborPosterSortStep.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/LaborPosterSortStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/LaborPosterSortStep.java	(working copy)
@@ -1,61 +0,0 @@
-/*
- * Copyright 2005-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.ld.batch;
-
-import java.io.File;
-import java.util.Date;
-
-import org.kuali.kfs.gl.GeneralLedgerConstants;
-import org.kuali.kfs.gl.batch.BatchSortUtil;
-import org.kuali.kfs.module.ld.LaborConstants;
-import org.kuali.kfs.sys.batch.AbstractStep;
-import org.springframework.util.StopWatch;
-
-/**
- * A step to run the scrubber process.
- */
-public class LaborPosterSortStep extends AbstractStep {
-    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LaborPosterSortStep.class);
-    protected String batchFileDirectoryName;
-    /**
-     * Runs the scrubber process.
-     * 
-     * @param jobName the name of the job this step is being run as part of
-     * @param jobRunDate the time/date the job was started
-     * @return true if the job completed successfully, false if otherwise
-     * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String)
-     */
-    public boolean execute(String jobName, Date jobRunDate) {
-        StopWatch stopWatch = new StopWatch();
-        stopWatch.start(jobName);
-        String inputFile = batchFileDirectoryName + File.separator + LaborConstants.BatchFileSystem.DEMERGER_VAILD_OUTPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        String outputFile = batchFileDirectoryName+ File.separator + LaborConstants.BatchFileSystem.POSTER_INPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION; 
-
-
-        BatchSortUtil.sortTextFileWithFields(inputFile, outputFile, new LaborPosterSortComparator());
-
-
-        stopWatch.stop();
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("scrubber step of " + jobName + " took " + (stopWatch.getTotalTimeSeconds() / 60.0) + " minutes to complete");
-        }
-        return true;
-    }
-    
-    public void setBatchFileDirectoryName(String batchFileDirectoryName) {
-        this.batchFileDirectoryName = batchFileDirectoryName;
-    }
-}
Index: work/src/org/kuali/kfs/module/ld/batch/LaborDemergerSortComparator.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/LaborDemergerSortComparator.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/LaborDemergerSortComparator.java	(working copy)
@@ -21,27 +21,33 @@
 import org.kuali.kfs.module.ld.businessobject.LaborOriginEntryFieldUtil;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 
-public class LaborDemergerSortComparator implements Comparator {
+public class LaborDemergerSortComparator implements Comparator<String> {
 
-    public int compare(Object object1, Object object2) {
-            
-        LaborOriginEntryFieldUtil loefu = new LaborOriginEntryFieldUtil();
-        Map<String, Integer> pMap = loefu.getFieldBeginningPositionMap();
-            
-        String string1 = (String) object1;
-        String string2 = (String) object2;
-        
-        StringBuffer sb1 = new StringBuffer();
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
+    LaborOriginEntryFieldUtil loefu = new LaborOriginEntryFieldUtil();
+    Map<String, Integer> pMap = loefu.getFieldBeginningPositionMap();
 
-        StringBuffer sb2 = new StringBuffer();
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
+    private class Range {
+        public Range( int start, int end ) { this.start = start; this.end = end; }
+        public int start;
+        public int end;
+    }
 
-        int returnValue = sb1.toString().compareTo(sb2.toString());
-        if (returnValue == 0) {
-            sb1.append(string1.substring(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER), pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC))); // reverse???
-            sb2.append(string2.substring(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER), pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC)));
-        }
-        return returnValue;
+    Range[] compareRanges;
+    {
+        compareRanges = new Range[2];
+        compareRanges[0] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE),             pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER));
+        compareRanges[1] = new Range(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER),        pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC));
+    }    
+    
+    public int compare(String string1, String string2) {
+        StringBuilder sb1 = new StringBuilder();
+        sb1.append(string1.substring(compareRanges[0].start,compareRanges[0].end));
+        sb1.append(string1.substring(compareRanges[1].start,compareRanges[1].end));
+
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(string2.substring(compareRanges[0].start,compareRanges[0].end));
+        sb2.append(string2.substring(compareRanges[1].start,compareRanges[1].end));
+
+        return sb1.toString().compareTo(sb2.toString());
     }
 }
Index: work/src/org/kuali/kfs/module/ld/batch/LaborDemergerSortStep.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/LaborDemergerSortStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/LaborDemergerSortStep.java	(working copy)
@@ -1,60 +0,0 @@
-/*
- * Copyright 2005-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.ld.batch;
-
-import java.io.File;
-import java.util.Date;
-
-import org.kuali.kfs.gl.GeneralLedgerConstants;
-import org.kuali.kfs.gl.batch.BatchSortUtil;
-import org.kuali.kfs.module.ld.LaborConstants;
-import org.kuali.kfs.sys.batch.AbstractStep;
-import org.springframework.util.StopWatch;
-
-/**
- * A step to run the scrubber process.
- */
-public class LaborDemergerSortStep extends AbstractStep {
-    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LaborDemergerSortStep.class);
-    protected String batchFileDirectoryName;
-
-    /**
-     * Runs the scrubber process.
-     * 
-     * @param jobName the name of the job this step is being run as part of
-     * @param jobRunDate the time/date the job was started
-     * @return true if the job completed successfully, false if otherwise
-     * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String)
-     */
-    public boolean execute(String jobName, Date jobRunDate) {
-        StopWatch stopWatch = new StopWatch();
-        stopWatch.start(jobName);
-        String inputFile = batchFileDirectoryName + File.separator + LaborConstants.BatchFileSystem.SCRUBBER_ERROR_OUTPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        String outputFile = batchFileDirectoryName + File.separator + LaborConstants.BatchFileSystem.SCRUBBER_ERROR_SORTED_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        BatchSortUtil.sortTextFileWithFields(inputFile, outputFile, new LaborDemergerSortComparator());
-
-        stopWatch.stop();
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("scrubber step of " + jobName + " took " + (stopWatch.getTotalTimeSeconds() / 60.0) + " minutes to complete");
-        }
-        return true;
-    }
-
-    public void setBatchFileDirectoryName(String batchFileDirectoryName) {
-        this.batchFileDirectoryName = batchFileDirectoryName;
-    }
-
-}
Index: work/src/org/kuali/kfs/module/ld/batch/service/impl/LaborPosterServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/service/impl/LaborPosterServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/service/impl/LaborPosterServiceImpl.java	(working copy)
@@ -145,11 +145,13 @@
             String currentLine = INPUT_GLE_FILE_br.readLine();
 
             while (currentLine != null) {
+                LaborOriginEntry laborOriginEntry = null;
+                
                 try {
                     lineNumber++;
                     if (!StringUtils.isEmpty(currentLine) && !StringUtils.isBlank(currentLine.trim())) {
-                        LaborOriginEntry laborOriginEntry = new LaborOriginEntry();
-
+                        laborOriginEntry = new LaborOriginEntry();
+                    
                         // checking parsing process and stop poster when it has errors.
                         List<Message> parsingError = new ArrayList<Message>();
                         parsingError = laborOriginEntry.setFromTextFileForBatch(currentLine, lineNumber);
@@ -176,10 +178,11 @@
 
                     currentLine = INPUT_GLE_FILE_br.readLine();
                 }
-                catch (RuntimeException ioe) {
+                catch (RuntimeException re) {
                     // catch here again, it should be from postSingleEntryIntoLaborLedger
-                    LOG.error("postLaborLedgerEntries stopped due to: " + ioe.getMessage() + " on line number : " + loadedCount, ioe);
-                    throw new RuntimeException("Unable to execute: " + ioe.getMessage() + " on line number : " + loadedCount, ioe);
+                    LOG.error("postLaborLedgerEntries stopped due to: " + re.getMessage() + " on line number : " + loadedCount, re);
+                    LOG.error("laborOriginEntry failure occured on: " + laborOriginEntry == null ? null : laborOriginEntry.toString());
+                    throw new RuntimeException("Unable to execute: " + re.getMessage() + " on line number : " + loadedCount, re);
                 }
             }
 
Index: work/src/org/kuali/kfs/module/ld/batch/service/impl/LaborBalancingServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/service/impl/LaborBalancingServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/service/impl/LaborBalancingServiceImpl.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007-2009 The Kuali Foundation
+ * Copyright 2007-2009 The Kuali Foundation
  * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -53,10 +53,18 @@
 @Transactional
 public class LaborBalancingServiceImpl extends BalancingServiceBaseImpl<LaborEntryHistory, LaborBalanceHistory> implements BalancingService {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LaborBalancingServiceImpl.class);
-
+    
     protected File laborPosterInputFile = null;
     protected File laborPosterErrorOutputFile = null;
-
+    
+    @Override
+    public boolean runBalancing() {
+        // clear out the file cache, otherwise, it won't update the history tables with the latest poster files
+        // therefore, it will use the files that were first used when the balancing job was run when the JVM started, and that'll cause out of balance errors
+        clearPosterFileCache();
+        return super.runBalancing();
+    }
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getPosterInputFile()
      */
@@ -65,15 +73,16 @@
         if (laborPosterInputFile != null) {
             return laborPosterInputFile;
         }
-
+        
         FilenameFilter filenameFilter = new FilenameFilter() {
             public boolean accept(File dir, String name) {
-                return (name.startsWith(LaborConstants.BatchFileSystem.POSTER_INPUT_FILE) && name.endsWith(GeneralLedgerConstants.BatchFileSystem.EXTENSION));
+                return (name.startsWith(LaborConstants.BatchFileSystem.POSTER_INPUT_FILE) &&
+                        name.endsWith(GeneralLedgerConstants.BatchFileSystem.EXTENSION));
             }
         };
-
+        
         laborPosterInputFile = FileUtil.getNewestFile(new File(batchFileDirectoryName), filenameFilter);
-
+        
         return laborPosterInputFile;
     }
 
@@ -85,33 +94,34 @@
         if (laborPosterErrorOutputFile != null) {
             return laborPosterErrorOutputFile;
         }
-
+        
         FilenameFilter filenameFilter = new FilenameFilter() {
             public boolean accept(File dir, String name) {
-                return (name.startsWith(LaborConstants.BatchFileSystem.POSTER_ERROR_OUTPUT_FILE) && name.endsWith(GeneralLedgerConstants.BatchFileSystem.EXTENSION));
+                return (name.startsWith(LaborConstants.BatchFileSystem.POSTER_ERROR_OUTPUT_FILE) &&
+                        name.endsWith(GeneralLedgerConstants.BatchFileSystem.EXTENSION));
             }
         };
-
+        
         laborPosterErrorOutputFile = FileUtil.getNewestFile(new File(batchFileDirectoryName), filenameFilter);
-
+        
         return laborPosterErrorOutputFile;
     }
-
-
+    
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getPastFiscalYearsToConsider()
      */
     public int getPastFiscalYearsToConsider() {
         return Integer.parseInt(parameterService.getParameterValueAsString(LaborBalancingStep.class, LaborConstants.Balancing.NUMBER_OF_PAST_FISCAL_YEARS_TO_INCLUDE));
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getComparisonFailuresToPrintPerReport()
      */
     public int getComparisonFailuresToPrintPerReport() {
         return Integer.parseInt(parameterService.getParameterValueAsString(LaborBalancingStep.class, LaborConstants.Balancing.NUMBER_OF_COMPARISON_FAILURES_TO_PRINT_PER_REPORT));
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getShortTableLabel(java.lang.String)
      */
@@ -124,63 +134,60 @@
 
         return names.get(businessObjectName) == null ? kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.REPORT_UNKNOWN_LABEL) : names.get(businessObjectName);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getOriginEntry(java.lang.String, int)
      */
     public OriginEntryInformation getOriginEntry(String inputLine, int lineNumber) {
         LaborOriginEntry originEntry = new LaborOriginEntry();
         originEntry.setFromTextFileForBatch(inputLine, lineNumber);
-
+        
         return originEntry;
     }
 
     /**
-     * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#updateHistoriesHelper(java.lang.Integer, java.lang.Integer,
-     *      java.io.File, java.io.File)
+     * @see org.kuali.kfs.gl.batch.service.impl.BalancingServiceBaseImpl#updateHistoriesHelper(java.lang.Integer, java.lang.Integer, java.io.File, java.io.File)
      */
     protected int updateHistoriesHelper(Integer postMode, Integer startUniversityFiscalYear, File inputFile, File errorFile) {
-        if (postMode == PosterService.MODE_ENTRIES) {
+        if(postMode == PosterService.MODE_ENTRIES){
             return super.updateHistoriesHelper(postMode, startUniversityFiscalYear, inputFile, errorFile);
         }
         return 0;
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#updateEntryHistory(org.kuali.kfs.gl.businessobject.OriginEntryInformation)
-     * @see org.kuali.kfs.module.ld.batch.service.impl.LaborPosterServiceImpl#postAsLedgerEntry(org.kuali.kfs.gl.businessobject.Transaction,
-     *      int, java.util.Date)
+     * @see org.kuali.kfs.module.ld.batch.service.impl.LaborPosterServiceImpl#postAsLedgerEntry(org.kuali.kfs.gl.businessobject.Transaction, int, java.util.Date)
      */
     public void updateEntryHistory(Integer postMode, OriginEntryInformation originEntry) {
-        if (postMode == PosterService.MODE_ENTRIES) {
+        if(postMode == PosterService.MODE_ENTRIES){
             // TODO Retrieve and update 1 by 1? Is a HashMap or cache better so that storing only occurs once at the end?
             LaborOriginEntry laborOriginEntry = (LaborOriginEntry) originEntry;
             LaborEntryHistory ledgerEntryHistory = new LaborEntryHistory(laborOriginEntry);
-
+    
             LaborEntryHistory retrievedLedgerEntryHistory = (LaborEntryHistory) businessObjectService.retrieve(ledgerEntryHistory);
-            if (ObjectUtils.isNotNull(retrievedLedgerEntryHistory)) {
+            if(ObjectUtils.isNotNull(retrievedLedgerEntryHistory)) {
                 ledgerEntryHistory = retrievedLedgerEntryHistory;
             }
-
+            
             ledgerEntryHistory.addAmount(laborOriginEntry.getTransactionLedgerEntryAmount());
-
+            
             businessObjectService.save(ledgerEntryHistory);
         }
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#updateBalanceHistory(org.kuali.kfs.gl.businessobject.OriginEntryInformation)
-     * @see org.kuali.kfs.module.ld.batch.service.impl.LaborPosterServiceImpl#updateLedgerBalance(org.kuali.kfs.gl.businessobject.Transaction,
-     *      int, java.util.Date)
+     * @see org.kuali.kfs.module.ld.batch.service.impl.LaborPosterServiceImpl#updateLedgerBalance(org.kuali.kfs.gl.businessobject.Transaction, int, java.util.Date)
      */
     public void updateBalanceHistory(Integer postMode, OriginEntryInformation originEntry) {
-        if (postMode == PosterService.MODE_ENTRIES) {
+        if(postMode == PosterService.MODE_ENTRIES){
             // TODO Retrieve and update 1 by 1? Is a HashMap or cache better so that storing only occurs once at the end?
             LaborOriginEntry laborOriginEntry = (LaborOriginEntry) originEntry;
             LaborBalanceHistory ledgerBalanceHistory = new LaborBalanceHistory(laborOriginEntry);
-
+            
             LaborBalanceHistory retrievedLedgerBalanceHistory = (LaborBalanceHistory) businessObjectService.retrieve(ledgerBalanceHistory);
-            if (ObjectUtils.isNotNull(retrievedLedgerBalanceHistory)) {
+            if(ObjectUtils.isNotNull(retrievedLedgerBalanceHistory)) {
                 ledgerBalanceHistory = retrievedLedgerBalanceHistory;
             }
 
@@ -196,27 +203,23 @@
             }
 
             ledgerBalanceHistory.addAmount(laborOriginEntry.getUniversityFiscalPeriodCode(), amount);
-
+            
             businessObjectService.save(ledgerBalanceHistory);
         }
     }
-
+    
     /**
      * Compares entries in the Balance and BalanceHistory tables to ensure the amounts match.
-     * 
      * @return count is compare failures
      */
     protected Integer compareBalanceHistory() {
         Integer countComparisionFailures = 0;
-        String balanceTable = persistenceStructureService.getTableName(LedgerBalance.class);
-        String historyTable = persistenceStructureService.getTableName(balanceHistoryPersistentClass);
-        int fiscalYear = universityDateService.getCurrentFiscalYear();
-
-        List data = ledgerEntryBalanceCachingDao.compareBalanceHistory(balanceTable, historyTable, getPastFiscalYearsToConsider(), fiscalYear);
-
+        
+        List<LedgerBalance> data = ledgerEntryBalanceCachingDao.compareBalanceHistory(LedgerBalance.class, balanceHistoryPersistentClass, getPastFiscalYearsToConsider());
+        
         if (!data.isEmpty()) {
-            for (Iterator itr = data.iterator(); itr.hasNext();) {
-                LaborBalanceHistory balance = createBalanceFromMap((Map) itr.next());
+            for (Iterator<LedgerBalance> itr = data.iterator(); itr.hasNext();) {
+                LaborBalanceHistory balance = createBalanceFromMap((Map<String, Object>)itr.next());
                 countComparisionFailures++;
                 if (countComparisionFailures <= this.getComparisonFailuresToPrintPerReport()) {
                     reportWriterService.writeError(balance, new Message(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_RECORD_FAILED_BALANCING), Message.TYPE_WARNING, balance.getClass().getSimpleName()));
@@ -226,56 +229,60 @@
 
         return countComparisionFailures;
     }
-
+    
     /**
      * Compares entries in the Entry and EntryHistory tables to ensure the amounts match.
-     * 
      * @return count is compare failures
      */
     protected Integer compareEntryHistory() {
         Integer countComparisionFailures = 0;
-        String entryTable = persistenceStructureService.getTableName(LedgerEntry.class);
-        String historyTable = persistenceStructureService.getTableName(entryHistoryPersistentClass);
-        int fiscalYear = universityDateService.getCurrentFiscalYear();
-
-        List data = ledgerEntryBalanceCachingDao.compareEntryHistory(entryTable, historyTable, getPastFiscalYearsToConsider(), fiscalYear);
-
+        
+        List<LedgerEntry> data = ledgerEntryBalanceCachingDao.compareEntryHistory(LedgerEntry.class, entryHistoryPersistentClass, getPastFiscalYearsToConsider());
+        
         if (!data.isEmpty()) {
-            for (Iterator itr = data.iterator(); itr.hasNext();) {
-                LaborEntryHistory entry = createEntryHistoryFromMap((Map) itr.next());
+            for (Iterator<LedgerEntry> itr = data.iterator(); itr.hasNext();) {
+                LaborEntryHistory entry = createEntryHistoryFromMap((Map<String, Object>)itr.next());
                 countComparisionFailures++;
                 if (countComparisionFailures <= this.getComparisonFailuresToPrintPerReport()) {
                     reportWriterService.writeError(entry, new Message(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_RECORD_FAILED_BALANCING), Message.TYPE_WARNING, entry.getClass().getSimpleName()));
                 }
-
+                
             }
         }
 
         return countComparisionFailures;
     }
-
-
+    
+    
     /**
+     * 
      * @see org.kuali.kfs.gl.batch.service.BalancingService#clearBalanceHistory()
      */
-
+   
     public void clearHistories() {
         Map<String, Object> fieldValues = new HashMap<String, Object>();
         businessObjectService.deleteMatching(LaborEntryHistory.class, fieldValues);
         businessObjectService.deleteMatching(LaborBalanceHistory.class, fieldValues);
-
+        
         reportWriterService.writeFormattedMessageLine(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.Balancing.MESSAGE_BATCH_BALANCING_HISTORY_PURGED));
-
     }
-
+    
     /**
+     * @see org.kuali.kfs.gl.batch.service.BalancingService#getFilenames()
+     */
+    public String getFilenames() {
+        return (this.laborPosterInputFile == null ? null : this.laborPosterInputFile.getName()) + "\n"
+          + (this.laborPosterErrorOutputFile == null ? null : this.laborPosterErrorOutputFile.getName());
+    }
+    
+    /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getBalance(org.kuali.kfs.gl.businessobject.LedgerBalanceHistory)
      */
     public Balance getBalance(LedgerBalanceHistory ledgerBalanceHistory) {
         LedgerBalance ledgerBalance = new LedgerBalance((LaborBalanceHistory) ledgerBalanceHistory);
         return (LedgerBalance) businessObjectService.retrieve(ledgerBalance);
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#clearPosterFileCache()
      */
@@ -283,89 +290,89 @@
         this.laborPosterInputFile = null;
         this.laborPosterErrorOutputFile = null;
     }
-
+    
     protected LaborBalanceHistory createBalanceFromMap(Map<String, Object> map) {
         LaborBalanceHistory balance = new LaborBalanceHistory();
-        balance.setUniversityFiscalYear(((BigDecimal) (map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
-        balance.setChartOfAccountsCode((String) map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
-        balance.setAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
-        balance.setSubAccountNumber((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
-        balance.setObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
-        balance.setSubObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
-        balance.setBalanceTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
-        balance.setObjectTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_TYPE_CODE));
-        balance.setEmplid((String) map.get(LaborConstants.ColumnNames.EMPLOYEE_IDENTIFIER));
-        balance.setPositionNumber((String) map.get(LaborConstants.ColumnNames.POSITION_NUMBER));
-
-        balance.setAccountLineAnnualBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.ACCOUNTING_LINE_ACTUALS_BALANCE_AMOUNT)));
-        balance.setContractsGrantsBeginningBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.CONTRACT_AND_GRANTS_BEGINNING_BALANCE)));
-        balance.setBeginningBalanceLineAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.BEGINNING_BALANCE)));
-        balance.setMonth1Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_1_ACCT_AMT)));
-        balance.setMonth2Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_2_ACCT_AMT)));
-        balance.setMonth3Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_3_ACCT_AMT)));
-        balance.setMonth4Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_4_ACCT_AMT)));
-        balance.setMonth5Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_5_ACCT_AMT)));
-        balance.setMonth6Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_6_ACCT_AMT)));
-        balance.setMonth7Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_7_ACCT_AMT)));
-        balance.setMonth8Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_8_ACCT_AMT)));
-        balance.setMonth9Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_9_ACCT_AMT)));
-        balance.setMonth10Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_10_ACCT_AMT)));
-        balance.setMonth11Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_11_ACCT_AMT)));
-        balance.setMonth12Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_12_ACCT_AMT)));
-        balance.setMonth13Amount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.MONTH_13_ACCT_AMT)));
-
+        balance.setUniversityFiscalYear(((BigDecimal)(map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
+        balance.setChartOfAccountsCode((String)map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
+        balance.setAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNT_NUMBER));
+        balance.setSubAccountNumber((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_ACCOUNT_NUMBER));
+        balance.setObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
+        balance.setSubObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.SUB_OBJECT_CODE));
+        balance.setBalanceTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
+        balance.setObjectTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_TYPE_CODE));
+        balance.setEmplid((String)map.get(LaborConstants.ColumnNames.EMPLOYEE_IDENTIFIER));
+        balance.setPositionNumber((String)map.get(LaborConstants.ColumnNames.POSITION_NUMBER));
+        
+        balance.setAccountLineAnnualBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.ACCOUNTING_LINE_ACTUALS_BALANCE_AMOUNT)));
+        balance.setContractsGrantsBeginningBalanceAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.CONTRACT_AND_GRANTS_BEGINNING_BALANCE)));
+        balance.setBeginningBalanceLineAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.BEGINNING_BALANCE)));
+        balance.setMonth1Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_1_ACCT_AMT)));
+        balance.setMonth2Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_2_ACCT_AMT)));
+        balance.setMonth3Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_3_ACCT_AMT)));
+        balance.setMonth4Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_4_ACCT_AMT)));
+        balance.setMonth5Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_5_ACCT_AMT)));
+        balance.setMonth6Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_6_ACCT_AMT)));
+        balance.setMonth7Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_7_ACCT_AMT)));
+        balance.setMonth8Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_8_ACCT_AMT)));
+        balance.setMonth9Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_9_ACCT_AMT)));
+        balance.setMonth10Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_10_ACCT_AMT)));
+        balance.setMonth11Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_11_ACCT_AMT)));
+        balance.setMonth12Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_12_ACCT_AMT)));
+        balance.setMonth13Amount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.MONTH_13_ACCT_AMT)));
+        
         return balance;
-
+        
     }
-
+    
     protected LaborEntryHistory createEntryHistoryFromMap(Map<String, Object> map) {
         LaborEntryHistory entry = new LaborEntryHistory();
-        entry.setUniversityFiscalYear(((BigDecimal) (map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
-        entry.setChartOfAccountsCode((String) map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
-        entry.setFinancialObjectCode((String) map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
-        entry.setFinancialBalanceTypeCode((String) map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
-        entry.setUniversityFiscalPeriodCode((String) map.get(GeneralLedgerConstants.ColumnNames.FISCAL_PERIOD_CODE));
-        entry.setTransactionDebitCreditCode((String) map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_DEBIT_CREDIT_CD));
-        entry.setTransactionLedgerEntryAmount(convertBigDecimalToKualiDecimal((BigDecimal) map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_LEDGER_ENTRY_AMOUNT)));
-
+        entry.setUniversityFiscalYear(((BigDecimal)(map.get(GeneralLedgerConstants.ColumnNames.UNIVERSITY_FISCAL_YEAR))).intValue());
+        entry.setChartOfAccountsCode((String)map.get(GeneralLedgerConstants.ColumnNames.CHART_OF_ACCOUNTS_CODE));
+        entry.setFinancialObjectCode((String)map.get(GeneralLedgerConstants.ColumnNames.OBJECT_CODE));
+        entry.setFinancialBalanceTypeCode((String)map.get(GeneralLedgerConstants.ColumnNames.BALANCE_TYPE_CODE));
+        entry.setUniversityFiscalPeriodCode((String)map.get(GeneralLedgerConstants.ColumnNames.FISCAL_PERIOD_CODE));
+        entry.setTransactionDebitCreditCode((String)map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_DEBIT_CREDIT_CD));
+        entry.setTransactionLedgerEntryAmount(convertBigDecimalToKualiDecimal((BigDecimal)map.get(GeneralLedgerConstants.ColumnNames.TRANSACTION_LEDGER_ENTRY_AMOUNT)));
+        
         return entry;
-
+        
     }
-
+    
     protected KualiDecimal convertBigDecimalToKualiDecimal(BigDecimal biggy) {
         if (ObjectUtils.isNull(biggy))
-            return new KualiDecimal(0);
-        else
+            return new KualiDecimal(0);   
+        else 
             return new KualiDecimal(biggy);
-
+    
     }
-
+    
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getReversalInputFile()
      */
-    public File getReversalInputFile() {
+    public File getReversalInputFile(){
         return null;
     }
 
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getReversalErrorOutputFile()
      */
-    public File getReversalErrorOutputFile() {
+    public File getReversalErrorOutputFile(){
         return null;
     }
 
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getICRInputFile()
      */
-    public File getICRInputFile() {
+    public File getICRInputFile(){
         return null;
     }
 
     /**
      * @see org.kuali.kfs.gl.batch.service.BalancingService#getICRErrorOutputFile()
      */
-    public File getICRErrorOutputFile() {
+    public File getICRErrorOutputFile(){
         return null;
     }
-
+    
 }
Index: work/src/org/kuali/kfs/module/ld/batch/LaborScrubberSortComparator.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/LaborScrubberSortComparator.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/LaborScrubberSortComparator.java	(working copy)
@@ -21,31 +21,46 @@
 import org.kuali.kfs.module.ld.businessobject.LaborOriginEntryFieldUtil;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 
-public class LaborScrubberSortComparator implements Comparator {
+public class LaborScrubberSortComparator implements Comparator<String> {
 
-    public int compare(Object object1, Object object2) {
-        LaborOriginEntryFieldUtil loefu = new LaborOriginEntryFieldUtil();
-        Map<String, Integer> pMap = loefu.getFieldBeginningPositionMap();
+    LaborOriginEntryFieldUtil loefu = new LaborOriginEntryFieldUtil();
+    Map<String, Integer> pMap = loefu.getFieldBeginningPositionMap();
+
+    private class Range {
+        public Range( int start, int end ) { this.start = start; this.end = end; }
+        public int start;
+        public int end;
+    }
+
+    Range[] compareRanges;
+    {
+        compareRanges = new Range[6];
+        compareRanges[0] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER));
+        compareRanges[1] = new Range(pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_CODE));
+        compareRanges[2] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE));
+        compareRanges[3] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_REVERSAL_DATE), pMap.get(KFSPropertyConstants.TRANSACTION_ENCUMBRANCE_UPDT_CD));
+        compareRanges[4] = new Range(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE));
+        compareRanges[5] = new Range(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE));
+    }
+    
+    public int compare(String string1, String string2) {
+        
+        StringBuilder sb1 = new StringBuilder();
+        sb1.append(string1.substring(compareRanges[0].start,compareRanges[0].end));
+        sb1.append(string1.substring(compareRanges[1].start,compareRanges[1].end));
+        sb1.append(string1.substring(compareRanges[2].start,compareRanges[2].end));
+        sb1.append(string1.substring(compareRanges[3].start,compareRanges[3].end));
+        sb1.append(string1.substring(compareRanges[4].start,compareRanges[4].end));
+        sb1.append(string1.substring(compareRanges[5].start,compareRanges[5].end));
             
-        String string1 = (String) object1;
-        String string2 = (String) object2;
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(string2.substring(compareRanges[0].start,compareRanges[0].end));
+        sb2.append(string2.substring(compareRanges[1].start,compareRanges[1].end));
+        sb2.append(string2.substring(compareRanges[2].start,compareRanges[2].end));
+        sb2.append(string2.substring(compareRanges[3].start,compareRanges[3].end));
+        sb2.append(string2.substring(compareRanges[4].start,compareRanges[4].end));
+        sb2.append(string2.substring(compareRanges[5].start,compareRanges[5].end));
         
-        StringBuffer sb1 = new StringBuffer();
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_REVERSAL_DATE), pMap.get(KFSPropertyConstants.TRANSACTION_ENCUMBRANCE_UPDT_CD)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE)));
-            
-        StringBuffer sb2 = new StringBuffer();
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_REVERSAL_DATE), pMap.get(KFSPropertyConstants.TRANSACTION_ENCUMBRANCE_UPDT_CD)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE), pMap.get(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE)));
-
         return sb1.toString().compareTo(sb2.toString());
     }
 }
\ No newline at end of file
Index: work/src/org/kuali/kfs/module/ld/batch/LaborScrubberSortStep.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/LaborScrubberSortStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/LaborScrubberSortStep.java	(working copy)
@@ -1,60 +0,0 @@
-/*
- * Copyright 2005-2009 The Kuali Foundation
- * 
- * Licensed under the Educational Community License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl2.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.kfs.module.ld.batch;
-
-import java.io.File;
-import java.util.Date;
-
-import org.kuali.kfs.gl.GeneralLedgerConstants;
-import org.kuali.kfs.gl.batch.BatchSortUtil;
-import org.kuali.kfs.module.ld.LaborConstants;
-import org.kuali.kfs.sys.batch.AbstractStep;
-import org.springframework.util.StopWatch;
-
-/**
- * A step to run the scrubber process.
- */
-public class LaborScrubberSortStep extends AbstractStep {
-    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LaborScrubberSortStep.class);
-    protected String batchFileDirectoryName;
-    
-    /**
-     * Runs the scrubber process.
-     * 
-     * @param jobName the name of the job this step is being run as part of
-     * @param jobRunDate the time/date the job was started
-     * @return true if the job completed successfully, false if otherwise
-     * @see org.kuali.kfs.sys.batch.Step#execute(java.lang.String)
-     */
-    public boolean execute(String jobName, Date jobRunDate) {
-        StopWatch stopWatch = new StopWatch();
-        stopWatch.start(jobName);
-        String inputFile = batchFileDirectoryName + File.separator + LaborConstants.BatchFileSystem.PRE_SCRUBBER_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        String outputFile = batchFileDirectoryName + File.separator + LaborConstants.BatchFileSystem.SCRUBBER_INPUT_FILE + GeneralLedgerConstants.BatchFileSystem.EXTENSION;
-        BatchSortUtil.sortTextFileWithFields(inputFile, outputFile, new LaborScrubberSortComparator());
-
-
-        stopWatch.stop();
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("scrubber step of " + jobName + " took " + (stopWatch.getTotalTimeSeconds() / 60.0) + " minutes to complete");
-        }
-        return true;
-    }
-
-    public void setBatchFileDirectoryName(String batchFileDirectoryName) {
-        this.batchFileDirectoryName = batchFileDirectoryName;
-    }
-}
Index: work/src/org/kuali/kfs/module/ld/batch/LaborPosterSortComparator.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/batch/LaborPosterSortComparator.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/batch/LaborPosterSortComparator.java	(working copy)
@@ -21,34 +21,52 @@
 import org.kuali.kfs.module.ld.businessobject.LaborOriginEntryFieldUtil;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 
-public class LaborPosterSortComparator implements Comparator {
+public class LaborPosterSortComparator implements Comparator<String> {
 
-    public int compare(Object object1, Object object2) {
-        LaborOriginEntryFieldUtil loefu = new LaborOriginEntryFieldUtil();
-        Map<String, Integer> pMap = loefu.getFieldBeginningPositionMap();
-            
-        String string1 = (String) object1;
-        String string2 = (String) object2;
-        StringBuffer sb1 = new StringBuffer();
-            
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.PROJECT_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.ORGANIZATION_REFERENCE_ID), pMap.get(KFSPropertyConstants.REFERENCE_FIN_DOCUMENT_TYPE_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.ORGANIZATION_DOCUMENT_NUMBER), pMap.get(KFSPropertyConstants.ORGANIZATION_REFERENCE_ID)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER), pMap.get(KFSPropertyConstants.POSITION_NUMBER)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.POSITION_NUMBER), pMap.get(KFSPropertyConstants.PROJECT_CODE)));
-        sb1.append(string1.substring(pMap.get(KFSPropertyConstants.EMPLID), pMap.get(KFSPropertyConstants.EARN_CODE)));
-            
-        StringBuffer sb2 = new StringBuffer();
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR), pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.PROJECT_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.ORGANIZATION_REFERENCE_ID), pMap.get(KFSPropertyConstants.REFERENCE_FIN_DOCUMENT_TYPE_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE), pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.ORGANIZATION_DOCUMENT_NUMBER), pMap.get(KFSPropertyConstants.ORGANIZATION_REFERENCE_ID)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER), pMap.get(KFSPropertyConstants.POSITION_NUMBER)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.POSITION_NUMBER), pMap.get(KFSPropertyConstants.PROJECT_CODE)));
-        sb2.append(string2.substring(pMap.get(KFSPropertyConstants.EMPLID), pMap.get(KFSPropertyConstants.EARN_CODE)));
+    LaborOriginEntryFieldUtil loefu = new LaborOriginEntryFieldUtil();
+    Map<String, Integer> pMap = loefu.getFieldBeginningPositionMap();
+
+    private class Range {
+        public Range( int start, int end ) { this.start = start; this.end = end; }
+        public int start;
+        public int end;
+    }
+
+    Range[] compareRanges;
+    {
+        compareRanges = new Range[8];
+        compareRanges[0] = new Range(pMap.get(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR),             pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE));
+        compareRanges[1] = new Range(pMap.get(KFSPropertyConstants.PROJECT_CODE),                       pMap.get(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC));
+        compareRanges[2] = new Range(pMap.get(KFSPropertyConstants.ORGANIZATION_REFERENCE_ID),          pMap.get(KFSPropertyConstants.REFERENCE_FIN_DOCUMENT_TYPE_CODE));
+        compareRanges[3] = new Range(pMap.get(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE),        pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER));
+        compareRanges[4] = new Range(pMap.get(KFSPropertyConstants.ORGANIZATION_DOCUMENT_NUMBER),       pMap.get(KFSPropertyConstants.ORGANIZATION_REFERENCE_ID));
+        compareRanges[5] = new Range(pMap.get(KFSPropertyConstants.TRANSACTION_ENTRY_SEQUENCE_NUMBER),  pMap.get(KFSPropertyConstants.POSITION_NUMBER));
+        compareRanges[6] = new Range(pMap.get(KFSPropertyConstants.POSITION_NUMBER),                    pMap.get(KFSPropertyConstants.PROJECT_CODE));
+        compareRanges[7] = new Range(pMap.get(KFSPropertyConstants.EMPLID),                             pMap.get(KFSPropertyConstants.EARN_CODE));
+    }
+    
+    
+    public int compare(String string1, String string2) {
+        StringBuilder sb1 = new StringBuilder();
+        sb1.append(string1.substring(compareRanges[0].start,compareRanges[0].end));
+        sb1.append(string1.substring(compareRanges[1].start,compareRanges[1].end));
+        sb1.append(string1.substring(compareRanges[2].start,compareRanges[2].end));
+        sb1.append(string1.substring(compareRanges[3].start,compareRanges[3].end));
+        sb1.append(string1.substring(compareRanges[4].start,compareRanges[4].end));
+        sb1.append(string1.substring(compareRanges[5].start,compareRanges[5].end));
+        sb1.append(string1.substring(compareRanges[6].start,compareRanges[6].end));
+        sb1.append(string1.substring(compareRanges[7].start,compareRanges[7].end));
+
+        StringBuilder sb2 = new StringBuilder();
+        sb2.append(string2.substring(compareRanges[0].start,compareRanges[0].end));
+        sb2.append(string2.substring(compareRanges[1].start,compareRanges[1].end));
+        sb2.append(string2.substring(compareRanges[2].start,compareRanges[2].end));
+        sb2.append(string2.substring(compareRanges[3].start,compareRanges[3].end));
+        sb2.append(string2.substring(compareRanges[4].start,compareRanges[4].end));
+        sb2.append(string2.substring(compareRanges[5].start,compareRanges[5].end));
+        sb2.append(string2.substring(compareRanges[6].start,compareRanges[6].end));
+        sb2.append(string2.substring(compareRanges[7].start,compareRanges[7].end));
+
         return sb1.toString().compareTo(sb2.toString());
     }
 }
Index: work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/ExpenseTransferSourceAccountingLine.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/ExpenseTransferSourceAccountingLine.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/ExpenseTransferSourceAccountingLine.xml	(working copy)
@@ -1,27 +1,31 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
-	<!--
-		Copyright 2007-2009 The Kuali Foundation Licensed under the
-		Educational Community License, Version 2.0 (the "License"); you may
-		not use this file except in compliance with the License. You may
-		obtain a copy of the License at
-		http://www.opensource.org/licenses/ecl2.php Unless required by
-		applicable law or agreed to in writing, software distributed under the
-		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-		CONDITIONS OF ANY KIND, either express or implied. See the License for
-		the specific language governing permissions and limitations under the
-		License.
-	-->
-	<bean id="ExpenseTransferSourceAccountingLine" parent="ExpenseTransferSourceAccountingLine-parentBean" />
+<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
+<!--
+ Copyright 2007-2009 The Kuali Foundation
+ 
+ Licensed under the Educational Community License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl2.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 
+  <bean id="ExpenseTransferSourceAccountingLine" parent="ExpenseTransferSourceAccountingLine-parentBean"/>
+
 	<bean id="ExpenseTransferSourceAccountingLine-parentBean"
 		abstract="true" parent="BusinessObjectEntry">
 		<property name="businessObjectClass"
 			value="org.kuali.kfs.module.ld.businessobject.ExpenseTransferSourceAccountingLine" />
 		<property name="objectLabel" value="Expense Transfer Source Accounting Line" />
 
+    <property name="inquiryDefinition">
+      <ref bean="ExpenseTransferSourceAccountingLine-inquiryDefinition"/>
+    </property>
 		<property name="attributes">
 			<list>
 				<ref bean="ExpenseTransferSourceAccountingLine-emplid" />
@@ -75,14 +79,15 @@
 					bean="ExpenseTransferSourceAccountingLine-salesTax.financialDocumentTaxableSalesAmount" />
 				<ref
 					bean="ExpenseTransferSourceAccountingLine-salesTax.financialDocumentSaleDate" />
+        <ref bean="ExpenseTransferSourceAccountingLine-fringeBenefitView"/>
 			</list>
 		</property>
 	</bean>
 
-	<!-- Attribute Definitions -->
+<!-- Attribute Definitions -->
 
 
-	<bean id="ExpenseTransferSourceAccountingLine-emplid" parent="ExpenseTransferSourceAccountingLine-emplid-parentBean" />
+  <bean id="ExpenseTransferSourceAccountingLine-emplid" parent="ExpenseTransferSourceAccountingLine-emplid-parentBean"/>
 
 	<bean id="ExpenseTransferSourceAccountingLine-emplid-parentBean"
 		abstract="true" parent="PersonImpl-employeeId">
@@ -244,20 +249,15 @@
 	<bean id="ExpenseTransferSourceAccountingLine-financialObjectCode"
 		parent="ExpenseTransferSourceAccountingLine-financialObjectCode-parentBean" />
 
-	<bean
-		id="ExpenseTransferSourceAccountingLine-financialObjectCode-parentBean"
-		abstract="true" parent="ObjectCode-financialObjectCode">
+  <bean id="ExpenseTransferSourceAccountingLine-financialObjectCode-parentBean" abstract="true" parent="ObjectCode-financialObjectCode">
+    
+  </bean>
+  <bean id="ExpenseTransferSourceAccountingLine-accountNumber" parent="ExpenseTransferSourceAccountingLine-accountNumber-parentBean"/>
 
-	</bean>
-	<bean id="ExpenseTransferSourceAccountingLine-accountNumber"
-		parent="ExpenseTransferSourceAccountingLine-accountNumber-parentBean" />
+  <bean id="ExpenseTransferSourceAccountingLine-accountNumber-parentBean" abstract="true" parent="Account-accountNumber">
+  </bean>
+  <bean id="ExpenseTransferSourceAccountingLine-organizationReferenceId" parent="ExpenseTransferSourceAccountingLine-organizationReferenceId-parentBean"/>
 
-	<bean id="ExpenseTransferSourceAccountingLine-accountNumber-parentBean"
-		abstract="true" parent="Account-accountNumber">
-	</bean>
-	<bean id="ExpenseTransferSourceAccountingLine-organizationReferenceId"
-		parent="ExpenseTransferSourceAccountingLine-organizationReferenceId-parentBean" />
-
 	<bean
 		id="ExpenseTransferSourceAccountingLine-organizationReferenceId-parentBean"
 		abstract="true" parent="AttributeDefinition">
@@ -279,17 +279,14 @@
 	<bean id="ExpenseTransferSourceAccountingLine-chartOfAccountsCode"
 		parent="ExpenseTransferSourceAccountingLine-chartOfAccountsCode-parentBean" />
 
-	<bean
-		id="ExpenseTransferSourceAccountingLine-chartOfAccountsCode-parentBean"
-		abstract="true" parent="Chart-chartOfAccountsCode">
-		<property name="control">
-			<ref bean="ChartSimpleSelectControl" />
-		</property>
+  <bean id="ExpenseTransferSourceAccountingLine-chartOfAccountsCode-parentBean" abstract="true" parent="Chart-chartOfAccountsCode">
+    <property name="control">
+      <ref bean="ChartSimpleSelectControl" />
+    </property>
+    
+  </bean>
+  <bean id="ExpenseTransferSourceAccountingLine-postingYear" parent="ExpenseTransferSourceAccountingLine-postingYear-parentBean"/>
 
-	</bean>
-	<bean id="ExpenseTransferSourceAccountingLine-postingYear"
-		parent="ExpenseTransferSourceAccountingLine-postingYear-parentBean" />
-
 	<bean id="ExpenseTransferSourceAccountingLine-postingYear-parentBean"
 		abstract="true" parent="GenericAttributes-genericFiscalYear">
 		<property name="name" value="postingYear" />
@@ -345,12 +342,9 @@
 	<bean id="ExpenseTransferSourceAccountingLine-referenceTypeCode"
 		parent="ExpenseTransferSourceAccountingLine-referenceTypeCode-parentBean" />
 
-	<bean
-		id="ExpenseTransferSourceAccountingLine-referenceTypeCode-parentBean"
-		abstract="true" parent="GenericAttributes-referenceTypeCode" />
+  <bean id="ExpenseTransferSourceAccountingLine-referenceTypeCode-parentBean" abstract="true" parent="GenericAttributes-referenceTypeCode"/>
 
-	<bean id="ExpenseTransferSourceAccountingLine-projectCode"
-		parent="ExpenseTransferSourceAccountingLine-projectCode-parentBean" />
+  <bean id="ExpenseTransferSourceAccountingLine-projectCode" parent="ExpenseTransferSourceAccountingLine-projectCode-parentBean"/>
 
 	<bean id="ExpenseTransferSourceAccountingLine-projectCode-parentBean"
 		abstract="true" parent="ProjectCode-code">
@@ -571,11 +565,44 @@
 		id="ExpenseTransferSourceAccountingLine-salesTax.financialDocumentSaleDate"
 		parent="ExpenseTransferSourceAccountingLine-salesTax.financialDocumentSaleDate-parentBean" />
 
-	<bean
-		id="ExpenseTransferSourceAccountingLine-salesTax.financialDocumentSaleDate-parentBean"
-		abstract="true" parent="SalesTax-financialDocumentSaleDate">
-		<property name="name" value="salesTax.financialDocumentSaleDate" />
-		<property name="label" value="Sale Date" />
+  <bean id="ExpenseTransferSourceAccountingLine-salesTax.financialDocumentSaleDate-parentBean" abstract="true" parent="SalesTax-financialDocumentSaleDate">
+    <property name="name" value="salesTax.financialDocumentSaleDate"/>
+    <property name="label" value="Sale Date"/>
+  </bean>
+  
+  <bean id="ExpenseTransferSourceAccountingLine-fringeBenefitView" parent="ExpenseTransferSourceAccountingLine-fringeBenefitView-parentBean"/>
+  <bean id="ExpenseTransferSourceAccountingLine-fringeBenefitView-parentBean" abstract="true"  parent="AttributeDefinition">
+    <property name="name" value="fringeBenefitView"/>
+    <property name="label" value="Fringe Benefit"/>
+    <property name="shortLabel" value="Fringe Benefit"/>
+    <property name="maxLength" value="100"/>
+    <property name="required" value="false"/>
+    <property name="control">
+      <ref bean="StandardNameTextControl" />
+    </property>
+  </bean>
+  
+  <!-- Business Object Inquiry Definition -->
 
-	</bean>
+
+  <bean id="ExpenseTransferSourceAccountingLine-inquiryDefinition" parent="ExpenseTransferSourceAccountingLine-inquiryDefinition-parentBean"/>
+
+  <bean id="ExpenseTransferSourceAccountingLine-inquiryDefinition-parentBean" abstract="true" parent="InquiryDefinition">
+    <property name="title" value="Fringe Benefit"/>
+    <property name="inquirySections">
+      <list>
+        <bean parent="InquirySectionDefinition">
+          <property name="title" value="Fringe Benefit"/>
+          <property name="numberOfColumns" value="1"/>
+          <property name="inquiryFields">
+            <list>
+            <bean parent="FieldDefinition" p:attributeName="fringeBenefitView"/>
+            </list>
+          </property>
+        </bean>
+      </list>
+    </property>
+    <property name="inquirableClass" value="org.kuali.kfs.module.ld.businessobject.inquiry.ExpenseTransferAccountingLineInquirable"/>
+  </bean>
+  
 </beans>
Index: work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/LedgerEntry.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/LedgerEntry.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/LedgerEntry.xml	(working copy)
@@ -1,108 +1,115 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
-	<!--
-		Copyright 2006-2009 The Kuali Foundation Licensed under the
-		Educational Community License, Version 2.0 (the "License"); you may
-		not use this file except in compliance with the License. You may
-		obtain a copy of the License at
-		http://www.opensource.org/licenses/ecl2.php Unless required by
-		applicable law or agreed to in writing, software distributed under the
-		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-		CONDITIONS OF ANY KIND, either express or implied. See the License for
-		the specific language governing permissions and limitations under the
-		License.
-	-->
-	<bean id="LedgerEntry" parent="LedgerEntry-parentBean" />
+<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
+<!--
+ Copyright 2006-2009 The Kuali Foundation
+ 
+ Licensed under the Educational Community License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl2.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 
-	<bean id="LedgerEntry-parentBean" abstract="true" parent="BusinessObjectEntry">
-		<property name="businessObjectClass"
-			value="org.kuali.kfs.module.ld.businessobject.LedgerEntry" />
-		<property name="objectLabel" value="Labor Ledger Entry" />
+  <bean id="LedgerEntry" parent="LedgerEntry-parentBean"/>
 
-		<property name="inquiryDefinition">
-			<ref bean="LedgerEntry-inquiryDefinition" />
-		</property>
-		<property name="lookupDefinition">
-			<ref bean="LedgerEntry-lookupDefinition" />
-		</property>
-		<property name="attributes">
-			<list>
-				<ref bean="LedgerEntry-universityFiscalYear" />
-				<ref bean="LedgerEntry-subAccountNumber" />
-				<ref bean="LedgerEntry-accountNumber" />
-				<ref bean="LedgerEntry-chartOfAccountsCode" />
-				<ref bean="LedgerEntry-financialBalanceTypeCode" />
-				<ref bean="LedgerEntry-financialObjectCode" />
-				<ref bean="LedgerEntry-financialObjectTypeCode" />
-				<ref bean="LedgerEntry-financialSubObjectCode" />
-				<ref bean="LedgerEntry-earnCode" />
-				<ref bean="LedgerEntry-emplid" />
-				<ref bean="LedgerEntry-employeeRecord" />
-				<ref bean="LedgerEntry-documentNumber" />
-				<ref bean="LedgerEntry-financialDocumentReversalDate" />
-				<ref bean="LedgerEntry-financialDocumentTypeCode" />
-				<ref bean="LedgerEntry-financialSystemOriginationCode" />
-				<ref bean="LedgerEntry-grade" />
-				<ref bean="LedgerEntry-hrmsCompany" />
-				<ref bean="LedgerEntry-laborLedgerOriginalAccountNumber" />
-				<ref bean="LedgerEntry-laborLedgerOriginalChartOfAccountsCode" />
-				<ref bean="LedgerEntry-laborLedgerOriginalFinancialObjectCode" />
-				<ref bean="LedgerEntry-laborLedgerOriginalFinancialSubObjectCode" />
-				<ref bean="LedgerEntry-laborLedgerOriginalSubAccountNumber" />
-				<ref bean="LedgerEntry-organizationDocumentNumber" />
-				<ref bean="LedgerEntry-organizationReferenceId" />
-				<ref bean="LedgerEntry-payGroup" />
-				<ref bean="LedgerEntry-payPeriodEndDate" />
-				<ref bean="LedgerEntry-payrollEndDateFiscalPeriodCode" />
-				<ref bean="LedgerEntry-payrollEndDateFiscalYear" />
-				<ref bean="LedgerEntry-positionNumber" />
-				<ref bean="LedgerEntry-projectCode" />
-				<ref bean="LedgerEntry-referenceFinancialDocumentNumber" />
-				<ref bean="LedgerEntry-referenceFinancialDocumentTypeCode" />
-				<ref bean="LedgerEntry-referenceFinancialSystemOriginationCode" />
-				<ref bean="LedgerEntry-runIdentifier" />
-				<ref bean="LedgerEntry-salaryAdministrationPlan" />
-				<ref bean="LedgerEntry-setid" />
-				<ref bean="LedgerEntry-transactionDate" />
-				<ref bean="LedgerEntry-transactionDateTimeStamp" />
-				<ref bean="LedgerEntry-transactionDebitCreditCode" />
-				<ref bean="LedgerEntry-transactionEncumbranceUpdateCode" />
-				<ref bean="LedgerEntry-transactionLedgerEntryAmount" />
-				<ref bean="LedgerEntry-transactionLedgerEntryDescription" />
-				<ref bean="LedgerEntry-transactionLedgerEntrySequenceNumber" />
-				<ref bean="LedgerEntry-transactionPostingDate" />
-				<ref bean="LedgerEntry-transactionTotalHours" />
-				<ref bean="LedgerEntry-universityFiscalPeriodCode" />
-				<ref bean="LedgerEntry-dummyBusinessObject.pendingEntryOption" />
-			</list>
-		</property>
-		<property name="relationships">
-			<list>
-				<bean parent="RelationshipDefinition">
-					<property name="objectAttributeName" value="financialSystemDocumentTypeCode" />
-					<property name="primitiveAttributes">
-						<list>
-							<bean parent="PrimitiveAttributeDefinition" p:sourceName="financialDocumentTypeCode"
-								p:targetName="name" />
-						</list>
-					</property>
-				</bean>
-				<bean parent="RelationshipDefinition">
-					<property name="objectAttributeName" value="referenceFinancialSystemDocumentTypeCode" />
-					<property name="primitiveAttributes">
-						<list>
-							<bean parent="PrimitiveAttributeDefinition" p:sourceName="referenceFinancialDocumentTypeCode"
-								p:targetName="name" />
-						</list>
-					</property>
-				</bean>
-			</list>
-		</property>
-	</bean>
+  <bean id="LedgerEntry-parentBean" abstract="true" parent="BusinessObjectEntry">
+    <property name="businessObjectClass" value="org.kuali.kfs.module.ld.businessobject.LedgerEntry"/>
+    <property name="objectLabel" value="Labor Ledger Entry"/>
+    
+    <property name="inquiryDefinition">
+      <ref bean="LedgerEntry-inquiryDefinition"/>
+    </property>
+    <property name="lookupDefinition">
+      <ref bean="LedgerEntry-lookupDefinition"/>
+    </property>
+    <property name="attributes">
+      <list>
+        <ref bean="LedgerEntry-universityFiscalYear"/>
+        <ref bean="LedgerEntry-subAccountNumber"/>
+        <ref bean="LedgerEntry-accountNumber"/>
+        <ref bean="LedgerEntry-chartOfAccountsCode"/>
+        <ref bean="LedgerEntry-financialBalanceTypeCode"/>
+        <ref bean="LedgerEntry-financialObjectCode"/>
+        <ref bean="LedgerEntry-financialObjectTypeCode"/>
+        <ref bean="LedgerEntry-financialSubObjectCode"/>
+        <ref bean="LedgerEntry-earnCode"/>
+        <ref bean="LedgerEntry-emplid"/>
+        <ref bean="LedgerEntry-employeeRecord"/>
+        <ref bean="LedgerEntry-documentNumber"/>
+        <ref bean="LedgerEntry-financialDocumentReversalDate"/>
+        <ref bean="LedgerEntry-financialDocumentTypeCode"/>
+        <ref bean="LedgerEntry-financialSystemOriginationCode"/>
+        <ref bean="LedgerEntry-grade"/>
+        <ref bean="LedgerEntry-hrmsCompany"/>
+        <ref bean="LedgerEntry-laborLedgerOriginalAccountNumber"/>
+        <ref bean="LedgerEntry-laborLedgerOriginalChartOfAccountsCode"/>
+        <ref bean="LedgerEntry-laborLedgerOriginalFinancialObjectCode"/>
+        <ref bean="LedgerEntry-laborLedgerOriginalFinancialSubObjectCode"/>
+        <ref bean="LedgerEntry-laborLedgerOriginalSubAccountNumber"/>
+        <ref bean="LedgerEntry-organizationDocumentNumber"/>
+        <ref bean="LedgerEntry-organizationReferenceId"/>
+        <ref bean="LedgerEntry-payGroup"/>
+        <ref bean="LedgerEntry-payPeriodEndDate"/>
+        <ref bean="LedgerEntry-payrollEndDateFiscalPeriodCode"/>
+        <ref bean="LedgerEntry-payrollEndDateFiscalYear"/>
+        <ref bean="LedgerEntry-positionNumber"/>
+        <ref bean="LedgerEntry-projectCode"/>
+        <ref bean="LedgerEntry-referenceFinancialDocumentNumber"/>
+        <ref bean="LedgerEntry-referenceFinancialDocumentTypeCode"/>
+        <ref bean="LedgerEntry-referenceFinancialSystemOriginationCode"/>
+        <ref bean="LedgerEntry-runIdentifier"/>
+        <ref bean="LedgerEntry-salaryAdministrationPlan"/>
+        <ref bean="LedgerEntry-setid"/>
+        <ref bean="LedgerEntry-transactionDate"/>
+        <ref bean="LedgerEntry-transactionDateTimeStamp"/>
+        <ref bean="LedgerEntry-transactionDebitCreditCode"/>
+        <ref bean="LedgerEntry-transactionEncumbranceUpdateCode"/>
+        <ref bean="LedgerEntry-transactionLedgerEntryAmount"/>
+        <ref bean="LedgerEntry-transactionLedgerEntryDescription"/>
+        <ref bean="LedgerEntry-transactionLedgerEntrySequenceNumber"/>
+        <ref bean="LedgerEntry-transactionPostingDate"/>
+        <ref bean="LedgerEntry-transactionTotalHours"/>
+        <ref bean="LedgerEntry-universityFiscalPeriodCode"/>
+        <ref bean="LedgerEntry-dummyBusinessObject.pendingEntryOption"/>
+        <ref bean="LedgerEntry-employee.name" />
+      </list>
+    </property>
+    <property name="relationships">
+    	<list>
+    		<bean parent="RelationshipDefinition">
+    			<property name="objectAttributeName" value="financialSystemDocumentTypeCode"/>
+		        <property name="primitiveAttributes">
+		        	<list>
+		            	<bean parent="PrimitiveAttributeDefinition" p:sourceName="financialDocumentTypeCode" p:targetName="name"/>
+		            </list>
+		        </property>
+    		</bean>
+    		<bean parent="RelationshipDefinition">
+    			<property name="objectAttributeName" value="referenceFinancialSystemDocumentTypeCode"/>
+		        <property name="primitiveAttributes">
+		        	<list>
+		            	<bean parent="PrimitiveAttributeDefinition" p:sourceName="referenceFinancialDocumentTypeCode" p:targetName="name"/>
+		            </list>
+		        </property>
+    		</bean>
+    		<bean parent="RelationshipDefinition">
+    			<property name="objectAttributeName" value="employee"/>
+		        <property name="primitiveAttributes">
+		        	<list>
+		            	<bean parent="PrimitiveAttributeDefinition" p:sourceName="emplid" p:targetName="employeeId"/>
+		            </list>
+		        </property>
+    		</bean>
+    	</list>
+    </property>
+  </bean>
 
-	<!-- Attribute Definitions -->
+<!-- Attribute Definitions -->
 
 
 	<bean id="LedgerEntry-universityFiscalYear" parent="LedgerEntry-universityFiscalYear-parentBean" />
@@ -659,17 +666,20 @@
 		</property>
 	</bean>
 
-	<bean id="LedgerEntry-dummyBusinessObject.pendingEntryOption"
-		parent="LedgerEntry-dummyBusinessObject.pendingEntryOption-parentBean" />
-	<bean id="LedgerEntry-dummyBusinessObject.pendingEntryOption-parentBean"
-		abstract="true" parent="TransientBalanceInquiryAttributes-pendingEntryOption">
-		<property name="name" value="dummyBusinessObject.pendingEntryOption" />
-	</bean>
+  <bean id="LedgerEntry-dummyBusinessObject.pendingEntryOption" parent="LedgerEntry-dummyBusinessObject.pendingEntryOption-parentBean"/>
+  <bean id="LedgerEntry-dummyBusinessObject.pendingEntryOption-parentBean" abstract="true" parent="TransientBalanceInquiryAttributes-pendingEntryOption">
+    <property name="name" value="dummyBusinessObject.pendingEntryOption"/>
+  </bean>
+  
+  <bean id="LedgerEntry-employee.name" parent="LedgerEntry-employee.name-parentBean"/>
+  <bean id="LedgerEntry-employee.name-parentBean" abstract="true" parent="PersonImpl-name">
+  	<property name="name" value="employee.name"/>
+  </bean>
 
-	<!-- Business Object Inquiry Definition -->
+<!-- Business Object Inquiry Definition -->
 
 
-	<bean id="LedgerEntry-inquiryDefinition" parent="LedgerEntry-inquiryDefinition-parentBean" />
+  <bean id="LedgerEntry-inquiryDefinition" parent="LedgerEntry-inquiryDefinition-parentBean"/>
 
 	<bean id="LedgerEntry-inquiryDefinition-parentBean" abstract="true"
 		parent="InquiryDefinition">
@@ -737,10 +747,10 @@
 		</property>
 	</bean>
 
-	<!-- Business Object Lookup Definition -->
+<!-- Business Object Lookup Definition -->
 
 
-	<bean id="LedgerEntry-lookupDefinition" parent="LedgerEntry-lookupDefinition-parentBean" />
+  <bean id="LedgerEntry-lookupDefinition" parent="LedgerEntry-lookupDefinition-parentBean"/>
 
 	<bean id="LedgerEntry-lookupDefinition-parentBean" abstract="true"
 		parent="LookupDefinition">
Index: work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/ExpenseTransferTargetAccountingLine.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/ExpenseTransferTargetAccountingLine.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/businessobject/datadictionary/ExpenseTransferTargetAccountingLine.xml	(working copy)
@@ -1,88 +1,80 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<beans xmlns="http://www.springframework.org/schema/beans"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
-	xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
-	<!--
-		Copyright 2007-2009 The Kuali Foundation Licensed under the
-		Educational Community License, Version 2.0 (the "License"); you may
-		not use this file except in compliance with the License. You may
-		obtain a copy of the License at
-		http://www.opensource.org/licenses/ecl2.php Unless required by
-		applicable law or agreed to in writing, software distributed under the
-		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-		CONDITIONS OF ANY KIND, either express or implied. See the License for
-		the specific language governing permissions and limitations under the
-		License.
-	-->
-	<bean id="ExpenseTransferTargetAccountingLine" parent="ExpenseTransferTargetAccountingLine-parentBean" />
+<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
+<!--
+ Copyright 2007-2009 The Kuali Foundation
+ 
+ Licensed under the Educational Community License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl2.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+-->
 
-	<bean id="ExpenseTransferTargetAccountingLine-parentBean"
-		abstract="true" parent="BusinessObjectEntry">
-		<property name="businessObjectClass"
-			value="org.kuali.kfs.module.ld.businessobject.ExpenseTransferTargetAccountingLine" />
-		<property name="objectLabel" value="Expense Transfer Target Accounting Line" />
+  <bean id="ExpenseTransferTargetAccountingLine" parent="ExpenseTransferTargetAccountingLine-parentBean"/>
 
-		<property name="attributes">
-			<list>
-				<ref bean="ExpenseTransferTargetAccountingLine-emplid" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-payrollEndDateFiscalPeriodCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-payrollEndDateFiscalYear" />
-				<ref bean="ExpenseTransferTargetAccountingLine-payrollTotalHours" />
-				<ref bean="ExpenseTransferTargetAccountingLine-positionNumber" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-objectCode.financialObjectTypeCode" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-objectCode.financialObjectSubTypeCode" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-objectCode.financialObjectLevelCode" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-account.financialHigherEdFunctionCd" />
-				<ref bean="ExpenseTransferTargetAccountingLine-account.subFundGroupCode" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-account.subFundGroup.fundGroupCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-balanceTypeCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-referenceNumber" />
-				<ref bean="ExpenseTransferTargetAccountingLine-sequenceNumber" />
-				<ref bean="ExpenseTransferTargetAccountingLine-financialObjectCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-accountNumber" />
-				<ref bean="ExpenseTransferTargetAccountingLine-organizationReferenceId" />
-				<ref bean="ExpenseTransferTargetAccountingLine-chartOfAccountsCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-postingYear" />
-				<ref bean="ExpenseTransferTargetAccountingLine-referenceOriginCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-overrideCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-amount" />
-				<ref bean="ExpenseTransferTargetAccountingLine-subAccountNumber" />
-				<ref bean="ExpenseTransferTargetAccountingLine-referenceTypeCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-projectCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-financialSubObjectCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-documentNumber" />
-				<ref bean="ExpenseTransferTargetAccountingLine-debitCreditCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-encumbranceUpdateCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-objectTypeCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-accountExpiredOverride" />
-				<ref bean="ExpenseTransferTargetAccountingLine-nonFringeAccountOverride" />
-				<ref bean="ExpenseTransferTargetAccountingLine-objectBudgetOverride" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-financialDocumentLineDescription" />
-				<ref bean="ExpenseTransferTargetAccountingLine-salesTaxRequired" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-salesTax.chartOfAccountsCode" />
-				<ref bean="ExpenseTransferTargetAccountingLine-salesTax.accountNumber" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentGrossSalesAmount" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentTaxableSalesAmount" />
-				<ref
-					bean="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentSaleDate" />
-			</list>
-		</property>
-	</bean>
+  <bean id="ExpenseTransferTargetAccountingLine-parentBean" abstract="true" parent="BusinessObjectEntry">
+    <property name="businessObjectClass" value="org.kuali.kfs.module.ld.businessobject.ExpenseTransferTargetAccountingLine"/>
+    <property name="objectLabel" value="Expense Transfer Target Accounting Line"/>
+    
+     <property name="inquiryDefinition">
+      <ref bean="ExpenseTransferTargetAccountingLine-inquiryDefinition"/>
+    </property>
+    <property name="attributes">
+      <list>
+        <ref bean="ExpenseTransferTargetAccountingLine-emplid"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-payrollEndDateFiscalPeriodCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-payrollEndDateFiscalYear"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-payrollTotalHours"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-positionNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-objectCode.financialObjectTypeCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-objectCode.financialObjectSubTypeCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-objectCode.financialObjectLevelCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-account.financialHigherEdFunctionCd"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-account.subFundGroupCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-account.subFundGroup.fundGroupCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-balanceTypeCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-referenceNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-sequenceNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-financialObjectCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-accountNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-organizationReferenceId"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-chartOfAccountsCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-postingYear"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-referenceOriginCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-overrideCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-amount"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-subAccountNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-referenceTypeCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-projectCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-financialSubObjectCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-documentNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-debitCreditCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-encumbranceUpdateCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-objectTypeCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-accountExpiredOverride"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-nonFringeAccountOverride"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-objectBudgetOverride"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-financialDocumentLineDescription"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-salesTaxRequired"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-salesTax.chartOfAccountsCode"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-salesTax.accountNumber"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentGrossSalesAmount"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentTaxableSalesAmount"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentSaleDate"/>
+        <ref bean="ExpenseTransferTargetAccountingLine-fringeBenefitView"/>
+      </list>
+    </property>
+  </bean>
 
-	<!-- Attribute Definitions -->
+<!-- Attribute Definitions -->
 
 
-	<bean id="ExpenseTransferTargetAccountingLine-emplid" parent="ExpenseTransferTargetAccountingLine-emplid-parentBean" />
+  <bean id="ExpenseTransferTargetAccountingLine-emplid" parent="ExpenseTransferTargetAccountingLine-emplid-parentBean"/>
 
 	<bean id="ExpenseTransferTargetAccountingLine-emplid-parentBean"
 		abstract="true" parent="PersonImpl-employeeId">
@@ -244,20 +236,15 @@
 	<bean id="ExpenseTransferTargetAccountingLine-financialObjectCode"
 		parent="ExpenseTransferTargetAccountingLine-financialObjectCode-parentBean" />
 
-	<bean
-		id="ExpenseTransferTargetAccountingLine-financialObjectCode-parentBean"
-		abstract="true" parent="ObjectCode-financialObjectCode">
+  <bean id="ExpenseTransferTargetAccountingLine-financialObjectCode-parentBean" abstract="true" parent="ObjectCode-financialObjectCode">
+    
+  </bean>
+  <bean id="ExpenseTransferTargetAccountingLine-accountNumber" parent="ExpenseTransferTargetAccountingLine-accountNumber-parentBean"/>
 
-	</bean>
-	<bean id="ExpenseTransferTargetAccountingLine-accountNumber"
-		parent="ExpenseTransferTargetAccountingLine-accountNumber-parentBean" />
+  <bean id="ExpenseTransferTargetAccountingLine-accountNumber-parentBean" abstract="true" parent="Account-accountNumber">
+  </bean>
+  <bean id="ExpenseTransferTargetAccountingLine-organizationReferenceId" parent="ExpenseTransferTargetAccountingLine-organizationReferenceId-parentBean"/>
 
-	<bean id="ExpenseTransferTargetAccountingLine-accountNumber-parentBean"
-		abstract="true" parent="Account-accountNumber">
-	</bean>
-	<bean id="ExpenseTransferTargetAccountingLine-organizationReferenceId"
-		parent="ExpenseTransferTargetAccountingLine-organizationReferenceId-parentBean" />
-
 	<bean
 		id="ExpenseTransferTargetAccountingLine-organizationReferenceId-parentBean"
 		abstract="true" parent="AttributeDefinition">
@@ -279,17 +266,14 @@
 	<bean id="ExpenseTransferTargetAccountingLine-chartOfAccountsCode"
 		parent="ExpenseTransferTargetAccountingLine-chartOfAccountsCode-parentBean" />
 
-	<bean
-		id="ExpenseTransferTargetAccountingLine-chartOfAccountsCode-parentBean"
-		abstract="true" parent="Chart-chartOfAccountsCode">
-		<property name="control">
-			<ref bean="ChartSimpleSelectControl" />
-		</property>
+  <bean id="ExpenseTransferTargetAccountingLine-chartOfAccountsCode-parentBean" abstract="true" parent="Chart-chartOfAccountsCode">
+    <property name="control">
+      <ref bean="ChartSimpleSelectControl" />
+    </property>
+    
+  </bean>
+  <bean id="ExpenseTransferTargetAccountingLine-postingYear" parent="ExpenseTransferTargetAccountingLine-postingYear-parentBean"/>
 
-	</bean>
-	<bean id="ExpenseTransferTargetAccountingLine-postingYear"
-		parent="ExpenseTransferTargetAccountingLine-postingYear-parentBean" />
-
 	<bean id="ExpenseTransferTargetAccountingLine-postingYear-parentBean"
 		abstract="true" parent="GenericAttributes-genericFiscalYear">
 		<property name="name" value="postingYear" />
@@ -345,12 +329,9 @@
 	<bean id="ExpenseTransferTargetAccountingLine-referenceTypeCode"
 		parent="ExpenseTransferTargetAccountingLine-referenceTypeCode-parentBean" />
 
-	<bean
-		id="ExpenseTransferTargetAccountingLine-referenceTypeCode-parentBean"
-		abstract="true" parent="GenericAttributes-referenceTypeCode" />
+  <bean id="ExpenseTransferTargetAccountingLine-referenceTypeCode-parentBean" abstract="true" parent="GenericAttributes-referenceTypeCode"/>
 
-	<bean id="ExpenseTransferTargetAccountingLine-projectCode"
-		parent="ExpenseTransferTargetAccountingLine-projectCode-parentBean" />
+  <bean id="ExpenseTransferTargetAccountingLine-projectCode" parent="ExpenseTransferTargetAccountingLine-projectCode-parentBean"/>
 
 	<bean id="ExpenseTransferTargetAccountingLine-projectCode-parentBean"
 		abstract="true" parent="ProjectCode-code">
@@ -571,11 +552,45 @@
 		id="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentSaleDate"
 		parent="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentSaleDate-parentBean" />
 
-	<bean
-		id="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentSaleDate-parentBean"
-		abstract="true" parent="SalesTax-financialDocumentSaleDate">
-		<property name="name" value="salesTax.financialDocumentSaleDate" />
-		<property name="label" value="Sale Date" />
+  <bean id="ExpenseTransferTargetAccountingLine-salesTax.financialDocumentSaleDate-parentBean" abstract="true" parent="SalesTax-financialDocumentSaleDate">
+    <property name="name" value="salesTax.financialDocumentSaleDate"/>
+    <property name="label" value="Sale Date"/>
+    
+  </bean>
+  
+  <bean id="ExpenseTransferTargetAccountingLine-fringeBenefitView" parent="ExpenseTransferTargetAccountingLine-fringeBenefitView-parentBean"/>
+  <bean id="ExpenseTransferTargetAccountingLine-fringeBenefitView-parentBean" abstract="true"  parent="AttributeDefinition">
+    <property name="name" value="fringeBenefitView"/>
+    <property name="label" value="Fringe Benefit"/>
+    <property name="shortLabel" value="Fringe Benefit"/>
+    <property name="maxLength" value="100"/>
+    <property name="required" value="false"/>
+    <property name="control">
+      <ref bean="StandardNameTextControl" />
+    </property>
+  </bean>
+  
+  <!-- Business Object Inquiry Definition -->
 
-	</bean>
+
+  <bean id="ExpenseTransferTargetAccountingLine-inquiryDefinition" parent="ExpenseTransferTargetAccountingLine-inquiryDefinition-parentBean"/>
+
+  <bean id="ExpenseTransferTargetAccountingLine-inquiryDefinition-parentBean" abstract="true" parent="InquiryDefinition">
+    <property name="title" value="Fringe Benefit"/>
+    <property name="inquirySections">
+      <list>
+        <bean parent="InquirySectionDefinition">
+          <property name="title" value="Fringe Benefit"/>
+          <property name="numberOfColumns" value="1"/>
+          <property name="inquiryFields">
+            <list>
+            <bean parent="FieldDefinition" p:attributeName="fringeBenefitView"/>
+            </list>
+          </property>
+        </bean>
+      </list>
+    </property>
+    <property name="inquirableClass" value="org.kuali.kfs.module.ld.businessobject.inquiry.ExpenseTransferAccountingLineInquirable"/>
+  </bean>
+  
 </beans>
Index: work/src/org/kuali/kfs/module/ld/businessobject/LedgerEntry.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/businessobject/LedgerEntry.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/businessobject/LedgerEntry.java	(working copy)
@@ -21,6 +21,7 @@
 import java.sql.Timestamp;
 import java.util.LinkedHashMap;
 
+import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.coa.businessobject.Account;
 import org.kuali.kfs.coa.businessobject.AccountingPeriod;
 import org.kuali.kfs.coa.businessobject.BalanceType;
@@ -110,6 +111,7 @@
     private ProjectCode project;
     private OriginationCode financialSystemOrigination;
     private LaborObject laborObject;
+    private Person employee;
 
     /**
      * Default constructor.
@@ -1272,8 +1274,39 @@
     public void setLaborObject(LaborObject laborObject) {
         this.laborObject = laborObject;
     }
-
+    
     /**
+     * @return the employee associated with this record
+     */
+    public Person getEmployee() {
+        if (employee == null || !StringUtils.equals(employee.getEmployeeId(), getEmplid())) {
+            employee = SpringContext.getBean(PersonService.class).getPersonByEmployeeId(getEmplid());
+            if (employee == null) {
+                final Class<? extends Person> employeeClass = SpringContext.getBean(PersonService.class).getPersonImplementationClass();
+                try {
+                    employee = employeeClass.newInstance();
+                }
+                catch (InstantiationException ie) {
+                    throw new RuntimeException("Could not instantiate empty Person object", ie);
+                }
+                catch (IllegalAccessException iae) {
+                    throw new RuntimeException("Could not instantiate empty Person object", iae);
+                }
+            }
+        }
+        return employee;
+    }
+    
+    /**
+     * Sets the employee. 
+     * @param employee the employee to set
+     */
+    @Deprecated
+    public void setEmployee(Person employee) {
+        this.employee = employee;
+    }
+    
+    /**
      * construct the key list of the business object.
      * 
      * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
Index: work/src/org/kuali/kfs/module/ld/businessobject/ExpenseTransferTargetAccountingLine.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/businessobject/ExpenseTransferTargetAccountingLine.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/businessobject/ExpenseTransferTargetAccountingLine.java	(working copy)
@@ -20,8 +20,11 @@
 
 import org.kuali.kfs.integration.ld.LaborLedgerExpenseTransferTargetAccountingLine;
 import org.kuali.kfs.integration.ld.LaborLedgerObject;
+import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.businessobject.TargetAccountingLine;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.KualiConfigurationService;
 
 /**
  * Labor business object for special case <code>{@link TargetAccountingLine}</code> type for
@@ -34,6 +37,7 @@
     private String payrollEndDateFiscalPeriodCode;
     private String emplid;
     private LaborObject laborObject;
+    private String fringeBenefitView;
     
     /**
      * Constructs a ExpenseTransferTargetAccountingLine.java.
@@ -213,4 +217,14 @@
         this.setPayrollEndDateFiscalPeriodCode(from.getPayrollEndDateFiscalPeriodCode());
         this.setEmplid(from.getEmplid());
     }
+    
+    /**
+     * This method returns a string so that an fringe benefit inquiry can have a link to view 
+     * inquiry page from salary transfer.
+     * 
+     * @return the String "View Organization Reversion"
+     */
+    public String getFringeBenefitView() {
+        return SpringContext.getBean(KualiConfigurationService.class).getPropertyString(KFSKeyConstants.SALARY_TRANSFER_FRINGE_BENEFIT_INQUIRY_LABEL);
+    }
 }
Index: work/src/org/kuali/kfs/module/ld/businessobject/ExpenseTransferSourceAccountingLine.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/businessobject/ExpenseTransferSourceAccountingLine.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/businessobject/ExpenseTransferSourceAccountingLine.java	(working copy)
@@ -20,8 +20,11 @@
 
 import org.kuali.kfs.integration.ld.LaborLedgerExpenseTransferSourceAccountingLine;
 import org.kuali.kfs.integration.ld.LaborLedgerObject;
+import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kns.service.KualiConfigurationService;
 
 /**
  * Labor business object for special case <code>{@link SourceAccountingLine}</code> type for
@@ -34,7 +37,10 @@
     private String payrollEndDateFiscalPeriodCode;
     private String emplid;
     private LaborObject laborObject;
+    private String fringeBenefitView;
     
+    
+    
     /**
      * Constructs a ExpenseTransferSourceAccountingLine.java.
      */
@@ -213,4 +219,14 @@
         this.setPayrollEndDateFiscalPeriodCode(from.getPayrollEndDateFiscalPeriodCode());
         this.setEmplid(from.getEmplid());
     }
+    
+    /**
+     * This method returns a string so that an fringe benefit inquiry can have a link to view 
+     * inquiry page from salary transfer.
+     * 
+     * @return the String "View Organization Reversion"
+     */
+    public String getFringeBenefitView() {
+        return SpringContext.getBean(KualiConfigurationService.class).getPropertyString(KFSKeyConstants.SALARY_TRANSFER_FRINGE_BENEFIT_INQUIRY_LABEL);
+    }
 }
Index: work/src/org/kuali/kfs/module/ld/spring-ld.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/spring-ld.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/spring-ld.xml	(working copy)
@@ -883,16 +883,22 @@
         </property>
     </bean>
 
-    <bean id="laborScrubberSortStep" class="org.kuali.kfs.module.ld.batch.LaborScrubberSortStep" parent="step">
-        <property name="batchFileDirectoryName" value="${staging.directory}/ld/originEntry" />
+    <bean id="laborScrubberSortStep" parent="flatFileSortStep">
+        <property name="inputFileName" value="${staging.directory}/ld/originEntry/ld_prescrub.data"/>
+		<property name="outputFileName" value="${staging.directory}/ld/originEntry/ld_sortscrb.data"/>
+		<property name="lineComparatorClass" value="org.kuali.kfs.module.ld.batch.LaborScrubberSortComparator"/>
     </bean>
 
-    <bean id="laborDemergerSortStep" class="org.kuali.kfs.module.ld.batch.LaborDemergerSortStep" parent="step">
-        <property name="batchFileDirectoryName" value="${staging.directory}/ld/originEntry" />
+    <bean id="laborDemergerSortStep" parent="flatFileSortStep">
+        <property name="inputFileName" value="${staging.directory}/ld/originEntry/ld_scrberr1.data"/>
+		<property name="outputFileName" value="${staging.directory}/ld/originEntry/ld_sorterr1.data"/>
+		<property name="lineComparatorClass" value="org.kuali.kfs.module.ld.batch.LaborDemergerSortComparator"/>
     </bean>
 
-    <bean id="laborPosterSortStep" class="org.kuali.kfs.module.ld.batch.LaborPosterSortStep" parent="step">
-        <property name="batchFileDirectoryName" value="${staging.directory}/ld/originEntry" />
+    <bean id="laborPosterSortStep" parent="flatFileSortStep">
+        <property name="inputFileName" value="${staging.directory}/ld/originEntry/ld_scrbout2.data"/>
+		<property name="outputFileName" value="${staging.directory}/ld/originEntry/ld_sortpost.data"/>
+		<property name="lineComparatorClass" value="org.kuali.kfs.module.ld.batch.LaborPosterSortComparator"/>
     </bean>
 
     <bean id="laborFileRenameStep" class="org.kuali.kfs.module.ld.batch.LaborFileRenameStep" parent="step">
@@ -1034,6 +1040,12 @@
                 <ref bean="laborYearEndBalanceForwardStep" />
             </list>
         </property>
+         <property name="dependencies">
+            <map>
+                <entry key="laborPosterJob" value="hardDependency" />
+            </map>
+        </property>
+        
     </bean>
 
     <!-- Section 4: Spring Bean for Balance Inquiry -->
Index: work/src/org/kuali/kfs/module/ld/service/impl/LaborModuleServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/service/impl/LaborModuleServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/service/impl/LaborModuleServiceImpl.java	(working copy)
@@ -22,10 +22,12 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Properties;
 import java.util.Set;
 
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.coa.businessobject.ObjectCode;
+import org.kuali.kfs.gl.businessobject.Entry;
 import org.kuali.kfs.integration.ld.LaborLedgerBalance;
 import org.kuali.kfs.integration.ld.LaborLedgerExpenseTransferAccountingLine;
 import org.kuali.kfs.integration.ld.LaborLedgerObject;
@@ -35,6 +37,8 @@
 import org.kuali.kfs.module.ld.LaborPropertyConstants;
 import org.kuali.kfs.module.ld.businessobject.LaborLedgerPendingEntry;
 import org.kuali.kfs.module.ld.businessobject.LedgerBalance;
+import org.kuali.kfs.module.ld.businessobject.LedgerEntry;
+import org.kuali.kfs.module.ld.businessobject.LedgerEntryGLSummary;
 import org.kuali.kfs.module.ld.document.SalaryExpenseTransferDocument;
 import org.kuali.kfs.module.ld.service.LaborBenefitsCalculationService;
 import org.kuali.kfs.module.ld.service.LaborLedgerBalanceService;
@@ -67,6 +71,10 @@
 @Transactional
 public class LaborModuleServiceImpl implements LaborModuleService {
     private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LaborModuleServiceImpl.class);
+    
+    private final static String LINK_DOCUMENT_NUMBER_TO_LABOR_ORIGIN_CODES_PARAM_NAME = "LINK_DOCUMENT_NUMBER_TO_LABOR_ORIGIN_CODES";
+    private final static String GL_LABOR_ENTRY_SUMMARIZATION_INQUIRY_BASE_URL = "laborGLLaborEntrySummarizationInquiry.do";
+    private final static String GL_LABOR_ENTRY_SUMMARIZATION_INQUIRY_METHOD = "viewResults";
 
     /**
      * @see org.kuali.kfs.integration.ld.LaborModuleService#calculateFringeBenefitFromLaborObject(org.kuali.kfs.integration.ld.LaborLedgerObject,
@@ -290,6 +298,38 @@
 //    }
 
     /**
+     * Looks up the origin codes from the parameter KFS-LD / LedgerEntry / LINK_DOCUMENT_NUMBER_TO_LABOR_ORIGIN_CODES
+     * @see org.kuali.kfs.integration.ld.LaborModuleService#getLaborLedgerGLOriginCodes()
+     */
+    public List<String> getLaborLedgerGLOriginCodes() {
+        return getParameterService().getParameterValues(LedgerEntry.class, LINK_DOCUMENT_NUMBER_TO_LABOR_ORIGIN_CODES_PARAM_NAME);
+    }
+    
+    /**
+     * Builds the url for the given GL entry to go to inquiry screen for related LD entries
+     * @see org.kuali.kfs.integration.ld.LaborModuleService#getInquiryUrlForGeneralLedgerEntryDocumentNumber(org.kuali.kfs.gl.businessobject.Entry)
+     */
+    public HtmlData getInquiryUrlForGeneralLedgerEntryDocumentNumber(Entry entry) {
+        Properties props = new Properties();
+        props.setProperty(KFSConstants.DISPATCH_REQUEST_PARAMETER, GL_LABOR_ENTRY_SUMMARIZATION_INQUIRY_METHOD);
+        props.setProperty(KFSPropertyConstants.UNIVERSITY_FISCAL_YEAR, entry.getUniversityFiscalYear().toString());
+        props.setProperty(KFSPropertyConstants.UNIVERSITY_FISCAL_PERIOD_CODE, entry.getUniversityFiscalPeriodCode());
+        props.setProperty(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE, entry.getChartOfAccountsCode());
+        props.setProperty(KFSPropertyConstants.ACCOUNT_NUMBER, entry.getAccountNumber());
+        props.setProperty(KFSPropertyConstants.SUB_ACCOUNT_NUMBER, entry.getSubAccountNumber());
+        props.setProperty(KFSPropertyConstants.FINANCIAL_OBJECT_CODE, entry.getFinancialObjectCode());
+        props.setProperty(KFSPropertyConstants.FINANCIAL_SUB_OBJECT_CODE, entry.getFinancialSubObjectCode());
+        props.setProperty(KFSPropertyConstants.FINANCIAL_BALANCE_TYPE_CODE, entry.getFinancialBalanceTypeCode());
+        props.setProperty(KFSPropertyConstants.FINANCIAL_OBJECT_TYPE_CODE, entry.getFinancialObjectTypeCode());
+        props.setProperty(KFSPropertyConstants.FINANCIAL_DOCUMENT_TYPE_CODE, entry.getFinancialDocumentTypeCode());
+        props.setProperty(KFSPropertyConstants.FINANCIAL_SYSTEM_ORIGINATION_CODE, entry.getFinancialSystemOriginationCode());
+        props.setProperty(KFSPropertyConstants.DOCUMENT_NUMBER, entry.getDocumentNumber());
+        props.setProperty(KFSConstants.BUSINESS_OBJECT_CLASS_ATTRIBUTE, LedgerEntryGLSummary.class.getName());
+        HtmlData htmlData = new AnchorHtmlData(UrlFactory.parameterizeUrl(GL_LABOR_ENTRY_SUMMARIZATION_INQUIRY_BASE_URL, props), entry.getDocumentNumber());
+        return htmlData;
+    }
+
+    /**
      * Gets the laborBenefitsCalculationService attribute.
      * 
      * @return an implementation of the laborBenefitsCalculationService.
@@ -369,6 +409,13 @@
     public LaborOriginEntryService getLaborOriginEntryService() {
         return SpringContext.getBean(LaborOriginEntryService.class);
     }
+    
+    /**
+     * @return the default implementation of the ParameterService
+     */
+    public ParameterService getParameterService() {
+        return SpringContext.getBean(ParameterService.class);
+    }
 
     /**
      * Gets the KualiModuleService attribute value.
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/YearEndBenefitExpenseTransferDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/YearEndBenefitExpenseTransferDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/YearEndBenefitExpenseTransferDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="YEBT"/>
     <property name="documentClass" value="org.kuali.kfs.module.ld.document.YearEndBenefitExpenseTransferDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ld.document.YearEndBenefitExpenseTransferDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpenseDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpensesDocumentPresentationController"/>    
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/LaborJournalVoucherDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/LaborJournalVoucherDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/LaborJournalVoucherDocument.xml	(working copy)
@@ -22,6 +22,7 @@
     
     <property name="documentTypeName" value="LLJV"/>
     <property name="documentClass" value="org.kuali.kfs.module.ld.document.LaborJournalVoucherDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ld.document.LaborJournalVoucherDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/LaborCorrectionDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/LaborCorrectionDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/LaborCorrectionDocument.xml	(working copy)
@@ -5,6 +5,7 @@
   <bean id="LaborLedgerCorrectionProcessDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="LLCP"/>
     <property name="documentClass" value="org.kuali.kfs.module.ld.document.LaborCorrectionDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ld.document.LaborCorrectionDocument"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.gl.document.authorization.CorrectionDocumentAuthorizer"/>
     <property name="sessionDocument" value="true"/>
     <property name="workflowAttributes">
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/SalaryExpenseTransferDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/SalaryExpenseTransferDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/SalaryExpenseTransferDocument.xml	(working copy)
@@ -22,6 +22,7 @@
 
     <property name="documentTypeName" value="ST"/>
     <property name="documentClass" value="org.kuali.kfs.module.ld.document.SalaryExpenseTransferDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ld.document.SalaryExpenseTransferDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>       
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpenseDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpensesDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/SalaryExpenseTransferDocumentAccountingLinesDefinitions.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/SalaryExpenseTransferDocumentAccountingLinesDefinitions.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/SalaryExpenseTransferDocumentAccountingLinesDefinitions.xml	(working copy)
@@ -144,7 +144,9 @@
 				<bean parent="AccountingLineView-field"
 					p:name="payrollEndDateFiscalPeriodCode" p:useShortLabel="true" p:unconditionallyReadOnly="true" />
 				<bean parent="AccountingLineView-field"
-					p:name="payrollTotalHours" p:useShortLabel="true" />
+					p:name="payrollTotalHours" p:useShortLabel="true" />
+				<bean parent="AccountingLineView-field"
+					p:name="fringeBenefitView" p:useShortLabel="true" p:unconditionallyReadOnly="true" />	
 			</list>
 		</property>
 	</bean>
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/YearEndSalaryExpenseTransferDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/YearEndSalaryExpenseTransferDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/YearEndSalaryExpenseTransferDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="allowsErrorCorrection" value="true"/>
     <property name="documentTypeName" value="YEST"/>
     <property name="documentClass" value="org.kuali.kfs.module.ld.document.YearEndSalaryExpenseTransferDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ld.document.YearEndSalaryExpenseTransferDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpenseDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpensesDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/ld/document/datadictionary/BenefitExpenseTransferDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/datadictionary/BenefitExpenseTransferDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/datadictionary/BenefitExpenseTransferDocument.xml	(working copy)
@@ -22,6 +22,7 @@
     
     <property name="documentTypeName" value="BT"/>
     <property name="documentClass" value="org.kuali.kfs.module.ld.document.BenefitExpenseTransferDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ld.document.BenefitExpenseTransferDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpenseDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.ld.document.authorization.LaborExpensesDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/ld/document/SalaryExpenseTransferDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/SalaryExpenseTransferDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/SalaryExpenseTransferDocument.java	(working copy)
@@ -16,6 +16,7 @@
 package org.kuali.kfs.module.ld.document;
 
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -23,12 +24,17 @@
 import org.kuali.kfs.module.ld.businessobject.ExpenseTransferAccountingLine;
 import org.kuali.kfs.module.ld.businessobject.LaborLedgerPendingEntry;
 import org.kuali.kfs.module.ld.util.LaborPendingEntryGenerator;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.businessobject.AccountingLine;
 import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySequenceHelper;
+import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
+import org.kuali.kfs.sys.businessobject.TargetAccountingLine;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
 import org.kuali.rice.coreservice.framework.parameter.ParameterService;
 
+
 /**
  * Labor Document Class for the Salary Expense Transfer Document.
  */
@@ -104,6 +110,65 @@
         return true;
     }
     
+    @Override
+    public boolean answerSplitNodeQuestion(String nodeName) throws UnsupportedOperationException {
+        // KFSMI-4606 added routeNode condition
+        if (nodeName.equals(KFSConstants.REQUIRES_WORKSTUDY_REVIEW))
+            return checkOjbectCodeForWorkstudy();
+        else return super.answerSplitNodeQuestion(nodeName);
+    }
+    
+    /**
+     * KFSMI-4606 check routeNode condition
+     * @return boolean 
+     */
+    protected boolean checkOjbectCodeForWorkstudy(){
+        List<String> workstudyRouteObjectcodes = SpringContext.getBean(ParameterService.class).getParameterValues(KfsParameterConstants.FINANCIAL_SYSTEM_DOCUMENT.class, KFSConstants.WORKSTUDY_ROUTE_OBJECT_CODES_PARM_NM);
+        
+        List<SourceAccountingLine> sourceAccountingLines = getSourceAccountingLines();
+        List<TargetAccountingLine> targetAccountingLines = getTargetAccountingLines();
+        
+        // check object code in source and target accounting lines 
+        for (SourceAccountingLine sourceLine : sourceAccountingLines){
+            if (workstudyRouteObjectcodes.contains(sourceLine.getFinancialObjectCode())) {
+                return true;
+            }
+        }
+        
+        for (TargetAccountingLine targetLine : targetAccountingLines){
+            if (workstudyRouteObjectcodes.contains(targetLine.getFinancialObjectCode())) {
+                return true;
+            }
+        }
+        return false;
+    }
+    
+    /**
+     * KFSMI-4606 Set GLPE descriptions to persons name. Take care that this needs to overwrite prepareForSave so that it
+     * catches pending entries generated by generateLaborLedgerPendingEntries and generateLaborLedgerBenefitClearingPendingEntries.
+     * @see org.kuali.kfs.module.ld.document.LaborLedgerPostingDocumentBase#prepareForSave(org.kuali.rice.kns.rule.event.KualiDocumentEvent)
+     */
+    @Override
+    public void prepareForSave(KualiDocumentEvent event) {
+        super.prepareForSave(event);
+        
+        for (Iterator<LaborLedgerPendingEntry> iterator = this.getLaborLedgerPendingEntries().iterator(); iterator.hasNext();) {
+            LaborLedgerPendingEntry laborLedgerPendingEntry = iterator.next();
+            
+            // Prepare person's name
+            Person person = SpringContext.getBean(org.kuali.rice.kim.service.PersonService.class).getPersonByEmployeeId(this.getEmplid());
+            String personName = person.getNameUnmasked();
+            
+            // Get the maxlength of the description field we are setting
+            BusinessObjectEntry laborLedgerPendingEntryBusinessObjectEntry = getDataDictionaryService().getDataDictionary().getBusinessObjectEntry(LaborLedgerPendingEntry.class.getName());
+            AttributeDefinition laborLedgerPendingEntryAttribute = laborLedgerPendingEntryBusinessObjectEntry.getAttributeDefinition(KFSPropertyConstants.TRANSACTION_LEDGER_ENTRY_DESC);
+            int descriptionLength = laborLedgerPendingEntryAttribute.getMaxLength();
+            
+            // Set the description field truncating name if necessary
+            laborLedgerPendingEntry.setTransactionLedgerEntryDescription(personName.length() > descriptionLength ? personName.substring(0, descriptionLength - 1) : personName);
+        }
+    }
+    
     public List getLaborLedgerPendingEntriesForSearching() {
         return super.getLaborLedgerPendingEntries();
     }
Index: work/src/org/kuali/kfs/module/ld/document/web/struts/ExpenseTransferDocumentActionBase.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/web/struts/ExpenseTransferDocumentActionBase.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/web/struts/ExpenseTransferDocumentActionBase.java	(working copy)
@@ -449,21 +449,8 @@
         }
     }
 
-    /**
-     * Clear all overrides that are not needed.
-     * 
-     * @see org.kuali.kfs.sys.web.struts.KualiAccountingDocumentActionBase#clearOverridesThatBecameUnneeded(org.kuali.kfs.sys.businessobject.AccountingLine)
-     */
-    @Override
-    protected void clearOverridesThatBecameUnneeded(AccountingLine formLine) {
-        AccountingLineOverride currentlyNeeded = LaborAccountingLineOverride.determineNeededOverrides(formLine);
-        AccountingLineOverride currentOverride = AccountingLineOverride.valueOf(formLine.getOverrideCode());
-        if (!currentOverride.isValidMask(currentlyNeeded)) {
-            // todo: handle unsupported combinations of overrides (not a problem until we allow certain multiple overrides)
-        }
-        formLine.setOverrideCode(currentOverride.mask(currentlyNeeded).getCode());
-    }
 
+
     /**
      * For given accounting line, set the corresponding override code
      * 
Index: work/src/org/kuali/kfs/module/ld/document/web/struts/SalaryExpenseTransferAction.java
===================================================================
--- work/src/org/kuali/kfs/module/ld/document/web/struts/SalaryExpenseTransferAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ld/document/web/struts/SalaryExpenseTransferAction.java	(working copy)
@@ -25,7 +25,9 @@
 import org.apache.struts.action.ActionMapping;
 import org.kuali.kfs.module.ld.LaborConstants;
 import org.kuali.kfs.module.ld.LaborKeyConstants;
+import org.kuali.kfs.module.ld.businessobject.ExpenseTransferAccountingLine;
 import org.kuali.kfs.module.ld.businessobject.LedgerBalance;
+import org.kuali.kfs.module.ld.document.LaborExpenseTransferDocumentBase;
 import org.kuali.kfs.module.ld.document.SalaryExpenseTransferDocument;
 import org.kuali.kfs.module.ld.document.service.SalaryTransferPeriodValidationService;
 import org.kuali.kfs.sys.KFSConstants;
@@ -240,5 +242,9 @@
         
         return super.deleteAllTargetAccountingLines(mapping, form, request, response);
     }
+    
+    
+   
+    
 }
 
Index: work/src/org/kuali/kfs/module/cam/batch/service/impl/AssetBarcodeInventoryLoadServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/batch/service/impl/AssetBarcodeInventoryLoadServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/batch/service/impl/AssetBarcodeInventoryLoadServiceImpl.java	(working copy)
@@ -29,6 +29,7 @@
 import java.util.Map;
 
 import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.gl.service.impl.StringHelper;
 import org.kuali.kfs.module.cam.CamsConstants;
 import org.kuali.kfs.module.cam.CamsPropertyConstants;
 import org.kuali.kfs.module.cam.batch.service.AssetBarcodeInventoryLoadService;
@@ -203,6 +204,14 @@
                     if (!column[1].equals(CamsConstants.BarCodeInventory.BCI_SCANED_INTO_DEVICE) && !column[1].equals(CamsConstants.BarCodeInventory.BCI_MANUALLY_KEYED_CODE)) {
                         errorMsg += ", " + inventoryScannedCodeLabel + " is invalid";
                     }
+
+                    // validate date 
+                    if(!validateDate(column[2])) {
+                        errorMsg += ", " + InventoryDateLabel + " is invalid";
+                    }
+
+
+
                 }
                 if (!StringUtils.isBlank(errorMsg)) {
                     errorMsg = "Error on record number " + recordCount + ": " + errorMsg.substring(2) + "\n";
@@ -298,7 +307,7 @@
                 if (lineStrings[2].equals(StringUtils.repeat("0", 14))) {
                     timestamp = null;
                 }
-                
+
                 barcodeInventoryErrorDetail = new BarcodeInventoryErrorDetail();
                 barcodeInventoryErrorDetail.setUploadRowNumber(ln);
                 barcodeInventoryErrorDetail.setAssetTagNumber(lineStrings[0].trim());
@@ -452,11 +461,11 @@
                     ln = 0;
                     isFirstDocument = false;
                 }
-                
+
                 BarcodeInventoryErrorDetail barcodeInventoryErrorDetail =bcies.get(bcieCount);
                 barcodeInventoryErrorDetail.setUploadRowNumber(Long.valueOf(ln+1));
                 barcodeInventoryErrorDetails.add(barcodeInventoryErrorDetail);
-                
+
                 ln++;
                 bcieCount++;
             }
@@ -486,7 +495,7 @@
         asset.setBuildingSubRoomNumber(barcodeInventoryErrorDetail.getBuildingSubRoomNumber());
         asset.setCampusCode(barcodeInventoryErrorDetail.getCampusCode());
         asset.setConditionCode(barcodeInventoryErrorDetail.getAssetConditionCode());        
-       
+
         // set building code and room number to null if they are empty string, to avoid FK violation exception
         if (StringUtils.isEmpty(asset.getBuildingCode())) {
             asset.setBuildingCode(null);
@@ -502,7 +511,7 @@
         } else {
             asset.setLastInventoryDate(new Timestamp(this.dateTimeService.getCurrentSqlDate().getTime()));
         }
-        
+
         // Updating asset information
         businessObjectService.save(asset);
     }
@@ -559,35 +568,66 @@
         return adHocRouteRecipient;
     }
 
-    public void setBusinessObjectService(BusinessObjectService businessObjectService) {
-        this.businessObjectService = businessObjectService;
-    }
+    private boolean validateDate(String date) {
+        // Parsing date so it can be validated.
+        boolean valid = true;
+        if(StringHelper.isEmpty(date)) {
+            valid = false;
+        }
+        else {
+            SimpleDateFormat formatter = new SimpleDateFormat(CamsConstants.DateFormats.MONTH_DAY_YEAR + " " + CamsConstants.DateFormats.STANDARD_TIME, Locale.US);
+            date = StringUtils.rightPad(date.trim(), 14, "0");
+            String day = date.substring(0, 2);
+            String month = date.substring(2, 4);
+            String year = date.substring(4, 8);
+            String hours = date.substring(8, 10);
+            String minutes = date.substring(10, 12);
+            String seconds = date.substring(12);
 
-    public void setDataDictionaryService(DataDictionaryService dataDictionaryService) {
-        this.dataDictionaryService = dataDictionaryService;
-    }
+            String stringDate = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
+            Timestamp timestamp = null;
 
-    public void setWorkflowDocumentService(WorkflowDocumentService workflowDocumentService) {
-        this.workflowDocumentService = workflowDocumentService;
+            // If date has invalid format set its value to null
+            try {
+                timestamp = new Timestamp(formatter.parse(stringDate).getTime());
+            }
+            catch (Exception e) {
+                valid = false;
+            }
+            
+        }
+        
+        return valid;
     }
+        public void setBusinessObjectService(BusinessObjectService businessObjectService) {
+            this.businessObjectService = businessObjectService;
+        }
 
-    public void setKualiRuleService(KualiRuleService ruleService) {
-        this.kualiRuleService = ruleService;
-    }
+        public void setDataDictionaryService(DataDictionaryService dataDictionaryService) {
+            this.dataDictionaryService = dataDictionaryService;
+        }
 
-    public void setDocumentService(DocumentService documentService) {
-        this.documentService = documentService;
-    }
+        public void setWorkflowDocumentService(WorkflowDocumentService workflowDocumentService) {
+            this.workflowDocumentService = workflowDocumentService;
+        }
 
-    public ParameterService getParameterService() {
-        return parameterService;
-    }
+        public void setKualiRuleService(KualiRuleService ruleService) {
+            this.kualiRuleService = ruleService;
+        }
 
-    public void setParameterService(ParameterService parameterService) {
-        this.parameterService = parameterService;
-    }
+        public void setDocumentService(DocumentService documentService) {
+            this.documentService = documentService;
+        }
 
-    public void setDateTimeService(DateTimeService dateTimeService) {
-        this.dateTimeService = dateTimeService;
+        public ParameterService getParameterService() {
+            return parameterService;
+        }
+
+        public void setParameterService(ParameterService parameterService) {
+            this.parameterService = parameterService;
+        }
+
+        public void setDateTimeService(DateTimeService dateTimeService) {
+            this.dateTimeService = dateTimeService;
+        }
     }
-}
Index: work/src/org/kuali/kfs/module/cam/batch/service/impl/AssetDepreciationServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/batch/service/impl/AssetDepreciationServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/batch/service/impl/AssetDepreciationServiceImpl.java	(working copy)
@@ -1,12 +1,12 @@
 /*
- * Copyright 2007-2008 The Kuali Foundation
- *
+ * Copyright 2007-2008 The Kuali Foundation
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,6 +24,7 @@
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collection;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -34,6 +35,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.coa.businessobject.ObjectCode;
 import org.kuali.kfs.coa.service.ObjectCodeService;
+import org.kuali.kfs.gl.service.impl.StringHelper;
 import org.kuali.kfs.module.cam.CamsConstants;
 import org.kuali.kfs.module.cam.CamsKeyConstants;
 import org.kuali.kfs.module.cam.CamsPropertyConstants;
@@ -100,18 +102,19 @@
     protected UniversityDateService universityDateService;
     protected OptionsService optionsService;
     protected DataDictionaryService dataDictionaryService;
-    // FIXME : this service is maintaining internal state - non-prototype services must be stateless - this is not thread safe
-    protected Integer fiscalYear;
-    protected Integer fiscalMonth;
-    protected String errorMsg = "";
-    protected List<String> documentNos = new ArrayList<String>();
     protected DepreciationBatchDao depreciationBatchDao;
+    protected String cronExpression;
+    protected MailService mailService;
 
     /**
      * @see org.kuali.kfs.module.cam.batch.service.AssetDepreciationService#runDepreciation()
      */
     @Override
     public void runDepreciation() {
+        Integer fiscalYear = -1;
+        Integer fiscalMonth = -1;
+        String errorMsg = "";
+        List<String> documentNos = new ArrayList<String>();
         List<String[]> reportLog = new ArrayList<String[]>();
         boolean hasErrors = false;
         Calendar depreciationDate = dateTimeService.getCurrentCalendar();
@@ -119,9 +122,13 @@
         Calendar currentDate = dateTimeService.getCurrentCalendar();
         String depreciationDateParameter = null;
         DateFormat dateFormat = new SimpleDateFormat(CamsConstants.DateFormats.YEAR_MONTH_DAY);
+        boolean executeJob = false; 
 
         try {
-            LOG.info("*******" + CamsConstants.Depreciation.DEPRECIATION_BATCH + " HAS BEGUN *******");
+            executeJob = runAssetDepreciation(); 
+            if(executeJob)
+            {
+                LOG.info("*******" + CamsConstants.Depreciation.DEPRECIATION_BATCH + " HAS BEGUN *******");
 
             /*
              * Getting the system parameter "DEPRECIATION_DATE" When this parameter is used to determine which fiscal month and year
@@ -149,69 +156,38 @@
                 throw new IllegalStateException(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.ERROR_UNIV_DATE_NOT_FOUND));
             }
 
-            this.fiscalYear = universityDate.getUniversityFiscalYear();
-            this.fiscalMonth = new Integer(universityDate.getUniversityFiscalAccountingPeriod());
+            fiscalYear = universityDate.getUniversityFiscalYear();
+            fiscalMonth = new Integer(universityDate.getUniversityFiscalAccountingPeriod());
             // If the depreciation date is not = to the system date then, the depreciation process cannot run.
             if ( LOG.isInfoEnabled() ) {
                 LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Fiscal Year = " + this.fiscalYear + " & Fiscal Period=" + this.fiscalMonth);
             }
-            String depreciationDateAsString = dateTimeService.toDateString(depreciationDate.getTime());
-            int fiscalStartMonth = Integer.parseInt(optionsService.getCurrentYearOptions().getUniversityFiscalYearStartMo());
-            // Generating a list of depreciation expense object codes.
-            List<String> depreExpObjCodes = this.getExpenseObjectCodes(fiscalYear);
-
-            // Generating a list of accumulated depreciation object codes.
-            List<String> accumulatedDepreciationObjCodes = this.getAccumulatedDepreciationObjectCodes(fiscalYear);
-            Collection<String> notAcceptedAssetStatus = new ArrayList<String>( parameterService.getParameterValuesAsString(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.NON_DEPRECIABLE_NON_CAPITAL_ASSETS_STATUS_CODES) );
-
-            List<String> federallyOwnedObjectSubTypes = getFederallyOwnedObjectSubTypes();
-            reportLog.addAll(depreciableAssetsDao.generateStatistics(true, null, fiscalYear, fiscalMonth, depreciationDate, depreciationDateAsString, fiscalStartMonth, depreExpObjCodes, accumulatedDepreciationObjCodes, notAcceptedAssetStatus, federallyOwnedObjectSubTypes));
+            reportLog.addAll(depreciableAssetsDao.generateStatistics(true, null, fiscalYear, fiscalMonth, depreciationDate));
             // update if fiscal period is 12
-            // Getting last date of fiscal year
-            final java.util.Date lastFiscalYearDate = universityDateService.getLastDateOfFiscalYear(fiscalYear);
-            if (lastFiscalYearDate == null) {
-                throw new IllegalStateException(kualiConfigurationService.getPropertyValueAsString(KFSKeyConstants.ERROR_UNIV_DATE_NOT_FOUND));
-            }
-            List<String> movableEquipmentObjectSubTypes = new ArrayList<String>();
-            if (parameterService.parameterExists(Asset.class, CamsConstants.Parameters.MOVABLE_EQUIPMENT_OBJECT_SUB_TYPES)) {
-                movableEquipmentObjectSubTypes = new ArrayList<String>( parameterService.getParameterValuesAsString(Asset.class, CamsConstants.Parameters.MOVABLE_EQUIPMENT_OBJECT_SUB_TYPES) );
-            }
-            depreciationBatchDao.updateAssetsCreatedInLastFiscalPeriod(fiscalMonth, fiscalYear, lastFiscalYearDate, movableEquipmentObjectSubTypes);
+            depreciationBatchDao.updateAssetsCreatedInLastFiscalPeriod(fiscalMonth, fiscalYear);
             // Retrieving eligible asset payment details
             LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Getting list of asset payments eligible for depreciation.");
-            Collection<AssetPaymentInfo> depreciableAssetsCollection = depreciationBatchDao.getListOfDepreciableAssetPaymentInfo(this.fiscalYear, this.fiscalMonth, depreciationDate, notAcceptedAssetStatus, federallyOwnedObjectSubTypes);
+            Collection<AssetPaymentInfo> depreciableAssetsCollection = depreciationBatchDao.getListOfDepreciableAssetPaymentInfo(fiscalYear, fiscalMonth, depreciationDate);
             // if we have assets eligible for depreciation then, calculate depreciation and create glpe's transactions
             if (depreciableAssetsCollection != null && !depreciableAssetsCollection.isEmpty()) {
                 SortedMap<String, AssetDepreciationTransaction> depreciationTransactions = this.calculateDepreciation(depreciableAssetsCollection, depreciationDate);
-                processGeneralLedgerPendingEntry(depreciationTransactions);
+                    processGeneralLedgerPendingEntry(fiscalYear, fiscalMonth, documentNos, depreciationTransactions);
             }
             else {
-                throw new IllegalStateException(kualiConfigurationService.getPropertyValueAsString(CamsKeyConstants.Depreciation.NO_ELIGIBLE_FOR_DEPRECIATION_ASSETS_FOUND));
+                throw new IllegalStateException(kualiConfigurationService.getPropertyString(CamsKeyConstants.Depreciation.NO_ELIGIBLE_FOR_DEPRECIATION_ASSETS_FOUND));
             }
         }
         catch (Exception e) {
-            LOG.info("Error occurred");
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "**************************************************************************");
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "AN ERROR HAS OCCURRED! - ERROR: " + e.getMessage());
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "**************************************************************************");
+            LOG.error("Error occurred");
+            LOG.error(CamsConstants.Depreciation.DEPRECIATION_BATCH + "**************************************************************************");
+            LOG.error(CamsConstants.Depreciation.DEPRECIATION_BATCH + "AN ERROR HAS OCCURRED! - ERROR: " + e.getMessage());
+            LOG.error(CamsConstants.Depreciation.DEPRECIATION_BATCH + "**************************************************************************");
             hasErrors = true;
-            this.errorMsg = "Depreciation process ran unsucessfuly.\nReason:" + e.getMessage();
+            errorMsg = "Depreciation process ran unsucessfuly.\nReason:" + e.getMessage();
         }
         finally {
-            if (!hasErrors) {
-                String depreciationDateAsString = dateTimeService.toDateString(depreciationDate.getTime());
-                int fiscalStartMonth = Integer.parseInt(optionsService.getCurrentYearOptions().getUniversityFiscalYearStartMo());
-                // Generating a list of depreciation expense object codes.
-                List<String> depreExpObjCodes = this.getExpenseObjectCodes(fiscalYear);
-
-                // Generating a list of accumulated depreciation object codes.
-                List<String> accumulatedDepreciationObjCodes = this.getAccumulatedDepreciationObjectCodes(fiscalYear);
-                List<String> notAcceptedAssetStatus = new ArrayList<String>();
-                if (parameterService.parameterExists(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.NON_DEPRECIABLE_NON_CAPITAL_ASSETS_STATUS_CODES)) {
-                    notAcceptedAssetStatus = new ArrayList<String>( parameterService.getParameterValuesAsString(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.NON_DEPRECIABLE_NON_CAPITAL_ASSETS_STATUS_CODES) );
-                }
-                List<String> federallyOwnedObjectSubTypes = getFederallyOwnedObjectSubTypes();
-                reportLog.addAll(depreciableAssetsDao.generateStatistics(false, this.documentNos, fiscalYear, fiscalMonth, depreciationDate, depreciationDateAsString, fiscalStartMonth, depreExpObjCodes, accumulatedDepreciationObjCodes, notAcceptedAssetStatus, federallyOwnedObjectSubTypes));
+            if (!hasErrors && executeJob) {
+                reportLog.addAll(depreciableAssetsDao.generateStatistics(false, documentNos, fiscalYear, fiscalMonth, depreciationDate));
             }
             // the report will be generated only when there is an error or when the log has something.
             if (!reportLog.isEmpty() || !errorMsg.trim().equals(""))
@@ -219,7 +195,6 @@
 
             LOG.info("*******" + CamsConstants.Depreciation.DEPRECIATION_BATCH + " HAS ENDED *******");
         }
-    }
 
     // CSU 6702 BEGIN
     /**
@@ -332,64 +307,228 @@
             }
         }
     }
-
+    
+    private boolean runAssetDepreciation() throws ParseException {
+        boolean executeJob = false;
+        List<String> errorMessages = new ArrayList<String>();
+        Date currentDate = convertToDate(dateTimeService.toDateString(dateTimeService.getCurrentDate()));
+        Date beginDate = getBlankOutBeginDate(errorMessages);
+        Date endDate = getBlankOutEndDate(errorMessages);
+        
+        if (hasBlankOutPeriodStarted(beginDate, endDate, errorMessages)) {
+                String blankOutPeriodrunDate = parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_PERIOD_RUN_DATE);
+                if(!StringHelper.isNullOrEmpty(blankOutPeriodrunDate)){
+                    Date runDate = convertToDate(blankOutPeriodrunDate);
+                    
+                    if(runDate.compareTo(beginDate)>=0 && runDate.compareTo(endDate)<=0) {
+                        if(currentDate.equals(runDate)) {
+                            executeJob = true;
+                        }
+                        else {
+                            LOG.info("Today is not BLANK_OUT_PERIOD_RUN_DATE. executeJob not set to true");
+                        }
+                       
+                    }
+                    else {
+                        String blankOutBegin =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_BEGIN_MMDD);
+                        String blankOutEnd =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_END_MMDD);
+                        String message =  "BLANK_OUT_PERIOD_RUN_DATE: " + blankOutPeriodrunDate + " is not in the blank out period range." + "Blank out period range is [ " + 
+                        blankOutBegin + "-" + blankOutEnd + " ] ." ;
+                        errorMessages.add(message);
+                        LOG.info(message);
+                    }
+                }
+                else {
+                    String message = "Parameter BLANK_OUT_PERIOD_RUN_DATE (component: Asset Depreciation Step) is not set" +
+                    " Please set the date correctly to run the job.";
+                    errorMessages.add(message);
+                    LOG.info(message);
+                }
+        }
+        else {
+            CronExpression cronExpression = new CronExpression(this.cronExpression);
+            Date validTimeAfter = cronExpression.getNextValidTimeAfter(dateTimeService.getCurrentDate());
+            String scheduleJobDate = dateTimeService.toString(validTimeAfter, CamsConstants.DateFormats.MONTH_DAY_YEAR);
+            if(scheduleJobDate.equals(currentDate)){
+                executeJob = true;
+            }else {
+                LOG.info("Cron condition not met. executeJob not set to true");
+            }
+        }
+        
+        if(!executeJob && !errorMessages.isEmpty()) {
+            sendWarningMail(errorMessages);
+        }
+        
+        return executeJob;
+    }
+    
+    private boolean hasBlankOutPeriodStarted(Date beginDate, Date endDate, List<String> errorMessages) throws ParseException {
+        Date currentDate = convertToDate(dateTimeService.toDateString(dateTimeService.getCurrentDate()));
+        String blankOutBegin =  parameterService.getParameterValueAsString(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_BEGIN_MMDD);
+        String blankOutEnd =  parameterService.getParameterValueAsString(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_END_MMDD);
+        if(ObjectUtils.isNotNull(beginDate) && ObjectUtils.isNotNull(endDate)) {
+            if(currentDate.compareTo(beginDate)>=0 && currentDate.compareTo(endDate)<=0 ) {
+                return true;
+            }
+        }
+        else {
+            String message = "Unable to determine blank out period for a given " + blankOutBegin +
+            " - " + blankOutEnd + " range .";
+            
+            errorMessages.add(message);
+            LOG.info(message);
+        }
+        
+        return false;
+    }
+    
+    private boolean runAssetDepreciation() throws ParseException {
+        boolean executeJob = false;
+        List<String> errorMessages = new ArrayList<String>();
+        Date currentDate = convertToDate(dateTimeService.toDateString(dateTimeService.getCurrentDate()));
+        Date beginDate = getBlankOutBeginDate(errorMessages);
+        Date endDate = getBlankOutEndDate(errorMessages);
+        
+        if (hasBlankOutPeriodStarted(beginDate, endDate, errorMessages)) {
+                String blankOutPeriodrunDate = parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_PERIOD_RUN_DATE);
+                if(!StringHelper.isNullOrEmpty(blankOutPeriodrunDate)){
+                    Date runDate = convertToDate(blankOutPeriodrunDate);
+                    
+                    if(runDate.compareTo(beginDate)>=0 && runDate.compareTo(endDate)<=0) {
+                        if(currentDate.equals(runDate)) {
+                            executeJob = true;
+                        }
+                        else {
+                            LOG.info("Today is not BLANK_OUT_PERIOD_RUN_DATE. executeJob not set to true");
+                        }
+                       
+                    }
+                    else {
+                        String blankOutBegin =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_BEGIN_MMDD);
+                        String blankOutEnd =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_END_MMDD);
+                        String message =  "BLANK_OUT_PERIOD_RUN_DATE: " + blankOutPeriodrunDate + " is not in the blank out period range." + "Blank out period range is [ " + 
+                        blankOutBegin + "-" + blankOutEnd + " ] ." ;
+                        errorMessages.add(message);
+                        LOG.info(message);
+                    }
+                }
+                else {
+                    String message = "Parameter BLANK_OUT_PERIOD_RUN_DATE (component: Asset Depreciation Step) is not set" +
+                    " Please set the date correctly to run the job.";
+                    errorMessages.add(message);
+                    LOG.info(message);
+                }
+        }
+        else {
+            CronExpression cronExpression = new CronExpression(this.cronExpression);
+            Date validTimeAfter = cronExpression.getNextValidTimeAfter(dateTimeService.getCurrentDate());
+            String scheduleJobDate = dateTimeService.toString(validTimeAfter, CamsConstants.DateFormats.MONTH_DAY_YEAR);
+            if(scheduleJobDate.equals(currentDate)){
+                executeJob = true;
+            }else {
+                LOG.info("Cron condition not met. executeJob not set to true");
+            }
+        }
+        
+        if(!executeJob && !errorMessages.isEmpty()) {
+            sendWarningMail(errorMessages);
+        }
+        
+        return executeJob;
+    }
+    
+    private boolean hasBlankOutPeriodStarted(Date beginDate, Date endDate, List<String> errorMessages) throws ParseException {
+        Date currentDate = convertToDate(dateTimeService.toDateString(dateTimeService.getCurrentDate()));
+        String blankOutBegin =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_BEGIN_MMDD);
+        String blankOutEnd =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_END_MMDD);
+        if(ObjectUtils.isNotNull(beginDate) && ObjectUtils.isNotNull(endDate)) {
+            if(currentDate.compareTo(beginDate)>=0 && currentDate.compareTo(endDate)<=0 ) {
+                return true;
+            }
+        }
+        else {
+            String message = "Unable to determine blank out period for a given " + blankOutBegin +
+            " - " + blankOutEnd + " range .";
+            
+            errorMessages.add(message);
+            LOG.info(message);
+        }
+        
+        return false;
+    }
+    
     /**
-     * Get the last month and day of the fiscal year.  Returned in the format '-mm-dd'
-     * @return
+     * 
+     * This method calculate blank out period end date.
+     * @return blank out period end date in MM/dd/yyyy format.
+     * @throws ParseException
      */
-    protected String getLastDayOfFiscalyear() {
-        ParameterService parameterService = SpringContext.getBean(ParameterService.class);
-        String date = parameterService.getParameterValueAsString(KfsParameterConstants.CAPITAL_ASSETS_ALL.class, CamsConstants.Parameters.FISCAL_YEAR_END_DAY_AND_MONTH);
-        return "-" + date.substring(0,2) + "-" + date.substring(2);
+    private Date getBlankOutEndDate(List<String> errorMessages) throws ParseException {
+        String endDate = parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_END_MMDD);
+        if(!StringHelper.isNullOrEmpty(endDate)) {
+            int endDay = new Integer(StringUtils.substringAfterLast(endDate, "/")).intValue();
+            int endMonth = new Integer(StringUtils.substringBeforeLast(endDate, "/")).intValue()-1  ;
+            Calendar blankOutEndcalendar = Calendar.getInstance();
+            blankOutEndcalendar.set(blankOutEndcalendar.get(Calendar.YEAR), endMonth , endDay);
+            return  convertToDate(dateTimeService.toString(blankOutEndcalendar.getTime(), CamsConstants.DateFormats.MONTH_DAY_YEAR));
+            
+        }
+        else {
+            
+            String message  = "Parameter BLANK_OUT_END_MMDD (component:Asset Depreciation Step) is not set." ;
+            errorMessages.add(message);
+            LOG.info(message);
+            
+        }
+        
+        return null;
     }
-
-    protected void populateYearEndDepreciationTransaction(AssetPaymentInfo assetPayment, String transactionType, String plantCOA, String plantAccount, ObjectCode deprObjectCode, SortedMap<String, AssetDepreciationTransaction> depreciationTransactionSummary) {
-        LOG.info("\npopulateYearEndDepreciationTransaction - Asset#:" + assetPayment.getCapitalAssetNumber() + " amount:"+ assetPayment.getTransactionAmount()+" type:"+ transactionType);
-        LOG.info("deprObjectCode.getFinancialObjectCode():" + deprObjectCode.getFinancialObjectCode() + " deprObjectCode.getFinancialObjectTypeCode():"+ deprObjectCode.getFinancialObjectTypeCode());
-        AssetDepreciationTransaction depreciationTransaction = new AssetDepreciationTransaction();
-        depreciationTransaction.setCapitalAssetNumber(assetPayment.getCapitalAssetNumber());
-        depreciationTransaction.setChartOfAccountsCode(plantCOA);
-        depreciationTransaction.setAccountNumber(plantAccount);
-        depreciationTransaction.setSubAccountNumber(assetPayment.getSubAccountNumber());
-        depreciationTransaction.setFinancialObjectCode(deprObjectCode.getFinancialObjectCode());
-        depreciationTransaction.setFinancialSubObjectCode(assetPayment.getFinancialSubObjectCode());
-        depreciationTransaction.setFinancialObjectTypeCode(deprObjectCode.getFinancialObjectTypeCode());
-        depreciationTransaction.setTransactionType(transactionType);
-        depreciationTransaction.setProjectCode(assetPayment.getProjectCode());
-        depreciationTransaction.setTransactionAmount(assetPayment.getTransactionAmount());
-        depreciationTransaction.setTransactionLedgerEntryDescription("Year End Depreciation Asset " + assetPayment.getCapitalAssetNumber());
-
-        String sKey = depreciationTransaction.getKey();
-
-        // Grouping the asset transactions by asset#, accounts, sub account, object, transaction type (C/D), etc. in order to
-        // only have one credit and one credit by group.
-        if (depreciationTransactionSummary.containsKey(sKey)) {
-            LOG.info("depreciationTransactionSummary.containsKey(sKey) where sKey=" + sKey);
-            depreciationTransaction = depreciationTransactionSummary.get(sKey);
-            depreciationTransaction.setTransactionAmount(depreciationTransaction.getTransactionAmount().add(assetPayment.getTransactionAmount()));
-        } else {
-            LOG.info("depreciationTransactionSummary DOESNT containsKey(sKey) where sKey=" + sKey);
-            depreciationTransactionSummary.put(sKey, depreciationTransaction);
+    
+    /**
+     * 
+     * This method calculate blank out period begin date.
+     * @return blank out period begin date in MM/dd/yyyy format. 
+     * @throws ParseException
+     */
+    private Date getBlankOutBeginDate(List<String> errorMessages) throws ParseException {
+        String beginDate =  parameterService.getParameterValue(AssetDepreciationStep.class, CamsConstants.Parameters.BLANK_OUT_BEGIN_MMDD);
+        
+        if(!StringHelper.isNullOrEmpty(beginDate)) {
+            int beginDay = new Integer(StringUtils.substringAfterLast(beginDate, "/")).intValue();
+            int beginMonth = new Integer(StringUtils.substringBeforeLast(beginDate, "/")).intValue()-1;
+            Calendar blankOutBegincalendar = Calendar.getInstance();
+            blankOutBegincalendar.set(blankOutBegincalendar.get(Calendar.YEAR),beginMonth , beginDay);
+            return convertToDate(dateTimeService.toString(blankOutBegincalendar.getTime(), CamsConstants.DateFormats.MONTH_DAY_YEAR));
+           
         }
-        LOG.info("\n\n");
-        //  LOG.info("populateYearEndDepreciationTransaction(AssetDepreciationTransaction depreciationTransaction, AssetPayment assetPayment, String transactionType, KualiDecimal transactionAmount, String plantCOA, String plantAccount, String accumulatedDepreciationFinancialObjectCode, String depreciationExpenseFinancialObjectCode, ObjectCode financialObject, SortedMap<String, AssetDepreciationTransaction> depreciationTransactionSummary) -  ended");
+        else {
+            String message  = "Parameter BLANK_OUT_BEGIN_MMDD (component:Asset Depreciation Step) is not set."; 
+            errorMessages.add(message);
+            LOG.info(message);
+            
+        }
+        
+        
+       return null;
     }
-
-    protected void processYearEndGeneralLedgerPendingEntry(SortedMap<String, AssetDepreciationTransaction> trans) {
-        fiscalMonth = 13;
-        processGeneralLedgerPendingEntry(trans);
+       
+    private Date convertToDate(String date) throws ParseException {
+        DateFormat dateFormat = new SimpleDateFormat(CamsConstants.DateFormats.MONTH_DAY_YEAR);
+        dateFormat.setLenient(false);
+        return dateFormat.parse(date);
+        
     }
-
-    // CSU 6702 END
-
+    
+    
     /**
      * This method calculates the depreciation of each asset payment, creates the depreciation transactions that will be stored in
      * the general ledger pending entry table
-     *
+     * 
      * @param depreciableAssetsCollection asset payments eligible for depreciation
      * @return SortedMap with a list of depreciation transactions
      */
-    protected SortedMap<String, AssetDepreciationTransaction> calculateDepreciation(Collection<AssetPaymentInfo> depreciableAssetsCollection, Calendar depreciationDate) {
+    protected SortedMap<String, AssetDepreciationTransaction> calculateDepreciation(Integer fiscalYear, Integer fiscalMonth, Collection<AssetPaymentInfo> depreciableAssetsCollection, Calendar depreciationDate) {
         LOG.debug("calculateDepreciation() - start");
 
         Collection<String> organizationPlantFundObjectSubType = new ArrayList<String>();
@@ -401,7 +540,7 @@
         Calendar assetDepreciationDate = Calendar.getInstance();
 
         try {
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Getting the parameters for the plant fund object sub types.");
+            LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Getting the parameters for the plant fund object sub types.");
             // Getting system parameters needed.
             if (parameterService.parameterExists(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.DEPRECIATION_ORGANIZATON_PLANT_FUND_SUB_OBJECT_TYPES)) {
                 organizationPlantFundObjectSubType = new ArrayList<String>( parameterService.getParameterValuesAsString(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.DEPRECIATION_ORGANIZATON_PLANT_FUND_SUB_OBJECT_TYPES) );
@@ -414,14 +553,14 @@
             LOG.debug("getBaseAmountOfAssets(Collection<AssetPayment> depreciableAssetsCollection) - Started.");
             // Invoking method that will calculate the base amount for each asset payment transactions, which could be more than 1
             // per asset.
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Calculating the base amount for each asset.");
+            LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Calculating the base amount for each asset.");
             Map<Long, KualiDecimal> salvageValueAssetDeprAmounts = depreciationBatchDao.getPrimaryDepreciationBaseAmountForSV();
             // Retrieving the object asset codes.
-            Map<String, AssetObjectCode> assetObjectCodeMap = buildChartObjectToCapitalizationObjectMap();
+            Map<String, AssetObjectCode> assetObjectCodeMap = buildChartObjectToCapitalizationObjectMap(fiscalYear);
             Map<String, ObjectCode> capitalizationObjectCodes = new HashMap<String, ObjectCode>();
 
             // Reading asset payments
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Reading collection with eligible asset payment details.");
+            LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Reading collection with eligible asset payment details.");
             int counter = 0;
             List<AssetPaymentInfo> saveList = new ArrayList<AssetPaymentInfo>();
             for (AssetPaymentInfo assetPaymentInfo : depreciableAssetsCollection) {
@@ -431,8 +570,8 @@
                     LOG.error(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Asset payment is not included in depreciation " + assetPaymentInfo.getCapitalAssetNumber() + " - " + assetPaymentInfo.getPaymentSequenceNumber());
                     continue;
                 }
-                ObjectCode accumulatedDepreciationFinancialObject = getDepreciationObjectCode(capitalizationObjectCodes, assetPaymentInfo, assetObjectCode.getAccumulatedDepreciationFinancialObjectCode());
-                ObjectCode depreciationExpenseFinancialObject = getDepreciationObjectCode(capitalizationObjectCodes, assetPaymentInfo, assetObjectCode.getDepreciationExpenseFinancialObjectCode());
+                ObjectCode accumulatedDepreciationFinancialObject = getDepreciationObjectCode(fiscalYear, capitalizationObjectCodes, assetPaymentInfo, assetObjectCode.getAccumulatedDepreciationFinancialObjectCode());
+                ObjectCode depreciationExpenseFinancialObject = getDepreciationObjectCode(fiscalYear, capitalizationObjectCodes, assetPaymentInfo, assetObjectCode.getDepreciationExpenseFinancialObjectCode());
 
                 if (ObjectUtils.isNull(accumulatedDepreciationFinancialObject)) {
                     LOG.error(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Accumulated Depreciation Financial Object Code not found for " + fiscalYear + "-" + assetPaymentInfo.getChartOfAccountsCode() + "-" + assetObjectCode.getAccumulatedDepreciationFinancialObjectCode());
@@ -505,7 +644,7 @@
                     LOG.error(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Plant COA is " + plantCOA + " and plant account is " + plantAccount + " for Financial Object SubType Code = " + assetPaymentInfo.getFinancialObjectSubTypeCode() + " so Asset payment is not included in depreciation " + assetPaymentInfo.getCapitalAssetNumber() + " - " + assetPaymentInfo.getPaymentSequenceNumber());
                     continue;
                 }
-                LOG.info("Asset#: " + assetNumber + " - Payment sequence#:" + assetPaymentInfo.getPaymentSequenceNumber() + " - Asset Depreciation date:" + assetDepreciationDate + " - Life:" + assetLifeInMonths + " - Depreciation base amt:" + primaryDepreciationBaseAmount + " - Accumulated depreciation:" + assetPaymentInfo.getAccumulatedPrimaryDepreciationAmount() + " - Month Elapsed:" + monthsElapsed + " - Calculated accum depreciation:" + accumulatedDepreciationAmount + " - Depreciation amount:" + transactionAmount.toString() + " - Depreciation Method:" + assetPaymentInfo.getPrimaryDepreciationMethodCode());
+                LOG.debug("Asset#: " + assetNumber + " - Payment sequence#:" + assetPaymentInfo.getPaymentSequenceNumber() + " - Asset Depreciation date:" + assetDepreciationDate + " - Life:" + assetLifeInMonths + " - Depreciation base amt:" + primaryDepreciationBaseAmount + " - Accumulated depreciation:" + assetPaymentInfo.getAccumulatedPrimaryDepreciationAmount() + " - Month Elapsed:" + monthsElapsed + " - Calculated accum depreciation:" + accumulatedDepreciationAmount + " - Depreciation amount:" + transactionAmount.toString() + " - Depreciation Method:" + assetPaymentInfo.getPrimaryDepreciationMethodCode());
                 assetPaymentInfo.setAccumulatedPrimaryDepreciationAmount(accumulatedDepreciationAmount);
                 assetPaymentInfo.setTransactionAmount(transactionAmount);
                 counter++;
@@ -536,7 +675,7 @@
     /**
      * This method stores in a collection of business objects the depreciation transaction that later on will be passed to the
      * processGeneralLedgerPendingEntry method in order to store the records in gl pending entry table
-     *
+     * 
      * @param assetPayment asset payment
      * @param transactionType which can be [C]redit or [D]ebit
      * @param plantCOA plant fund char of account code
@@ -547,7 +686,7 @@
      */
     protected void populateDepreciationTransaction(AssetPaymentInfo assetPayment, String transactionType, String plantCOA, String plantAccount, ObjectCode deprObjectCode, SortedMap<String, AssetDepreciationTransaction> depreciationTransactionSummary) {
         LOG.debug("populateDepreciationTransaction(AssetDepreciationTransaction depreciationTransaction, AssetPayment assetPayment, String transactionType, KualiDecimal transactionAmount, String plantCOA, String plantAccount, String accumulatedDepreciationFinancialObjectCode, String depreciationExpenseFinancialObjectCode, ObjectCode financialObject, SortedMap<String, AssetDepreciationTransaction> depreciationTransactionSummary) -  started");
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "populateDepreciationTransaction(): populating AssetDepreciationTransaction pojo - Asset#:" + assetPayment.getCapitalAssetNumber());
+        LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "populateDepreciationTransaction(): populating AssetDepreciationTransaction pojo - Asset#:" + assetPayment.getCapitalAssetNumber());
         AssetDepreciationTransaction depreciationTransaction = new AssetDepreciationTransaction();
         depreciationTransaction.setCapitalAssetNumber(assetPayment.getCapitalAssetNumber());
         depreciationTransaction.setChartOfAccountsCode(plantCOA);
@@ -578,19 +717,19 @@
     /**
      * This method stores the depreciation transactions in the general pending entry table and creates a new documentHeader entry.
      * <p>
-     *
+     * 
      * @param trans SortedMap with the transactions
      * @return none
      */
-    protected void processGeneralLedgerPendingEntry(SortedMap<String, AssetDepreciationTransaction> trans) {
+    protected void processGeneralLedgerPendingEntry(Integer fiscalYear, Integer fiscalMonth, List<String> documentNos, SortedMap<String, AssetDepreciationTransaction> trans) {
         LOG.debug("populateExplicitGeneralLedgerPendingEntry(AccountingDocument, AccountingLine, GeneralLedgerPendingEntrySequenceHelper, GeneralLedgerPendingEntry) - start");
 
         String financialSystemDocumentTypeCodeCode;
         try {
 
-            String documentNumber = createNewDepreciationDocument();
+            String documentNumber = createNewDepreciationDocument(documentNos);
             financialSystemDocumentTypeCodeCode = CamsConstants.DocumentTypeName.ASSET_DEPRECIATION;
-            LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Depreciation Document Type Code: " + financialSystemDocumentTypeCodeCode);
+            LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Depreciation Document Type Code: " + financialSystemDocumentTypeCodeCode);
 
             Timestamp transactionTimestamp = new Timestamp(dateTimeService.getCurrentDate().getTime());
 
@@ -601,7 +740,7 @@
             for (AssetDepreciationTransaction t : trans.values()) {
                 if (t.getTransactionAmount().isNonZero()) {
                     counter++;
-                    LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Creating GLPE entries for asset:" + t.getCapitalAssetNumber());
+                    LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Creating GLPE entries for asset:" + t.getCapitalAssetNumber());
                     GeneralLedgerPendingEntry explicitEntry = new GeneralLedgerPendingEntry();
                     explicitEntry.setFinancialSystemOriginationCode(KFSConstants.ORIGIN_CODE_KUALI);
                     explicitEntry.setDocumentNumber(documentNumber);
@@ -614,8 +753,8 @@
                     explicitEntry.setFinancialSubObjectCode(t.getFinancialSubObjectCode());
                     explicitEntry.setFinancialBalanceTypeCode(BALANCE_TYPE_ACTUAL);
                     explicitEntry.setFinancialObjectTypeCode(t.getFinancialObjectTypeCode());
-                    explicitEntry.setUniversityFiscalYear(this.fiscalYear);
-                    explicitEntry.setUniversityFiscalPeriodCode(StringUtils.leftPad(this.fiscalMonth.toString().trim(), 2, "0"));
+                    explicitEntry.setUniversityFiscalYear(fiscalYear);
+                    explicitEntry.setUniversityFiscalPeriodCode(StringUtils.leftPad(fiscalMonth.toString().trim(), 2, "0"));
                     explicitEntry.setTransactionLedgerEntryDescription(t.getTransactionLedgerEntryDescription());
                     explicitEntry.setTransactionLedgerEntryAmount(t.getTransactionAmount().abs());
                     explicitEntry.setTransactionDebitCreditCode(t.getTransactionType());
@@ -633,7 +772,7 @@
                     }
                     if (sequenceHelper.getSequenceCounter() == 99999) {
                         // create new document and sequence is reset
-                        documentNumber = createNewDepreciationDocument();
+                        documentNumber = createNewDepreciationDocument(documentNos);
                         sequenceHelper = new GeneralLedgerPendingEntrySequenceHelper();
                     }
                 }
@@ -656,7 +795,7 @@
         // **************************************************************************************************
         // Create a new document header object
         // **************************************************************************************************
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Creating document header entry.");
+        LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Creating document header entry.");
 
         FinancialSystemDocumentHeader documentHeader = new FinancialSystemDocumentHeader();
         documentHeader.setWorkflowDocument(workflowDocument);
@@ -666,27 +805,27 @@
         documentHeader.setDocumentDescription(CamsConstants.Depreciation.DOCUMENT_DESCRIPTION);
         documentHeader.setFinancialDocumentTotalAmount(KualiDecimal.ZERO);
 
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Saving document header entry.");
+        LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Saving document header entry.");
         this.businessObjectService.save(documentHeader);
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Document Header entry was saved successfully.");
+        LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Document Header entry was saved successfully.");
         // **************************************************************************************************
 
         String documentNumber = documentHeader.getDocumentNumber();
-        this.documentNos.add(documentNumber);
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Document Number Created: " + documentNumber);
+        documentNos.add(documentNumber);
+        LOG.debug(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Document Number Created: " + documentNumber);
         return documentNumber;
     }
 
 
     /**
      * Depreciation object code is returned from cache or from DB
-     *
+     * 
      * @param capitalizationObjectCodes collection cache
      * @param assetPaymentInfo
      * @param capitalizationFinancialObjectCode
      * @return
      */
-    protected ObjectCode getDepreciationObjectCode(Map<String, ObjectCode> capObjectCodesCache, AssetPaymentInfo assetPaymentInfo, String capitalizationFinancialObjectCode) {
+    protected ObjectCode getDepreciationObjectCode(Integer fiscalYear, Map<String, ObjectCode> capObjectCodesCache, AssetPaymentInfo assetPaymentInfo, String capitalizationFinancialObjectCode) {
         ObjectCode deprObjCode = null;
         String key = assetPaymentInfo.getChartOfAccountsCode() + "-" + capitalizationFinancialObjectCode;
         if ((deprObjCode = capObjectCodesCache.get(key)) == null) {
@@ -700,10 +839,10 @@
 
     /**
      * Builds map between object code to corresponding asset object code
-     *
+     * 
      * @return Map
      */
-    protected Map<String, AssetObjectCode> buildChartObjectToCapitalizationObjectMap() {
+    protected Map<String, AssetObjectCode> buildChartObjectToCapitalizationObjectMap(Integer fiscalYear) {
         Map<String, AssetObjectCode> assetObjectCodeMap = new HashMap<String, AssetObjectCode>();
         Collection<AssetObjectCode> assetObjectCodes = getAssetObjectCodes(fiscalYear);
 
@@ -718,100 +857,36 @@
         }
         return assetObjectCodeMap;
     }
+    
+    private void sendWarningMail(List<String> errorMessages) {
+        
+        LOG.debug("sendEmail() starting");
+        MailMessage message = new MailMessage();
 
-    /**
-     * @see org.kuali.kfs.module.cam.document.dataaccess.DepreciableAssetsDao#getAssetObjectCodes(java.lang.Integer)
-     */
-    @Override
-    @Cacheable(value=AssetObjectCode.CACHE_NAME, key="'{getAssetObjectCodes} fiscalYear=' + #p0")
-    public Collection<AssetObjectCode> getAssetObjectCodes(Integer fiscalYear) {
-        LOG.debug("DepreciableAssetsDAoOjb.getAssetObjectCodes() -  started");
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Getting asset object codes.");
-
-        Collection<AssetObjectCode> assetObjectCodesCollection;
-        HashMap<String, Object> fields = new HashMap<String, Object>();
-        fields.put(CamsPropertyConstants.AssetObject.UNIVERSITY_FISCAL_YEAR, fiscalYear);
-        fields.put(CamsPropertyConstants.AssetObject.ACTIVE, Boolean.TRUE);
-        assetObjectCodesCollection = (Collection<AssetObjectCode>) businessObjectService.findMatching(AssetObjectCode.class, fields);
-
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Finished getting asset object codes - which are:" + assetObjectCodesCollection.toString());
-        LOG.debug("DepreciableAssetsDAoOjb.getAssetObjectCodes() -  ended");
-        return assetObjectCodesCollection;
-    }
-
-    /**
-     * This method gets a list of Expense object codes from the asset object code table for a particular fiscal year
-     *
-     * @param fiscalYear
-     * @return a List<String>
-     */
-    @Cacheable(value=AssetObjectCode.CACHE_NAME, key="'{getExpenseObjectCodes} fiscalYear=' + #p0")
-    protected List<String> getExpenseObjectCodes(Integer fiscalYear) {
-        LOG.debug("DepreciableAssetsDAoOjb.getExpenseObjectCodes() -  started");
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Getting expense object codes");
-
-        List<String> depreExpObjCodes = new ArrayList<String>();
-        Collection<AssetObjectCode> assetObjectCodesCollection = this.getAssetObjectCodes(fiscalYear);
-
-        // Creating a list of depreciation expense object codes.
-        for (Iterator<AssetObjectCode> iterator = assetObjectCodesCollection.iterator(); iterator.hasNext();) {
-            AssetObjectCode assetObjectCode = iterator.next();
-
-            String objCode = assetObjectCode.getDepreciationExpenseFinancialObjectCode();
-            if (objCode != null && !objCode.equals("") && !depreExpObjCodes.contains(objCode)) {
-                depreExpObjCodes.add(objCode);
-            }
+        message.setFromAddress(mailService.getBatchMailingList());
+        String subject = "Asset Depreciation Job status";
+        message.setSubject(subject);
+        List<String> toAddresses =  parameterService.getParameterValues(AssetDepreciationStep.class, CamsConstants.Parameters.RUN_DATE_NOTIFICATION_EMAIL_ADDRESSES);
+        message.getToAddresses().add(toAddresses);
+      
+        
+        StringBuffer sb = new StringBuffer();
+        sb.append("Unable to run Depreciation process.Reason:\n");
+        for (String msg : errorMessages) {
+            sb.append(msg + "\n");
         }
-        LOG.debug("DepreciableAssetsDAoOjb.getExpenseObjectCodes() -  ended");
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Finished getting expense object codes which are:" + depreExpObjCodes.toString());
-        return depreExpObjCodes;
-    }
+        
+        sb.append("Please set the dates correctly to run the job.");
+        
+        message.setMessage(sb.toString());
 
-    /**
-     * This method gets a list of Accumulated Depreciation Object Codes from the asset object code table for a particular fiscal
-     * year.
-     *
-     * @param fiscalYear
-     * @return List<String>
-     */
-    @Cacheable(value=AssetObjectCode.CACHE_NAME, key="'{getAccumulatedDepreciationObjectCodes} fiscalYear=' + #p0")
-    protected List<String> getAccumulatedDepreciationObjectCodes(Integer fiscalYear) {
-        LOG.debug("DepreciableAssetsDAoOjb.getAccumulatedDepreciationObjectCodes() -  started");
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Getting accum depreciation object codes");
-
-        List<String> accumulatedDepreciationObjCodes = new ArrayList<String>();
-        Collection<AssetObjectCode> assetObjectCodesCollection = this.getAssetObjectCodes(fiscalYear);
-
-        // Creating a list of depreciation expense object codes.
-        for (Iterator<AssetObjectCode> iterator = assetObjectCodesCollection.iterator(); iterator.hasNext();) {
-            AssetObjectCode assetObjectCode = iterator.next();
-
-            String objCode = assetObjectCode.getAccumulatedDepreciationFinancialObjectCode();
-            if (objCode != null && !objCode.equals("") && !accumulatedDepreciationObjCodes.contains(objCode)) {
-                accumulatedDepreciationObjCodes.add(objCode);
-            }
+        try {
+            mailService.sendMessage(message);
         }
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Finished getting accum depreciation object codes which are:" + accumulatedDepreciationObjCodes.toString());
-        LOG.debug("DepreciableAssetsDAoOjb.getAccumulatedDepreciationObjectCodes() -  ended");
-        return accumulatedDepreciationObjCodes;
+        catch (InvalidAddressException e) {
+            LOG.error("sendErrorEmail() Invalid email address. Message not sent", e);
+        }   
     }
-
-    /**
-     * This method the value of the system parameter NON_DEPRECIABLE_FEDERALLY_OWNED_OBJECT_SUB_TYPES
-     *
-     * @return
-     */
-    protected List<String> getFederallyOwnedObjectSubTypes() {
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "getting the federally owned object subtype codes.");
-
-        List<String> federallyOwnedObjectSubTypes = new ArrayList<String>();
-        if (parameterService.parameterExists(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.NON_DEPRECIABLE_FEDERALLY_OWNED_OBJECT_SUB_TYPES)) {
-            federallyOwnedObjectSubTypes = new ArrayList<String>( parameterService.getParameterValuesAsString(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.NON_DEPRECIABLE_FEDERALLY_OWNED_OBJECT_SUB_TYPES) );
-        }
-        LOG.info(CamsConstants.Depreciation.DEPRECIATION_BATCH + "Finished getting the federally owned object subtype codes which are:" + federallyOwnedObjectSubTypes.toString());
-        return federallyOwnedObjectSubTypes;
-    }
-
     public void setParameterService(ParameterService parameterService) {
         this.parameterService = parameterService;
     }
@@ -850,7 +925,7 @@
 
     /**
      * Gets the depreciationBatchDao attribute.
-     *
+     * 
      * @return Returns the depreciationBatchDao.
      */
     public DepreciationBatchDao getDepreciationBatchDao() {
@@ -859,7 +934,7 @@
 
     /**
      * Sets the depreciationBatchDao attribute value.
-     *
+     * 
      * @param depreciationBatchDao The depreciationBatchDao to set.
      */
     @Override
@@ -867,226 +942,16 @@
         this.depreciationBatchDao = depreciationBatchDao;
     }
 
-    public void setOptionsService(OptionsService optionsService) {
-        this.optionsService = optionsService;
+
+    public void setCronExpression(String cronExpression) {
+        this.cronExpression = cronExpression;
     }
 
-    protected SortedMap<String, AssetDepreciationTransaction> calculateYearEndDepreciation(Collection<AssetPaymentInfo> depreciableAssetsCollection, Calendar depreciationDate, Integer fiscalYearToDepreciate) {
-        LOG.info("calculateDepreciation() - start");
 
-        SortedMap<String, AssetDepreciationTransaction> depreciationTransactionSummary = new TreeMap<String, AssetDepreciationTransaction>();
-        double monthsElapsed = 0d;
-        double assetLifeInMonths = 0d;
-        KualiDecimal accumulatedDepreciationAmount = KualiDecimal.ZERO;
-        Calendar assetDepreciationDate = Calendar.getInstance();
-
-        try {
-            LOG.info("YEAR END DEPRECIATION - Getting the parameters for the plant fund object sub types.");
-            // Getting system parameters needed.
-            Collection<String> organizationPlantFundObjectSubType = parameterService.getParameterValuesAsString(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.DEPRECIATION_ORGANIZATON_PLANT_FUND_SUB_OBJECT_TYPES);
-            Collection<String> campusPlantFundObjectSubType = parameterService.getParameterValuesAsString(KfsParameterConstants.CAPITAL_ASSETS_BATCH.class, CamsConstants.Parameters.DEPRECIATION_CAMPUS_PLANT_FUND_OBJECT_SUB_TYPES);
-            // Initializing the asset payment table.
-            depreciationBatchDao.resetPeriodValuesWhenFirstFiscalPeriod(fiscalMonth);
-            LOG.info("getBaseAmountOfAssets(Collection<AssetPayment> depreciableAssetsCollection) - Started.");
-            // Invoking method that will calculate the base amount for each asset payment transactions, which could be more than 1
-            // per asset.
-            LOG.info("YEAR END DEPRECIATION - Calculating the base amount for each asset.");
-            Map<Long, KualiDecimal> salvageValueAssetDeprAmounts = depreciationBatchDao.getPrimaryDepreciationBaseAmountForSV();
-            // Retrieving the object asset codes.
-            Map<String, AssetObjectCode> assetObjectCodeMap = buildChartObjectToCapitalizationObjectMap();
-            Map<String, ObjectCode> capitalizationObjectCodes = new HashMap<String, ObjectCode>();
-
-            // Reading asset payments
-            LOG.info("YEAR END DEPRECIATION - Reading collection with eligible asset payment details.");
-            int counter = 0;
-            List<AssetPaymentInfo> saveList = new ArrayList<AssetPaymentInfo>();
-            for (AssetPaymentInfo assetPaymentInfo : depreciableAssetsCollection) {
-
-                boolean asset_is_retired = false;
-                boolean asset_is_not_in_last_year_of_life = false;
-                HashMap<String, Object> pKeys = new HashMap<String, Object>();
-                // Asset must be valid and capital active 'A','C','S','U'
-                Long assetNumber = assetPaymentInfo.getCapitalAssetNumber();
-                pKeys.put(CamsPropertyConstants.Asset.CAPITAL_ASSET_NUMBER, assetNumber);
-
-                Asset asset = (Asset) businessObjectService.findByPrimaryKey(Asset.class, pKeys);
-                if (asset != null) {
-                    asset_is_retired = assetService.isAssetRetired(asset);
-                    if ( LOG.isInfoEnabled() ) {
-                        LOG.info("asset#" + assetNumber + "   asset_is_retired = " + asset_is_retired);
-                    }
-                }
-
-
-                AssetObjectCode assetObjectCode = assetObjectCodeMap.get(assetPaymentInfo.getChartOfAccountsCode() + "-" + assetPaymentInfo.getFinancialObjectCode());
-                if (assetObjectCode == null) {
-                    LOG.error("YEAR END DEPRECIATION - " + "Asset object code not found for " + fiscalYear + "-" + assetPaymentInfo.getChartOfAccountsCode() + "-" + assetPaymentInfo.getFinancialObjectCode());
-                    LOG.error("YEAR END DEPRECIATION - " + "Asset payment is not included in depreciation " + assetPaymentInfo.getCapitalAssetNumber() + " - " + assetPaymentInfo.getPaymentSequenceNumber());
-                    continue;
-                }
-                else {
-                    LOG.info("YEAR END DEPRECIATION - " + "fiscal year " + fiscalYear + " chartOfAccountsCode:" + assetPaymentInfo.getChartOfAccountsCode() + " FinancialObjectCode:" + assetPaymentInfo.getFinancialObjectCode());
-    //                LOG.info("YEAR END DEPRECIATION - " + "CapitalAssetNumber:" + assetPaymentInfo.getCapitalAssetNumber() + " PaymentSequenceNumber:" + assetPaymentInfo.getPaymentSequenceNumber());
-                }
-                ObjectCode accumulatedDepreciationFinancialObject = getDepreciationObjectCode(capitalizationObjectCodes, assetPaymentInfo, assetObjectCode.getAccumulatedDepreciationFinancialObjectCode());
-                ObjectCode depreciationExpenseFinancialObject = getDepreciationObjectCode(capitalizationObjectCodes, assetPaymentInfo, assetObjectCode.getDepreciationExpenseFinancialObjectCode());
-                String retire_code = parameterService.getParameterValueAsString(org.kuali.kfs.module.cam.businessobject.AssetRetirementGlobal.class, CamsConstants.Parameters.DEFAULT_GAIN_LOSS_DISPOSITION_OBJECT_CODE);
-                if ( LOG.isInfoEnabled() ) {
-                    LOG.info("retire_code from system parameter "+ CamsConstants.Parameters.DEFAULT_GAIN_LOSS_DISPOSITION_OBJECT_CODE+" = " + retire_code);
-                }
-                ObjectCode depreciationYearEndExpenseFinancialObject = getDepreciationObjectCode(capitalizationObjectCodes, assetPaymentInfo, retire_code);
-
-                if (ObjectUtils.isNull(accumulatedDepreciationFinancialObject)) {
-                    LOG.error("YEAR END DEPRECIATION - " + "Accumulated Depreciation Financial Object Code not found for " + fiscalYear + "-" + assetPaymentInfo.getChartOfAccountsCode() + "-" + assetObjectCode.getAccumulatedDepreciationFinancialObjectCode());
-                    LOG.error("YEAR END DEPRECIATION - " + "Asset payment is not included in depreciation " + assetPaymentInfo.getCapitalAssetNumber() + " - " + assetPaymentInfo.getPaymentSequenceNumber());
-                    continue;
-                } else {
-    //                LOG.info("YEAR END DEPRECIATION - " + " AccumulatedDepreciationFinancialObjectCode:" + assetObjectCode.getAccumulatedDepreciationFinancialObjectCode());
-    //                LOG.info("YEAR END DEPRECIATION - " + "CapitalAssetNumber:" + assetPaymentInfo.getCapitalAssetNumber() + " PaymentSequenceNumber:" + assetPaymentInfo.getPaymentSequenceNumber());
-                    if ( LOG.isInfoEnabled() ) {
-                        LOG.info("YEAR END DEPRECIATION - " + "accumulatedDepreciationFinancialObject:" + accumulatedDepreciationFinancialObject.getFinancialObjectCode());
-                    }
-                }
-
-                if (ObjectUtils.isNull(depreciationExpenseFinancialObject)) {
-                    LOG.error("YEAR END DEPRECIATION - " + "Depreciation Expense Financial Object Code not found for " + fiscalYear + "-" + assetPaymentInfo.getChartOfAccountsCode() + "-" + assetObjectCode.getDepreciationExpenseFinancialObjectCode());
-                    LOG.error("YEAR END DEPRECIATION - " + "Asset payment is not included in depreciation " + assetPaymentInfo.getCapitalAssetNumber() + " - " + assetPaymentInfo.getPaymentSequenceNumber());
-                    continue;
-                } else {
-                    if ( LOG.isInfoEnabled() ) {
-                        LOG.info("YEAR END DEPRECIATION - " + "depreciationExpenseFinancialObject:" + depreciationExpenseFinancialObject.getFinancialObjectCode());
-                    }
-                }
-                assetDepreciationDate.setTime(assetPaymentInfo.getDepreciationDate());
-                accumulatedDepreciationAmount = KualiDecimal.ZERO;
-                KualiDecimal deprAmountSum = salvageValueAssetDeprAmounts.get(assetNumber);
-                // Calculating the life of the asset in months.
-                assetLifeInMonths = assetPaymentInfo.getDepreciableLifeLimit() * 12;
-                // Calculating the months elapsed for the asset using the depreciation date and the asset service date.
-                monthsElapsed = (depreciationDate.get(Calendar.MONTH) - assetDepreciationDate.get(Calendar.MONTH) + (depreciationDate.get(Calendar.YEAR) - assetDepreciationDate.get(Calendar.YEAR)) * 12) + 1;
-
-                if ((assetLifeInMonths - monthsElapsed)>12){
-                    asset_is_not_in_last_year_of_life = true;
-                }
-
-
-
-
-
-
-
-                // **************************************************************************************************************
-                // CALCULATING ACCUMULATED DEPRECIATION BASED ON FORMULA FOR SINGLE LINE AND SALVAGE VALUE DEPRECIATION METHODS.
-                // **************************************************************************************************************
-                KualiDecimal primaryDepreciationBaseAmount = assetPaymentInfo.getPrimaryDepreciationBaseAmount();
-                if (primaryDepreciationBaseAmount == null) {
-                    primaryDepreciationBaseAmount = KualiDecimal.ZERO;
-                    assetPaymentInfo.setPrimaryDepreciationBaseAmount(KualiDecimal.ZERO);
-                }
-
-                if (assetPaymentInfo.getAccumulatedPrimaryDepreciationAmount() == null) {
-                    assetPaymentInfo.setAccumulatedPrimaryDepreciationAmount(KualiDecimal.ZERO);
-                }
-
-                // If the months elapsed >= to the life of the asset (in months) then, the accumulated depreciation should be:
-                if (monthsElapsed >= assetLifeInMonths) {
-                    if (CamsConstants.Asset.DEPRECIATION_METHOD_STRAIGHT_LINE_CODE.equals(assetPaymentInfo.getPrimaryDepreciationMethodCode())) {
-                        accumulatedDepreciationAmount = primaryDepreciationBaseAmount;
-                    } else if (CamsConstants.Asset.DEPRECIATION_METHOD_SALVAGE_VALUE_CODE.equals(assetPaymentInfo.getPrimaryDepreciationMethodCode()) && deprAmountSum != null && deprAmountSum.isNonZero()) {
-                        accumulatedDepreciationAmount = primaryDepreciationBaseAmount.subtract((primaryDepreciationBaseAmount.divide(deprAmountSum)).multiply(assetPaymentInfo.getSalvageAmount()));
-                    }
-                } // If the month elapse < to the life of the asset (in months) then....
-                else {
-                    if (CamsConstants.Asset.DEPRECIATION_METHOD_STRAIGHT_LINE_CODE.equals(assetPaymentInfo.getPrimaryDepreciationMethodCode())) {
-                        accumulatedDepreciationAmount = new KualiDecimal((monthsElapsed / assetLifeInMonths) * primaryDepreciationBaseAmount.doubleValue());
-                    } else if (CamsConstants.Asset.DEPRECIATION_METHOD_SALVAGE_VALUE_CODE.equals(assetPaymentInfo.getPrimaryDepreciationMethodCode()) && deprAmountSum != null && deprAmountSum.isNonZero()) {
-                        accumulatedDepreciationAmount = new KualiDecimal((monthsElapsed / assetLifeInMonths) * (primaryDepreciationBaseAmount.subtract((primaryDepreciationBaseAmount.divide(deprAmountSum)).multiply(assetPaymentInfo.getSalvageAmount()))).doubleValue());
-                    }
-                }
-                // Calculating in process fiscal month depreciation amount
-                KualiDecimal transactionAmount = accumulatedDepreciationAmount.subtract(assetPaymentInfo.getAccumulatedPrimaryDepreciationAmount());
-
-                Map<String, String> primaryKeys = new HashMap<String, String>();
-                primaryKeys.put(CamsPropertyConstants.AssetDepreciationConvention.FINANCIAL_OBJECT_SUB_TYPE_CODE, asset.getFinancialObjectSubTypeCode());
-                AssetDepreciationConvention depreciationConvention = (AssetDepreciationConvention) SpringContext.getBean(BusinessObjectService.class).findByPrimaryKey(AssetDepreciationConvention.class, primaryKeys);
-                String conventionCode = depreciationConvention.getDepreciationConventionCode();
-                if (CamsConstants.DepreciationConvention.HALF_YEAR.equalsIgnoreCase(conventionCode)) {
-                     if (asset_is_retired && asset_is_not_in_last_year_of_life) { // and not in last year of life mjmc
-                        transactionAmount = transactionAmount.divide(new KualiDecimal(2));
-                        if ( LOG.isInfoEnabled() ) {
-                            LOG.info("transactionAmount after being halved = " + transactionAmount);
-                        }
-                    }
-                }
-
-
-                String transactionType = KFSConstants.GL_DEBIT_CODE;
-                if (transactionAmount.isNegative()) {
-                    transactionType = KFSConstants.GL_CREDIT_CODE;
-                }
-                String plantAccount = "";
-                String plantCOA = "";
-
-                // getting the right Plant Fund Chart code & Plant Fund Account
-                if (organizationPlantFundObjectSubType.contains(assetPaymentInfo.getFinancialObjectSubTypeCode())) {
-                    plantAccount = assetPaymentInfo.getOrganizationPlantAccountNumber();
-                    plantCOA = assetPaymentInfo.getOrganizationPlantChartCode();
-                } else if (campusPlantFundObjectSubType.contains(assetPaymentInfo.getFinancialObjectSubTypeCode())) {
-                    plantAccount = assetPaymentInfo.getCampusPlantAccountNumber();
-                    plantCOA = assetPaymentInfo.getCampusPlantChartCode();
-                }
-                if (StringUtils.isBlank(plantCOA) || StringUtils.isBlank(plantAccount)) {
-                    // skip the payment
-                    LOG.error("YEAR END DEPRECIATION - " + "Plant COA is " + plantCOA + " and plant account is " + plantAccount + " for Financial Object SubType Code = " + assetPaymentInfo.getFinancialObjectSubTypeCode() + " so Asset payment is not included in depreciation " + assetPaymentInfo.getCapitalAssetNumber() + " - " + assetPaymentInfo.getPaymentSequenceNumber());
-                    continue;
-                }
-                SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
-                if ( LOG.isInfoEnabled() ) {
-                    LOG.info("Asset#: " + assetNumber + " - Payment sequence#:" + assetPaymentInfo.getPaymentSequenceNumber() + " - Asset Depreciation date:" + sdf.format(assetDepreciationDate.getTime()) + " - Life:" + assetLifeInMonths + " - Depreciation base amt:" + primaryDepreciationBaseAmount);
-                    LOG.info("Accumulated depreciation:" + assetPaymentInfo.getAccumulatedPrimaryDepreciationAmount() + " - Month Elapsed:" + monthsElapsed + " - Calculated accum depreciation:" + accumulatedDepreciationAmount + " - Depreciation amount:" + transactionAmount.toString() + " - Depreciation Method:" + assetPaymentInfo.getPrimaryDepreciationMethodCode());
-                }
-                if (asset_is_retired && asset_is_not_in_last_year_of_life) {
-                    assetPaymentInfo.setAccumulatedPrimaryDepreciationAmount(accumulatedDepreciationAmount.subtract(transactionAmount));
-                } else {
-                    assetPaymentInfo.setAccumulatedPrimaryDepreciationAmount(accumulatedDepreciationAmount);
-                }
-                assetPaymentInfo.setTransactionAmount(transactionAmount);
-                counter++;
-                saveList.add(assetPaymentInfo);
-                // Saving depreciation amount in the asset payment table
-                if (counter % 1000 == 0) {
-                    getDepreciationBatchDao().updateAssetPayments(saveList, fiscalMonth);
-                    saveList.clear();
-                }
-                // if the asset has a depreciation amount <> 0 then, create its debit and credit entries.
-                if (transactionAmount.isNonZero()) {
-                    this.populateYearEndDepreciationTransaction(assetPaymentInfo, transactionType, plantCOA, plantAccount, depreciationExpenseFinancialObject, depreciationTransactionSummary);
-                    transactionType = (transactionType.equals(KFSConstants.GL_DEBIT_CODE) ? KFSConstants.GL_CREDIT_CODE : KFSConstants.GL_DEBIT_CODE);
-                    this.populateYearEndDepreciationTransaction(assetPaymentInfo, transactionType, plantCOA, plantAccount, accumulatedDepreciationFinancialObject, depreciationTransactionSummary);
-
-
-
-
-
-                    if (asset_is_retired) {
-                        this.populateYearEndDepreciationTransaction(assetPaymentInfo, transactionType, plantCOA, plantAccount, depreciationYearEndExpenseFinancialObject, depreciationTransactionSummary);
-                        transactionType = (transactionType.equals(KFSConstants.GL_DEBIT_CODE) ? KFSConstants.GL_CREDIT_CODE : KFSConstants.GL_DEBIT_CODE);
-                        this.populateYearEndDepreciationTransaction(assetPaymentInfo, transactionType, plantCOA, plantAccount, accumulatedDepreciationFinancialObject, depreciationTransactionSummary);
-                    }
-                }
-            }
-            getDepreciationBatchDao().updateAssetPayments(saveList, fiscalMonth);
-            saveList.clear();
-            return depreciationTransactionSummary;
-        }
-        catch (Exception e) {
-            LOG.error("Error occurred", e);
-            throw new IllegalStateException(kualiConfigurationService.getPropertyValueAsString(CamsKeyConstants.Depreciation.ERROR_WHEN_CALCULATING_DEPRECIATION) + " :" + e.getMessage(), e);
-        }
+    public void setMailService(MailService mailService) {
+        this.mailService = mailService;
     }
+    
+    
 
-    public void setUniversityDateService(UniversityDateService universityDateService) {
-        this.universityDateService = universityDateService;
-    }
-
 }
Index: work/src/org/kuali/kfs/module/cam/businessobject/AssetPaymentDetail.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/AssetPaymentDetail.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/AssetPaymentDetail.java	(working copy)
@@ -15,21 +15,22 @@
  */
 package org.kuali.kfs.module.cam.businessobject;
 
-import java.sql.Date;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
+import java.sql.Date;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 import org.apache.commons.lang.builder.ToStringBuilder;
 import org.apache.commons.lang.builder.ToStringStyle;
-import org.apache.log4j.Logger;
-import org.kuali.kfs.coa.businessobject.AccountingPeriod;
-import org.kuali.kfs.module.cam.CamsPropertyConstants;
-import org.kuali.kfs.sys.businessobject.OriginationCode;
-import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
-import org.kuali.kfs.sys.context.SpringContext;
+import org.apache.log4j.Logger;
+import org.kuali.kfs.coa.businessobject.Account;
+import org.kuali.kfs.coa.businessobject.AccountingPeriod;
+import org.kuali.kfs.module.cam.CamsPropertyConstants;
+import org.kuali.kfs.sys.businessobject.OriginationCode;
+import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
+import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
-import org.kuali.rice.kew.doctype.bo.DocumentTypeEBO;
-import org.kuali.rice.kew.service.impl.KEWModuleService;
+import org.kuali.rice.kew.doctype.bo.DocumentTypeEBO;
+import org.kuali.rice.kew.service.impl.KEWModuleService;
 
 /**
  * Accounting line for the asset payment document.
@@ -52,6 +53,7 @@
     private AccountingPeriod financialDocumentPostingPeriod;
     private DocumentTypeEBO expenditureFinancialSystemDocumentTypeCode;
     private OriginationCode expenditureFinancialSystemOrigination;
+    private Account account;
 
 
 
@@ -83,12 +85,11 @@
         this.setAmount(assetPayment.getAccountChargeAmount());
     }
     
-    /**
-     * Replace the original toStringMapper
-     * 
-     * @return
-     */
-    protected LinkedHashMap<String,String> assetPaymentToStringMapper() {
+
+    /**
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
+     */
+    protected LinkedHashMap<String,String> assetPaymentToStringMapper() {
         LinkedHashMap<String,String> m = new LinkedHashMap<String,String>();
         m.put("documentNumber", this.getDocumentNumber());
         m.put("sequenceNumber", this.getSequenceNumber() == null ? "" : this.getSequenceNumber().toString());
@@ -100,7 +101,7 @@
         m.put("projectCode",getProjectCode());
         m.put("postingYear",this.getPostingYear().toString());
         return m;
-    }
+    }
     
     /**
      * Create a key including the 
@@ -124,8 +125,8 @@
             builder.append(key, paymentMap.get(key));
         }
         return paymentMap.toString();
-    }
-
+    }
+
     public String getExpenditureFinancialSystemOriginationCode() {
         return expenditureFinancialSystemOriginationCode;
     }
@@ -228,6 +229,26 @@
         this.expenditureFinancialSystemOrigination = expenditureFinancialSystemOrigination;
     }
     
+    /**
+     * Gets the account attribute.
+     * 
+     * @return Returns the account
+     * 
+     */
+    public Account getAccount() {
+        return account;
+    }
+
+    /**
+     * Sets the account attribute.
+     * 
+     * @param account The account to set.
+     * @deprecated
+     */
+    public void setAccount(Account account) {
+        this.account = account;
+    }
+    
     public KualiDecimal getAmount() {
         return amount;
     }
Index: work/src/org/kuali/kfs/module/cam/businessobject/AssetComponent.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/AssetComponent.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/AssetComponent.java	(working copy)
@@ -24,7 +24,7 @@
 /**
  * @author Kuali Nervous System Team (kualidev@oncourse.iu.edu)
  */
-public class AssetComponent extends PersistableBusinessObjectBase {
+public class AssetComponent extends PersistableBusinessObjectBase implements Inactivateable {
 
     private Long capitalAssetNumber;
     private Integer componentNumber;
@@ -48,6 +48,7 @@
     private String componentWarrantyText;
     private String governmentTagNumber;
     private String nationalStockNumber;
+    private boolean active;
 
     private Asset asset;
     private AssetCondition componentCondition;
@@ -552,10 +553,31 @@
     public void setComponentCondition(AssetCondition componentCondition) {
         this.componentCondition = componentCondition;
     }
+    
+    
+    /**
+     * Gets the active attribute.
+     * 
+     * @return Returns the active
+     */
+    public boolean isActive() {
+        return active;
+    }
 
     /**
-     * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
+     * Sets the active attribute.
+     * 
+     * @param active The active to set.
      */
+    public void setActive(boolean active) {
+        this.active = active;
+    }
+    
+    
+
+    /**
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
+     */
     protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
         LinkedHashMap m = new LinkedHashMap();
         if (this.capitalAssetNumber != null) {
Index: work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetGlobalDetail.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetGlobalDetail.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetGlobalDetail.xml	(working copy)
@@ -159,9 +159,9 @@
     <property name="name" value="offCampusAddress"/>
     <property name="label" value="Off Campus Address"/>
     <property name="shortLabel" value="Address"/>
-    <property name="maxLength" value="30"/>
+    <property name="maxLength" value="45"/>
     <property name="control">
-      <bean parent="TextControlDefinition" p:size="32"/>
+      <bean parent="TextControlDefinition" p:size="47"/>
     </property>
   </bean>
   
Index: work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetRepairHistory.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetRepairHistory.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetRepairHistory.xml	(working copy)
@@ -38,6 +38,7 @@
         <ref bean="AssetRepairHistory-repairNoteText"/>
         <ref bean="AssetRepairHistory-repairSolutionDescription"/>
         <ref bean="AssetRepairHistory-newCollectionRecord"/>
+        <ref bean="AssetRepairHistory-active"/>
       </list>
     </property>
   </bean>
@@ -139,6 +140,11 @@
   <bean id="AssetRepairHistory-newCollectionRecord" parent="AssetRepairHistory-newCollectionRecord-parentBean"/>
   <bean id="AssetRepairHistory-newCollectionRecord-parentBean" abstract="true" parent="GenericAttributes-newCollectionRecord">
   </bean>
+  
+  <bean id="AssetRepairHistory-active" parent="AssetRepairHistory-active-parentBean"/>
+  <bean id="AssetRepairHistory-active-parentBean" abstract="true" parent="GenericAttributes-activeIndicator">
+    <property name="name" value="active"/>
+  </bean>
 
 <!-- Business Object Inquiry Definition -->
 
@@ -161,6 +167,7 @@
               <bean parent="FieldDefinition" p:attributeName="repairDate"/>
               <bean parent="FieldDefinition" p:attributeName="repairNoteText"/>
               <bean parent="FieldDefinition" p:attributeName="repairSolutionDescription"/>
+              <bean parent="FieldDefinition" p:attributeName="active"/>
             </list>
           </property>
         </bean>
@@ -189,6 +196,7 @@
         <bean parent="FieldDefinition" p:attributeName="repairDate"/>
         <bean parent="FieldDefinition" p:attributeName="repairNoteText"/>
         <bean parent="FieldDefinition" p:attributeName="repairSolutionDescription"/>
+        <bean parent="FieldDefinition" p:defaultValue="Y" p:attributeName="active"/>
       </list>
     </property>
     <property name="resultFields">
@@ -202,6 +210,7 @@
         <bean parent="FieldDefinition" p:attributeName="repairDate"/>
         <bean parent="FieldDefinition" p:attributeName="repairNoteText"/>
         <bean parent="FieldDefinition" p:attributeName="repairSolutionDescription"/>
+        <bean parent="FieldDefinition" p:attributeName="active"/>
       </list>
     </property>
   </bean>
Index: work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/Asset.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/Asset.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/Asset.xml	(working copy)
@@ -110,6 +110,7 @@
         <ref bean="Asset-assetWarranty.warrantyBeginningDate"/>
         <ref bean="Asset-assetWarranty.warrantyEndingDate"/>
         <ref bean="Asset-assetWarranty.warrantyText"/>
+        <ref bean="Asset-assetWarranty.active"/>
         <ref bean="Asset-separateHistory.separateSourceCapitalAssetNumber"/>
         <ref bean="Asset-separateHistory.separateDocumentHeaderFinalDate"/>
         <ref bean="Asset-retirementInfo.documentNumber"/>
@@ -1140,6 +1141,12 @@
     <property name="label" value="Description"/>
   </bean>
   
+  <bean id="Asset-assetWarranty.active" parent="Asset-assetWarranty.active-parentBean"/>
+  <bean id="Asset-assetWarranty.active-parentBean" abstract="true" parent="AssetWarranty-active" >
+  	<property name="name" value="assetWarranty.active"/>
+  </bean>
+
+  
   <bean id="Asset-separateHistory.separateSourceCapitalAssetNumber" parent="Asset-separateHistory.separateSourceCapitalAssetNumber-parentBean"/>
   <bean id="Asset-separateHistory.separateSourceCapitalAssetNumber-parentBean" abstract="true" parent="Asset-capitalAssetNumber">
     <property name="name" value="separateHistory.separateSourceCapitalAssetNumber"/>
@@ -1557,57 +1564,7 @@
           <property name="numberOfColumns" value="1"/>
           <property name="inquiryFields">
             <list>
-              <bean parent="InquiryCollectionDefinition">
-                <property name="attributeName" value="assetPayments"/>
-                <property name="businessObjectClass" value="org.kuali.kfs.module.cam.businessobject.AssetPayment"/>
-                <property name="numberOfColumns" value="2"/>
-                <property name="summaryTitle" value="Payment"/>
-                <property name="inquiryFields">
-                  <list>
-                    <bean parent="FieldDefinition" p:attributeName="capitalAssetNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="paymentSequenceNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="accountNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="subAccountNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialObjectCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialSubObjectCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="projectCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="organizationReferenceId"/>
-                    <bean parent="FieldDefinition" p:attributeName="documentNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialDocumentTypeCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="purchaseOrderNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="requisitionNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingDate"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingYear"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingPeriodCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="transferPaymentCode"/>
-                    <bean parent="FieldDefinition" p:attributeName="accountChargeAmount"/>
-                    <bean parent="FieldDefinition" p:attributeName="accumulatedPrimaryDepreciationAmount"/>
-                    <bean parent="FieldDefinition" p:attributeName="yearToDate"/>
-                    <bean parent="FieldDefinition" p:attributeName="previousYearPrimaryDepreciationAmount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period1Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period2Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period3Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period4Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period5Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period6Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period7Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period8Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period9Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period10Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period11Depreciation1Amount"/>
-                    <bean parent="FieldDefinition" p:attributeName="period12Depreciation1Amount"/>
-                  </list>
-                </property>
-                <property name="summaryFields">
-                  <list>
-                    <bean parent="FieldDefinition" p:attributeName="capitalAssetNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="paymentSequenceNumber"/>
-                    <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingDate"/>
-                    <bean parent="FieldDefinition" p:attributeName="accountChargeAmount"/>
-                  </list>
-                </property>
-              </bean>
+              <bean parent="Asset-AssetPayment-InquiryCollectionDefinition"/>
               <!-- TODO KFSMI-645: adding the following field makes above collection disappear -->
               <!-- bean parent="FieldDefinition"
                     p:attributeName="paymentTotalCost" / -->
@@ -1880,6 +1837,59 @@
     <property name="authorizerClass" value="org.kuali.kfs.module.cam.businessobject.authorization.AssetInquiryAuthorizer"/>
   </bean>
 
+  <bean id="Asset-AssetPayment-InquiryCollectionDefinition" parent="Asset-AssetPayment-InquiryCollectionDefinition-parentBean"/>
+  <bean id="Asset-AssetPayment-InquiryCollectionDefinition-parentBean" abstract="true" parent="InquiryCollectionDefinition">
+    <property name="attributeName" value="assetPayments"/>
+    <property name="businessObjectClass" value="org.kuali.kfs.module.cam.businessobject.AssetPayment"/>
+    <property name="numberOfColumns" value="2"/>
+    <property name="summaryTitle" value="Payment"/>
+    <property name="inquiryFields">
+      <list>
+        <bean parent="FieldDefinition" p:attributeName="capitalAssetNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="paymentSequenceNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="chartOfAccountsCode"/>
+        <bean parent="FieldDefinition" p:attributeName="accountNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="subAccountNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="financialObjectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="financialSubObjectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="projectCode"/>
+        <bean parent="FieldDefinition" p:attributeName="organizationReferenceId"/>
+        <bean parent="FieldDefinition" p:attributeName="documentNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentTypeCode"/>
+        <bean parent="FieldDefinition" p:attributeName="purchaseOrderNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="requisitionNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingDate"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingYear"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingPeriodCode"/>
+        <bean parent="FieldDefinition" p:attributeName="transferPaymentCode"/>
+        <bean parent="FieldDefinition" p:attributeName="accountChargeAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="accumulatedPrimaryDepreciationAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="yearToDate"/>
+        <bean parent="FieldDefinition" p:attributeName="previousYearPrimaryDepreciationAmount"/>
+        <bean parent="FieldDefinition" p:attributeName="period1Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period2Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period3Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period4Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period5Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period6Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period7Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period8Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period9Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period10Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period11Depreciation1Amount"/>
+        <bean parent="FieldDefinition" p:attributeName="period12Depreciation1Amount"/>
+      </list>
+    </property>
+    <property name="summaryFields">
+      <list>
+        <bean parent="FieldDefinition" p:attributeName="capitalAssetNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="paymentSequenceNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="financialDocumentPostingDate"/>
+        <bean parent="FieldDefinition" p:attributeName="accountChargeAmount"/>
+      </list>
+    </property>
+  </bean>
+
 <!-- Business Object Lookup Definition -->
 
   <bean id="Asset-lookupDefinition" parent="Asset-lookupDefinition-parentBean"/>
Index: work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetComponent.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetComponent.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetComponent.xml	(working copy)
@@ -51,6 +51,7 @@
         <ref bean="AssetComponent-governmentTagNumber"/>
         <ref bean="AssetComponent-nationalStockNumber"/>
         <ref bean="AssetComponent-newCollectionRecord"/>
+        <ref bean="AssetComponent-active"/>
       </list>
     </property>
   </bean>
@@ -340,6 +341,12 @@
   <bean id="AssetComponent-newCollectionRecord" parent="AssetComponent-newCollectionRecord-parentBean"/>
   <bean id="AssetComponent-newCollectionRecord-parentBean" abstract="true" parent="GenericAttributes-newCollectionRecord">
   </bean>
+  
+  <bean id="AssetComponent-active" parent="AssetComponent-active-parentBean"/>
+  <bean id="AssetComponent-active-parentBean" abstract="true" parent="GenericAttributes-activeIndicator">
+    <property name="name" value="active"/>
+  </bean>
+  
 <!-- Business Object Inquiry Definition -->
 
   <bean id="AssetComponent-inquiryDefinition" parent="AssetComponent-inquiryDefinition-parentBean"/>
@@ -374,6 +381,7 @@
               <bean parent="FieldDefinition" p:attributeName="componentWarrantyPhoneNumber"/>
               <bean parent="FieldDefinition" p:attributeName="governmentTagNumber"/>
               <bean parent="FieldDefinition" p:attributeName="nationalStockNumber"/>
+              <bean parent="FieldDefinition" p:attributeName="active"/>
             </list>
           </property>
         </bean>
@@ -415,6 +423,7 @@
         <bean parent="FieldDefinition" p:attributeName="componentWarrantyPhoneNumber"/>
         <bean parent="FieldDefinition" p:attributeName="governmentTagNumber"/>
         <bean parent="FieldDefinition" p:attributeName="nationalStockNumber"/>
+        <bean parent="FieldDefinition" p:defaultValue="Y" p:attributeName="active"/>
       </list>
     </property>
     <property name="resultFields">
@@ -441,6 +450,7 @@
         <bean parent="FieldDefinition" p:attributeName="componentWarrantyPhoneNumber"/>
         <bean parent="FieldDefinition" p:attributeName="governmentTagNumber"/>
         <bean parent="FieldDefinition" p:attributeName="nationalStockNumber"/>
+        <bean parent="FieldDefinition" p:attributeName="active"/>
       </list>
     </property>
   </bean>
Index: work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetWarranty.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetWarranty.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/datadictionary/AssetWarranty.xml	(working copy)
@@ -36,6 +36,7 @@
         <ref bean="AssetWarranty-warrantyPhoneNumber"/>
         <ref bean="AssetWarranty-warrantyPurchaseOrderNumber"/>
         <ref bean="AssetWarranty-warrantyText"/>
+        <ref bean="AssetWarranty-active"/>
       </list>
     </property>
   </bean>
@@ -133,6 +134,13 @@
       <bean parent="TextControlDefinition" p:size="42"/>
     </property>
   </bean>
+  
+   <bean id="AssetWarranty-active" parent="AssetWarranty-active-parentBean"/>
+  <bean id="AssetWarranty-active-parentBean" abstract="true" parent="GenericAttributes-activeIndicator">
+    <property name="name" value="active"/>
+  </bean>
+  
+  
 
 <!-- Business Object Inquiry Definition -->
 
@@ -154,6 +162,7 @@
               <bean parent="FieldDefinition" p:attributeName="warrantyPhoneNumber"/>
               <bean parent="FieldDefinition" p:attributeName="warrantyPurchaseOrderNumber"/>
               <bean parent="FieldDefinition" p:attributeName="warrantyText"/>
+              <bean parent="FieldDefinition" p:attributeName="active"/>
             </list>
           </property>
         </bean>
@@ -181,6 +190,7 @@
         <bean parent="FieldDefinition" p:attributeName="warrantyPhoneNumber"/>
         <bean parent="FieldDefinition" p:attributeName="warrantyPurchaseOrderNumber"/>
         <bean parent="FieldDefinition" p:attributeName="warrantyText"/>
+        <bean parent="FieldDefinition" p:defaultValue="Y" p:attributeName="active"/>
       </list>
     </property>
     <property name="resultFields">
@@ -193,6 +203,7 @@
         <bean parent="FieldDefinition" p:attributeName="warrantyPhoneNumber"/>
         <bean parent="FieldDefinition" p:attributeName="warrantyPurchaseOrderNumber"/>
         <bean parent="FieldDefinition" p:attributeName="warrantyText"/>
+        <bean parent="FieldDefinition" p:attributeName="active"/>
       </list>
     </property>
   </bean>
Index: work/src/org/kuali/kfs/module/cam/businessobject/lookup/AssetLookupableHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/lookup/AssetLookupableHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/lookup/AssetLookupableHelperServiceImpl.java	(working copy)
@@ -40,6 +40,7 @@
 import org.kuali.rice.kns.lookup.HtmlData.AnchorHtmlData;
 import org.kuali.rice.kns.lookup.KualiLookupableHelperServiceImpl;
 import org.kuali.rice.kns.web.struts.form.LookupForm;
+import org.kuali.rice.kns.web.struts.form.LookupForm;
 import org.kuali.rice.kns.web.ui.Field;
 import org.kuali.rice.kns.web.ui.Row;
 import org.kuali.rice.krad.bo.BusinessObject;
@@ -110,7 +111,8 @@
             parameters.put(KFSConstants.OVERRIDE_KEYS, CamsPropertyConstants.AssetRetirementGlobal.RETIREMENT_REASON_CODE + KFSConstants.FIELD_CONVERSIONS_SEPERATOR + CamsPropertyConstants.AssetRetirementGlobal.MERGED_TARGET_CAPITAL_ASSET_NUMBER);
             parameters.put(CamsPropertyConstants.AssetRetirementGlobal.RETIREMENT_REASON_CODE, CamsConstants.AssetRetirementReasonCode.MERGED);
             parameters.put(KFSConstants.REFRESH_CALLER, CamsPropertyConstants.AssetRetirementGlobal.RETIREMENT_REASON_CODE + "::" + CamsConstants.AssetRetirementReasonCode.MERGED);
-
+            
+            
             String href = UrlFactory.parameterizeUrl(KFSConstants.MAINTENANCE_ACTION, parameters);
 
             return new AnchorHtmlData(href, CamsConstants.AssetActions.MERGE, CamsConstants.AssetActions.MERGE);
@@ -119,6 +121,15 @@
             return new AnchorHtmlData("", "", "");
         }
     }
+    
+    @Override
+    protected String getReturnHref(Properties parameters, LookupForm lookupForm, List returnKeys) {
+        String href = super.getReturnHref(parameters, lookupForm, returnKeys);
+        href += "&referencesToRefresh=mergedTargetCapitalAsset";
+        return href;
+        
+    }
+    
 
     protected HtmlData getLoanUrl(Asset asset) {
         AnchorHtmlData anchorHtmlData = null;
Index: work/src/org/kuali/kfs/module/cam/businessobject/AssetGlobal.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/AssetGlobal.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/AssetGlobal.java	(working copy)
@@ -15,26 +15,26 @@
  */
 package org.kuali.kfs.module.cam.businessobject;
 
-import java.sql.Date;
-import java.util.ArrayList;
+import java.sql.Date;
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.List;
-
+import java.util.LinkedHashMap;
+import java.util.List;
+
 import org.apache.commons.lang.StringUtils;
-import org.kuali.kfs.coa.businessobject.Account;
+import org.kuali.kfs.coa.businessobject.Account;
 import org.kuali.kfs.coa.businessobject.AccountingPeriod;
-import org.kuali.kfs.coa.businessobject.Chart;
+import org.kuali.kfs.coa.businessobject.Chart;
 import org.kuali.kfs.coa.service.AccountingPeriodService;
-import org.kuali.kfs.integration.cg.ContractsAndGrantsAgency;
-import org.kuali.kfs.module.cam.document.service.AssetGlobalService;
-import org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader;
-import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
-import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.integration.cg.ContractsAndGrantsAgency;
+import org.kuali.kfs.module.cam.document.service.AssetGlobalService;
+import org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntry;
+import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.core.api.datetime.DateTimeService;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
-import org.kuali.rice.kew.routeheader.DocumentRouteHeaderValue;
-import org.kuali.rice.kew.routeheader.service.RouteHeaderService;
+import org.kuali.rice.kew.routeheader.DocumentRouteHeaderValue;
+import org.kuali.rice.kew.routeheader.service.RouteHeaderService;
 import org.kuali.rice.kim.api.identity.Person;
 import org.kuali.rice.krad.bo.GlobalBusinessObject;
 import org.kuali.rice.krad.bo.GlobalBusinessObjectDetail;
@@ -661,7 +661,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.GlobalBusinessObject#getGlobalChangesToDelete()
+     * @see org.kuali.rice.kns.document.GlobalBusinessObject#getGlobalChangesToDelete()
      */
     public List<PersistableBusinessObject> generateDeactivationsToPersist() {
         return null;
@@ -670,7 +670,7 @@
     /**
      * This returns a list of Assets to Update and/or Add. Applicable to both create new and separate.
      * 
-     * @see org.kuali.rice.krad.bo.GlobalBusinessObject#generateGlobalChangesToPersist()
+     * @see org.kuali.rice.kns.bo.GlobalBusinessObject#generateGlobalChangesToPersist()
      */
     public List<PersistableBusinessObject> generateGlobalChangesToPersist() {
         List<PersistableBusinessObject> persistables = new ArrayList<PersistableBusinessObject>();
@@ -715,7 +715,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
      */
     protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
         LinkedHashMap<String, String> m = new LinkedHashMap<String, String>();
Index: work/src/org/kuali/kfs/module/cam/businessobject/AssetRepairHistory.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/AssetRepairHistory.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/AssetRepairHistory.java	(working copy)
@@ -24,7 +24,7 @@
 /**
  * @author Kuali Nervous System Team (kualidev@oncourse.iu.edu)
  */
-public class AssetRepairHistory extends PersistableBusinessObjectBase {
+public class AssetRepairHistory extends PersistableBusinessObjectBase implements Inactivateable {
 
 	private Long capitalAssetNumber;
 	private Date incidentDate;
@@ -35,6 +35,7 @@
 	private Date repairDate;
 	private KualiDecimal repairAmount;
 	private String repairSolutionDescription;
+	private boolean active;
 
     private Asset asset;
 
@@ -253,7 +254,26 @@
 	public void setAsset(Asset asset) {
 		this.asset = asset;
 	}
+	
 
+    /**
+    * Gets the active attribute.
+    * 
+    * @return Returns the active
+    */
+   public boolean isActive() {
+       return active;
+   }
+
+   /**
+    * Sets the active attribute.
+    * 
+    * @param active The active to set.
+    */
+   public void setActive(boolean active) {
+       this.active = active;
+   }
+
 	/**
 	 * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
 	 */
Index: work/src/org/kuali/kfs/module/cam/businessobject/AssetWarranty.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/AssetWarranty.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/AssetWarranty.java	(working copy)
@@ -23,7 +23,7 @@
 /**
  * @author Kuali Nervous System Team (kualidev@oncourse.iu.edu)
  */
-public class AssetWarranty extends PersistableBusinessObjectBase {
+public class AssetWarranty extends PersistableBusinessObjectBase implements Inactivateable {
 
 	private Long capitalAssetNumber;
 	private String warrantyContactName;
@@ -33,6 +33,7 @@
 	private String warrantyNumber;
 	private String warrantyPurchaseOrderNumber;
 	private String warrantyText;
+	private boolean active;
 
     private Asset asset;
 
@@ -230,7 +231,25 @@
 	public void setAsset(Asset asset) {
 		this.asset = asset;
 	}
+	
+	 /**
+     * Gets the active attribute.
+     * 
+     * @return Returns the active
+     */
+    public boolean isActive() {
+        return active;
+    }
 
+    /**
+     * Sets the active attribute.
+     * 
+     * @param active The active to set.
+     */
+    public void setActive(boolean active) {
+        this.active = active;
+    }
+
 	/**
 	 * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
 	 */
Index: work/src/org/kuali/kfs/module/cam/businessobject/options/AssetTypeValuesFinder.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/options/AssetTypeValuesFinder.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/options/AssetTypeValuesFinder.java	(working copy)
@@ -43,7 +43,9 @@
         labels.add(new ConcreteKeyValue("", ""));
         for (Object code : codes) {
             AssetType at = (AssetType) code;
-            labels.add(new ConcreteKeyValue(at.getCapitalAssetTypeCode(), at.getCapitalAssetTypeDescription()));
+            if(at.isActive()) {
+                labels.add(new ConcreteKeyValue(at.getCapitalAssetTypeCode(), at.getCapitalAssetTypeDescription()));
+            }
         }
 
         // sort alphabetically by asset type description
Index: work/src/org/kuali/kfs/module/cam/businessobject/AssetPayment.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/businessobject/AssetPayment.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/businessobject/AssetPayment.java	(working copy)
@@ -15,24 +15,25 @@
  */
 package org.kuali.kfs.module.cam.businessobject;
 
-import java.sql.Date;
-import java.util.LinkedHashMap;
-
-import org.kuali.kfs.coa.businessobject.Account;
-import org.kuali.kfs.coa.businessobject.AccountingPeriod;
-import org.kuali.kfs.coa.businessobject.Chart;
-import org.kuali.kfs.coa.businessobject.ObjectCode;
-import org.kuali.kfs.coa.businessobject.ProjectCode;
-import org.kuali.kfs.coa.businessobject.SubAccount;
-import org.kuali.kfs.coa.businessobject.SubObjectCode;
+import java.sql.Date;
+import java.util.LinkedHashMap;
+
+import org.kuali.kfs.coa.businessobject.Account;
+import org.kuali.kfs.coa.businessobject.AccountingPeriod;
+import org.kuali.kfs.coa.businessobject.Chart;
+import org.kuali.kfs.coa.businessobject.ObjectCode;
+import org.kuali.kfs.coa.businessobject.ObjectCodeCurrent;
+import org.kuali.kfs.coa.businessobject.ProjectCode;
+import org.kuali.kfs.coa.businessobject.SubAccount;
+import org.kuali.kfs.coa.businessobject.SubObjectCode;
 import org.kuali.kfs.module.cam.document.service.AssetGlobalService;
-import org.kuali.kfs.sys.businessobject.OriginationCode;
-import org.kuali.kfs.sys.businessobject.SystemOptions;
-import org.kuali.kfs.sys.context.SpringContext;
-import org.kuali.kfs.sys.service.UniversityDateService;
+import org.kuali.kfs.sys.businessobject.OriginationCode;
+import org.kuali.kfs.sys.businessobject.SystemOptions;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.service.UniversityDateService;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
-import org.kuali.rice.kew.doctype.bo.DocumentTypeEBO;
-import org.kuali.rice.kew.service.impl.KEWModuleService;
+import org.kuali.rice.kew.doctype.bo.DocumentTypeEBO;
+import org.kuali.rice.kew.service.impl.KEWModuleService;
 import org.kuali.rice.krad.bo.DocumentHeader;
 import org.kuali.rice.krad.bo.PersistableBusinessObjectBase;
 
@@ -80,6 +81,7 @@
     private Chart chartOfAccounts;
     private SubAccount subAccount;
     private ObjectCode financialObject;
+    private ObjectCodeCurrent objectCodeCurrent;
     private Account account;
     private SubObjectCode financialSubObject;
     private ProjectCode project;
@@ -1129,9 +1131,9 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
      */
-    protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
+    protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
         LinkedHashMap<String, String> m = new LinkedHashMap<String, String>();
         m.put("capitalAssetNumber", this.capitalAssetNumber.toString());
         m.put("paymentSequenceNumber", this.paymentSequenceNumber.toString());
@@ -1189,4 +1191,30 @@
     public void setYearToDate(KualiDecimal yearToDate) {
         this.yearToDate = yearToDate;
     }
-}
+    
+    /**
+     * 
+     * Get the current year object code
+     * @return Returns the current year object code
+     */
+    public ObjectCodeCurrent getObjectCodeCurrent() {
+        return objectCodeCurrent;
+    }
+    
+    
+    /**
+     * 
+     * Sets the current year object code
+     * @param financialCurrentObject
+     */
+    public void setObjectCodeCurrent(ObjectCodeCurrent objectCodeCurrent) {
+        this.objectCodeCurrent = objectCodeCurrent;
+    }
+    
+    
+    
+
+    
+    
+    
+}
Index: work/src/org/kuali/kfs/module/cam/spring-cam.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/spring-cam.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/spring-cam.xml	(working copy)
@@ -99,6 +99,8 @@
 <!-- ********* Begin of depreciation batch beans ********** -->
 	<bean id="assetDepreciationService"  parent="assetDepreciationService-parentBean"/>
 	<bean id="assetDepreciationService-parentBean" class="org.kuali.kfs.module.cam.batch.service.impl.AssetDepreciationServiceImpl" abstract="true">											       
+	    <property name="cronExpression" value="0 * * ? * 5#3"/>
+	    <property name="mailService" ref="mailService" />											       
         <property name="parameterService">
             <ref bean="parameterService" />
         </property>
Index: work/src/org/kuali/kfs/module/cam/CamsConstants.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/CamsConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/CamsConstants.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2007 The Kuali Foundation
+ * Copyright 2007 The Kuali Foundation
  * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -104,7 +104,7 @@
         public static final String ASSET_PAYMENT_FROM_CAB = "MPAYCAB";
         public static final String ASSET_FP_INQUIRY = "AFPINQ";
         public static final String ASSET_PREQ_INQUIRY = "APREQINQ";
-        // Below used for view related document links
+        // Below used for view related document links 
         public static final String COMPLEX_MAINTENANCE_DOC_BASE = "CAMM";
     }
 
@@ -138,6 +138,7 @@
         public static final String NON_MOVABLE_EQUIPMENT_OBJECT_SUB_TYPES = "NON_MOVABLE_EQUIPMENT_OBJECT_SUB_TYPES";
         public static final String CAPITALIZATION_LIMIT_AMOUNT = "CAPITALIZATION_LIMIT_AMOUNT";
         public static final String DEFAULT_FABRICATION_ASSET_TYPE_CODE = "DEFAULT_FABRICATION_ASSET_TYPE";
+        public static final String DEFAULT_FABRICATION_ASSET_MANUFACTURER = "DEFAULT_FABRICATION_ASSET_MANUFACTURER";
         public static final String DEFAULT_GAIN_LOSS_DISPOSITION_OBJECT_CODE = "DEFAULT_GAIN_LOSS_DISPOSITION_OBJECT_CODE";
         public static final String MERGE_SEPARATE_RETIREMENT_REASONS = "MERGE_SEPARATE_RETIREMENT_REASONS";
         public static final String RAZE_RETIREMENT_REASONS = "RAZE_RETIREMENT_REASONS";
@@ -145,6 +146,12 @@
         public static final String BAR_CODE_ERROR_DOCUMENT_IGNORES_LOCKS = "IGNORES_LOCKS_IND";
         public static final String MAX_NUMBER_OF_RECORDS_PER_DOCUMENT = "MAX_NUMBER_OF_RECORDS_PER_DOCUMENT";
         public static final String FISCAL_YEAR_END_DAY_AND_MONTH = "FISCAL_YEAR_END_MONTH_AND_DAY";
+        public static final String BLANK_OUT_BEGIN_MMDD = "BLANK_OUT_BEGIN_MMDD";
+        public static final String BLANK_OUT_PERIOD_RUN_DATE = "BLANK_OUT_PERIOD_RUN_DATE";
+        public static final String RUN_DATE_NOTIFICATION_EMAIL_ADDRESSES = "RUN_DATE_NOTIFICATION_EMAIL_ADDRESSES";
+        
+        public static final String BLANK_OUT_END_MMDD = "BLANK_OUT_END_MMDD";
+        public static final String MANUFACTURER_REQUIRED_FOR_NON_MOVEABLE_ASSET_IND = "MANUFACTURER_REQUIRED_FOR_NON_MOVEABLE_ASSET_IND";
     }
 
     public static class Report {
@@ -330,4 +337,4 @@
     }
 
     public static final String defaultLockingInformation = "-1";
-}
+}
Index: work/src/org/kuali/kfs/module/cam/CamsPropertyConstants.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/CamsPropertyConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/CamsPropertyConstants.java	(working copy)
@@ -50,6 +50,9 @@
         public static final String CAPITAL_ASSET_DESCRIPTION = "capitalAssetDescription";
         public static final String ASSET_DEPRECIATION_DATE = "depreciationDate";
         public static final String ASSET_PAYMENTS = "assetPayments";
+        public static final String ASSET_COMPONENTS = "assetComponents";
+        public static final String ASSET_WARRANTY = "assetWarranty";
+        public static final String ASSET_REPAIR_HISTORY = "assetRepairHistory";
         public static final String ESTIMATED_SELLING_PRICE = "estimatedSellingPrice";
         public static final String ESTIMATED_FABRICATION_COMPLETION_DATE = "estimatedFabricationCompletionDate";
         public static final String FABRICATION_ESTIMATED_TOTAL_AMOUNT = "fabricationEstimatedTotalAmount";
@@ -115,6 +118,7 @@
         public static final String SUB_ACCOUNT_NUMBER = "subAccountNumber";
         public static final String OBJECT_CODE = "financialObjectCode";
         public static final String FINANCIAL_OBJECT = "financialObject";
+        public static final String OBJECT_CODE_CURRENT ="objectCodeCurrent"; 
         public static final String SUB_OBJECT_CODE = "financialSubObjectCode";
         public static final String OBJECT_TYPE_CODE = "financialObject.financialObjectTypeCode";
         public static final String PROJECT_CODE = "projectCode";
Index: work/src/org/kuali/kfs/module/cam/ojb-cam.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/ojb-cam.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/ojb-cam.xml	(working copy)
@@ -403,6 +403,10 @@
 		<foreignkey field-ref="chartOfAccountsCode" />
 		<foreignkey field-ref="financialObjectCode" />
 	</reference-descriptor>
+	<reference-descriptor name="objectCodeCurrent" class-ref="org.kuali.kfs.coa.businessobject.ObjectCodeCurrent" auto-retrieve="true" auto-update="none" auto-delete="none" >
+		<foreignkey field-ref="chartOfAccountsCode" />
+		<foreignkey field-ref="financialObjectCode" />
+	</reference-descriptor>
 	<reference-descriptor name="account" class-ref="org.kuali.kfs.coa.businessobject.Account" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
 		<foreignkey field-ref="chartOfAccountsCode" />
 		<foreignkey field-ref="accountNumber" />
@@ -465,7 +469,7 @@
         <orderby name="sequenceNumber" sort="ASC" />
         <inverse-foreignkey field-ref="documentNumber" />
     </collection-descriptor>    	
-   	<collection-descriptor name="assetPaymentAssetDetail" element-class-ref="org.kuali.kfs.module.cam.businessobject.AssetPaymentAssetDetail" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true">
+   <collection-descriptor name="assetPaymentAssetDetail" element-class-ref="org.kuali.kfs.module.cam.businessobject.AssetPaymentAssetDetail" collection-class="org.apache.ojb.broker.util.collections.ManageableArrayList" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true">
         <inverse-foreignkey field-ref="documentNumber" />
     </collection-descriptor>    	
 </class-descriptor>
@@ -538,6 +542,10 @@
 	<reference-descriptor name="expenditureFinancialSystemOrigination" class-ref="org.kuali.kfs.sys.businessobject.OriginationCode" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
 		<foreignkey field-ref="expenditureFinancialSystemOriginationCode" />
 	</reference-descriptor>
+	<reference-descriptor name="account" class-ref="org.kuali.kfs.coa.businessobject.Account" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true">
+		<foreignkey field-ref="chartOfAccountsCode" />
+		<foreignkey field-ref="accountNumber" />
+	</reference-descriptor>
 </class-descriptor>
 
 <class-descriptor class="org.kuali.kfs.module.cam.businessobject.AssetGlobalDetail" table="CM_CPTLAST_DTL_T">
@@ -658,6 +666,7 @@
 	<field-descriptor name="componentWarrantyText" column="CACMP_WRNTY_TXT" jdbc-type="VARCHAR"/>
 	<field-descriptor name="governmentTagNumber" column="CPTL_AST_GOV_TAG_NBR" jdbc-type="VARCHAR"/>
 	<field-descriptor name="nationalStockNumber" column="CPTL_AST_NTL_STOCK_NBR" jdbc-type="VARCHAR"/>
+	<field-descriptor name="active" column="ACTV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
 
 	<reference-descriptor name="asset" class-ref="org.kuali.kfs.module.cam.businessobject.Asset" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
 		<foreignkey field-ref="capitalAssetNumber" />
@@ -678,7 +687,8 @@
 	<field-descriptor name="warrantyNumber" column="AST_WRNTY_NBR" jdbc-type="VARCHAR"/>
 	<field-descriptor name="warrantyPurchaseOrderNumber" column="AST_WRNTY_PO_NBR" jdbc-type="VARCHAR"/>
 	<field-descriptor name="warrantyText" column="AST_WRNTY_TXT" jdbc-type="VARCHAR"/>
-
+	<field-descriptor name="active" column="ACTV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+	
 	<reference-descriptor name="asset" class-ref="org.kuali.kfs.module.cam.businessobject.Asset" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
 		<foreignkey field-ref="capitalAssetNumber" />
 	</reference-descriptor>
@@ -696,7 +706,8 @@
 	<field-descriptor name="repairDate" column="CPTLAST_RPR_DT" jdbc-type="DATE"/>
 	<field-descriptor name="repairAmount" column="CPTLAST_RPR_AMT" jdbc-type="DECIMAL" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbKualiDecimalFieldConversion"/>
 	<field-descriptor name="repairSolutionDescription" column="AST_RPR_SOLN_DESC" jdbc-type="VARCHAR"/>
-
+	<field-descriptor name="active" column="ACTV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+	
 	<reference-descriptor name="asset" class-ref="org.kuali.kfs.module.cam.businessobject.Asset" auto-retrieve="true" auto-update="none" auto-delete="none" proxy="true" >
 		<foreignkey field-ref="capitalAssetNumber" />
 	</reference-descriptor>
@@ -1009,4 +1020,12 @@
 </class-descriptor>
 <!-- CSU 6702 END -->
 
+<class-descriptor class="org.kuali.kfs.module.cam.businessobject.AssetPaymentDocumentType" table="CM_AST_PMT_DOC_TYP_T">
+	<field-descriptor name="documentTypeId" column="DOC_TYP_ID" jdbc-type="BIGINT" primarykey="true" index="true" autoincrement="true" sequence-name="CM_AST_PMT_DOC_TYP_SEQ"/>
+	<field-descriptor name="expenditureFinancialDocumentTypeCode" column="DOC_TYP_NM" jdbc-type="VARCHAR" />
+	<field-descriptor name="active" column="ACTV_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.kns.util.OjbCharBooleanConversion"/>
+	<field-descriptor name="objectId"   	column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
+	<field-descriptor name="versionNumber" 	column="VER_NBR" jdbc-type="BIGINT" locking="true"/>
+</class-descriptor>
+
 </descriptor-repository>
Index: work/src/org/kuali/kfs/module/cam/util/MaintainableWorkflowUtils.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/util/MaintainableWorkflowUtils.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/util/MaintainableWorkflowUtils.java	(working copy)
@@ -15,6 +15,12 @@
  */
 package org.kuali.kfs.module.cam.util;
 
+import java.beans.PropertyDescriptor;
+
+import javax.swing.Spring;
+
+import org.apache.commons.beanutils.PropertyUtils;
+import org.apache.commons.lang.ObjectUtils;
 import org.apache.commons.lang.math.NumberUtils;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.kew.api.WorkflowDocument;
@@ -53,7 +59,7 @@
     }
     
     /**
-     * Retrieve the WorkflowDocument base on documentNumber
+     * Retrieve the KualiWorkflowDocument base on documentNumber
      * 
      * @param documentNumber
      * @return
@@ -62,12 +68,20 @@
 
         WorkflowDocument workflowDocument = null;
         WorkflowDocumentService workflowDocumentService = SpringContext.getBean(WorkflowDocumentService.class);
-        // we need to use the system user here, since this code could be called within the
-        // context of workflow, where there is no user session
-        Person person = SpringContext.getBean(PersonService.class).getPersonByPrincipalName(KRADConstants.SYSTEM_USER);
-
-        workflowDocument = WorkflowDocumentFactory.loadDocument(person.getPrincipalId(), documentNumber);
-        return workflowDocument ;
+        try {
+            Person person = null;
+            if(ObjectUtils.isNull(GlobalVariables.getUserSession())) {
+                person = SpringContext.getBean(PersonService.class).getPersonByPrincipalName(KNSConstants.SYSTEM_USER);
+            }
+            else {
+               person = GlobalVariables.getUserSession().getPerson();
+            }
+	        workflowDocument = WorkflowDocumentFactory.loadDocument(person.getPrincipalId(), documentNumber);
+        }
+        catch (WorkflowException ex) {
+            throw new RuntimeException("Error to retrieve workflow document: " + documentNumber, ex);
+        }
+         return workflowDocument ;
     }
 
 
Index: work/src/org/kuali/kfs/module/cam/document/AssetMaintainableImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/AssetMaintainableImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/AssetMaintainableImpl.java	(working copy)
@@ -226,6 +226,7 @@
             asset.setInventoryStatusCode(CamsConstants.InventoryStatusCode.CAPITAL_ASSET_UNDER_CONSTRUCTION);
             asset.setPrimaryDepreciationMethodCode(CamsConstants.Asset.DEPRECIATION_METHOD_STRAIGHT_LINE_CODE);
             asset.setCapitalAssetTypeCode(SpringContext.getBean(ParameterService.class).getParameterValueAsString(Asset.class, CamsConstants.Parameters.DEFAULT_FABRICATION_ASSET_TYPE_CODE));
+            asset.setManufacturerName(SpringContext.getBean(ParameterService.class).getParameterValue(Asset.class, CamsConstants.Parameters.DEFAULT_FABRICATION_ASSET_MANUFACTURER));
             getAssetService().setFiscalPeriod(asset);
         }
         // setup offCampusLocation
Index: work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetRule.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetRule.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetRule.java	(working copy)
@@ -17,7 +17,10 @@
 
 import static org.kuali.kfs.module.cam.CamsKeyConstants.ERROR_INVALID_ASSET_WARRANTY_NO;
 import static org.kuali.kfs.module.cam.CamsPropertyConstants.Asset.ASSET_WARRANTY_WARRANTY_NUMBER;
+import static org.kuali.kfs.module.cam.CamsPropertyConstants.Asset.ASSET_REPRESENTATIVE;
+import static org.kuali.kfs.module.cam.CamsKeyConstants.PreTag.ERROR_PRE_TAG_INVALID_REPRESENTATIVE_ID;
 
+
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -141,6 +144,7 @@
 
             valid &= checkAssetLocked(document);
         }
+        valid &= validateManufacturer(newAsset);
         return valid;
     }
 
@@ -271,6 +275,21 @@
         }
         return valid;
     }
+    
+    /**
+     * 
+     * Validate asset representative 
+     * @return boolean
+     */
+    protected boolean validateAssetRepresentative() {
+        boolean valid = true;
+        Person assetRepresentative = SpringContext.getBean(org.kuali.rice.kim.service.PersonService.class).getPersonByPrincipalName(newAsset.getAssetRepresentative().getPrincipalName());
+        if(ObjectUtils.isNull(assetRepresentative)) {
+            putFieldError(ASSET_REPRESENTATIVE, ERROR_PRE_TAG_INVALID_REPRESENTATIVE_ID);
+            valid = false;
+        }
+        return valid;
+    }
 
     /**
      * Set asset component numbers
@@ -309,7 +328,13 @@
         if (!StringUtils.equalsIgnoreCase(oldAsset.getOrganizationOwnerAccountNumber(), newAsset.getOrganizationOwnerAccountNumber())) {
             valid &= validateAccount();
         }
-
+        
+        // validate asset representative name 
+        if (!StringUtils.equalsIgnoreCase(oldAsset.getAssetRepresentative().getPrincipalName(), newAsset.getAssetRepresentative().getPrincipalName())) {
+            valid &= validateAssetRepresentative();
+        }
+        
+        
         // validate Vendor Name.
         if (!StringUtils.equalsIgnoreCase(oldAsset.getVendorName(), newAsset.getVendorName())) {
             valid &= validateVendorName();
@@ -709,4 +734,16 @@
         }
         return true;
     }
+    
+    protected boolean validateManufacturer(Asset asset) {
+        boolean valid = true;
+        if (assetService.isCapitalAsset(asset)) {
+            if (parameterService.getIndicatorParameter(CamsConstants.CAM_MODULE_CODE, "Asset", CamsConstants.Parameters.MANUFACTURER_REQUIRED_FOR_NON_MOVEABLE_ASSET_IND) &&
+                    StringUtils.isEmpty(asset.getManufacturerName())){
+                putFieldError(CamsPropertyConstants.Asset.MANUFACTURER_NAME, CamsKeyConstants.AssetGlobal.ERROR_MFR_NAME_REQUIRED);
+                valid = false;
+            }
+        }
+        return valid;
+    }
 }
Index: work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetTransferDocumentRule.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetTransferDocumentRule.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetTransferDocumentRule.java	(working copy)
@@ -410,7 +410,7 @@
         // check if account is valid
         Account organizationOwnerAccount = assetTransferDocument.getOrganizationOwnerAccount();
         if (ObjectUtils.isNotNull(organizationOwnerAccount) && (organizationOwnerAccount.isExpired())) {
-            putError(CamsPropertyConstants.AssetTransferDocument.ORGANIZATION_OWNER_ACCOUNT_NUMBER, CamsKeyConstants.Transfer.ERROR_OWNER_ACCT_INVALID, assetTransferDocument.getOrganizationOwnerChartOfAccountsCode(), assetTransferDocument.getOrganizationOwnerAccountNumber());
+            putError(CamsPropertyConstants.AssetTransferDocument.ORGANIZATION_OWNER_ACCOUNT_NUMBER, CamsKeyConstants.Transfer.ERROR_OWNER_ACCT_INVALID, assetTransferDocument.getOrganizationOwnerAccountNumber(), assetTransferDocument.getOrganizationOwnerChartOfAccountsCode());
             valid &= false;
         }
         else if (getAssetService().isCapitalAsset(asset) && !asset.getAssetPayments().isEmpty()) {
Index: work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetPaymentZeroAmountValidation.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetPaymentZeroAmountValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetPaymentZeroAmountValidation.java	(working copy)
@@ -17,6 +17,7 @@
 
 import static org.kuali.kfs.sys.KFSConstants.AMOUNT_PROPERTY_NAME;
 import static org.kuali.kfs.sys.KFSKeyConstants.ERROR_ZERO_AMOUNT;
+import static org.kuali.kfs.sys.KFSKeyConstants.ERROR_BLANK_AMOUNT;
 
 import org.kuali.kfs.module.cam.document.AssetPaymentDocument;
 import org.kuali.kfs.sys.businessobject.AccountingLine;
@@ -24,6 +25,7 @@
 import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
 import org.kuali.rice.krad.util.GlobalVariables;
+import org.kuali.rice.kns.util.ObjectUtils;
 
 /**
  * This class validates asset zero amount condition
@@ -44,7 +46,11 @@
         }
         
         KualiDecimal amount = accountingLineForValidation.getAmount();
-        if (amount.isZero()) {
+        if(ObjectUtils.isNull(amount)) {
+            GlobalVariables.getMessageMap().putError(AMOUNT_PROPERTY_NAME,ERROR_BLANK_AMOUNT,"");
+            return false;   
+        }
+        else if (amount.isZero()) {
             GlobalVariables.getMessageMap().putError(AMOUNT_PROPERTY_NAME, ERROR_ZERO_AMOUNT, "an accounting line");
             return false;
         }
Index: work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetGlobalRule.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetGlobalRule.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/validation/impl/AssetGlobalRule.java	(working copy)
@@ -16,9 +16,11 @@
 package org.kuali.kfs.module.cam.document.validation.impl;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -59,6 +61,8 @@
 import org.kuali.rice.coreservice.framework.parameter.ParameterService;
 import org.kuali.rice.core.web.format.CurrencyFormatter;
 import org.kuali.rice.kns.document.MaintenanceDocument;
+import org.kuali.rice.kns.exception.ValidationException;
+import org.kuali.rice.kns.maintenance.Maintainable;
 import org.kuali.rice.kns.maintenance.rules.MaintenanceDocumentRuleBase;
 import org.kuali.rice.kns.service.DataDictionaryService;
 import org.kuali.rice.krad.bo.PersistableBusinessObject;
@@ -1176,7 +1180,75 @@
 
         return true;
     }
+    
+    
+    /**
+     * 
+     * @see org.kuali.rice.kns.maintenance.rules.MaintenanceDocumentRuleBase#dataDictionaryValidate(org.kuali.rice.kns.document.MaintenanceDocument)
+     * Override this method to only validate reference exists for asset separate , otherwise do default Existence Checks.
+     * KFSMI-6584
+     */
+    @Override
+    protected boolean dataDictionaryValidate(MaintenanceDocument document) {
+        
+        AssetGlobal assetGlobal = (AssetGlobal) document.getNewMaintainableObject().getBusinessObject();
+        LOG.debug("MaintenanceDocument validation beginning");
 
+        // explicitly put the errorPath that the dictionaryValidationService requires
+        GlobalVariables.getMessageMap().addToErrorPath("document.newMaintainableObject");
+
+        // document must have a newMaintainable object
+        Maintainable newMaintainable = document.getNewMaintainableObject();
+        if (newMaintainable == null) {
+            GlobalVariables.getMessageMap().removeFromErrorPath("document.newMaintainableObject");
+            throw new ValidationException("Maintainable object from Maintenance Document '" + document.getDocumentTitle() + "' is null, unable to proceed.");
+        }
+
+        // document's newMaintainable must contain an object (ie, not null)
+        PersistableBusinessObject businessObject = newMaintainable.getBusinessObject();
+        if (businessObject == null) {
+            GlobalVariables.getMessageMap().removeFromErrorPath("document.newMaintainableObject.");
+            throw new ValidationException("Maintainable's component business object is null.");
+        }
+
+        // run required check from maintenance data dictionary
+        maintDocDictionaryService.validateMaintenanceRequiredFields(document);
+
+        //check for duplicate entries in collections if necessary
+        maintDocDictionaryService.validateMaintainableCollectionsForDuplicateEntries(document);
+
+        // run the DD DictionaryValidation (non-recursive)
+        dictionaryValidationService.validateBusinessObjectOnMaintenanceDocument(businessObject,
+                document.getDocumentHeader().getWorkflowDocument().getDocumentType());
+
+        // do default (ie, mandatory) existence checks
+        if (!getAssetGlobalService().isAssetSeparate(assetGlobal)) {
+            dictionaryValidationService.validateDefaultExistenceChecks(businessObject);
+        }
+        else {
+            
+            Collection references = KNSServiceLocator.getMaintenanceDocumentDictionaryService().getDefaultExistenceChecks(businessObject.getClass());
+
+            // walk through the references, doing the tests on each
+            for (Iterator iter = references.iterator(); iter.hasNext();) {
+                ReferenceDefinition reference = (ReferenceDefinition) iter.next();
+                // do the existence and validation testing
+                dictionaryValidationService.validateReferenceExists(assetGlobal,reference );
+            }
+            
+        }
+
+        // do apc checks
+        dictionaryValidationService.validateApcRules(businessObject);
+
+
+        // explicitly remove the errorPath we've added
+        GlobalVariables.getMessageMap().removeFromErrorPath("document.newMaintainableObject");
+
+        LOG.debug("MaintenanceDocument validation ending");
+        return true;
+    }
+
     protected ParameterService getParameterService() {
         return SpringContext.getBean(ParameterService.class);
     }
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetMaintenanceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetMaintenanceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetMaintenanceDocument.xml	(working copy)
@@ -340,6 +340,7 @@
         <bean parent="MaintainableFieldDefinition" p:name="assetWarranty.warrantyBeginningDate" p:noLookup="true"/>
         <bean parent="MaintainableFieldDefinition" p:name="assetWarranty.warrantyEndingDate" p:noLookup="true"/>
         <bean parent="MaintainableFieldDefinition" p:name="assetWarranty.warrantyText" p:noLookup="true"/>
+        <bean parent="MaintainableFieldDefinition" p:name="assetWarranty.active" p:noLookup="true" />
       </list>
     </property>
   </bean>
@@ -365,6 +366,7 @@
               <bean parent="MaintainableFieldDefinition" p:name="repairSolutionDescription" p:readOnlyAfterAdd="true"/>
               <bean parent="MaintainableFieldDefinition" p:name="repairNoteText" p:readOnlyAfterAdd="true"/>
               <bean parent="MaintainableFieldDefinition" p:name="newCollectionRecord"/>
+              <bean parent="MaintainableFieldDefinition" p:name="active" />
             </list>
           </property>
         </bean>
@@ -406,6 +408,7 @@
               <bean parent="MaintainableFieldDefinition" p:name="componentWarrantyEndingDate" p:readOnlyAfterAdd="true"/>
               <bean parent="MaintainableFieldDefinition" p:name="componentWarrantyText" p:readOnlyAfterAdd="true"/>
               <bean parent="MaintainableFieldDefinition" p:name="newCollectionRecord"/>
+              <bean parent="MaintainableFieldDefinition" p:name="active"/>
             </list>
           </property>
         </bean>
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/EquipmentLoanOrReturnDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/EquipmentLoanOrReturnDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/EquipmentLoanOrReturnDocument.xml	(working copy)
@@ -18,6 +18,7 @@
   <bean id="EquipmentLoanOrReturnDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="ELR"/>
     <property name="documentClass" value="org.kuali.kfs.module.cam.document.EquipmentLoanOrReturnDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.cam.document.EquipmentLoanOrReturnDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.cam.document.validation.impl.EquipmentLoanOrReturnDocumentRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.cam.document.authorization.EquipmentLoanOrReturnDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetTransferDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetTransferDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetTransferDocument.xml	(working copy)
@@ -19,6 +19,7 @@
   <bean id="AssetTransferDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">  
     <property name="documentTypeName" value="AT"/>
     <property name="documentClass" value="org.kuali.kfs.module.cam.document.AssetTransferDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.cam.document.AssetTransferDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.cam.document.validation.impl.AssetTransferDocumentRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentAuthorizerBase"/>
     <property name="workflowAttributes">
@@ -128,9 +129,9 @@
     <property name="name" value="offCampusAddress"/>
     <property name="forceUppercase" value="true"/>
     <property name="label" value="Address"/>
-    <property name="maxLength" value="30"/>
+    <property name="maxLength" value="45"/>
     <property name="control">
-      <bean parent="TextControlDefinition" p:size="32"/>
+      <bean parent="TextControlDefinition" p:size="47"/>
     </property>
   </bean>
   <bean id="AssetTransferDocument-offCampusCityName" parent="AssetTransferDocument-offCampusCityName-parentBean"/>
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/BarcodeInventoryErrorDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/BarcodeInventoryErrorDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/BarcodeInventoryErrorDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="BarcodeInventoryErrorDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="BCIE"/>
     <property name="documentClass" value="org.kuali.kfs.module.cam.document.BarcodeInventoryErrorDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.cam.document.BarcodeInventoryErrorDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.cam.document.validation.impl.BarcodeInventoryErrorDocumentRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.cam.document.authorization.BarcodeInventoryErrorDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.cam.document.authorization.BarcodeInventoryErrorDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetGlobalMaintenanceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetGlobalMaintenanceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetGlobalMaintenanceDocument.xml	(working copy)
@@ -218,49 +218,52 @@
     <property name="title" value="Add Payments"/>
     <property name="maintainableItems">
       <list>      	
-        <bean parent="MaintainableCollectionDefinition">
-          <property name="name" value="assetPaymentDetails"/>
-          <property name="businessObjectClass" value="org.kuali.kfs.module.cam.businessobject.AssetPaymentDetail"/>
-          <property name="summaryTitle" value="Asset Payment"/>
-          <property name="summaryFields">
-            <list>
-              <bean parent="MaintainableFieldDefinition" p:name="sequenceNumber"/>
-            </list>
-          </property>
-          <property name="maintainableFields">
-            <list>
-              <bean parent="MaintainableFieldDefinition" p:name="sequenceNumber" p:unconditionallyReadOnly="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="chartOfAccountsCode" p:readOnlyAfterAdd="true" p:required="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="accountNumber" p:readOnlyAfterAdd="true" p:required="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="subAccountNumber" p:readOnlyAfterAdd="true"/>
+        <bean parent="AssetGlobalMaintenanceDocument-AddPayments-MaintainableCollectionDefinition"/>
+        <bean parent="MaintainableSubSectionHeaderDefinition" p:name="Total Payment Amount"/>
+        <bean parent="MaintainableFieldDefinition" p:name="totalAssetPaymentAmount" p:unconditionallyReadOnly="true"/>
+      </list>
+    </property>
+  </bean>
+
+  <bean id="AssetGlobalMaintenanceDocument-AddPayments-MaintainableCollectionDefinition" parent="AssetGlobalMaintenanceDocument-AddPayments-MaintainableCollectionDefinition-parentBean"/>
+  <bean id="AssetGlobalMaintenanceDocument-AddPayments-MaintainableCollectionDefinition-parentBean" abstract="true" parent="MaintainableCollectionDefinition">
+       <property name="name" value="assetPaymentDetails"/>
+       <property name="businessObjectClass" value="org.kuali.kfs.module.cam.businessobject.AssetPaymentDetail"/>
+       <property name="summaryTitle" value="Asset Payment"/>
+       <property name="summaryFields">
+         <list>
+           <bean parent="MaintainableFieldDefinition" p:name="sequenceNumber"/>
+         </list>
+       </property>
+       <property name="maintainableFields">
+         <list>
+           <bean parent="MaintainableFieldDefinition" p:name="sequenceNumber" p:unconditionallyReadOnly="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="chartOfAccountsCode" p:readOnlyAfterAdd="true" p:required="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="accountNumber" p:readOnlyAfterAdd="true" p:required="true" p:webUILeaveFieldFunction="onblur_accountNumber_pay"/>
+           <bean parent="MaintainableFieldDefinition" p:name="subAccountNumber" p:readOnlyAfterAdd="true"/>
               <!-- CSU 6702 BEGIN -->
               <bean parent="MaintainableFieldDefinition" p:readOnlyAfterAdd="true" p:name="financialObjectCode" p:required="true" p:overrideLookupClass="org.kuali.kfs.coa.businessobject.ObjectCode" p:overrideFieldConversions="chartOfAccountsCode:chartOfAccountsCode,financialObjectCode:financialObjectCode"/>
               <!-- bean parent="MaintainableFieldDefinition" p:name="financialObjectCode" p:readOnlyAfterAdd="true" p:required="true" p:overrideLookupClass="org.kuali.kfs.coa.businessobject.ObjectCode" p:overrideFieldConversions="chartOfAccountsCode:chartOfAccountsCode,financialObjectCode:financialObjectCode"/ -->
               <!-- CSU 6702 END -->              
-              <bean parent="MaintainableFieldDefinition" p:name="financialSubObjectCode" p:readOnlyAfterAdd="true" p:overrideLookupClass="org.kuali.kfs.coa.businessobject.SubObjectCode" p:overrideFieldConversions="financialSubObjectCode:financialSubObjectCode,chartOfAccountsCode:chartOfAccountsCode,accountNumber:accountNumber,financialObjectCode:financialObjectCode"/>
-              <bean parent="MaintainableFieldDefinition" p:name="projectCode" p:readOnlyAfterAdd="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="organizationReferenceId" p:readOnlyAfterAdd="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialSystemOriginationCode" p:readOnlyAfterAdd="true"/>                    
-              <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialDocumentNumber" p:readOnlyAfterAdd="true" p:required="false"/>
-              <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialDocumentTypeCode" p:readOnlyAfterAdd="true" p:required="false"/>
-              <bean parent="MaintainableFieldDefinition" p:name="purchaseOrderNumber" p:readOnlyAfterAdd="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="requisitionNumber" p:readOnlyAfterAdd="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="financialSubObjectCode" p:readOnlyAfterAdd="true" p:overrideLookupClass="org.kuali.kfs.coa.businessobject.SubObjectCode" p:overrideFieldConversions="financialSubObjectCode:financialSubObjectCode,chartOfAccountsCode:chartOfAccountsCode,accountNumber:accountNumber,financialObjectCode:financialObjectCode"/>
+           <bean parent="MaintainableFieldDefinition" p:name="projectCode" p:readOnlyAfterAdd="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="organizationReferenceId" p:readOnlyAfterAdd="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialSystemOriginationCode" p:readOnlyAfterAdd="true"/>                    
+           <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialDocumentNumber" p:readOnlyAfterAdd="true" p:required="false"/>
+           <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialDocumentTypeCode" p:overrideLookupClass="org.kuali.kfs.module.cam.businessobject.AssetPaymentDocumentType" p:overrideFieldConversions="expenditureFinancialDocumentTypeCode:expenditureFinancialDocumentTypeCode" p:readOnlyAfterAdd="true" p:required="false"/>
+           <bean parent="MaintainableFieldDefinition" p:name="purchaseOrderNumber" p:readOnlyAfterAdd="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="requisitionNumber" p:readOnlyAfterAdd="true"/>
               <!-- CSU 6702 BEGIN -->
               <bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialDocumentPostedDate" p:required="false" p:readOnlyAfterAdd="true"/>
               <bean parent="MaintainableFieldDefinition" p:name="postingYear" p:readOnlyAfterAdd="true" p:unconditionallyReadOnly="false"/>
               <!-- bean parent="MaintainableFieldDefinition" p:name="expenditureFinancialDocumentPostedDate" p:required="false" p:webUILeaveFieldFunction="onblur_postingYearAndPeriodCode" p:webUILeaveFieldCallbackFunction="postingYearAndPeriodCode_Callback" p:readOnlyAfterAdd="true"/ -->
               <!-- bean parent="MaintainableFieldDefinition" p:name="postingYear" p:unconditionallyReadOnly="true"/ -->
               <!-- CSU 6702 END -->
-              <bean parent="MaintainableFieldDefinition" p:name="postingPeriodCode" p:unconditionallyReadOnly="true" />
-              <bean parent="MaintainableFieldDefinition" p:name="amount" p:readOnlyAfterAdd="true" p:required="true"/>
-              <bean parent="MaintainableFieldDefinition" p:name="newCollectionRecord"/>
-            </list>
-          </property>
-        </bean>
-        <bean parent="MaintainableSubSectionHeaderDefinition" p:name="Total Payment Amount"/>
-        <bean parent="MaintainableFieldDefinition" p:name="totalAssetPaymentAmount" p:unconditionallyReadOnly="true"/>
-      </list>
-    </property>
+           <bean parent="MaintainableFieldDefinition" p:name="postingPeriodCode" p:unconditionallyReadOnly="true" />
+           <bean parent="MaintainableFieldDefinition" p:name="amount" p:readOnlyAfterAdd="true" p:required="true"/>
+           <bean parent="MaintainableFieldDefinition" p:name="newCollectionRecord"/>
+         </list>
+       </property>
   </bean>
 
   <bean id="AssetGlobalMaintenanceDocument-AssetInformation" parent="AssetGlobalMaintenanceDocument-AssetInformation-parentBean"/>
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetDepreciationDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetDepreciationDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetDepreciationDocument.xml	(working copy)
@@ -3,6 +3,7 @@
   <bean id="AssetDepreciationDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="DEPR"/>
     <property name="documentClass" value="org.kuali.kfs.module.cam.document.AssetDepreciationDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.cam.document.AssetDepreciationDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.cam.document.validation.impl.AssetDepreciationDocumentRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.AccountingDocumentAuthorizerBase"/>
     <property name="workflowAttributes">
Index: work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetPaymentDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetPaymentDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/datadictionary/AssetPaymentDocument.xml	(working copy)
@@ -18,6 +18,7 @@
   <bean id="AssetPaymentDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
     <property name="documentTypeName" value="MPAY"/>
     <property name="documentClass" value="org.kuali.kfs.module.cam.document.AssetPaymentDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.cam.document.AssetPaymentDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.module.cam.document.validation.impl.AssetPaymentDocumentPreRules"/>    
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.cam.document.authorization.AssetPaymentDocumentAuthorizer"/>
Index: work/src/org/kuali/kfs/module/cam/document/authorization/AssetPresentationController.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/authorization/AssetPresentationController.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/authorization/AssetPresentationController.java	(working copy)
@@ -21,6 +21,8 @@
 import org.kuali.kfs.module.cam.CamsConstants;
 import org.kuali.kfs.module.cam.CamsPropertyConstants;
 import org.kuali.kfs.module.cam.businessobject.Asset;
+import org.kuali.kfs.module.cam.businessobject.AssetComponent;
+import org.kuali.kfs.module.cam.businessobject.AssetRepairHistory;
 import org.kuali.kfs.module.cam.document.service.AssetService;
 import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.context.SpringContext;
@@ -55,6 +57,10 @@
 
         // Hide payment sequence numbers
         Asset asset = (Asset) document.getNewMaintainableObject().getBusinessObject();
+        hideInactiveAssetComponent(fields, asset);
+        hideInactiveAssetRepairHistory(fields, asset);
+        hideInactiveAssetWarranty(fields, asset);
+        
         int size = asset.getAssetPayments().size();
         for (int i = 0; i < size; i++) {
             fields.add(CamsPropertyConstants.Asset.ASSET_PAYMENTS + "[" + i + "]." + CamsPropertyConstants.AssetPayment.PAYMENT_SEQ_NUMBER);
@@ -213,4 +219,34 @@
         
         return actions;
     }
+    
+    private void hideInactiveAssetWarranty(Set<String> fields , Asset asset){
+        if(ObjectUtils.isNotNull(asset.getAssetWarranty())) {
+            if(!asset.getAssetWarranty().isActive()) {
+                fields.add(CamsPropertyConstants.Asset.ASSET_WARRANTY);
+            }
+        }
+    }
+    
+    private  void hideInactiveAssetComponent(Set<String> fields , Asset asset){
+      List<AssetComponent> components = asset.getAssetComponents();
+      int i=0;
+      for(AssetComponent component : components ) {
+          if(!component.isActive()) {
+              fields.add(CamsPropertyConstants.Asset.ASSET_COMPONENTS + "[" + i + "]");
+          }
+          i++;
+      }
+    }
+    
+    
+    private  void hideInactiveAssetRepairHistory(Set<String> fields , Asset asset) {
+        int i=0;
+        for(AssetRepairHistory assetRepairHistory : asset.getAssetRepairHistory()) {
+            if(!assetRepairHistory.isActive()) {
+                fields.add(CamsPropertyConstants.Asset.ASSET_REPAIR_HISTORY+ "[" + i + "]");
+            }
+           i++;
+        }
+    }
 }
Index: work/src/org/kuali/kfs/module/cam/document/authorization/AssetGlobalPresentationController.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/authorization/AssetGlobalPresentationController.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/authorization/AssetGlobalPresentationController.java	(working copy)
@@ -18,6 +18,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.module.cam.CamsConstants;
 import org.kuali.kfs.module.cam.CamsPropertyConstants;
 import org.kuali.kfs.module.cam.businessobject.AssetGlobal;
@@ -25,6 +26,7 @@
 import org.kuali.kfs.module.cam.businessobject.AssetPaymentDetail;
 import org.kuali.kfs.module.cam.document.service.AssetGlobalService;
 import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.LedgerPostingDocument;
 import org.kuali.kfs.sys.document.authorization.FinancialSystemMaintenanceDocumentPresentationControllerBase;
@@ -113,7 +115,13 @@
             // If asset global document is created from CAB, disallow add payment to collection.
             fields.addAll(getAssetGlobalPaymentsReadOnlyFields(assetGlobal));
         }
-
+        
+        // if accounts can't cross charts, then add the extra chartOfAccountsCode field to be displayed readOnly
+        if (!SpringContext.getBean(AccountService.class).accountsCanCrossCharts()) { 
+            String COA_CODE_NAME = KNSConstants.ADD_PREFIX + "." + CamsPropertyConstants.AssetGlobal.ASSET_PAYMENT_DETAILS + "." + KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE;
+            fields.add(COA_CODE_NAME);
+        }
+        
         return fields;
     }
 
Index: work/src/org/kuali/kfs/module/cam/document/service/impl/AssetPaymentServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/service/impl/AssetPaymentServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/service/impl/AssetPaymentServiceImpl.java	(working copy)
@@ -82,9 +82,10 @@
      * @see org.kuali.kfs.module.cam.document.service.AssetPaymentService#isPaymentFederalOwned(org.kuali.kfs.module.cam.businessobject.AssetPayment)
      */
     public boolean isPaymentFederalOwned(AssetPayment assetPayment) {
-        assetPayment.refreshReferenceObject(CamsPropertyConstants.AssetPayment.FINANCIAL_OBJECT);
-        if (ObjectUtils.isNotNull(assetPayment.getFinancialObject())) {
-            return this.getParameterService().getParameterValuesAsString(Asset.class, CamsConstants.Parameters.FEDERAL_OWNED_OBJECT_SUB_TYPES).contains(assetPayment.getFinancialObject().getFinancialObjectSubTypeCode());
+        assetPayment.refreshReferenceObject(CamsPropertyConstants.AssetPayment.OBJECT_CODE_CURRENT);
+        if (ObjectUtils.isNotNull(assetPayment.getObjectCodeCurrent())) {
+            String subTypeCode = assetPayment.getObjectCodeCurrent().getFinancialObjectSubTypeCode();
+            return this.getParameterService().getParameterValuesAsString(Asset.class, CamsConstants.Parameters.FEDERAL_OWNED_OBJECT_SUB_TYPES).contains(subTypeCode);
         }
         return false;
     }
@@ -142,7 +143,7 @@
         processPayments(document);
     }
 
-    
+
     /**
      * Creates a new asset payment record for each new asset payment detail record and then save them
      * 
Index: work/src/org/kuali/kfs/module/cam/document/service/impl/PaymentSummaryServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/service/impl/PaymentSummaryServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/service/impl/PaymentSummaryServiceImpl.java	(working copy)
@@ -93,26 +93,25 @@
 
     /**
      * @see org.kuali.kfs.module.cam.document.service.PaymentSummaryService#calculateFederalContribution(org.kuali.kfs.module.cam.businessobject.Asset)
-     */ 
+     */
     public KualiDecimal calculateFederalContribution(Asset asset) {
         KualiDecimal amount = new KualiDecimal(0);
         List<AssetPayment> assetPayments = asset.getAssetPayments();
 
         for (AssetPayment payment : assetPayments) {
             // Refresh the financial object
-            if (ObjectUtils.isNull(payment.getFinancialObject())) {
-                payment.refreshReferenceObject(CamsPropertyConstants.AssetPayment.FINANCIAL_OBJECT);
+            if (ObjectUtils.isNull(payment.getObjectCodeCurrent())) {
+                payment.refreshReferenceObject(CamsPropertyConstants.AssetPayment.OBJECT_CODE_CURRENT);
             }
-            Collection<String> fedContrTypes = new ArrayList<String>( parameterService.getParameterValuesAsString(Asset.class, CamsConstants.Parameters.FEDERAL_CONTRIBUTIONS_OBJECT_SUB_TYPES) );
-            if (!ObjectUtils.isNull(payment.getFinancialObject()) 
-                    && fedContrTypes.contains( payment.getFinancialObject().getFinancialObjectSubTypeCode())) {
+            Collection<String> fedContrTypes = parameterService.getParameterValuesAsString(Asset.class, CamsConstants.Parameters.FEDERAL_CONTRIBUTIONS_OBJECT_SUB_TYPES);
+            if (!ObjectUtils.isNull(payment.getObjectCodeCurrent()) 
+                    && fedContrTypes.contains( payment.getObjectCodeCurrent().getFinancialObjectSubTypeCode())) {
                 amount = addAmount(amount, payment.getAccountChargeAmount());
             }
         }
         return amount;
     }
 
-
     /**
      * Sums up total payment cost for an asset
      * 
Index: work/src/org/kuali/kfs/module/cam/document/AssetTransferDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/AssetTransferDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/AssetTransferDocument.java	(working copy)
@@ -24,6 +24,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.coa.businessobject.Account;
 import org.kuali.kfs.coa.businessobject.Chart;
+import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.fp.document.TransferOfFundsDocument;
 import org.kuali.kfs.integration.cam.CapitalAssetManagementModuleService;
 import org.kuali.kfs.module.cam.CamsConstants;
@@ -447,7 +448,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#postProcessSave(org.kuali.rice.krad.rule.event.KualiDocumentEvent)
+     * @see org.kuali.rice.kns.document.DocumentBase#postProcessSave(org.kuali.rice.kns.rule.event.KualiDocumentEvent)
      */
     
     public void postProcessSave(KualiDocumentEvent event) {
@@ -724,6 +725,15 @@
      */
     public void setOrganizationOwnerAccountNumber(String organizationOwnerAccountNumber) {
         this.organizationOwnerAccountNumber = organizationOwnerAccountNumber;
+        
+        // if accounts can't cross charts, set chart code whenever account number is set
+        AccountService accountService = SpringContext.getBean(AccountService.class);
+        if (!accountService.accountsCanCrossCharts()) {
+            Account account = accountService.getUniqueAccountForAccountNumber(organizationOwnerAccountNumber);
+            if (ObjectUtils.isNotNull(account)) {
+                setOrganizationOwnerChartOfAccountsCode(account.getChartOfAccountsCode());
+            }
+        }
     }
 
 
@@ -788,7 +798,7 @@
 
 
     /**
-     * @see org.kuali.rice.krad.bo.BusinessObjectBase#toStringMapper()
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
      */
     protected LinkedHashMap toStringMapper_RICE20_REFACTORME() {
         LinkedHashMap<String, String> m = new LinkedHashMap<String, String>();
Index: work/src/org/kuali/kfs/module/cam/document/AssetGlobalMaintainableImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cam/document/AssetGlobalMaintainableImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cam/document/AssetGlobalMaintainableImpl.java	(working copy)
@@ -23,7 +23,9 @@
 import java.util.Map;
 
 import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.coa.businessobject.Account;
 import org.kuali.kfs.coa.businessobject.ObjectCode;
+import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.coa.service.ObjectCodeService;
 import org.kuali.kfs.fp.document.BudgetAdjustmentDocument;
 import org.kuali.kfs.gl.GeneralLedgerConstants;
@@ -100,15 +102,14 @@
      */
     @Override
     protected boolean answerSplitNodeQuestion(String nodeName) throws UnsupportedOperationException {
-        if (REQUIRES_REVIEW.equals(nodeName))
-            return !isAccountAndOrganizationReviewRequired();
+        if (REQUIRES_REVIEW.equals(nodeName)) return !isAccountAndOrganizationReviewRequired();
         throw new UnsupportedOperationException("Cannot answer split question for this node you call \"" + nodeName + "\"");
     }
 
     /**
      * check whether or not isCapitalAssetBuilderOriginIndicator
      */
-    protected boolean isAccountAndOrganizationReviewRequired() {
+    protected boolean isAccountAndOrganizationReviewRequired(){
         return ((AssetGlobal) getBusinessObject()).isCapitalAssetBuilderOriginIndicator();
     }
 
@@ -584,10 +585,6 @@
         setAssetTotalAmountFromPersistence(assetGlobal);
     }
 
-   
-
-
-
     private void setAssetTotalAmountFromPersistence(AssetGlobal assetGlobal) {
         KualiDecimal minAssetTotalAmount = getAssetGlobalService().totalPaymentByAsset(assetGlobal, false);
         KualiDecimal maxAssetTotalAmount = getAssetGlobalService().totalPaymentByAsset(assetGlobal, true);
@@ -697,8 +694,8 @@
         }
     }
 
-    /**
-     * @see org.kuali.rice.kns.maintenance.KualiMaintainableImpl#doRouteStatusChange(org.kuali.rice.krad.bo.DocumentHeader)
+    /** 
+     * @see org.kuali.rice.kns.maintenance.KualiMaintainableImpl#doRouteStatusChange(org.kuali.rice.kns.bo.DocumentHeader)
      */
     @Override
     public void doRouteStatusChange(DocumentHeader documentHeader) {
@@ -731,7 +728,7 @@
             }
         }
 
-        // release lock for separate source asset...We don't include isFinal since document always go to 'processed' first.
+        // release lock for separate source asset...We don't include stateIsFinal since document always go to 'processed' first.
         AssetGlobalService assetGlobalService = SpringContext.getBean(AssetGlobalService.class);
         if (assetGlobalService.isAssetSeparate(assetGlobal) && (workflowDoc.isCanceled() || workflowDoc.isDisapproved() || workflowDoc.isProcessed())) {
             this.getCapitalAssetManagementModuleService().deleteAssetLocks(getDocumentNumber(), null);
@@ -771,8 +768,6 @@
         assetSharedDetail.setBuildingCode(asset.getBuildingCode());
         assetSharedDetail.setBuildingRoomNumber(asset.getBuildingRoomNumber());
     }
-    
-
     // CSU 6702 BEGIN
     /**
      * Checks for Accounting Period 13
@@ -848,4 +843,33 @@
         assetGlobal.setLastInventoryDate(getDateTimeService().getCurrentSqlDate());
     }
     // CSU 6702 END
+
+    /**
+     * @see org.kuali.kfs.sys.document.FinancialSystemMaintainable#populateChartOfAccountsCodeFields()
+     * 
+     * Special treatment is needed to populate the chart code from the account number field in AssetPaymentDetails, 
+     * as these fields aren't PKs of BO class in the collection.  
+     */
+    @Override
+    protected void populateChartOfAccountsCodeFields() {
+        super.populateChartOfAccountsCodeFields();
+              
+        AccountService acctService = SpringContext.getBean(AccountService.class);    
+        PersistableBusinessObject newAccount = getNewCollectionLine(CamsPropertyConstants.AssetGlobal.ASSET_PAYMENT_DETAILS);
+        String accountNumber = (String)ObjectUtils.getPropertyValue(newAccount, KFSPropertyConstants.ACCOUNT_NUMBER);
+        String coaCode = null;
+        
+        Account account = acctService.getUniqueAccountForAccountNumber(accountNumber);            
+        if (ObjectUtils.isNotNull(account)) {
+            coaCode = account.getChartOfAccountsCode();
+        }
+        
+        try {
+            ObjectUtils.setObjectProperty(newAccount, KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE, coaCode); 
+        }
+        catch (Exception e) {
+            LOG.error("Error in setting property value for " + KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE);
+        } 
+    }        
+
 }
Index: work/src/org/kuali/kfs/module/ar/batch/service/impl/LockboxServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/batch/service/impl/LockboxServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/batch/service/impl/LockboxServiceImpl.java	(working copy)
@@ -268,8 +268,10 @@
                     throw new RuntimeException("A Exception was thrown while trying to save the CashControl document.", e);
                 }
                 
-                //  write the detail and payapp lines to the report
-                routePayAppWithoutBusinessRules(payAppDocNumber, "CREATED & SAVED by Lockbox batch");
+                //write the detail and payapp lines to the report
+                
+                //KFSMI-6719
+                //routePayAppWithoutBusinessRules(payAppDocNumber, "CREATED & SAVED by Lockbox batch");
                 writeCashControlDetailLine(pdfdoc, detail.getFinancialDocumentLineAmount(), detail.getCustomerPaymentDescription());
                 writePayAppLine(pdfdoc, detail.getReferenceFinancialDocumentNumber(), "CREATED & SAVED");
                 writeSummaryDetailLine(pdfdoc, "INVOICE NUMBER NOT PARSEABLE");
Index: work/src/org/kuali/kfs/module/ar/businessobject/NonInvoiced.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/businessobject/NonInvoiced.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/businessobject/NonInvoiced.java	(working copy)
@@ -27,6 +27,7 @@
 import org.kuali.kfs.coa.businessobject.SubObjectCode;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
 import org.kuali.rice.krad.bo.PersistableBusinessObjectBase;
+import org.kuali.rice.kns.util.ObjectUtils;
 
 /**
  * @author Kuali Nervous System Team (kualidev@oncourse.iu.edu)
@@ -167,9 +168,17 @@
 	 */
 	public void setAccountNumber(String accountNumber) {
 		this.accountNumber = accountNumber;
+		
+        // if accounts can't cross charts, set chart code whenever account number is set
+        AccountService accountService = SpringContext.getBean(AccountService.class);
+        if (!accountService.accountsCanCrossCharts()) {
+            Account account = accountService.getUniqueAccountForAccountNumber(accountNumber);
+            if (ObjectUtils.isNotNull(account)) {
+                setChartOfAccountsCode(account.getChartOfAccountsCode());
+            }
+        }		
 	}
 
-
 	/**
 	 * Gets the subAccountNumber attribute.
 	 * 
Index: work/src/org/kuali/kfs/module/ar/businessobject/OrganizationOptions.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/businessobject/OrganizationOptions.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/businessobject/OrganizationOptions.java	(working copy)
@@ -20,6 +20,8 @@
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.coa.businessobject.Chart;
 import org.kuali.kfs.coa.businessobject.Organization;
+import org.kuali.kfs.module.ar.ArConstants;
+import org.kuali.kfs.module.ar.document.service.SystemInformationService;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.krad.bo.PersistableBusinessObjectBase;
 import org.kuali.rice.krad.util.ObjectUtils;
@@ -64,6 +66,12 @@
     private PostalCode orgRemitToZipCode;
     private PostalCode orgPostalCountryCode;
     
+    private transient SystemInformation systemInformationForAddress;
+    private transient SystemInformation systemInformationForAddressName;
+    protected static volatile ParameterService parameterService;
+    protected static volatile SystemInformationService systemInformationService;
+    protected static volatile UniversityDateService universityDateService;
+    
 
     /**
 	 * Default constructor.
@@ -225,7 +233,11 @@
 	 * 
 	 */
 	public String getOrganizationRemitToAddressName() { 
-		return organizationRemitToAddressName;
+	    final SystemInformation systemInfo = getSystemInformationForRemitToAddressName();
+	    if(systemInfo != null) {
+	        return systemInfo.getOrganizationRemitToAddressName();
+	    }
+	    return organizationRemitToAddressName;
 	}
 
 	/**
@@ -246,7 +258,11 @@
 	 * 
 	 */
 	public String getOrganizationRemitToLine1StreetAddress() { 
-		return organizationRemitToLine1StreetAddress;
+	    final SystemInformation systemInfo = getSystemInformationForRemitToAddress();
+        if(systemInfo != null) {
+            return systemInfo.getOrganizationRemitToLine1StreetAddress();
+        } 
+        return organizationRemitToLine1StreetAddress;
 	}
 
 	/**
@@ -267,7 +283,11 @@
 	 * 
 	 */
 	public String getOrganizationRemitToLine2StreetAddress() { 
-		return organizationRemitToLine2StreetAddress;
+	    final SystemInformation systemInfo = getSystemInformationForRemitToAddress();
+        if(systemInfo != null) {
+            return systemInfo.getOrganizationRemitToLine2StreetAddress();
+        } 
+        return organizationRemitToLine2StreetAddress;
 	}
 
 	/**
@@ -288,6 +308,10 @@
 	 * 
 	 */
 	public String getOrganizationRemitToCityName() { 
+	    final SystemInformation systemInfo = getSystemInformationForRemitToAddress();
+        if(systemInfo != null) {
+            return systemInfo.getOrganizationRemitToCityName();
+        }
 		return organizationRemitToCityName;
 	}
 
@@ -309,6 +333,10 @@
 	 * 
 	 */
 	public String getOrganizationRemitToStateCode() { 
+	    final SystemInformation systemInfo = getSystemInformationForRemitToAddress();
+        if(systemInfo != null) {
+            return systemInfo.getOrganizationRemitToStateCode();
+        }
 		return organizationRemitToStateCode;
 	}
 
@@ -330,6 +358,10 @@
 	 * 
 	 */
 	public String getOrganizationRemitToZipCode() { 
+        final SystemInformation systemInfo = getSystemInformationForRemitToAddress();
+        if(systemInfo != null) {
+            return systemInfo.getOrganizationRemitToZipCode();
+        }
 		return organizationRemitToZipCode;
 	}
 
@@ -434,6 +466,10 @@
 	 * 
 	 */
 	public String getOrganizationCheckPayableToName() { 
+	    final SystemInformation systemInfo = getSystemInformationForRemitToAddress();
+        if(systemInfo != null) {
+            return systemInfo.getOrganizationCheckPayableToName();
+        }
 		return organizationCheckPayableToName;
 	}
 
@@ -627,6 +663,79 @@
 
     public void setOrgPostalCountryCode(PostalCode orgPostalCountryCode) {
         this.orgPostalCountryCode = orgPostalCountryCode;
-    }    
+    }
+    
+    /**
+     * @return the related SystemInformation object with the address to use as remit to address, if the remit to address is not editable on this OrganizationOptions business object
+     */
+    protected SystemInformation getSystemInformationForRemitToAddress() {
+        if (!isRemitToAddressEditable()) {
+            if (systemInformationForAddressName == null) {
+                final Integer currentFiscalYear = getUniversityDateService().getCurrentFiscalYear();
+                systemInformationForAddressName = getSystemInformationService()
+                    .getByProcessingChartOrgAndFiscalYear(processingChartOfAccountCode, processingOrganizationCode, currentFiscalYear);
+            }
+            return systemInformationForAddressName;
+        }
+        return null;
+    }
+    
+    /**
+     * @return the related SystemInformation object with the address to use as remit to address name, if the remit to address name is not editable on this OrganizationOptions business object
+     */
+    protected SystemInformation getSystemInformationForRemitToAddressName() {
+        if (!isRemitToAddressNameEditable()) {
+            if (systemInformationForAddress == null) {
+                final Integer currentFiscalYear = getUniversityDateService().getCurrentFiscalYear();
+                systemInformationForAddress = getSystemInformationService()
+                    .getByProcessingChartOrgAndFiscalYear(processingChartOfAccountCode, processingOrganizationCode, currentFiscalYear);
+            }
+            return systemInformationForAddress;
+        }
+        return null;
+    }
+    
+    /**
+     * @return true if the name for the remit to address is editable, false otherwise
+     */
+    protected boolean isRemitToAddressNameEditable() {
+        return getParameterService().getIndicatorParameter(OrganizationOptions.class, ArConstants.REMIT_TO_NAME_EDITABLE_IND);
+    }
+    
+    /**
+     * @return true if the remit to address is editable, false otherwise
+     */
+    protected boolean isRemitToAddressEditable() {
+        return getParameterService().getIndicatorParameter(OrganizationOptions.class, ArConstants.REMIT_TO_ADDRESS_EDITABLE_IND);
+    }
+    
+    /**
+     * @return the default implementation of the ParameterService
+     */
+    protected ParameterService getParameterService() {
+        if (parameterService == null) {
+            parameterService = SpringContext.getBean(ParameterService.class);
+        }
+        return parameterService;
+    }
 
+    /**
+     * @return the default implementation of the SystemInformationService
+     */
+    protected SystemInformationService getSystemInformationService() {
+        if (systemInformationService == null) {
+            systemInformationService = SpringContext.getBean(SystemInformationService.class);
+        }
+        return systemInformationService;
+    }
+    
+    /**
+     * @return the default implementation of the UniversityDateService
+     */
+    protected UniversityDateService getUniversityDateService() {
+        if (universityDateService == null) {
+            universityDateService = SpringContext.getBean(UniversityDateService.class);
+        }
+        return universityDateService;
+    }
 }
Index: work/src/org/kuali/kfs/module/ar/document/PaymentApplicationDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/PaymentApplicationDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/PaymentApplicationDocument.java	(working copy)
@@ -862,12 +862,8 @@
             else {
                 offsetDebitEntry.setSubAccountNumber(ipa.getInvoiceDetail().getSubAccountNumber());
             }
-            if (StringUtils.isBlank(ipa.getInvoiceDetail().getFinancialSubObjectCode())) {
-                offsetDebitEntry.setFinancialSubObjectCode(KFSConstants.getDashFinancialSubObjectCode());
-            }
-            else {
-                offsetDebitEntry.setFinancialSubObjectCode(ipa.getInvoiceDetail().getFinancialSubObjectCode());
-            }
+            
+            offsetDebitEntry.setFinancialSubObjectCode(KFSConstants.getDashFinancialSubObjectCode());
             if (StringUtils.isBlank(ipa.getInvoiceDetail().getProjectCode())) {
                 offsetDebitEntry.setProjectCode(KFSConstants.getDashProjectCode());
             }
@@ -889,7 +885,13 @@
             offsetCreditEntry.setFinancialObjectTypeCode(accountsReceivableObjectCode.getFinancialObjectTypeCode());
             offsetCreditEntry.setFinancialBalanceTypeCode(KFSConstants.BALANCE_TYPE_ACTUAL);
             offsetCreditEntry.setFinancialDocumentTypeCode(ArConstants.PAYMENT_APPLICATION_DOCUMENT_TYPE_CODE);
-            offsetCreditEntry.setSubAccountNumber(KFSConstants.getDashSubAccountNumber());
+            if (StringUtils.isBlank(ipa.getInvoiceDetail().getSubAccountNumber())) {
+                offsetCreditEntry.setSubAccountNumber(KFSConstants.getDashSubAccountNumber());
+            }
+            else {
+                offsetCreditEntry.setSubAccountNumber(ipa.getInvoiceDetail().getSubAccountNumber());
+            }
+            
             offsetCreditEntry.setFinancialSubObjectCode(KFSConstants.getDashFinancialSubObjectCode());
             offsetCreditEntry.setProjectCode(KFSConstants.getDashProjectCode());
             offsetCreditEntry.refreshNonUpdateableReferences();
Index: work/src/org/kuali/kfs/module/ar/document/CustomerInvoiceDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/CustomerInvoiceDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/CustomerInvoiceDocument.java	(working copy)
@@ -518,7 +518,16 @@
      * @param paymentAccountNumber The paymentAccountNumber to set.
      */
     public void setPaymentAccountNumber(String paymentAccountNumber) {
-        this.paymentAccountNumber = paymentAccountNumber;
+        this.paymentAccountNumber = paymentAccountNumber;
+        
+        // if accounts can't cross charts, set chart code whenever account number is set
+        AccountService accountService = SpringContext.getBean(AccountService.class);
+        if (!accountService.accountsCanCrossCharts()) {
+            Account account = accountService.getUniqueAccountForAccountNumber(paymentAccountNumber);
+            if (ObjectUtils.isNotNull(account)) {
+                setPaymentChartOfAccountsCode(account.getChartOfAccountsCode());
+            }
+        }           
     }
 
     /**
Index: work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerInvoiceWriteoffDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerInvoiceWriteoffDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerInvoiceWriteoffDocument.xml	(working copy)
@@ -7,6 +7,7 @@
     
     <property name="documentTypeName" value="INVW"/>
     <property name="documentClass" value="org.kuali.kfs.module.ar.document.CustomerInvoiceWriteoffDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ar.document.CustomerInvoiceWriteoffDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.ar.document.validation.impl.CustomerInvoiceWriteoffDocumentRule"/>
 <!-- the following businessRuleClass should be used for granular validations, if implemented
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase" />
Index: work/src/org/kuali/kfs/module/ar/document/datadictionary/PaymentApplicationDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/datadictionary/PaymentApplicationDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/datadictionary/PaymentApplicationDocument.xml	(working copy)
@@ -7,6 +7,7 @@
 		
 		<property name="documentTypeName" value="APP"/>
 		<property name="documentClass" value="org.kuali.kfs.module.ar.document.PaymentApplicationDocument"/>
+		<property name="baseDocumentClass" value="org.kuali.kfs.module.ar.document.PaymentApplicationDocument"/>
 		<property name="businessRulesClass" value="org.kuali.kfs.module.ar.document.validation.impl.PaymentApplicationDocumentRule"/>
 <!-- Uncommenting this line will move to the accounting line validation framework. To enable it comment out the line above and uncomment this line. -->
 <!-- 
Index: work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerCreditMemoDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerCreditMemoDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerCreditMemoDocument.xml	(working copy)
@@ -8,6 +8,7 @@
     
     <property name="documentTypeName" value="CRM"/>
     <property name="documentClass" value="org.kuali.kfs.module.ar.document.CustomerCreditMemoDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ar.document.CustomerCreditMemoDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.ar.document.validation.impl.CustomerCreditMemoDocumentRule"/>
 <!-- the following businessRuleClass should be used for granular validations, if implemented
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase" />
@@ -108,6 +109,7 @@
     	<property name="routingTypeDefinitions">
     		<map>
     			<entry key="Account" value-ref="RoutingType-CustomerCreditMemoDocument-Account-sourceOnly"/>
+    			<entry key="AccountingOrganizationHierarchy" value-ref="RoutingType-CustomerCreditMemoDocument-OrganizationHierarchy-sourceOnly"/>
     		</map>
     	</property>
 	</bean>  
@@ -137,9 +139,39 @@
 	</bean>
 
     <bean id="RoutingAttribute-CustomerCreditMemoDocument-crmTotalAmount" class="org.kuali.rice.krad.datadictionary.RoutingAttribute">
-   		<property name="qualificationAttributeName" value="crmTotalAmount"/>
+   		<property name="qualificationAttributeName" value="financialDocumentTotalAmount"/>
     </bean>
     
+    <bean id="RoutingType-CustomerCreditMemoDocument-OrganizationHierarchy-sourceOnly" parent="RoutingType-CustomerCreditMemoDocument-OrganizationHierarchy-sourceOnly-parentBean"/>
+    <bean id="RoutingType-CustomerCreditMemoDocument-OrganizationHierarchy-sourceOnly-parentBean" class="org.kuali.rice.kns.datadictionary.RoutingTypeDefinition">
+    	<property name="routingAttributes">
+    		<list>
+    			<ref bean="RoutingAttribute-CustomerCreditMemoDocument-crmTotalAmount"/>
+		        <ref bean="RoutingAttribute-chartOfAccountsCode"/>
+				<ref bean="RoutingAttribute-organizationCode" />
+		        <ref bean="RoutingAttribute-overrideCode" />
+    		</list>
+    	</property>
+    	<property name="documentValuePathGroups">
+    		<list>
+    			<ref bean="DocumentValuePathGroup-CustomerCreditMemoDocument-OrganizationHierarchy-sourceAccountingLines"/>
+    		</list>
+    	</property>
+    </bean>
+    
+    <bean id="DocumentValuePathGroup-CustomerCreditMemoDocument-OrganizationHierarchy-sourceAccountingLines" class="org.kuali.rice.kns.datadictionary.DocumentValuePathGroup">
+    	<property name="documentValues">
+    		<list>
+    			<value>documentHeader.financialDocumentTotalAmount</value>
+    		</list>
+    	</property>
+		<property name="documentCollectionPath">
+			<bean parent="DocumentCollectionPath-AccountingLine-chartOrganizationAndOverrideCode">
+				<property name="collectionPath" value="invoice.sourceAccountingLines"/>
+			</bean>
+		</property>
+	</bean>
+    
 <!-- Granular Validations -->
   <bean id="CustomerCreditMemoDocument-validations" parent="CustomerCreditMemoDocument-validations-parentBean"/>  
   <bean id="CustomerCreditMemoDocument-validations-parentBean" abstract="true"  class="org.springframework.beans.factory.config.MapFactoryBean">
Index: work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerInvoiceDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerInvoiceDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/datadictionary/CustomerInvoiceDocument.xml	(working copy)
@@ -23,6 +23,7 @@
     
     <property name="documentTypeName" value="INV"/>
     <property name="documentClass" value="org.kuali.kfs.module.ar.document.CustomerInvoiceDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ar.document.CustomerInvoiceDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.module.ar.document.validation.impl.CustomerInvoiceDocumentPreRules"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.ar.document.authorization.CustomerInvoiceDocumentAuthorizer"/>
Index: work/src/org/kuali/kfs/module/ar/document/datadictionary/CashControlDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/datadictionary/CashControlDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/datadictionary/CashControlDocument.xml	(working copy)
@@ -7,6 +7,7 @@
     
     <property name="documentTypeName" value="CTRL"/>
     <property name="documentClass" value="org.kuali.kfs.module.ar.document.CashControlDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ar.document.CashControlDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.ar.document.validation.impl.CashControlDocumentRule"/>
 <!-- the following businessRuleClass should be used for granular validations, if implemented
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase" />
Index: work/src/org/kuali/kfs/module/ar/document/service/impl/CustomerInvoiceDocumentServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/service/impl/CustomerInvoiceDocumentServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/service/impl/CustomerInvoiceDocumentServiceImpl.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2008 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -409,7 +409,7 @@
         // This isnt as performant a solution as the other getPrintableCustomerInvoiceBy...
         // methods, but its the best we can do in this release, and it should be manageable.
 
-        //
+        // 
         // attempt to retrieve the initiator person specified, and puke if not found
         Person initiator = getPersonService().getPersonByPrincipalName(initiatorPrincipalName);
         if (initiator == null) {
@@ -479,6 +479,7 @@
      */
     @Override
     public List<CustomerInvoiceDocument> getPrintableCustomerInvoiceDocumentsByProcessingChartAndOrg(String chartOfAccountsCode, String organizationCode) {
+
         List<String> documentHeaderIds = customerInvoiceDocumentDao.getPrintableCustomerInvoiceDocumentNumbersByProcessingChartAndOrg(chartOfAccountsCode, organizationCode);
 
         return getCustomerInvoiceDocumentsByDocumentNumbers(documentHeaderIds);
@@ -503,6 +504,7 @@
      */
     @Override
     public List<CustomerInvoiceDocument> getCustomerInvoiceDocumentsByProcessingChartAndOrg(String chartOfAccountsCode, String organizationCode) {
+
         List<String> documentHeaderIds = customerInvoiceDocumentDao.getCustomerInvoiceDocumentNumbersByProcessingChartAndOrg(chartOfAccountsCode, organizationCode);
 
         return getCustomerInvoiceDocumentsByDocumentNumbers(documentHeaderIds);
@@ -510,7 +512,7 @@
 
     /**
      * Refactor to have all the setters in here.
-     *
+     * 
      * @see org.kuali.kfs.module.ar.document.service.CustomerInvoiceDocumentService#setupDefaultValuesForNewCustomerInvoiceDocument(org.kuali.kfs.module.ar.document.CustomerInvoiceDocument)
      */
     @Override
@@ -671,7 +673,7 @@
 
     /**
      * This method sets due date equal to todays date +30 days by default
-     *
+     * 
      * @param dateTimeService
      */
     protected Date getDefaultInvoiceDueDate() {
Index: work/src/org/kuali/kfs/module/ar/document/authorization/CustomerInvoiceDocumentPresentationController.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/authorization/CustomerInvoiceDocumentPresentationController.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/authorization/CustomerInvoiceDocumentPresentationController.java	(working copy)
@@ -24,6 +24,8 @@
 import org.kuali.kfs.module.ar.businessobject.CustomerInvoiceDetail;
 import org.kuali.kfs.module.ar.document.CustomerInvoiceDocument;
 import org.kuali.kfs.module.ar.document.service.InvoicePaidAppliedService;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KfsAuthorizationConstants;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.FinancialSystemTransactionalDocument;
 import org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentPresentationControllerBase;
@@ -34,9 +36,26 @@
 
 public class CustomerInvoiceDocumentPresentationController extends FinancialSystemTransactionalDocumentPresentationControllerBase {
 
+
     @Override
+   public Set<String> getDocumentActions(Document document) {
+
+        Set<String> documentActions = super.getDocumentActions(document); 
+        if (isDocErrorCorrectionMode((FinancialSystemTransactionalDocument) document)) {
+            documentActions.remove(KNSConstants.KUALI_ACTION_CAN_EDIT);
+        }
+
+        return documentActions;
+    }
+
+    @Override
     public Set<String> getEditModes(Document document) {
         Set<String> editModes = super.getEditModes(document);
+
+        if (!isDocErrorCorrectionMode((FinancialSystemTransactionalDocument) document)) {
+            editModes.add(KfsAuthorizationConstants.CustomerInvoiceEditMode.PROCESSING_ORGANIZATION_MODE);
+            
+        }
         
         ParameterService paramService = SpringContext.getBean(ParameterService.class);
         String receivableOffsetOption = paramService.getParameterValueAsString(CustomerInvoiceDocument.class, ArConstants.GLPE_RECEIVABLE_OFFSET_GENERATION_METHOD);
@@ -54,14 +73,14 @@
                 editModes.remove(ArAuthorizationConstants.CustomerInvoiceDocumentEditMode.DISPLAY_PRINT_BUTTON);
             }
         }
-        
+
         if (ObjectUtils.isNotNull(workflowDocument) && workflowDocument.isEnroute()) {
             editModes.add(ArPropertyConstants.CustomerInvoiceDocumentFields.INVOICE_ITEM_DESCRIPTION);
         }
-        
+
         return editModes;
     }    
-    
+
     @Override
     public boolean canCopy(Document document) {
         boolean copyable = true;
@@ -70,7 +89,7 @@
         // Confirm doc is in a saved and copyable state.
         copyable &= !ciDoc.getDocumentHeader().getWorkflowDocument().isInitiated(); 
         copyable &= !ciDoc.getDocumentHeader().getWorkflowDocument().isCanceled();
-        
+
         // Confirm doc is reversible.
         copyable &= !((CustomerInvoiceDocument)document).isInvoiceReversal();
         return copyable;
@@ -82,7 +101,7 @@
         if (StringUtils.isNotBlank(document.getFinancialSystemDocumentHeader().getCorrectedByDocumentId())) {
             return false;
         }
-        
+
         if(((CustomerInvoiceDocument)document).isInvoiceReversal()){
             return false;
         } else {
@@ -91,15 +110,31 @@
             return isDocFinalWithNoAppliedAmountsExceptDiscounts((CustomerInvoiceDocument) document);
         }
     }
-    
+
     //  if this isnt self-explanatory, I dont know what is
     protected boolean isDocFinalWithNoAppliedAmountsExceptDiscounts(CustomerInvoiceDocument document) {
         boolean isFinal = document.getDocumentHeader().getWorkflowDocument().isFinal();
-        
+
         InvoicePaidAppliedService<CustomerInvoiceDetail> paidAppliedService = SpringContext.getBean(InvoicePaidAppliedService.class);
         boolean hasAppliedAmountsExcludingDiscounts = paidAppliedService.doesInvoiceHaveAppliedAmounts(document);
-        
+
         return isFinal && !hasAppliedAmountsExcludingDiscounts;
     }
     
+    protected boolean isDocErrorCorrectionMode(FinancialSystemTransactionalDocument document) {
+        
+        // check if this document has been error corrected
+        if (StringUtils.isNotBlank(document.getDocumentHeader().getCorrectedByDocumentId())) {
+            return true;
+        }
+
+        if(((CustomerInvoiceDocument)document).isInvoiceReversal()){
+            return true;
+        } else {
+            // a normal invoice can only be error corrected if document is in a final state 
+            // and no amounts have been applied (excluding discounts)
+            return isDocFinalWithNoAppliedAmountsExceptDiscounts((CustomerInvoiceDocument) document);
+        }
+    }
+
 }
Index: work/src/org/kuali/kfs/module/ar/document/authorization/PaymentApplicationDocumentAuthorizer.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/authorization/PaymentApplicationDocumentAuthorizer.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/authorization/PaymentApplicationDocumentAuthorizer.java	(working copy)
@@ -15,9 +15,45 @@
  */
 package org.kuali.kfs.module.ar.document.authorization;
 
+import java.util.Map;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.module.ar.businessobject.AccountsReceivableDocumentHeader;
+import org.kuali.kfs.module.ar.document.PaymentApplicationDocument;
 import org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentAuthorizerBase;
+import org.kuali.kfs.sys.identity.KfsKimAttributes;
+import org.kuali.rice.kns.bo.BusinessObject;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
 
+/**
+ * Document Authorizer for the Payment Application Document
+ */
 public class PaymentApplicationDocumentAuthorizer extends FinancialSystemTransactionalDocumentAuthorizerBase {
 
+    /**
+     * Adding the role qualifications for the processing chart and organization
+     * @see org.kuali.rice.kns.document.authorization.DocumentAuthorizerBase#addRoleQualification(org.kuali.rice.kns.bo.BusinessObject, java.util.Map)
+     */
+    @Override
+    protected void addRoleQualification(BusinessObject businessObject, Map<String, String> attributes) {
+        super.addRoleQualification(businessObject, attributes);
+        if (businessObject != null && businessObject instanceof PaymentApplicationDocument) {
+            final PaymentApplicationDocument document = (PaymentApplicationDocument)businessObject;
+            final KualiWorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
+            if (workflowDocument.stateIsInitiated() || workflowDocument.stateIsSaved()) { // only add processing chart and org if we're PreRoute
+                final AccountsReceivableDocumentHeader arDocumentHeader = document.getAccountsReceivableDocumentHeader();
+                if (!ObjectUtils.isNull(arDocumentHeader)) {
+                    if (!StringUtils.isBlank(arDocumentHeader.getProcessingChartOfAccCodeAndOrgCode())) {
+                        attributes.put(KfsKimAttributes.CHART_OF_ACCOUNTS_CODE, arDocumentHeader.getProcessingChartOfAccountCode());
+                    }
+                    if (!StringUtils.isBlank(arDocumentHeader.getProcessingOrganizationCode())) {
+                        attributes.put(KfsKimAttributes.ORGANIZATION_CODE, arDocumentHeader.getProcessingOrganizationCode());
+                    }
+                }
+            }
+        }
+    }
+
 }
 
Index: work/src/org/kuali/kfs/module/ar/document/web/struts/PaymentApplicationDocumentAction.java
===================================================================
--- work/src/org/kuali/kfs/module/ar/document/web/struts/PaymentApplicationDocumentAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ar/document/web/struts/PaymentApplicationDocumentAction.java	(working copy)
@@ -530,16 +530,18 @@
 
         // validate the customer number in the unapplied
         if (StringUtils.isNotBlank(customerNumber)) {
-            // force customer number to upper
-            payAppForm.setNonAppliedHoldingCustomerNumber(customerNumber.toUpperCase());
 
             Map<String, String> pkMap = new HashMap<String, String>();
-            pkMap.put(ArPropertyConstants.CustomerFields.CUSTOMER_NUMBER, customerNumber);
+            pkMap.put(ArPropertyConstants.CustomerFields.CUSTOMER_NUMBER, customerNumber.toUpperCase());
             int found = businessObjectService.countMatching(Customer.class, pkMap);
             if (found == 0) {
                 addFieldError(KFSConstants.PaymentApplicationTabErrorCodes.UNAPPLIED_TAB, ArPropertyConstants.PaymentApplicationDocumentFields.UNAPPLIED_CUSTOMER_NUMBER, ArKeyConstants.PaymentApplicationDocumentErrors.ENTERED_INVOICE_CUSTOMER_NUMBER_INVALID);
                 return null;
             }
+            
+            // force customer number to upper
+            payAppForm.setNonAppliedHoldingCustomerNumber(customerNumber.toUpperCase());
+
         }
 
         // validate the amount in the unapplied
Index: work/src/org/kuali/kfs/module/bc/batch/service/impl/BudgetConstructionHumanResourcesPayrollInterfaceServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/batch/service/impl/BudgetConstructionHumanResourcesPayrollInterfaceServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/batch/service/impl/BudgetConstructionHumanResourcesPayrollInterfaceServiceImpl.java	(working copy)
@@ -22,7 +22,7 @@
 @Transactional
 public class BudgetConstructionHumanResourcesPayrollInterfaceServiceImpl implements BudgetConstructionHumanResourcesPayrollInterfaceService {
 
-    private BudgetConstructionHumanResourcesPayrollInterfaceDao budgetConstructionHumanResourcesPayrollInterfaceDao;
+    protected BudgetConstructionHumanResourcesPayrollInterfaceDao budgetConstructionHumanResourcesPayrollInterfaceDao;
     
     
     /**
Index: work/src/org/kuali/kfs/module/bc/batch/service/impl/GenesisServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/batch/service/impl/GenesisServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/batch/service/impl/GenesisServiceImpl.java	(working copy)
@@ -30,8 +30,8 @@
 
     /* settings for common fields for all document headers for budget construction */
 
-    private GenesisDao genesisDao;
-    private BudgetConstructionHumanResourcesPayrollInterfaceService budgetConstructionHumanResourcesPayrollInterfaceService;
+    protected GenesisDao genesisDao;
+    protected BudgetConstructionHumanResourcesPayrollInterfaceService budgetConstructionHumanResourcesPayrollInterfaceService;
 
     private static Logger LOG = org.apache.log4j.Logger.getLogger(GenesisServiceImpl.class);
 
Index: work/src/org/kuali/kfs/module/bc/batch/dataaccess/impl/GenesisDaoOjb.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/batch/dataaccess/impl/GenesisDaoOjb.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/batch/dataaccess/impl/GenesisDaoOjb.java	(working copy)
@@ -590,9 +590,9 @@
      *  document tables and set all the dates to final and save the initial "action taken") will give acceptable performance.  
      */
 
-    private HashSet<String> currentBCHeaderKeys = new HashSet<String>(1);
+    protected HashSet<String> currentBCHeaderKeys = new HashSet<String>(1);
     // these routines are used to merge CSF and CSF Override
-    private HashMap<String, String[]> CSFTrackerKeys = new HashMap<String, String[]>(1);
+    protected HashMap<String, String[]> CSFTrackerKeys = new HashMap<String, String[]>(1);
 
     protected void createNewDocumentsCleanUp() {
         currentBCHeaderKeys.clear();
@@ -600,14 +600,14 @@
     }
 
     // counters
-    Long documentsToCreateinNTS = new Long(0);
-    Long documentsSkippedinNTS = new Long(0);
-    Long documentsCreatedinNTS = new Long(0);
-    Long documentsCSFCreatedinNTS = new Long(0);
-    Long documentsGLCreatedinNTS = new Long(0);
+    protected Long documentsToCreateinNTS = new Long(0);
+    protected Long documentsSkippedinNTS = new Long(0);
+    protected Long documentsCreatedinNTS = new Long(0);
+    protected Long documentsCSFCreatedinNTS = new Long(0);
+    protected Long documentsGLCreatedinNTS = new Long(0);
 
-    Long proxyCandidatesReadinTS = new Long(0);
-    Long proxyBCHeadersCreatedinTS = new Long(0);
+    protected Long proxyCandidatesReadinTS = new Long(0);
+    protected Long proxyBCHeadersCreatedinTS = new Long(0);
 
     //
     // this is the new document creation mechanism that works with embedded workflow
@@ -987,9 +987,9 @@
      *  *********************************************************************************    
      */
 
-    private HashMap<String, BudgetConstructionAccountReports> acctRptsToMap = new HashMap<String, BudgetConstructionAccountReports>(1);
-    private HashMap<String, BudgetConstructionOrganizationReports> orgRptsToMap = new HashMap<String, BudgetConstructionOrganizationReports>(1);
-    private HashMap<String, BudgetConstructionAccountOrganizationHierarchy> acctOrgHierMap = new HashMap<String, BudgetConstructionAccountOrganizationHierarchy>(1);
+    protected HashMap<String, BudgetConstructionAccountReports> acctRptsToMap = new HashMap<String, BudgetConstructionAccountReports>(1);
+    protected HashMap<String, BudgetConstructionOrganizationReports> orgRptsToMap = new HashMap<String, BudgetConstructionOrganizationReports>(1);
+    protected HashMap<String, BudgetConstructionAccountOrganizationHierarchy> acctOrgHierMap = new HashMap<String, BudgetConstructionAccountOrganizationHierarchy>(1);
 
     protected void organizationHierarchyCleanUp() {
         acctRptsToMap.clear();
@@ -1001,11 +1001,11 @@
     //  these are the values at the root of the organization tree
     //  they report to themselves, and they are at the highest level of every 
     //  organization's reporting chain
-    private String rootChart;
-    private String rootOrganization;
+    protected String rootChart;
+    protected String rootOrganization;
 
-    private Integer nHeadersBackToZero = 0;
-    private Integer nHeadersSwitchingLevels = 0;
+    protected Integer nHeadersBackToZero = 0;
+    protected Integer nHeadersSwitchingLevels = 0;
 
 
     /*
@@ -1334,9 +1334,9 @@
     //   saved to the pending budget construction general ledger
     // --bCHdrFromGL contains one entry for each potentially new key for the budget
     //   construction header table.
-    private HashMap<String, PendingBudgetConstructionGeneralLedger> pBGLFromGL = new HashMap<String, PendingBudgetConstructionGeneralLedger>(1);
-    private HashMap<String, String> documentNumberFromBCHdr = new HashMap<String, String>(1);
-    private HashMap<String, Integer> skippedPBGLKeys = new HashMap();
+    protected HashMap<String, PendingBudgetConstructionGeneralLedger> pBGLFromGL = new HashMap<String, PendingBudgetConstructionGeneralLedger>(1);
+    protected HashMap<String, String> documentNumberFromBCHdr = new HashMap<String, String>(1);
+    protected HashMap<String, Integer> skippedPBGLKeys = new HashMap();
 
     protected void pBGLCleanUp() {
         pBGLFromGL.clear();
@@ -1345,25 +1345,25 @@
 
     // these are the indexes for each of the fields returned in the select list
     // of the SQL statement
-    private Integer sqlChartOfAccountsCode = 0;
-    private Integer sqlAccountNumber = 1;
-    private Integer sqlSubAccountNumber = 2;
-    private Integer sqlObjectCode = 3;
-    private Integer sqlSubObjectCode = 4;
-    private Integer sqlBalanceTypeCode = 5;
-    private Integer sqlObjectTypeCode = 6;
-    private Integer sqlAccountLineAnnualBalanceAmount = 7;
-    private Integer sqlBeginningBalanceLineAmount = 8;
+    protected Integer sqlChartOfAccountsCode = 0;
+    protected Integer sqlAccountNumber = 1;
+    protected Integer sqlSubAccountNumber = 2;
+    protected Integer sqlObjectCode = 3;
+    protected Integer sqlSubObjectCode = 4;
+    protected Integer sqlBalanceTypeCode = 5;
+    protected Integer sqlObjectTypeCode = 6;
+    protected Integer sqlAccountLineAnnualBalanceAmount = 7;
+    protected Integer sqlBeginningBalanceLineAmount = 8;
 
-    private Integer nGLHeadersAdded = new Integer(0);
-    private Integer nGLRowsAdded = new Integer(0);
-    private Integer nGLRowsUpdated = new Integer(0);
-    private Integer nCurrentPBGLRows = new Integer(0);
-    private Integer nGLBBRowsZeroNet = new Integer(0);
-    private Integer nGLBBRowsRead = new Integer(0);
-    private Integer nGLRowsMatchingPBGL = new Integer(0);
-    private Integer nGLBBKeysRead = new Integer(0);
-    private Integer nGLBBRowsSkipped = new Integer(0);
+    protected Integer nGLHeadersAdded = new Integer(0);
+    protected Integer nGLRowsAdded = new Integer(0);
+    protected Integer nGLRowsUpdated = new Integer(0);
+    protected Integer nCurrentPBGLRows = new Integer(0);
+    protected Integer nGLBBRowsZeroNet = new Integer(0);
+    protected Integer nGLBBRowsRead = new Integer(0);
+    protected Integer nGLRowsMatchingPBGL = new Integer(0);
+    protected Integer nGLBBKeysRead = new Integer(0);
+    protected Integer nGLBBRowsSkipped = new Integer(0);
 
     // public methods
 
@@ -1789,9 +1789,9 @@
      *      construction.
      */
 
-    private HashMap<String, String[]> baseYearInactiveObjects = new HashMap<String, String[]>(1);
-    private HashMap<String, String[]> gLBBObjects = new HashMap<String, String[]>(1);
-    private Integer nInactiveBBObjectCodes = new Integer(0);
+    protected HashMap<String, String[]> baseYearInactiveObjects = new HashMap<String, String[]>(1);
+    protected HashMap<String, String[]> gLBBObjects = new HashMap<String, String[]>(1);
+    protected Integer nInactiveBBObjectCodes = new Integer(0);
 
     protected void objectClassRICleanUp() {
         baseYearInactiveObjects.clear();
@@ -1913,23 +1913,23 @@
      */
 
     // the set of new BCSF objects to be written
-    private HashMap<String, BudgetConstructionCalculatedSalaryFoundationTracker> bCSF = new HashMap<String, BudgetConstructionCalculatedSalaryFoundationTracker>(1);
+    protected HashMap<String, BudgetConstructionCalculatedSalaryFoundationTracker> bCSF = new HashMap<String, BudgetConstructionCalculatedSalaryFoundationTracker>(1);
     // hashmap to hold the document numbers for each accounting key in the header
-    private HashMap<String, String> bcHdrDocNumbers = new HashMap<String, String>(1);
+    protected HashMap<String, String> bcHdrDocNumbers = new HashMap<String, String>(1);
     // hashset to hold the accounting string for each pending GL entry
-    private HashSet<String> currentPBGLKeys = new HashSet<String>(1);
+    protected HashSet<String> currentPBGLKeys = new HashSet<String>(1);
     // hashMap for finding the object type of "detailed position" object codes
-    private HashMap<String, String> detailedPositionObjectTypes = new HashMap<String, String>(1);
+    protected HashMap<String, String> detailedPositionObjectTypes = new HashMap<String, String>(1);
     // keys for deleted or vacant rows present in the override CSF: none of these keys
     // will load to BCSF from either the override or actual CSF (even if they
     // are active in the actual CSF) 
-    private HashSet<String> csfOverrideKeys = new HashSet<String>(1);;
+    protected HashSet<String> csfOverrideKeys = new HashSet<String>(1);;
     // EMPLID's in CSF which have more than one active row
     // we budget in whole dollars, while payroll deals in pennies
     // we will use this for our complicated rounding algorithm, to keep the total budget base salary within a dollar of the payroll salary
-    private HashMap<String, roundMechanism> keysNeedingRounding = new HashMap<String, roundMechanism>(1);
+    protected HashMap<String, roundMechanism> keysNeedingRounding = new HashMap<String, roundMechanism>(1);
     // we need the position normal work months to write a new appointment funding row: the normal work months is the "months appointment"
-    private HashMap<String, Integer> positionNormalWorkMonths = new HashMap<String, Integer>(1);
+    protected HashMap<String, Integer> positionNormalWorkMonths = new HashMap<String, Integer>(1);
 
     protected void buildAppointmentFundingCleanUp() {
         bCSF.clear();
@@ -1944,22 +1944,22 @@
     //
     // counters
     //
-    Integer CSFRowsRead = new Integer(0);
-    Integer CSFRowsVacant = new Integer(0);
-    Integer CSFVacantsConsolidated = new Integer(0);
-    Integer CSFOverrideDeletesRead = new Integer(0);
-    Integer CSFOverrideRead = new Integer(0);
-    Integer CSFOverrideVacant = new Integer(0);
-    Integer CSFForBCSF = new Integer(0);
-    Integer CSFCurrentGLRows = new Integer(0);
-    Integer CSFCurrentBCAFRows = new Integer(0);
-    Integer CSFBCSFRowsMatchingGL = new Integer(0);
-    Integer CSFBCSFRowsMatchingBCAF = new Integer(0);
-    Integer CSFNewGLRows = new Integer(0);
-    Integer CSFNewBCAFRows = new Integer(0);
-    Integer CSFBCAFRowsMarkedDeleted = new Integer(0);
-    Integer CSFBCAFRowsMissing = new Integer(0);
-    Integer CSFBadObjectsSkipped = new Integer(0);
+    protected Integer CSFRowsRead = new Integer(0);
+    protected Integer CSFRowsVacant = new Integer(0);
+    protected Integer CSFVacantsConsolidated = new Integer(0);
+    protected Integer CSFOverrideDeletesRead = new Integer(0);
+    protected Integer CSFOverrideRead = new Integer(0);
+    protected Integer CSFOverrideVacant = new Integer(0);
+    protected Integer CSFForBCSF = new Integer(0);
+    protected Integer CSFCurrentGLRows = new Integer(0);
+    protected Integer CSFCurrentBCAFRows = new Integer(0);
+    protected Integer CSFBCSFRowsMatchingGL = new Integer(0);
+    protected Integer CSFBCSFRowsMatchingBCAF = new Integer(0);
+    protected Integer CSFNewGLRows = new Integer(0);
+    protected Integer CSFNewBCAFRows = new Integer(0);
+    protected Integer CSFBCAFRowsMarkedDeleted = new Integer(0);
+    protected Integer CSFBCAFRowsMissing = new Integer(0);
+    protected Integer CSFBadObjectsSkipped = new Integer(0);
 
     public void buildAppointmentFundingAndBCSF(Integer BaseYear) {
         /*********************************************************************
@@ -2582,10 +2582,10 @@
     }
 
     //     these are the four values used to decide whether the current appointment funding row, missing from BCSF, has been entered by a user or is due to a CSF row that has since gone away
-    String notOnLeave = new String(BCConstants.AppointmentFundingDurationCodes.NONE.durationCode);
-    KualiInteger rqstAmount = new KualiInteger(0);
-    BigDecimal pctTime = new BigDecimal(0);
-    BigDecimal FTE = new BigDecimal(0);
+    protected String notOnLeave = new String(BCConstants.AppointmentFundingDurationCodes.NONE.durationCode);
+    protected KualiInteger rqstAmount = new KualiInteger(0);
+    protected BigDecimal pctTime = new BigDecimal(0);
+    protected BigDecimal FTE = new BigDecimal(0);
 
     protected void untouchedAppointmentFunding(PendingBudgetConstructionAppointmentFunding bcaf) {
         //     this checks to see whether the missing row could have come in from CSF earlier, but the CSF row which created it is not inactive.  
@@ -2678,7 +2678,7 @@
     }
 
     //     this is an inner class which will store the data we need to perform the rounding, and supply the methods as well    
-    KualiDecimal shavePennies = new KualiDecimal(100);
+    protected KualiDecimal shavePennies = new KualiDecimal(100);
 
     protected class roundMechanism {
         //     the idea here is that people split over many lines could lose or gain several dollars if we rounded each salary line individually.  so, we do the following.
Index: work/src/org/kuali/kfs/module/bc/spring-bc.xml
===================================================================
--- work/src/org/kuali/kfs/module/bc/spring-bc.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/spring-bc.xml	(working copy)
@@ -813,8 +813,10 @@
           <ref bean="genesisService"/>
        </property>    
     </bean>
-        
-    <bean id="genesisBatchStep" class="org.kuali.kfs.module.bc.batch.GenesisBatchStep" parent="step">
+    
+    <bean id="genesisBatchStep" parent="GenesisBatchStep-parentBean"/>    
+    
+    <bean id="GenesisBatchStep-parentBean" class="org.kuali.kfs.module.bc.batch.GenesisBatchStep" parent="step">
       <property name="genesisService">
          <ref bean="genesisService"/>
        </property>
Index: work/src/org/kuali/kfs/module/bc/BCPropertyConstants.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/BCPropertyConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/BCPropertyConstants.java	(working copy)
@@ -51,6 +51,7 @@
     public static final String APPOINTMENT_FUNDING_MONTH = "appointmentFundingMonth";
 
     public static final String APPOINTMENT_REQUESTED_CSF_AMOUNT = "appointmentRequestedCsfAmount";
+    public static final String APPOINTMENT_CHART_OF_ACCOUNT = "chartOfAccountsCode";
     public static final String APPOINTMENT_REQUESTED_CSF_FTE_QUANTITY = "appointmentRequestedCsfFteQuantity";
     public static final String APPOINTMENT_REQUESTED_CSF_TIME_PERCENT = "appointmentRequestedCsfTimePercent";
     public static final String APPOINTMENT_REQUESTED_FTE_QUANTITY = "appointmentRequestedFteQuantity";
Index: work/src/org/kuali/kfs/module/bc/document/datadictionary/BudgetConstructionDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/datadictionary/BudgetConstructionDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/datadictionary/BudgetConstructionDocument.xml	(working copy)
@@ -24,6 +24,7 @@
     
     <property name="documentTypeName" value="BC"/>
     <property name="documentClass" value="org.kuali.kfs.module.bc.document.BudgetConstructionDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.bc.document.BudgetConstructionDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.bc.document.validation.impl.BudgetConstructionRules"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.bc.document.authorization.BudgetConstructionDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.bc.document.authorization.BudgetConstructionDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/bc/document/service/impl/SalarySettingRuleHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/service/impl/SalarySettingRuleHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/service/impl/SalarySettingRuleHelperServiceImpl.java	(working copy)
@@ -70,18 +70,22 @@
      * @see org.kuali.kfs.module.bc.document.service.SalarySettingRuleHelperService#hasActiveJob(org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding,
      *      org.kuali.rice.krad.util.MessageMap)
      */
-    public boolean hasActiveJob(PendingBudgetConstructionAppointmentFunding appointmentFunding, MessageMap errorMap) {
+    public boolean hasActiveJob(PendingBudgetConstructionAppointmentFunding appointmentFunding, MessageMap errorMap, SynchronizationCheckType synchronizationCheckType) {
         Integer fiscalYear = appointmentFunding.getUniversityFiscalYear();
         String emplid = appointmentFunding.getEmplid();
         String positionNumber = appointmentFunding.getPositionNumber();
 
-        boolean hasActiveJob = humanResourcesPayrollService.isActiveJob(emplid, positionNumber, fiscalYear, SynchronizationCheckType.ALL);
-        if (!hasActiveJob) {
-            errorMap.putError(KFSConstants.GLOBAL_ERRORS, BCKeyConstants.ERROR_NO_ACTIVE_JOB_FOUND, appointmentFunding.getEmplid(), appointmentFunding.getPositionNumber());
-            return false;
+        if (synchronizationCheckType.equals(SynchronizationCheckType.EID) && emplid.equals("VACANT")){
+            return true;
+        } else {
+            boolean hasActiveJob = humanResourcesPayrollService.isActiveJob(emplid, positionNumber, fiscalYear, synchronizationCheckType);
+            if (!hasActiveJob) {
+                errorMap.putError(KFSConstants.GLOBAL_ERRORS, BCKeyConstants.ERROR_NO_ACTIVE_JOB_FOUND, appointmentFunding.getEmplid(), appointmentFunding.getPositionNumber());
+                return false;
+            }
+
+            return true;
         }
-
-        return true;
     }
 
     /**
Index: work/src/org/kuali/kfs/module/bc/document/service/SalarySettingRuleHelperService.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/service/SalarySettingRuleHelperService.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/service/SalarySettingRuleHelperService.java	(working copy)
@@ -17,6 +17,7 @@
 
 import java.util.List;
 
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.rice.krad.util.MessageMap;
 
@@ -41,7 +42,7 @@
      * @param errorMap the given error map that can hold the error message if any
      * @return true if the given appointment funding is associated with an active job; otherwise, false
      */
-    public boolean hasActiveJob(PendingBudgetConstructionAppointmentFunding appointmentFunding, MessageMap errorMap);
+    public boolean hasActiveJob(PendingBudgetConstructionAppointmentFunding appointmentFunding, MessageMap errorMap, SynchronizationCheckType synchronizationCheckType);
 
     /**
      * determine whether the object code of the given appointment funding matches the position default object code
Index: work/src/org/kuali/kfs/module/bc/document/BudgetConstructionDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/BudgetConstructionDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/BudgetConstructionDocument.java	(working copy)
@@ -27,6 +27,7 @@
 import org.kuali.kfs.coa.businessobject.Chart;
 import org.kuali.kfs.coa.businessobject.Organization;
 import org.kuali.kfs.coa.businessobject.SubAccount;
+import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.module.bc.BCConstants;
 import org.kuali.kfs.module.bc.BCConstants.AccountSalarySettingOnlyCause;
 import org.kuali.kfs.module.bc.businessobject.BudgetConstructionAccountReports;
@@ -259,6 +260,14 @@
      */
     public void setAccountNumber(String accountNumber) {
         this.accountNumber = accountNumber;
+        // if accounts can't cross charts, set chart code whenever account number is set
+        AccountService accountService = SpringContext.getBean(AccountService.class);
+        if (!accountService.accountsCanCrossCharts()) {
+            Account account = accountService.getUniqueAccountForAccountNumber(accountNumber);
+            if (ObjectUtils.isNotNull(account)) {
+                setChartOfAccountsCode(account.getChartOfAccountsCode());
+            }
+        }           
     }
 
 
Index: work/src/org/kuali/kfs/module/bc/document/validation/event/AddAppointmentFundingEvent.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/validation/event/AddAppointmentFundingEvent.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/validation/event/AddAppointmentFundingEvent.java	(working copy)
@@ -17,6 +17,7 @@
 
 import java.util.List;
 
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.kfs.module.bc.document.BudgetConstructionDocument;
 import org.kuali.kfs.module.bc.document.validation.SalarySettingRule;
@@ -25,6 +26,7 @@
 public class AddAppointmentFundingEvent extends SalarySettingBaseEvent {
     List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFunding;
     PendingBudgetConstructionAppointmentFunding appointmentFunding;
+    SynchronizationCheckType synchronizationCheckType;
 
     /**
      * Constructs a AddAppointmentFundingEvent.java.
@@ -32,10 +34,11 @@
      * @param errorPathPrefix the specified error path prefix
      * @param appointmentFundings the given appointment funding
      */
-    public AddAppointmentFundingEvent(String description, String errorPathPrefix, BudgetConstructionDocument document, List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFunding, PendingBudgetConstructionAppointmentFunding appointmentFunding) {
+    public AddAppointmentFundingEvent(String description, String errorPathPrefix, BudgetConstructionDocument document, List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFunding, PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType) {
         super(description, errorPathPrefix, document);
         this.appointmentFunding = appointmentFunding;
         this.existingAppointmentFunding = existingAppointmentFunding;
+        this.synchronizationCheckType = synchronizationCheckType;
     }
 
     /**
@@ -43,6 +46,6 @@
      */
     @Override
     public boolean invokeExpansionRuleMethod(BusinessRule rule) {
-        return ((SalarySettingRule) rule).processAddAppointmentFunding(existingAppointmentFunding, appointmentFunding);
+        return ((SalarySettingRule) rule).processAddAppointmentFunding(existingAppointmentFunding, appointmentFunding, synchronizationCheckType);
     }
 }
Index: work/src/org/kuali/kfs/module/bc/document/validation/event/SaveSalarySettingEvent.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/validation/event/SaveSalarySettingEvent.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/validation/event/SaveSalarySettingEvent.java	(working copy)
@@ -15,6 +15,7 @@
  */
 package org.kuali.kfs.module.bc.document.validation.event;
 
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.kfs.module.bc.document.BudgetConstructionDocument;
 import org.kuali.kfs.module.bc.document.validation.SalarySettingRule;
@@ -25,6 +26,7 @@
  */
 public class SaveSalarySettingEvent extends SalarySettingBaseEvent {
     PendingBudgetConstructionAppointmentFunding appointmentFunding;
+    SynchronizationCheckType synchronizationCheckType;
 
     /**
      * Constructs a SaveSalarySettingEvent.java.
@@ -34,9 +36,10 @@
      * @param document the specified budget construction document
      * @param appointmentFunding the current appointment funding being varified
      */
-    public SaveSalarySettingEvent(String description, String errorPathPrefix, BudgetConstructionDocument document, PendingBudgetConstructionAppointmentFunding appointmentFunding) {
+    public SaveSalarySettingEvent(String description, String errorPathPrefix, BudgetConstructionDocument document, PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType) {
         super(description, errorPathPrefix, document);
         this.appointmentFunding = appointmentFunding;
+        this.synchronizationCheckType = synchronizationCheckType;
     }
 
     /**
@@ -44,6 +47,6 @@
      */
     @Override
     public boolean invokeExpansionRuleMethod(BusinessRule rule) {
-        return ((SalarySettingRule) rule).processSaveAppointmentFunding(appointmentFunding);
+        return ((SalarySettingRule) rule).processSaveAppointmentFunding(appointmentFunding, synchronizationCheckType);
     }
 }
Index: work/src/org/kuali/kfs/module/bc/document/validation/impl/BudgetConstructionRules.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/validation/impl/BudgetConstructionRules.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/validation/impl/BudgetConstructionRules.java	(working copy)
@@ -20,6 +20,7 @@
 import java.util.List;
 
 import org.kuali.kfs.module.bc.BCConstants.MonthSpreadDeleteType;
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.BudgetConstructionMonthly;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionGeneralLedger;
@@ -125,15 +126,15 @@
     /**
      * @see org.kuali.kfs.module.bc.document.validation.SalarySettingRule#processAddAppointmentFunding(org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding)
      */
-    public boolean processAddAppointmentFunding(List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFundings, PendingBudgetConstructionAppointmentFunding appointmentFunding) {
-        return salarySettingRules.processAddAppointmentFunding(existingAppointmentFundings, appointmentFunding);
+    public boolean processAddAppointmentFunding(List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFundings, PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType) {
+        return salarySettingRules.processAddAppointmentFunding(existingAppointmentFundings, appointmentFunding, synchronizationCheckType);
     }
 
     /**
      * @see org.kuali.kfs.module.bc.document.validation.SalarySettingRule#processSaveAppointmentFunding(org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding)
      */
-    public boolean processSaveAppointmentFunding(PendingBudgetConstructionAppointmentFunding appointmentFunding) {
-        return salarySettingRules.processSaveAppointmentFunding(appointmentFunding);
+    public boolean processSaveAppointmentFunding(PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType) {
+        return salarySettingRules.processSaveAppointmentFunding(appointmentFunding, synchronizationCheckType);
     }
 
     /**
Index: work/src/org/kuali/kfs/module/bc/document/validation/impl/SalarySettingRules.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/validation/impl/SalarySettingRules.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/validation/impl/SalarySettingRules.java	(working copy)
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import org.kuali.kfs.module.bc.BCPropertyConstants;
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.kfs.module.bc.document.service.BudgetConstructionRuleHelperService;
 import org.kuali.kfs.module.bc.document.service.SalarySettingRuleHelperService;
@@ -59,7 +60,7 @@
      * @see org.kuali.kfs.module.bc.document.validation.SalarySettingRule#processSaveAppointmentFunding(java.util.List,
      *      org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding)
      */
-    public boolean processSaveAppointmentFunding(PendingBudgetConstructionAppointmentFunding appointmentFunding) {
+    public boolean processSaveAppointmentFunding(PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType) {
         LOG.debug("processSaveAppointmentFunding() start");
 
         boolean hasValidFormat = budgetConstructionRuleHelperService.isFieldFormatValid(appointmentFunding, errorMap);
@@ -77,7 +78,7 @@
             return isObjectCodeMatching;
         }
 
-        boolean hasActiveJob = salarySettingRuleHelperService.hasActiveJob(appointmentFunding, errorMap);
+        boolean hasActiveJob = salarySettingRuleHelperService.hasActiveJob(appointmentFunding, errorMap, synchronizationCheckType);
         if (!hasActiveJob) {
             return hasActiveJob;
         }
@@ -100,7 +101,7 @@
      * @see org.kuali.kfs.module.bc.document.validation.SalarySettingRule#processAddAppointmentFunding(java.util.List,
      *      org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding)
      */
-    public boolean processAddAppointmentFunding(List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFundings, PendingBudgetConstructionAppointmentFunding appointmentFunding) {
+    public boolean processAddAppointmentFunding(List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFundings, PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType) {
         LOG.debug("processAddAppointmentFunding() start");
 
         boolean hasNoExistingLine = salarySettingRuleHelperService.hasNoExistingLine(existingAppointmentFundings, appointmentFunding, errorMap);
@@ -123,7 +124,7 @@
             return isObjectCodeMatching;
         }
 
-        boolean hasActiveJob = salarySettingRuleHelperService.hasActiveJob(appointmentFunding, errorMap);
+        boolean hasActiveJob = salarySettingRuleHelperService.hasActiveJob(appointmentFunding, errorMap, synchronizationCheckType);
         if (!hasActiveJob) {
             return hasActiveJob;
         }
Index: work/src/org/kuali/kfs/module/bc/document/validation/SalarySettingRule.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/validation/SalarySettingRule.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/validation/SalarySettingRule.java	(working copy)
@@ -17,6 +17,7 @@
 
 import java.util.List;
 
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.rice.krad.rules.rule.BusinessRule;
 
@@ -31,7 +32,7 @@
      * @param appointmentFunding the given appointment funding
      * @return true if the appointment funding can pass all rule before saved, otherwise, false
      */
-    public boolean processSaveAppointmentFunding(PendingBudgetConstructionAppointmentFunding appointmentFunding);
+    public boolean processSaveAppointmentFunding(PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType);
 
     /**
      * process the rules before the given appointment funding is saved
@@ -48,7 +49,7 @@
      * @param appointmentFunding the given appointment funding
      * @return true if the appointment funding can pass all rule before created, otherwise, false
      */
-    public boolean processAddAppointmentFunding(List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFundings, PendingBudgetConstructionAppointmentFunding appointmentFunding);
+    public boolean processAddAppointmentFunding(List<PendingBudgetConstructionAppointmentFunding> existingAppointmentFundings, PendingBudgetConstructionAppointmentFunding appointmentFunding, SynchronizationCheckType synchronizationCheckType);
 
     /**
      * process the rules before adjusting the salary amount of the given appointment funding
Index: work/src/org/kuali/kfs/module/bc/document/dataaccess/impl/BudgetOrganizationPushPullDaoJdbc.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/dataaccess/impl/BudgetOrganizationPushPullDaoJdbc.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/dataaccess/impl/BudgetOrganizationPushPullDaoJdbc.java	(working copy)
@@ -458,7 +458,7 @@
         sqlText.append("        head.org_of_lvl_cd, \n");
         sqlText.append("        fphd.fdoc_status_cd, \n");
         sqlText.append("        '', \n");
-        sqlText.append("        fphd.temp_doc_fnl_dt \n");
+        sqlText.append("        NULL \n");
         sqlText.append("FROM LD_BCNSTR_HDR_T head, \n");
         sqlText.append("      FS_DOC_HEADER_T fphd, \n");
         sqlText.append("      (SELECT head2.fdoc_nbr \n");
@@ -575,7 +575,7 @@
         sqlText.append("    head.org_of_lvl_cd, \n");
         sqlText.append("    fphd.fdoc_status_cd, \n");
         sqlText.append("    '', \n");
-        sqlText.append("    fphd.temp_doc_fnl_dt   \n");
+        sqlText.append("    NULL   \n");
         sqlText.append("FROM LD_BCN_PULLUP_T pull, \n");
         sqlText.append("    LD_BCN_ACCT_ORG_HIER_T hier, \n");
         sqlText.append("    LD_BCN_ACCT_ORG_HIER_T hier2, \n");
@@ -609,7 +609,7 @@
         sqlText.append("    head.org_of_lvl_cd, \n");
         sqlText.append("    fphd.fdoc_status_cd, \n");
         sqlText.append("    '', \n");
-        sqlText.append("    fphd.temp_doc_fnl_dt     \n");
+        sqlText.append("    NULL     \n");
         sqlText.append("FROM LD_BCN_PULLUP_T pull, \n");
         sqlText.append("    LD_BCN_ACCT_ORG_HIER_T hier, \n");
         sqlText.append("    LD_BCN_ACCT_ORG_HIER_T hier2, \n");
Index: work/src/org/kuali/kfs/module/bc/document/dataaccess/impl/OrganizationBCDocumentSearchDaoJdbc.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/dataaccess/impl/OrganizationBCDocumentSearchDaoJdbc.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/dataaccess/impl/OrganizationBCDocumentSearchDaoJdbc.java	(working copy)
@@ -35,9 +35,9 @@
 
         sqlText.append("INSERT INTO LD_BCN_ACCTSEL_T \n");
         sqlText.append(" (PERSON_UNVL_ID,UNIV_FISCAL_YR,FIN_COA_CD,ACCOUNT_NBR,SUB_ACCT_NBR,FDOC_NBR, \n");
-        sqlText.append("  ORG_LEVEL_CD,ORG_FIN_COA_CD,ORG_CD,FDOC_STATUS_CD,FDOC_CREATE_DT) \n");
+        sqlText.append("  ORG_LEVEL_CD,ORG_FIN_COA_CD,ORG_CD,FDOC_STATUS_CD) \n");
         sqlText.append("SELECT pull.person_unvl_id, head.univ_fiscal_yr, head.fin_coa_cd, head.account_nbr, head.sub_acct_nbr,head.fdoc_nbr, \n");
-        sqlText.append(" head.org_level_cd, hier2.org_fin_coa_cd, hier2.org_cd, fshd.fdoc_status_cd, fshd.temp_doc_fnl_dt \n");
+        sqlText.append(" head.org_level_cd, hier2.org_fin_coa_cd, hier2.org_cd, fshd.fdoc_status_cd \n");
         sqlText.append("FROM LD_BCN_PULLUP_T pull, LD_BCN_ACCT_ORG_HIER_T hier,  LD_BCN_ACCT_ORG_HIER_T hier2, \n");
         sqlText.append("     LD_BCNSTR_HDR_T head, FS_DOC_HEADER_T fshd \n");
         sqlText.append("WHERE pull.pull_flag > 0 \n");
@@ -55,7 +55,7 @@
         sqlText.append("  AND fshd.fdoc_nbr = head.fdoc_nbr \n");
         sqlText.append("UNION \n");
         sqlText.append("SELECT pull.person_unvl_id, head.univ_fiscal_yr, head.fin_coa_cd, head.account_nbr, head.sub_acct_nbr, head.fdoc_nbr, \n");
-        sqlText.append(" head.org_level_cd, hier2.org_fin_coa_cd, hier2.org_cd, fshd.fdoc_status_cd, fshd.temp_doc_fnl_dt \n");
+        sqlText.append(" head.org_level_cd, hier2.org_fin_coa_cd, hier2.org_cd, fshd.fdoc_status_cd \n");
         sqlText.append("FROM LD_BCN_PULLUP_T pull, LD_BCN_ACCT_ORG_HIER_T hier, LD_BCN_ACCT_ORG_HIER_T hier2, \n");
         sqlText.append("     LD_BCNSTR_HDR_T head, FS_DOC_HEADER_T fshd \n");
         sqlText.append("WHERE pull.pull_flag > 0 \n");
@@ -77,7 +77,7 @@
 
         sqlText.append("INSERT INTO LD_BCN_ACCTSEL_T \n");
         sqlText.append(" (PERSON_UNVL_ID, UNIV_FISCAL_YR, FIN_COA_CD, ACCOUNT_NBR, SUB_ACCT_NBR, FDOC_NBR, \n");
-        sqlText.append(" ORG_LEVEL_CD, ORG_FIN_COA_CD, ORG_CD, FDOC_STATUS_CD, FDOC_CREATE_DT) \n");
+        sqlText.append(" ORG_LEVEL_CD, ORG_FIN_COA_CD, ORG_CD, FDOC_STATUS_CD) \n");
         sqlText.append("SELECT  ?, \n");
         sqlText.append(" head.univ_fiscal_yr, \n");
         sqlText.append(" head.fin_coa_cd, \n");
@@ -87,8 +87,7 @@
         sqlText.append(" head.org_level_cd, \n");
         sqlText.append(" ah.org_fin_coa_cd, \n");
         sqlText.append(" ah.org_cd, \n");
-        sqlText.append(" fshd.fdoc_status_cd, \n");
-        sqlText.append(" fshd.TEMP_DOC_FNL_DT \n");
+        sqlText.append(" fshd.fdoc_status_cd \n");
         sqlText.append("FROM LD_BCN_PULLUP_T pull, \n");
         sqlText.append(" LD_BCNSTR_HDR_T head, \n");
         sqlText.append(" FS_DOC_HEADER_T fshd, \n");
@@ -131,7 +130,7 @@
         sqlText.append("    NULL, \n");
         sqlText.append("    fshd.fdoc_status_cd, \n");
         sqlText.append("    '', \n");
-        sqlText.append("    fshd.temp_doc_fnl_dt \n");
+        sqlText.append("    NULL \n");
         sqlText.append("FROM LD_BCNSTR_HDR_T head, \n");
         sqlText.append("    CA_ACCT_DELEGATE_T adel, \n");
         sqlText.append("    FS_DOC_HEADER_T fshd \n");
@@ -155,7 +154,7 @@
         sqlText.append("    NULL, \n");
         sqlText.append("    fshd.fdoc_status_cd, \n");
         sqlText.append("    '', \n");
-        sqlText.append("    fshd.temp_doc_fnl_dt \n");
+        sqlText.append("    NULL \n");
         sqlText.append("FROM LD_BCNSTR_HDR_T head, \n");
         sqlText.append("    CA_ACCOUNT_T acct, \n");
         sqlText.append("    FS_DOC_HEADER_T fshd \n");
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/PositionSalarySettingAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/PositionSalarySettingAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/PositionSalarySettingAction.java	(working copy)
@@ -31,6 +31,7 @@
 import org.kuali.kfs.module.bc.BCConstants.LockStatus;
 import org.kuali.kfs.module.bc.BCKeyConstants;
 import org.kuali.kfs.module.bc.BCPropertyConstants;
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.BudgetConstructionLockStatus;
 import org.kuali.kfs.module.bc.businessobject.BudgetConstructionPosition;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
@@ -319,4 +320,12 @@
 
         return null;
     }
+
+    /**
+     * @see org.kuali.kfs.module.bc.document.web.struts.DetailSalarySettingAction#getSynchronizationCheckType()
+     */
+    @Override
+    public SynchronizationCheckType getSynchronizationCheckType() {
+        return SynchronizationCheckType.EID;
+    }
 }
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/TempListLookupForm.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/TempListLookupForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/TempListLookupForm.java	(working copy)
@@ -113,8 +113,12 @@
                 setLookupableImplServiceName(lookupImplID);
             }
         }
-        
-        super.populate(request);
+
+        // don't try to populate if no BO - the case when we lose session
+        String localBusinessObjectClassName = getParameter(request, KNSConstants.BUSINESS_OBJECT_CLASS_ATTRIBUTE);
+        if (ObjectUtils.isNotNull(localBusinessObjectClassName)) {
+            super.populate(request);
+        }
     }
 
     public boolean isForceToAccountListScreen() { 
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetConstructionAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetConstructionAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetConstructionAction.java	(working copy)
@@ -103,23 +103,25 @@
     public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
         BudgetConstructionForm budgetConstructionForm = (BudgetConstructionForm) form;
 
+        // we lost the session now recover back to the selection screen
+        if (budgetConstructionForm.getMethodToCall() != null && budgetConstructionForm.getMethodToCall().equals("performLost")) {
+            Properties parameters = new Properties();
+            parameters.put(KFSConstants.DISPATCH_REQUEST_PARAMETER, BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT);
+
+            String lookupUrl = UrlFactory.parameterizeUrl("/" + BCConstants.BC_SELECTION_ACTION, parameters);
+
+            return new ActionForward(lookupUrl, true);
+        }
+
+        // check for lost session and display an alert message and recovery control
         Boolean isBCHeartBeating = (Boolean) GlobalVariables.getUserSession().retrieveObject(BCConstants.BC_HEARTBEAT_SESSIONFLAG);
         if (isBCHeartBeating == null) {
-            if (budgetConstructionForm.isPickListMode()) {
                 budgetConstructionForm.setPickListClose(true);
                 KNSGlobalVariables.getMessageList().add(BCKeyConstants.MESSAGE_BUDGET_PREVIOUS_SESSION_TIMEOUT);
                 return mapping.findForward(KFSConstants.MAPPING_BASIC);
 
             }
 
-            Properties parameters = new Properties();
-            parameters.put(KFSConstants.DISPATCH_REQUEST_PARAMETER, BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT);
-
-            String lookupUrl = UrlFactory.parameterizeUrl("/" + BCConstants.BC_SELECTION_ACTION, parameters);
-
-            return new ActionForward(lookupUrl, true);
-        }
-
         // this is only used to indicate to the rules the user has clicked save or close save-yes
         // which forces tighter checks (nonZeroRequest amount) when access is cleanup mode
         if (budgetConstructionForm.getBudgetConstructionDocument().isCleanupModeActionForceCheck()) {
@@ -1189,7 +1191,7 @@
      * HttpServletResponse response) throws Exception { BudgetConstructionForm budgetConstructionForm = (BudgetConstructionForm)
      * form; String documentNumber = request.getParameter("documentNumber"); BudgetConstructionDocument budgetConstructionDocument =
      * (BudgetConstructionDocument) SpringContext.getBean(DocumentService.class).getByDocumentHeaderId(documentNumber);
-     * budgetConstructionForm.setDocument(budgetConstructionDocument); WorkflowDocument workflowDoc =
+     * budgetConstructionForm.setDocument(budgetConstructionDocument); KualiWorkflowDocument workflowDoc =
      * budgetConstructionDocument.getDocumentHeader().getWorkflowDocument();
      * budgetConstructionForm.setDocTypeName(workflowDoc.getDocumentType()); // KualiDocumentFormBase.populate() needs this updated
      * in the session GlobalVariables.getUserSession().setWorkflowDocument(workflowDoc); return
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetConstructionSelectionAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetConstructionSelectionAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetConstructionSelectionAction.java	(working copy)
@@ -443,7 +443,6 @@
      */
     public ActionForward performMyAccounts(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
         BudgetConstructionSelectionForm budgetConstructionSelectionForm = (BudgetConstructionSelectionForm) form;
-        this.flagBCInProgress();
 
         // call service to build account list and give message if empty
         int rowCount = SpringContext.getBean(OrganizationBCDocumentSearchService.class).buildAccountManagerDelegateList(GlobalVariables.getUserSession().getPerson().getPrincipalId(), budgetConstructionSelectionForm.getUniversityFiscalYear());
@@ -453,6 +452,8 @@
             return mapping.findForward(KFSConstants.MAPPING_BASIC);
         }
 
+        this.flagBCInProgress();
+
         // forward to temp list action for displaying results
         String url = BudgetUrlUtil.buildTempListLookupUrl(mapping, budgetConstructionSelectionForm, BCConstants.TempListLookupMode.ACCOUNT_SELECT_MANAGER_DELEGATE, BudgetConstructionAccountSelect.class.getName(), null);
 
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/TempListLookupAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/TempListLookupAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/TempListLookupAction.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2007 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -81,22 +81,23 @@
 
         TempListLookupForm tempListLookupForm = (TempListLookupForm) form;
 
-        // check for session heart beat only if running inside BC system
-        if (tempListLookupForm.getTempListLookupMode() != BCConstants.TempListLookupMode.DEFAULT_LOOKUP_MODE) {
-            Boolean isBCHeartBeating = (Boolean) GlobalVariables.getUserSession().retrieveObject(BCConstants.BC_HEARTBEAT_SESSIONFLAG);
-            if (isBCHeartBeating == null) {
-                if (tempListLookupForm.isMainWindow()) {
-                    Properties parameters = new Properties();
-                    parameters.put(KFSConstants.DISPATCH_REQUEST_PARAMETER, BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT);
+        // we lost the session now recover back to the selection screen
+        if (tempListLookupForm.getMethodToCall() != null && tempListLookupForm.getMethodToCall().equals("performLost")) {
+            Properties parameters = new Properties();
+            parameters.put(KFSConstants.DISPATCH_REQUEST_PARAMETER, BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT);
 
                     String lookupUrl = UrlFactory.parameterizeUrl("/" + BCConstants.BC_SELECTION_ACTION, parameters);
 
-                    return new ActionForward(lookupUrl, true);
-                }
-                else {
-                    KNSGlobalVariables.getMessageList().add(BCKeyConstants.MESSAGE_BUDGET_PREVIOUS_SESSION_TIMEOUT);
-                    return mapping.findForward(BCConstants.MAPPING_LOST_SESSION_RETURNING);
-                }
+            return new ActionForward(lookupUrl, true);
+        }
+
+        // check for lost session and display an alert message and recovery control
+        // this also dumps the special incumbent and position lookups back into BC selection
+        if (tempListLookupForm.getMethodToCall() == null || tempListLookupForm.getTempListLookupMode() != BCConstants.TempListLookupMode.DEFAULT_LOOKUP_MODE) {
+            Boolean isBCHeartBeating = (Boolean) GlobalVariables.getUserSession().retrieveObject(BCConstants.BC_HEARTBEAT_SESSIONFLAG);
+            if (isBCHeartBeating == null) {
+                KNSGlobalVariables.getMessageList().add(BCKeyConstants.MESSAGE_BUDGET_PREVIOUS_SESSION_TIMEOUT);
+                return mapping.findForward(BCConstants.MAPPING_LOST_SESSION_RETURNING);
             }
         }
 
@@ -106,7 +107,7 @@
     /**
      * Does not supress actions if in position or incumbent lookup mode in the BC application, otherwise calls on
      * KualiLookupAction.supressActions
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#supressActionsIfNeeded(org.apache.struts.action.ActionForm)
      */
     @Override
@@ -139,7 +140,7 @@
      * TempListLookupAction can be called to build and display different lists. This method determines what the requested behavior
      * is and either makes a build call for that list or sets up a message (if the list has already been built). If the request
      * parameter showInitialResults is true, an initial search will be performed before display of the screen.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#start(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -215,13 +216,9 @@
     /**
      * This differs from KualiLookupAction.clearValues in that any atributes marked hidden will not be cleared. This is to support
      * BC temp tables that use principalId to operate on the set of rows associated with the current user.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#clearValues(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
-     *
-     * KRAD Conversion: Lookupable performs customization of the fields of the search results.
-     *
-     * Data dictionary is not used.
      */
     @Override
     public ActionForward clearValues(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
@@ -270,7 +267,7 @@
 
     /**
      * Forwards to budget position lookup.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#start(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -310,7 +307,7 @@
 
     /**
      * Validates the get new action for position then calls BudgetPositionService to pull the new position record.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#start(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -347,7 +344,7 @@
 
     /**
      * Forwards to intended incumbent lookup.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#start(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -384,7 +381,7 @@
 
     /**
      * Validates the get new action for incumbent then calls BudgetPositionService to pull the new incumbent record.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#start(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -421,7 +418,7 @@
 
     /**
      * Continues the organization report action after viewing the account list.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiLookupAction#start(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -449,7 +446,7 @@
 
     /**
      * Unlocks a current budget lock and returns back to lock monitor with refreshed locks.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiAction#execute(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -496,7 +493,7 @@
      * Gives a confirmation first time called. The next time will check the confirmation result. If the returned forward is not
      * null, that indicates we are fowarding to the question or they selected No to the confirmation and we should return to the
      * unlock page.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.action.KualiAction#execute(org.apache.struts.action.ActionMapping,
      *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
      */
@@ -525,7 +522,7 @@
     /**
      * Parses the methodToCall parameter which contains the lock information in a known format. Populates a
      * BudgetConstructionLockSummary that represents the record to unlock.
-     *
+     * 
      * @param methodToCallString - request parameter containing lock information
      * @return lockSummary populated from request parameter
      */
@@ -559,7 +556,7 @@
 
     /**
      * Retrieves the message text for the lock key and fills in message parameters based on the lock type.
-     *
+     * 
      * @return lockKey built from given parameters
      */
     protected String buildLockKeyMessage(String lockType, String lockUserId, String chartOfAccountsCode, String accountNumber, String subAccountNumber, Integer fiscalYear, String positionNumber) {
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetExpansionAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetExpansionAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/BudgetExpansionAction.java	(working copy)
@@ -50,8 +50,18 @@
 
         BudgetExpansionForm budgetExpansionForm = (BudgetExpansionForm) form;
 
+        // we lost the session now recover back to the selection screen
+        if (budgetExpansionForm.getMethodToCall() != null && budgetExpansionForm.getMethodToCall().equals("performLost")) {
+            Properties parameters = new Properties();
+            parameters.put(KFSConstants.DISPATCH_REQUEST_PARAMETER, BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT);
+
+            String lookupUrl = UrlFactory.parameterizeUrl("/" + BCConstants.BC_SELECTION_ACTION, parameters);
+
+            return new ActionForward(lookupUrl, true);
+        }
+
         // check for session timeout if not initial (re)load of BC selection
-        if (!(mapping.getType().endsWith("BudgetConstructionSelectionAction") && (budgetExpansionForm.getMethodToCall().equals(BCConstants.LOAD_EXPANSION_SCREEN_METHOD) || budgetExpansionForm.getMethodToCall().equals(BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT)))) {
+        if (budgetExpansionForm.getMethodToCall() == null || !(mapping.getType().endsWith("BudgetConstructionSelectionAction") && (budgetExpansionForm.getMethodToCall().equals(BCConstants.LOAD_EXPANSION_SCREEN_METHOD) || budgetExpansionForm.getMethodToCall().equals(BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT)))) {
 
             Boolean isBCHeartBeating = (Boolean) GlobalVariables.getUserSession().retrieveObject(BCConstants.BC_HEARTBEAT_SESSIONFLAG);
             if (isBCHeartBeating == null) {
@@ -64,18 +74,10 @@
                         return mapping.findForward(BCConstants.MAPPING_ORGANIZATION_SALARY_SETTING_RETURNING);
                     }
                 }
-                if (budgetExpansionForm.isMainWindow()){
-                    Properties parameters = new Properties();
-                    parameters.put(KFSConstants.DISPATCH_REQUEST_PARAMETER, BCConstants.LOAD_EXPANSION_SCREEN_METHOD_SESSION_TIMEOUT);
 
-                    String lookupUrl = UrlFactory.parameterizeUrl("/" + BCConstants.BC_SELECTION_ACTION, parameters);
-
-                    return new ActionForward(lookupUrl, true);
-                }
-                else {
-                    KNSGlobalVariables.getMessageList().add(BCKeyConstants.MESSAGE_BUDGET_PREVIOUS_SESSION_TIMEOUT);
-                    return mapping.findForward(BCConstants.MAPPING_LOST_SESSION_RETURNING);
-                }
+                // do generic case session lost
+                KNSGlobalVariables.getMessageList().add(BCKeyConstants.MESSAGE_BUDGET_PREVIOUS_SESSION_TIMEOUT);
+                return mapping.findForward(BCConstants.MAPPING_LOST_SESSION_RETURNING);
             }
         }
 
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/DetailSalarySettingForm.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/DetailSalarySettingForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/DetailSalarySettingForm.java	(working copy)
@@ -583,7 +583,8 @@
         }
         else {
             // make sure special disabled fields are allowed to be populated
-            if (requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_REQUESTED_CSF_AMOUNT) || requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_REQUESTED_CSF_TIME_PERCENT) || requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_FUNDING_REASON_AMOUNT)) {
+            if (requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_REQUESTED_CSF_AMOUNT) || requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_REQUESTED_CSF_TIME_PERCENT) || requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_FUNDING_REASON_AMOUNT) 
+                    || requestParameterName.endsWith(BCPropertyConstants.APPOINTMENT_CHART_OF_ACCOUNT)) {
                 return true;
             }
             else {
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/DetailSalarySettingAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/DetailSalarySettingAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/DetailSalarySettingAction.java	(working copy)
@@ -34,6 +34,7 @@
 import org.kuali.kfs.module.bc.BCConstants;
 import org.kuali.kfs.module.bc.BCKeyConstants;
 import org.kuali.kfs.module.bc.BCPropertyConstants;
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.kfs.module.bc.document.BudgetConstructionDocument;
 import org.kuali.kfs.module.bc.document.service.BudgetDocumentService;
@@ -112,7 +113,7 @@
         // release all locks before closing the current expansion screen
         if (isClose && !salarySettingForm.isViewOnlyEntry() && salarySettingForm.isSalarySettingClosed()) {
             salarySettingForm.releasePositionAndFundingLocks();
-            if (form instanceof PositionSalarySettingForm){
+            if (form instanceof PositionSalarySettingForm) {
                 // handle case where there are no funding lines attached to position
                 this.unlockPositionOnly((PositionSalarySettingForm) form);
             }
@@ -173,7 +174,7 @@
             salarySettingService.recalculateDerivedInformation(savableFunding);
 
             // validate the savable appointment funding lines
-            boolean isValid = this.invokeRules(new SaveSalarySettingEvent(KFSConstants.EMPTY_STRING, errorKeyPrefix, document, savableFunding));
+            boolean isValid = this.invokeRules(new SaveSalarySettingEvent(KFSConstants.EMPTY_STRING, errorKeyPrefix, document, savableFunding, this.getSynchronizationCheckType()));
             if (!isValid) {
                 return mapping.findForward(KFSConstants.MAPPING_BASIC);
             }
@@ -230,14 +231,14 @@
         }
 
         // check special case where emplid is vacant and force funding duration to none
-        String emplid = workingAppointmentFunding.getEmplid(); 
-        if (StringUtils.isNotEmpty(emplid) && StringUtils.equals(emplid, BCConstants.VACANT_EMPLID)){
+        String emplid = workingAppointmentFunding.getEmplid();
+        if (StringUtils.isNotEmpty(emplid) && StringUtils.equals(emplid, BCConstants.VACANT_EMPLID)) {
             workingAppointmentFunding.setAppointmentFundingDurationCode(BCConstants.AppointmentFundingDurationCodes.NONE.durationCode);
         }
         salarySettingService.recalculateDerivedInformation(workingAppointmentFunding);
 
         // validate the new appointment funding line
-        BudgetExpansionEvent addAppointmentFundingEvent = new AddAppointmentFundingEvent(KFSConstants.EMPTY_STRING, BCPropertyConstants.NEW_BCAF_LINE, document, appointmentFundings, workingAppointmentFunding);
+        BudgetExpansionEvent addAppointmentFundingEvent = new AddAppointmentFundingEvent(KFSConstants.EMPTY_STRING, BCPropertyConstants.NEW_BCAF_LINE, document, appointmentFundings, workingAppointmentFunding, this.getSynchronizationCheckType());
         boolean isValid = this.invokeRules(addAppointmentFundingEvent);
         if (!isValid) {
             return mapping.findForward(KFSConstants.MAPPING_BASIC);
@@ -333,11 +334,10 @@
     }
 
     /**
-     * unlock the position only, called as last action before a close or exit
-     * handling the case where there are no funding lines attached yet.
-     * 
+     * unlock the position only, called as last action before a close or exit handling the case where there are no funding lines
+     * attached yet.
      */
-    protected void unlockPositionOnly(PositionSalarySettingForm positionSalarySettingForm){
+    protected void unlockPositionOnly(PositionSalarySettingForm positionSalarySettingForm) {
 
         Integer universityFiscalYear = positionSalarySettingForm.getBudgetConstructionPosition().getUniversityFiscalYear();
         String positionNumber = positionSalarySettingForm.getBudgetConstructionPosition().getPositionNumber();
@@ -345,6 +345,14 @@
 
         // unlock position
         SpringContext.getBean(LockService.class).unlockPosition(positionNumber, universityFiscalYear, principalId);
-        
+
     }
+
+    /**
+     * This should return the SynchronizationCheckType based on the context. SynchronizationCheckType.POSN is used in
+     * IncumbentSalarySetting and SynchronizationCheckType.EID is used in PositionSalarySetting
+     * 
+     * @return
+     */
+    public abstract SynchronizationCheckType getSynchronizationCheckType();
 }
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/SalarySettingBaseAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/SalarySettingBaseAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/SalarySettingBaseAction.java	(working copy)
@@ -79,7 +79,7 @@
         SalarySettingBaseForm salarySettingForm = (SalarySettingBaseForm) form;
 
         // if org sal setting we need to initialize authorization
-        if (!salarySettingForm.isBudgetByAccountMode() && salarySettingForm.getMethodToCall().equals(BCConstants.LOAD_EXPANSION_SCREEN_METHOD)) {
+        if (!salarySettingForm.isBudgetByAccountMode() && salarySettingForm.getMethodToCall() != null && salarySettingForm.getMethodToCall().equals(BCConstants.LOAD_EXPANSION_SCREEN_METHOD)) {
             initAuthorization(salarySettingForm);
         }
 
Index: work/src/org/kuali/kfs/module/bc/document/web/struts/IncumbentSalarySettingAction.java
===================================================================
--- work/src/org/kuali/kfs/module/bc/document/web/struts/IncumbentSalarySettingAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/bc/document/web/struts/IncumbentSalarySettingAction.java	(working copy)
@@ -28,6 +28,7 @@
 import org.kuali.kfs.module.bc.BCConstants;
 import org.kuali.kfs.module.bc.BCKeyConstants;
 import org.kuali.kfs.module.bc.BCPropertyConstants;
+import org.kuali.kfs.module.bc.BCConstants.SynchronizationCheckType;
 import org.kuali.kfs.module.bc.businessobject.BudgetConstructionIntendedIncumbent;
 import org.kuali.kfs.module.bc.businessobject.PendingBudgetConstructionAppointmentFunding;
 import org.kuali.kfs.module.bc.service.BudgetConstructionIntendedIncumbentService;
@@ -164,4 +165,12 @@
     protected String getFundingAwareObjectName() {
         return BCPropertyConstants.BUDGET_CONSTRUCTION_INTENDED_INCUMBENT;
     }
+
+    /**
+     * @see org.kuali.kfs.module.bc.document.web.struts.DetailSalarySettingAction#getSynchronizationCheckType()
+     */
+    @Override
+    public SynchronizationCheckType getSynchronizationCheckType() {
+        return SynchronizationCheckType.POSN;
+    }
 }
Index: work/src/org/kuali/kfs/module/cab/document/service/impl/GlLineServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/cab/document/service/impl/GlLineServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/cab/document/service/impl/GlLineServiceImpl.java	(working copy)
@@ -62,6 +62,7 @@
     protected BusinessObjectService businessObjectService;
     protected AssetGlobalService assetGlobalService;
 
+
     /**
      * @see org.kuali.kfs.module.cab.document.service.GlLineService#createAssetGlobalDocument(java.util.List,
      *      org.kuali.kfs.module.cab.businessobject.GeneralLedgerEntry)
@@ -91,8 +92,7 @@
     }
 
     /**
-     * Marks the capital asset information as "processed" so that it won't be picked up again
-     * for processing.
+     * De-activate the GL Entries
      * 
      * @param primary
      * @param capitalAssetLineNumber
@@ -259,6 +259,7 @@
         entry.getGeneralLedgerEntryAssets().add(entryAsset);
     }
 
+
     /**
      * Creates asset global
      * 
Index: work/src/org/kuali/kfs/module/ec/service/impl/EffortCertificationDetailBuildServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/service/impl/EffortCertificationDetailBuildServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/service/impl/EffortCertificationDetailBuildServiceImpl.java	(working copy)
@@ -54,7 +54,7 @@
         detailLine.setFinancialObjectCode(ledgerBalance.getFinancialObjectCode());
 
         Map<Integer, Set<String>> reportPeriods = reportDefinition.getReportPeriods();
-        KualiDecimal payrollAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods);
+        KualiDecimal payrollAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods, true);
 
         detailLine.setEffortCertificationPayrollAmount(payrollAmount);
         detailLine.setEffortCertificationOriginalPayrollAmount(payrollAmount);
Index: work/src/org/kuali/kfs/module/ec/service/impl/EffortCertificationDocumentBuildServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/service/impl/EffortCertificationDocumentBuildServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/service/impl/EffortCertificationDocumentBuildServiceImpl.java	(working copy)
@@ -78,7 +78,7 @@
     public EffortCertificationDocumentBuild generateDocumentBuild(Integer postingYear, EffortCertificationReportDefinition reportDefinition, List<LaborLedgerBalance> ledgerBalances) {
         Map<Integer, Set<String>> reportPeriods = reportDefinition.getReportPeriods();
 
-        KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalances, reportPeriods);
+        KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalances, reportPeriods, true);
         PayrollAmountHolder payrollAmountHolder = new PayrollAmountHolder(totalAmount, KualiDecimal.ZERO, 0);
 
         LaborLedgerBalance headOfBalanceList = ledgerBalances.get(0);
Index: work/src/org/kuali/kfs/module/ec/batch/service/impl/EffortCertificationExtractServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/batch/service/impl/EffortCertificationExtractServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/batch/service/impl/EffortCertificationExtractServiceImpl.java	(working copy)
@@ -388,7 +388,7 @@
         for (String key : ledgerBalanceMap.keySet()) {
             LaborLedgerBalance ledgerBalance = ledgerBalanceMap.get(key);
 
-            KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods);
+            KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods, false);
             if (totalAmount.isNonZero()) {
                 cosolidatedLedgerBalances.add(ledgerBalance);
             }
Index: work/src/org/kuali/kfs/module/ec/businessobject/EffortCertificationDetail.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/businessobject/EffortCertificationDetail.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/businessobject/EffortCertificationDetail.java	(working copy)
@@ -25,6 +25,7 @@
 import org.kuali.kfs.coa.businessobject.Chart;
 import org.kuali.kfs.coa.businessobject.ObjectCode;
 import org.kuali.kfs.coa.businessobject.SubAccount;
+import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.integration.cg.ContractsAndGrantsModuleService;
 import org.kuali.kfs.integration.ld.LaborModuleService;
 import org.kuali.kfs.module.ec.EffortPropertyConstants;
@@ -40,6 +41,7 @@
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.rice.core.api.util.type.KualiDecimal;
 import org.kuali.rice.krad.bo.PersistableBusinessObjectBase;
+import org.kuali.rice.kns.util.ObjectUtils;
 
 /**
  * Business Object for the Effort Certification Detail Table.
@@ -54,6 +56,7 @@
     private String sourceChartOfAccountsCode;
     private String sourceAccountNumber;
 
+
     private KualiDecimal effortCertificationPayrollAmount;
     private KualiDecimal effortCertificationOriginalPayrollAmount;
     private Integer effortCertificationCalculatedOverallPercent;
@@ -69,7 +72,7 @@
     private String overrideCode = AccountingLineOverride.CODE.NONE;
 
     private boolean newLineIndicator; // to indicate if this detail line has been persisted or not
-    
+
     // holds last saved updated payroll amount so business rule can check if it has been updated at the route level
     private KualiDecimal persistedPayrollAmount;
     private Integer persistedEffortPercent;
@@ -122,6 +125,8 @@
             this.effortCertificationOriginalPayrollAmount = effortCertificationDetail.getEffortCertificationOriginalPayrollAmount();
             this.originalFringeBenefitAmount = effortCertificationDetail.getOriginalFringeBenefitAmount();
             this.effectiveDate = effortCertificationDetail.getEffectiveDate();
+
+
         }
     }
 
@@ -177,6 +182,18 @@
      */
     public void setAccountNumber(String accountNumber) {
         this.accountNumber = accountNumber;
+        // if accounts can't cross charts, set chart code whenever account number is set
+        AccountService accountService = SpringContext.getBean(AccountService.class);
+        if (!accountService.accountsCanCrossCharts()) {
+            Account account = accountService.getUniqueAccountForAccountNumber(accountNumber);
+            if (ObjectUtils.isNotNull(account)) {
+                setChartOfAccountsCode(account.getChartOfAccountsCode());
+                setChartOfAccounts(account.getChartOfAccounts());
+
+            }
+
+
+        }           
     }
 
     /**
@@ -232,7 +249,7 @@
     public void setEffectiveDate(String effectiveDate) {
         this.effectiveDate = effectiveDate;
     }    
-    
+
     /**
      * Gets the financialObjectCode attribute.
      * 
@@ -551,7 +568,7 @@
     public void setPositionData(PositionData positionData) {
         this.positionData = positionData;
     }    
-    
+
     /**
      * Gets the newLineIndicator attribute.
      * 
@@ -579,7 +596,7 @@
         if (this.getAccount() != null && !this.getAccount().isActive()) {
             return false;
         }
-        
+
         return true;
     }
 
@@ -770,7 +787,7 @@
 
         return totalEffortPercent;
     }
-    
+
     /**
      * calculate the total persised effort percent of the given detail lines
      * 
@@ -818,7 +835,7 @@
 
         return totalPayrollAmount;
     }
-    
+
     /**
      * calculate the total payroll amount of the given detail lines
      * 
@@ -946,4 +963,9 @@
     public void setGroupId(String groupId) {
         this.groupId = groupId;
     }
+
+
+
+
+
 }
Index: work/src/org/kuali/kfs/module/ec/util/LedgerBalanceConsolidationHelper.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/util/LedgerBalanceConsolidationHelper.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/util/LedgerBalanceConsolidationHelper.java	(working copy)
@@ -17,6 +17,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -146,20 +147,36 @@
     }
 
     /**
-     * summurize the balance amounts of a given ledger balance within the specified report periods
+     * summarize the balance amounts of a given ledger balance within the specified report periods
      * 
      * @param ledgerBalance the given labor ledger balance
      * @param reportPeriods the given report periods
+     * @param allFiscalYears allows for total amount calculation across all fiscal years. This is useful if the ledger balances have already been consolidated which is the case once we build the document
      * @return the total amounts of the given balance within the specified report periods
      */
-    public static KualiDecimal calculateTotalAmountWithinReportPeriod(LaborLedgerBalance ledgerBalance, Map<Integer, Set<String>> reportPeriods) {
-        Integer fiscalYear = ledgerBalance.getUniversityFiscalYear();
+    public static KualiDecimal calculateTotalAmountWithinReportPeriod(LaborLedgerBalance ledgerBalance, Map<Integer, Set<String>> reportPeriods, boolean allFiscalYears) {
         KualiDecimal totalAmount = KualiDecimal.ZERO;
 
-        Set<String> periodCodes = reportPeriods.get(fiscalYear);
-        for (String period : periodCodes) {
-            totalAmount = totalAmount.add(ledgerBalance.getAmountByPeriod(period));
+        Set<String> periodCodes = new HashSet<String>();
+        
+        // KFSCNTRB-696: allFiscalYears was added because once balances are consolidated we need to look at all periods. Otherwise we may miss data if reportPeriods crossed fiscal years
+        if (allFiscalYears) {
+            for (Set<String> sourcePeriods : reportPeriods.values()) {
+                for (String sourcePeriod : sourcePeriods) {
+                    if (!periodCodes.contains(sourcePeriod)) {
+                        periodCodes.add(sourcePeriod);
+                    }
+                }
+            }
+        } else {
+            Integer fiscalYear = ledgerBalance.getUniversityFiscalYear();
+            periodCodes = reportPeriods.get(fiscalYear);
         }
+
+        for (String periodCode : periodCodes) {
+            totalAmount = totalAmount.add(ledgerBalance.getAmountByPeriod(periodCode));
+        }
+        
         return totalAmount;
     }
 
@@ -168,13 +185,14 @@
      * 
      * @param ledgerBalance the given labor ledger balances
      * @param reportPeriods the given report periods
+     * @param allFiscalYears allows for total amount calculation across all fiscal years. This is useful if the ledger balances have already been consolidated
      * @return the total amounts of the given balances within the specified report periods
      */
-    public static KualiDecimal calculateTotalAmountWithinReportPeriod(Collection<LaborLedgerBalance> ledgerBalances, Map<Integer, Set<String>> reportPeriods) {
+    public static KualiDecimal calculateTotalAmountWithinReportPeriod(Collection<LaborLedgerBalance> ledgerBalances, Map<Integer, Set<String>> reportPeriods, boolean allFiscalYears) {
         KualiDecimal totalAmount = KualiDecimal.ZERO;
 
         for (LaborLedgerBalance ledgerBalance : ledgerBalances) {
-            KualiDecimal totalAmountForOneBalance = calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods);
+            KualiDecimal totalAmountForOneBalance = calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods, allFiscalYears);
             totalAmount = totalAmount.add(totalAmountForOneBalance);
         }
         return totalAmount;
Index: work/src/org/kuali/kfs/module/ec/document/datadictionary/EffortCertificationDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/ec/document/datadictionary/EffortCertificationDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/document/datadictionary/EffortCertificationDocument.xml	(working copy)
@@ -21,6 +21,7 @@
 
     <property name="documentTypeName" value="ECD"/>
     <property name="documentClass" value="org.kuali.kfs.module.ec.document.EffortCertificationDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.ec.document.EffortCertificationDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.ec.document.validation.impl.EffortCertificationDocumentRules"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.ec.document.authorization.EffortCertificationDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.ec.document.authorization.EffortDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/ec/document/EffortCertificationDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/document/EffortCertificationDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/document/EffortCertificationDocument.java	(working copy)
@@ -786,10 +786,31 @@
     public boolean answerSplitNodeQuestion(String nodeName) throws UnsupportedOperationException {
         if (nodeName.equals(EffortCertificationDocument.DO_AWARD_SPLIT)) return isDoAwardSplit();
         if (nodeName.equals(EffortCertificationDocument.DO_RECREATE_SPLIT)) return isDoRecreateSplit();
+        if (nodeName.equals(KFSConstants.REQUIRES_WORKSTUDY_REVIEW)) return checkOjbectCodeForWorkstudy();
         throw new UnsupportedOperationException("Cannot answer split question for this node you call \""+nodeName+"\"");
     }
     
+    
     /**
+     * KFSMI-4606
+     * @return boolean 
+     */
+    protected boolean checkOjbectCodeForWorkstudy(){
+        List<String> workstudyRouteObjectcodes = SpringContext.getBean(ParameterService.class).getParameterValues(KfsParameterConstants.FINANCIAL_SYSTEM_DOCUMENT.class, KFSConstants.WORKSTUDY_ROUTE_OBJECT_CODES_PARM_NM);
+        
+        List<EffortCertificationDetail> effortCertificationDetails = getEffortCertificationDetailLines();
+        
+        // check object code in accounting lines
+        for (EffortCertificationDetail effortCertificationDetail : effortCertificationDetails){
+            if (workstudyRouteObjectcodes.contains(effortCertificationDetail.getFinancialObjectCode())) {
+                return true;
+            }
+        }
+        
+        return false;
+    }
+    
+    /**
      * Checks system parameter that indicates whether routing to project directors should occur only on
      * lines with federal accounts or all lines. 
      * 
Index: work/src/org/kuali/kfs/module/ec/document/validation/impl/LedgerBalanceFieldValidator.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/document/validation/impl/LedgerBalanceFieldValidator.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/document/validation/impl/LedgerBalanceFieldValidator.java	(working copy)
@@ -97,7 +97,7 @@
      *         message
      */
     public static Message isNonZeroAmountBalanceWithinReportPeriod(LaborLedgerBalance ledgerBalance, Map<Integer, Set<String>> reportPeriods) {
-        KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods);
+        KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalance, reportPeriods, false);
 
         if (totalAmount.isZero()) {
             return MessageBuilder.buildMessage(EffortKeyConstants.ERROR_ZERO_PAYROLL_AMOUNT, Message.TYPE_FATAL);
@@ -114,7 +114,7 @@
      *         message
      */
     public static Message isTotalAmountPositive(Collection<LaborLedgerBalance> ledgerBalances, Map<Integer, Set<String>> reportPeriods) {
-        KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalances, reportPeriods);
+        KualiDecimal totalAmount = LedgerBalanceConsolidationHelper.calculateTotalAmountWithinReportPeriod(ledgerBalances, reportPeriods, false);
 
         if (!totalAmount.isPositive()) {
             return MessageBuilder.buildMessage(EffortKeyConstants.ERROR_NONPOSITIVE_PAYROLL_AMOUNT, totalAmount.toString());
Index: work/src/org/kuali/kfs/module/ec/document/web/struts/EffortCertificationForm.java
===================================================================
--- work/src/org/kuali/kfs/module/ec/document/web/struts/EffortCertificationForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/ec/document/web/struts/EffortCertificationForm.java	(working copy)
@@ -347,12 +347,76 @@
 
         return completeURL.concat(queryString.toString());
     }
+    
+   
+    /**
+     * Gets the fieldInfo attribute.
+     * 
+     * @return Returns the fieldInfo.
+     */
+    protected Map<String, String> getFieldInfo(EffortCertificationDetail detailLine) {
+        LOG.info("getFieldInfo(List<EffortCertificationDetail>) start");
 
+        //Map<String, String> fieldInfo = new HashMap<String, String>();
+        EffortCertificationDocument document = (EffortCertificationDocument) this.getDocument();
+        KualiDecimal totalOriginalPayrollAmount = document.getTotalOriginalPayrollAmount();
+
+        
+            detailLine.refreshNonUpdateableReferences();
+
+            Map<String, String> fieldInfoForAttribute = new HashMap<String, String>();
+            
+            fieldInfoForAttribute.put(KFSPropertyConstants.CHART_OF_ACCOUNTS_CODE, ObjectUtils.isNotNull(detailLine.getChartOfAccounts())? detailLine.getChartOfAccounts().getFinChartOfAccountDescription(): "");
+
+            String accountInfo = buildAccountInfo(detailLine.getAccount());
+            fieldInfoForAttribute.put(KFSPropertyConstants.ACCOUNT_NUMBER, accountInfo);
+
+            SubAccount subAccount = detailLine.getSubAccount();
+            if (ObjectUtils.isNotNull(subAccount)) {
+                fieldInfoForAttribute.put(KFSPropertyConstants.SUB_ACCOUNT_NUMBER, subAccount.getSubAccountName());
+            }
+
+            ObjectCode objectCode = detailLine.getFinancialObject();
+            if (ObjectUtils.isNotNull(objectCode)) {
+                fieldInfoForAttribute.put(KFSPropertyConstants.FINANCIAL_OBJECT_CODE, objectCode.getFinancialObjectCodeName());
+            }
+
+            Account sourceAccount = detailLine.getSourceAccount();
+            if (ObjectUtils.isNotNull(sourceAccount)) {
+                fieldInfoForAttribute.put(EffortPropertyConstants.SOURCE_ACCOUNT_NUMBER, sourceAccount.getAccountName());
+            }
+
+            Chart sourceChart = detailLine.getSourceChartOfAccounts();
+            if (ObjectUtils.isNotNull(sourceChart)) {
+                fieldInfoForAttribute.put(EffortPropertyConstants.SOURCE_CHART_OF_ACCOUNTS_CODE, sourceChart.getFinChartOfAccountDescription());
+            }
+
+            KualiDecimal originalPayrollAmount = detailLine.getEffortCertificationOriginalPayrollAmount();
+            String actualOriginalPercent = PayrollAmountHolder.recalculateEffortPercentAsString(totalOriginalPayrollAmount, originalPayrollAmount);
+            fieldInfoForAttribute.put(EffortPropertyConstants.EFFORT_CERTIFICATION_CALCULATED_OVERALL_PERCENT, actualOriginalPercent);
+
+            //fieldInfo.add(fieldInfoForAttribute);
+        
+
+        return fieldInfoForAttribute;
+    }
+    
     /**
      * Gets the fieldInfo attribute.
      * 
      * @return Returns the fieldInfo.
      */
+    public Map<String, String> getDetailLineFieldInfo() {
+        LOG.info("getSummarizedDetailLineFieldInfo() start");
+
+        return this.getFieldInfo(this.getNewDetailLine());
+    }
+    
+    /**
+     * Gets the fieldInfo attribute.
+     * 
+     * @return Returns the fieldInfo.
+     */
     protected List<Map<String, String>> getFieldInfo(List<EffortCertificationDetail> detailLines) {
         LOG.debug("getFieldInfo(List<EffortCertificationDetail>) start");
 
@@ -399,7 +463,8 @@
 
         return fieldInfo;
     }
-
+    
+  
     /**
      * get the inquirable implmentation
      * 
Index: work/src/org/kuali/kfs/module/purap/batch/ExtractPdpImmediatesStep.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/batch/ExtractPdpImmediatesStep.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/batch/ExtractPdpImmediatesStep.java	(working copy)
@@ -16,11 +16,14 @@
 package org.kuali.kfs.module.purap.batch;
 
 import java.util.Date;
+import java.util.List;
 
 import org.kuali.kfs.module.purap.service.PdpExtractService;
+import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.batch.AbstractStep;
 import org.kuali.rice.core.api.datetime.DateTimeService;
 import org.springframework.transaction.annotation.Transactional;
+import org.kuali.rice.kns.service.ParameterService;
 
 @Transactional
 public class ExtractPdpImmediatesStep extends AbstractStep {
@@ -38,11 +41,11 @@
      */
     public boolean execute(String jobName, Date jobRunDate) throws InterruptedException {
         LOG.debug("execute() started");
-
         pdpExtractService.extractImmediatePaymentsOnly();
         return true;
     }
-
+    
+   
     public boolean execute() throws InterruptedException {
         try {
             return execute(null, dateTimeService.getCurrentDate());
@@ -64,4 +67,13 @@
     public void setDateTimeService(DateTimeService dateTimeService) {
         this.dateTimeService = dateTimeService;
     }
+
+    
+    
+    
+
+    
+    
+    
+    
 }
Index: work/src/org/kuali/kfs/module/purap/businessobject/AbstractRelatedView.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/businessobject/AbstractRelatedView.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/businessobject/AbstractRelatedView.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2007 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -82,7 +82,7 @@
                 notes.add(note);
             }
         }
-
+        
         return notes;
     }
 
@@ -103,20 +103,19 @@
             return documentNumber;
         }
     }
-
-
+    
     /**
      * Returns the document label according to the label specified in the data dictionary.
-     *
+     * 
      * @return
      * @throws WorkflowException
      */
     public String getDocumentLabel() throws WorkflowException{
         return SpringContext.getBean(DataDictionaryService.class).getDocumentLabelByTypeName(getDocumentTypeName());
     }
-
+    
     /**
-     * @return the document type name for the documents pulled back by this RelatedView
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
      */
     public abstract String getDocumentTypeName();
 
Index: work/src/org/kuali/kfs/module/purap/businessobject/ElectronicInvoiceItem.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/businessobject/ElectronicInvoiceItem.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/businessobject/ElectronicInvoiceItem.java	(working copy)
@@ -110,19 +110,28 @@
   }
   
   public BigDecimal getInvoiceLineUnitCostBigDecimal() {
+    BigDecimal unitprice = BigDecimal.ZERO;
     if (StringUtils.isNotEmpty(unitPrice)) {
-      return new BigDecimal(this.unitPrice);
-    } else {
-      return BigDecimal.ZERO;
+        try {
+             unitprice = new BigDecimal(this.unitPrice);
+        } catch(NumberFormatException nfe) {
+            LOG.info("invalid unit price" + this.unitPrice) ;
+        }
     }
+    return unitprice;
   }
   
   public BigDecimal getInvoiceLineSubTotalAmountBigDecimal() {
-    if (StringUtils.isNotEmpty(subTotalAmount)) {
-      return new BigDecimal(this.subTotalAmount);
-    } else {
-      return BigDecimal.ZERO;
+    BigDecimal subTotalAmount = BigDecimal.ZERO;
+    if (StringUtils.isNotEmpty(this.subTotalAmount)) {
+        try {
+            subTotalAmount = new BigDecimal(this.subTotalAmount);
+        }
+        catch (NumberFormatException nfe) {
+            LOG.info("invalid sub Total Amount " + this.subTotalAmount) ;
+        }
     }
+        return subTotalAmount;
   }
 
   public BigDecimal getInvoiceLineTaxAmountBigDecimal() {
Index: work/src/org/kuali/kfs/module/purap/spring-purap.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/spring-purap.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/spring-purap.xml	(working copy)
@@ -152,6 +152,7 @@
         <property name="bankService" ref="bankService" />
         <property name="dataDictionaryService" ref="dataDictionaryService" />
         <property name="purapAccountingService" ref="purapAccountingService" />
+        <property name="lockedDocuments" value="PREQ"/>
 	</bean>
     <bean id="requisitionService" parent="requisitionService-parentBean"/>
 
@@ -568,11 +569,6 @@
 				<ref bean="autoApprovePaymentRequestsStep" />
 			</list>
 		</property>
-		<property name="dependencies">
-			<map>
-				<entry key="processPdpCancelsAndPaidJob" value="softDependency" />
-			</map>
-		</property>
 	</bean>
 	
 	<bean id="receivingPaymentRequestJob" parent="scheduledJobDescriptor">
@@ -640,7 +636,8 @@
     <property name="batchInputFileType" ref="electronicInvoiceInputFileType" />
 	</bean>
 	
-	<bean id="electronicInvoiceInputFileType" class="org.kuali.kfs.module.purap.batch.ElectronicInvoiceInputFileType">
+	<bean id="electronicInvoiceInputFileType" parent="electronicInvoiceInputFileType-parentBean"/>
+	<bean id="electronicInvoiceInputFileType-parentBean" abstract="true" class="org.kuali.kfs.module.purap.batch.ElectronicInvoiceInputFileType">
     	<property name="directoryPath">
 	       <value>${staging.directory}/purap/electronicInvoice</value>
 	    </property>
Index: work/src/org/kuali/kfs/module/purap/ojb-purap.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/ojb-purap.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/ojb-purap.xml	(working copy)
@@ -280,6 +280,8 @@
 	<field-descriptor name="useTaxIndicator" column="USE_TAX_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbCharBooleanConversion" />
     <field-descriptor name="vendorAttentionName" column="VNDR_ATTN_NM" jdbc-type="VARCHAR"/>
     <field-descriptor name="accountDistributionMethod" column="ACCT_DISTR_MTD_IND" jdbc-type="VARCHAR"/>
+    <field-descriptor name="justification" column="VNDR_DEBRD_REAS_TXT" jdbc-type="VARCHAR"/>
+
     <!-- COMMON TO ALL DOCUMENTS -->
     <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
         <foreignkey field-ref="documentNumber" />
@@ -520,7 +522,9 @@
 	<field-descriptor name="useTaxIndicator" column="USE_TAX_IND" jdbc-type="VARCHAR" conversion="org.kuali.rice.core.framework.persistence.ojb.conversion.OjbCharBooleanConversion" />
     <field-descriptor name="vendorAttentionName" column="VNDR_ATTN_NM" jdbc-type="VARCHAR"/>
     <field-descriptor name="assignedUserPrincipalId" column="PO_ASND_ID" jdbc-type="VARCHAR"/>
-    <field-descriptor name="accountDistributionMethod" column="ACCT_DISTR_MTD_IND" jdbc-type="VARCHAR"/>
+    <field-descriptor name="accountDistributionMethod" column="ACCT_DISTR_MTD_IND" jdbc-type="VARCHAR"/>   
+    <field-descriptor name="justification" column="VNDR_DEBRD_REAS_TXT" jdbc-type="VARCHAR"/>
+    
     <!-- COMMON TO ALL DOCUMENTS -->
     <reference-descriptor name="documentHeader" class-ref="org.kuali.kfs.sys.businessobject.FinancialSystemDocumentHeader" auto-retrieve="true" auto-update="object" auto-delete="object" proxy="true" >
         <foreignkey field-ref="documentNumber" />
@@ -3546,6 +3550,7 @@
 	</reference-descriptor>    
 </class-descriptor>
 
+
 <class-descriptor class="org.kuali.kfs.module.purap.businessobject.CreditMemoAccount" table="AP_CRDT_MEMO_ACCT_T">
     <field-descriptor name="accountIdentifier" column="CRDT_MEMO_ACCT_ID" jdbc-type="INTEGER" primarykey="true" index="true" autoincrement="true" sequence-name="CRDT_MEMO_ACCT_ID"/>
     <field-descriptor name="objectId" column="OBJ_ID" jdbc-type="VARCHAR" index="true"/>
Index: work/src/org/kuali/kfs/module/purap/service/impl/ElectronicInvoiceHelperServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/service/impl/ElectronicInvoiceHelperServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/service/impl/ElectronicInvoiceHelperServiceImpl.java	(working copy)
@@ -44,6 +44,7 @@
 import org.apache.commons.lang.math.NumberUtils;
 import org.apache.xml.serialize.OutputFormat;
 import org.apache.xml.serialize.XMLSerializer;
+import org.kuali.kfs.gl.service.impl.StringHelper;
 import org.kuali.kfs.module.purap.PurapConstants;
 import org.kuali.kfs.module.purap.PurapConstants.PurchaseOrderStatuses;
 import org.kuali.kfs.module.purap.PurapKeyConstants;
@@ -1075,11 +1076,7 @@
 
         String mailTitle = "E-Invoice Load Results for " + ElectronicInvoiceUtils.getDateDisplayText(SpringContext.getBean(DateTimeService.class).getCurrentDate());
         
-        if (KRADUtils.isProductionEnvironment()) {
             message.setSubject(mailTitle);
-        } else {
-            message.setSubject(kualiConfigurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY) + " - " + mailTitle);
-        }
         return message;
     }
     
@@ -1227,7 +1224,9 @@
         String reqDocInitiator = reqDoc.getDocumentHeader().getWorkflowDocument().getInitiatorPrincipalId();
         try {
             Person user = SpringContext.getBean(org.kuali.rice.kim.api.identity.PersonService.class).getPersonByPrincipalName(reqDocInitiator);
-            preqDoc.setProcessingCampusCode(user.getCampusCode());
+            
+            setProcessingCampus(preqDoc, user.getCampusCode());
+
         }catch(Exception e){
             String extraDescription = "Error setting processing campus code - " + e.getMessage();
             ElectronicInvoiceRejectReason rejectReason = matchingService.createRejectReason(PurapConstants.ElectronicInvoice.PREQ_ROUTING_VALIDATION_ERROR, extraDescription, orderHolder.getFileName());
@@ -1315,6 +1314,24 @@
         return preqDoc;
     }
     
+    /**
+     * 
+     * This method check OVERRIDE_PROCESSING_CAMPUS parameter to set processing campus code.
+     * If parameter value is populated, it set the processing campus to the value in parameter, otherwise use requisition initiator's campus code. 
+     * @param preqDoc
+     * @param initiatorCampusCode
+     */
+    protected void setProcessingCampus(PaymentRequestDocument preqDoc, String initiatorCampusCode) {
+       String campusCode = parameterService.getParameterValue(ElectronicInvoiceStep.class, PurapParameterConstants.ElectronicInvoiceParameters.OVERRIDE_PROCESSING_CAMPUS);
+       if(!StringHelper.isNullOrEmpty(campusCode)) {
+           preqDoc.setProcessingCampusCode(campusCode);
+       }
+       else {
+           preqDoc.setProcessingCampusCode(initiatorCampusCode);
+       }
+        
+    }
+    
     protected void addShipToNotes(PaymentRequestDocument preqDoc, 
                                 ElectronicInvoiceOrderHolder orderHolder){
         
@@ -1430,7 +1447,7 @@
     }
     
     protected void populateItemDetails(PaymentRequestDocument preqDocument, ElectronicInvoiceOrderHolder orderHolder) {
-        
+
         if (LOG.isInfoEnabled()) {
             LOG.info("Populating invoice order items into the payment request document");
         }
@@ -1665,6 +1682,7 @@
                 purapItem.setItemDescription(purapItem.getItemDescription() + " - " + invoiceSpecialHandlingDescription);
             }
         }
+        
     }
     
     protected void processTaxItem (PaymentRequestItem preqItem,
@@ -1684,8 +1702,9 @@
                 preqItem.setItemDescription(preqItem.getItemDescription() + " - " + orderHolder.getTaxDescription());
             }
         }
+        
     }
-       
+    
     protected void processShippingItem(PaymentRequestItem preqItem,
                                                    ElectronicInvoiceOrderHolder orderHolder){
         
@@ -1724,6 +1743,7 @@
         
         preqItem.addToUnitPrice(orderHolder.getInvoiceDepositAmount());
         preqItem.addToExtendedPrice(new KualiDecimal(orderHolder.getInvoiceDepositAmount()));
+        
     }
     
     protected void processDueItem(PaymentRequestItem preqItem,
@@ -1752,7 +1772,7 @@
             return false;
         }
     }
-
+    
     protected void setItemDefaultDescription(PaymentRequestItem preqItem){
         
         //If description is empty and item is not type "ITEM"... use default description
Index: work/src/org/kuali/kfs/module/purap/service/impl/PdpExtractServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/service/impl/PdpExtractServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/service/impl/PdpExtractServiceImpl.java	(working copy)
@@ -96,15 +96,17 @@
     private BankService bankService;
     private DataDictionaryService dataDictionaryService;
     private PurapAccountingServiceImpl purapAccountingService;
+    private List<String> lockedDocuments;
 
     /**
      * @see org.kuali.kfs.module.purap.service.PdpExtractService#extractImmediatePaymentsOnly()
      */
     public void extractImmediatePaymentsOnly() {
         LOG.debug("extractImmediatePaymentsOnly() started");
-
         Date processRunDate = dateTimeService.getCurrentDate();
+        lockUnlockDocuments(true);
         extractPayments(true, processRunDate);
+        lockUnlockDocuments(false);
     }
 
     /**
@@ -1042,6 +1044,40 @@
             return new EqualsBuilder().append(key(), thisobj.key()).isEquals();
         }
     }
+    
+    private void lockUnlockDocuments(boolean locked) {
+        for(String documentType : lockedDocuments) {
+            Class<? extends Document> documentClass = dataDictionaryService.getDocumentClassByTypeName(documentType);
+            boolean exists = parameterService.parameterExists(documentClass , KFSConstants.DOCUMENT_LOCKOUT_PARM_NM);
+            if(exists) {
+                String namespace = parameterService.getNamespace(documentClass);
+                String detailType = parameterService.getDetailType(documentClass);
+                Parameter parameter  = parameterService.retrieveParameter(namespace,detailType , KFSConstants.DOCUMENT_LOCKOUT_PARM_NM);
+                if(locked) {
+                    parameter.setParameterValue("Y");
+                }
+                else {
+                    parameter.setParameterValue("N");
+                }
+                
+                businessObjectService.save(parameter);
+                parameterService.clearCache();
+            }
+            else {
+                String namespace = parameterService.getNamespace(documentClass);
+                String detailType = parameterService.getDetailType(documentClass);
+                Parameter parameter = new Parameter();
+                parameter.setParameterDetailTypeCode(detailType);
+                parameter.setParameterNamespaceCode(namespace);
+                parameter.setParameterApplicationNamespaceCode(KFSConstants.APPLICATION_NAMESPACE_CODE);
+                parameter.setParameterName(KFSConstants.DOCUMENT_LOCKOUT_PARM_NM);
+                parameter.setParameterValue("Y");
+                parameter.setParameterDescription(KFSConstants.DOCUMENT_LOCKOUT_PARM_DESC);
+                parameter.setParameterTypeCode(KfsParameterConstants.PARAMETER_CONFIG_TYPE_CODE);
+                businessObjectService.save(parameter);
+            }
+        }
+    }
 
     /**
      * Sets the paymentRequestService attribute value.
@@ -1189,4 +1225,10 @@
         return personService;
     }
 
+    public void setLockedDocuments(List<String> lockedDocuments) {
+        this.lockedDocuments = lockedDocuments;
+    }
+    
+    
+
 }
Index: work/src/org/kuali/kfs/module/purap/PurapConstants.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/PurapConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/PurapConstants.java	(working copy)
@@ -693,6 +693,9 @@
         public static final Set STATUSES_DISALLOWING_REMOVE_HOLD = new HashSet();
         public static final Set STATUSES_DISALLOWING_REQUEST_CANCEL = new HashSet();
         public static final Set STATUSES_DISALLOWING_REMOVE_REQUEST_CANCEL = new HashSet();
+        public static final Set STATUSES_PREROUTE = new HashSet();
+        public static final Set STATUSES_ENROUTE = new HashSet();
+        public static final Set STATUSES_POSTROUTE = new HashSet();
         static {
             CANCELLED_STATUSES.add(APPDOC_CANCELLED_IN_PROCESS);
             CANCELLED_STATUSES.add(APPDOC_CANCELLED_POST_AP_APPROVE);
@@ -711,6 +714,17 @@
             STATUSES_DISALLOWING_REQUEST_CANCEL.addAll(Arrays.asList(CANCELLED_STATUSES.toArray(new String[CANCELLED_STATUSES.size()])));
 
             STATUSES_DISALLOWING_REMOVE_REQUEST_CANCEL.addAll(Arrays.asList(CANCELLED_STATUSES.toArray(new String[CANCELLED_STATUSES.size()])));
+
+            STATUSES_PREROUTE.add(IN_PROCESS);
+            STATUSES_PREROUTE.add(AWAITING_ACCOUNTS_PAYABLE_REVIEW);
+            
+            STATUSES_ENROUTE.add(AWAITING_SUB_ACCT_MGR_REVIEW);
+            STATUSES_ENROUTE.add(AWAITING_FISCAL_REVIEW);
+            STATUSES_ENROUTE.add(AWAITING_ORG_REVIEW);
+            STATUSES_ENROUTE.add(AWAITING_TAX_REVIEW);
+        
+            STATUSES_POSTROUTE.add(DEPARTMENT_APPROVED);
+            STATUSES_POSTROUTE.add(AUTO_APPROVED);
         }
         
         public static final HashMap<String, String> getPaymentRequestAppDocDisapproveStatuses(){
Index: work/src/org/kuali/kfs/module/purap/PurapParameterConstants.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/PurapParameterConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/PurapParameterConstants.java	(working copy)
@@ -57,9 +57,13 @@
     public static final String ENABLE_RECEIVING_ADDRESS_IND = "ENABLE_RECEIVING_ADDRESS_IND";
     public static final String ENABLE_ADDRESS_TO_VENDOR_SELECTION_IND = "ENABLE_ADDRESS_TO_VENDOR_SELECTION_IND";
     
+    //public static final String DISPLAY_DELIVERY_PHONE_NUMBER_ON_PDF_IND = "DISPLAY_DELIVERY_PHONE_NUMBER_ON_PDF_IND";
+    //public static final String DISPLAY_REQUESTOR_EMAIL_ADDRESS_ON_PDF_IND = "DISPLAY_REQUESTOR_EMAIL_ADDRESS_ON_PDF_IND";
+
     public static final String VALIDATE_ACCOUNT_DISTRIBUTION_IND = "VALIDATE_ACCOUNT_DISTRIBUTION_IND";
     
     public static final String SHOW_CLEAR_AND_LOAD_QTY_BUTTONS = "SHOW_CLEAR_AND_LOAD_QTY_BUTTONS";
+    public static final String UNORDERED_ITEM_WARNING_IND = "UNORDERED_ITEM_WARNING_IND";
     
     public static final String ENABLE_DEFAULT_CONTRACT_MANAGER_IND = "ENABLE_DEFAULT_CONTRACT_MANAGER_IND";
     public static final String AUTO_CLOSE_RECURRING_PO_DATE = "AUTO_CLOSE_RECURRING_PO_DATE";
@@ -84,11 +88,13 @@
     
     //Vendor Choices
     public static final String DEFAULT_APO_VENDOR_CHOICE = "DEFAULT_APO_VENDOR_CHOICE";
-    public static final String DEFAULT_B2B_VENDOR_CHOICE = "DEFAULT_B2B_VENDOR_CHOICE";
+    public static final String DEFAULT_B2B_VENDOR_CHOICE = "DEFAULT_B2B_VENDOR_CHOICE";      
     
     public static final String OBJECT_SUB_TYPES_REQUIRING_QUANTITY = "OBJECT_SUB_TYPES_REQUIRING_QUANTITY";
     public static final String PURCHASING_OBJECT_SUB_TYPES = "PURCHASING_OBJECT_SUB_TYPES";
     
+    public static final String SHOW_DEBARRED_VENDOR_WARNING_IND = "SHOW_DEBARRED_VENDOR_WARNING_IND";
+    
     public static class CapitalAsset {
         // used in CAB module service
         public static final String PURCHASING_OBJECT_SUB_TYPES = "PURCHASING_OBJECT_SUB_TYPES";
@@ -140,6 +146,7 @@
         public static final String DAILY_SUMMARY_REPORT_TO_EMAIL_ADDRESSES = "DAILY_SUMMARY_REPORT_TO_EMAIL_ADDRESSES";
         public static final String SALES_TAX_UPPER_VARIANCE_PERCENT = "SALES_TAX_UPPER_VARIANCE_PERCENT";
         public static final String SALES_TAX_LOWER_VARIANCE_PERCENT = "SALES_TAX_LOWER_VARIANCE_PERCENT";
+        public static final String OVERRIDE_PROCESSING_CAMPUS = "OVERRIDE_PROCESSING_CAMPUS";
     }
     
     public static class TaxParameters {
Index: work/src/org/kuali/kfs/module/purap/pdf/PurchaseOrderPdf.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/pdf/PurchaseOrderPdf.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/pdf/PurchaseOrderPdf.java	(working copy)
@@ -402,12 +402,9 @@
                 shipToInfo.append("     " + po.getReceivingLine2Address() + "\n");
             }
             shipToInfo.append("     " + po.getReceivingCityName() + ", " + po.getReceivingStateCode() + " " + po.getReceivingPostalCode() + "\n");
-            if (StringUtils.isNotBlank(po.getReceivingCountryName()) && !KFSConstants.COUNTRY_CODE_UNITED_STATES.equalsIgnoreCase(po.getReceivingCountryName())) {
-                shipToInfo.append("     " + po.getReceivingCountryName() + "\n\n");
-            }
-            else {
-                shipToInfo.append("\n\n");
-            }            
+            if (StringUtils.isNotBlank(po.getReceivingCountryCode()) && !KFSConstants.COUNTRY_CODE_UNITED_STATES.equalsIgnoreCase(po.getReceivingCountryCode())) {
+                shipToInfo.append("     " + po.getReceivingCountryName() + "\n");
+            }   
         }
         else { // use delivery address
             shipToInfo.append("     " + po.getDeliveryToName() + "\n");
@@ -422,13 +419,19 @@
                 shipToInfo.append("     " + po.getDeliveryBuildingLine2Address() + "\n");
             }
             shipToInfo.append("     " + po.getDeliveryCityName() + ", " + po.getDeliveryStateCode() + " " + po.getDeliveryPostalCode() + "\n");
-            if (StringUtils.isNotBlank(po.getDeliveryCountryName()) && !KFSConstants.COUNTRY_CODE_UNITED_STATES.equalsIgnoreCase(po.getDeliveryCountryName())) {
-                shipToInfo.append("     " + po.getDeliveryCountryName() + "\n\n");
+            if (StringUtils.isNotBlank(po.getDeliveryCountryCode()) && !KFSConstants.COUNTRY_CODE_UNITED_STATES.equalsIgnoreCase(po.getDeliveryCountryCode())) {
+                shipToInfo.append("     " + po.getDeliveryCountryName() + "\n");
             }
-            else {
-                shipToInfo.append("\n\n");
-            }
         }
+        // display deliveryToPhoneNumber disregard of whether receiving or delivery address is used
+        shipToInfo.append("     " + po.getDeliveryToPhoneNumber());
+        /*
+        // display deliveryToPhoneNumber based on the parameter indicator, disregard of whether receiving or delivery address is used
+        boolean displayDeliveryPhoneNumber = SpringContext.getBean(ParameterService.class).getIndicatorParameter(PurchaseOrderDocument.class, PurapParameterConstants.DISPLAY_DELIVERY_PHONE_NUMBER_ON_PDF_IND);
+        if (displayDeliveryPhoneNumber && StringUtils.isNotBlank(po.getDeliveryToPhoneNumber())) {
+            shipToInfo.append("     " + po.getDeliveryToPhoneNumber());
+        }
+        */
         
         p = new Paragraph();
         p.add(new Chunk("  Shipping Address", ver_5_normal));
@@ -835,11 +838,16 @@
             cell.setBorderWidth(0);
             signaturesTable.addCell(cell);
 
-            if (StringUtils.isBlank(po.getInstitutionContactName()) || StringUtils.isBlank(po.getInstitutionContactPhoneNumber())) {
-                p = new Paragraph("For more information contact: " + po.getRequestorPersonName() + "  " + po.getRequestorPersonPhoneNumber(), cour_7_normal);
+            //boolean displayRequestorEmail = true; //SpringContext.getBean(ParameterService.class).getIndicatorParameter(PurchaseOrderDocument.class, PurapParameterConstants.DISPLAY_REQUESTOR_EMAIL_ADDRESS_ON_PDF_IND);
+            if (StringUtils.isBlank(po.getInstitutionContactName()) || StringUtils.isBlank(po.getInstitutionContactPhoneNumber()) || StringUtils.isBlank(po.getInstitutionContactEmailAddress())) {
+                //String emailAddress = displayRequestorEmail ? "  " + po.getRequestorPersonEmailAddress() : "";
+                //p = new Paragraph("For more information contact: " + po.getRequestorPersonName() + "  " + po.getRequestorPersonPhoneNumber() + emailAddress, cour_7_normal);
+                p = new Paragraph("For more information contact: " + po.getRequestorPersonName() + "  " + po.getRequestorPersonPhoneNumber() + "  " + po.getRequestorPersonEmailAddress(), cour_7_normal);
             }
             else {
-                p = new Paragraph("For more information contact: " + po.getInstitutionContactName() + "  " + po.getInstitutionContactPhoneNumber(), cour_7_normal);
+                //String emailAddress = displayRequestorEmail ? "  " + po.getInstitutionContactEmailAddress() : "";
+                //p = new Paragraph("For more information contact: " + po.getInstitutionContactName() + "  " + po.getInstitutionContactPhoneNumber() + emailAddress, cour_7_normal);
+                p = new Paragraph("For more information contact: " + po.getInstitutionContactName() + "  " + po.getInstitutionContactPhoneNumber() + "  " + po.getInstitutionContactEmailAddress(), cour_7_normal);
             }
             cell = new PdfPCell(p);
             cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
Index: work/src/org/kuali/kfs/module/purap/pdf/PurchaseOrderTransmitParameters.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/pdf/PurchaseOrderTransmitParameters.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/pdf/PurchaseOrderTransmitParameters.java	(working copy)
@@ -82,9 +82,7 @@
          // We'll get the imageTempLocation and the actual images only if the useImage is true. If useImage is false, we'll leave the
          // images as blank space
          if (useImage) {
-             this.imageTempLocation = SpringContext.getBean(ConfigurationService.class).getPropertyValueAsString(KFSConstants.TEMP_DIRECTORY_KEY) + "/";
-
-             if (imageTempLocation == null) {
+             if (getImageTempLocation() == null) {
                  throw new PurapConfigurationException("IMAGE_TEMP_PATH is missing");
              }
 
@@ -102,10 +100,9 @@
 
          Map<String, Object> criteria = new HashMap<String, Object>();
          criteria.put(KFSPropertyConstants.CAMPUS_CODE, po.getDeliveryCampusCode());
-         this.campusParameter = (CampusParameter) ((List) SpringContext.getBean(BusinessObjectService.class).findMatching(CampusParameter.class, criteria)).get(0);
+         this.campusParameter = ((List<CampusParameter>) SpringContext.getBean(BusinessObjectService.class).findMatching(CampusParameter.class, criteria)).get(0);
 
-        this. statusInquiryUrl = SpringContext.getBean(ParameterService.class).getParameterValueAsString(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.STATUS_INQUIRY_URL);
-         if (this.statusInquiryUrl == null) {
+         if (getStatusInquiryUrl() == null) {
              LOG.debug("generatePurchaseOrderPdf() ended");
              throw new PurapConfigurationException("Application Setting INVOICE_STATUS_INQUIRY_URL is missing.");
          }
@@ -125,8 +122,7 @@
          
          this.contractLanguage = contractLanguage.toString();
          
-         this.pdfFileLocation = SpringContext.getBean(ParameterService.class).getParameterValueAsString(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.PDF_DIRECTORY);
-         if (pdfFileLocation == null) {
+         if (getPdfFileLocation() == null) {
              LOG.debug("savePurchaseOrderPdf() ended");
              throw new PurapConfigurationException("Application Setting PDF_DIRECTORY is missing.");
          }
@@ -145,10 +141,8 @@
 
      public void setPurchaseOrderFaxParameters(PurchaseOrderDocument po, PurchaseOrderVendorQuote povq) {
          // get parameters to send fax 
-         
-      
-         this.pdfFileLocation = SpringContext.getBean(ParameterService.class).getParameterValueAsString(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.PDF_DIRECTORY);
-         if (this.pdfFileLocation == null) {
+              
+         if (getPdfFileLocation() == null) {
              LOG.debug("savePurchaseOrderPdf() ended");
              throw new PurapConfigurationException("Application Setting PDF_DIRECTORY is missing.");
          }
@@ -197,9 +191,7 @@
          // We'll get the imageTempLocation and the actual images only if the useImage is true. If useImage is false, we'll leave the
          // images as blank space
          if (useImage) {
-             this.imageTempLocation = SpringContext.getBean(ConfigurationService.class).getPropertyValueAsString(KFSConstants.TEMP_DIRECTORY_KEY) + "/";
-
-             if (this.imageTempLocation == null) {
+             if (getImageTempLocation() == null) {
                  throw new PurapConfigurationException("IMAGE_TEMP_PATH is missing");
              }
 
@@ -217,10 +209,9 @@
 
          Map<String, Object> criteria = new HashMap<String, Object>();
          criteria.put(KFSPropertyConstants.CAMPUS_CODE, po.getDeliveryCampusCode());
-         this.campusParameter = (CampusParameter) ((List) SpringContext.getBean(BusinessObjectService.class).findMatching(CampusParameter.class, criteria)).get(0);
+         this.campusParameter = ((List<CampusParameter>) SpringContext.getBean(BusinessObjectService.class).findMatching(CampusParameter.class, criteria)).get(0);
 
-          this.statusInquiryUrl = SpringContext.getBean(ParameterService.class).getParameterValueAsString(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.STATUS_INQUIRY_URL);
-         if (this.statusInquiryUrl == null) {
+         if (getStatusInquiryUrl() == null) {
              LOG.debug("generatePurchaseOrderPdf() ended");
              throw new PurapConfigurationException("Application Setting INVOICE_STATUS_INQUIRY_URL is missing.");
          }
@@ -240,8 +231,7 @@
          
          this.contractLanguage = contractLanguage.toString();
          
-         this.pdfFileLocation = SpringContext.getBean(ParameterService.class).getParameterValueAsString(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.PDF_DIRECTORY);
-         if (pdfFileLocation == null) {
+         if (getPdfFileLocation() == null) {
              LOG.debug("savePurchaseOrderPdf() ended");
              throw new PurapConfigurationException("Application Setting PDF_DIRECTORY is missing.");
          }
@@ -289,6 +279,9 @@
     }
 
     public String getPdfFileLocation() {
+        if (pdfFileLocation == null) {
+            pdfFileLocation = SpringContext.getBean(ParameterService.class).getParameterValue(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.PDF_DIRECTORY);
+        }
         return pdfFileLocation;
     }
 
@@ -329,6 +322,9 @@
     }
 
     public String getImageTempLocation() {
+        if (imageTempLocation == null) {
+            imageTempLocation = SpringContext.getBean(KualiConfigurationService.class).getPropertyString(KFSConstants.TEMP_DIRECTORY_KEY) + "/";
+        }
         return imageTempLocation;
     }
 
@@ -353,6 +349,9 @@
     }
 
     public String getStatusInquiryUrl() {
+        if (statusInquiryUrl == null) {
+            statusInquiryUrl = SpringContext.getBean(ParameterService.class).getParameterValue(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.STATUS_INQUIRY_URL);
+        }
         return statusInquiryUrl;
     }
 
@@ -381,7 +380,7 @@
     }
     
     public void setVendorName(String vendorName) {
-        vendorName = vendorName;
+        this.vendorName = vendorName;
     }
     
     public String getFaxDescription() {
Index: work/src/org/kuali/kfs/module/purap/PurapKeyConstants.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/PurapKeyConstants.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/PurapKeyConstants.java	(working copy)
@@ -45,6 +45,7 @@
     public static final String ERROR_FAX_NUMBER_PO_TRANSMISSION_TYPE = "error.faxNumber.PoTransmissionType";
     public static final String ERROR_INVALID_VENDOR_TYPE = "error.vendorType.invalid";
     public static final String ERROR_DEBARRED_VENDOR = "error.debarred.vendor";
+    public static final String WARNING_DEBARRED_VENDOR = "warning.debarred.vendor";
     public static final String ERROR_INACTIVE_VENDOR = "error.inactive.vendor";
     public static final String ERROR_NONEXIST_VENDOR = "error.nonexist.vendor";
     public static final String ERROR_NONEXIST_ASSIGNED_USER = "error.nonexist.assignedUser";
@@ -288,6 +289,7 @@
 
     public static final String MESSAGE_DUPLICATE_CREDIT_MEMO_VENDOR_NUMBER = "message.duplicate.creditMemo.vendorNumber";
     public static final String MESSAGE_DUPLICATE_CREDIT_MEMO_VENDOR_NUMBER_DATE_AMOUNT = "message.duplicate.creditMemo.vendorNumber.date.amount";
+    public static final String ERROR_CREDIT_MEMO_REQUIRES_ATTACHMENT = "errors.creditMemo.attachmentRequired";
 
     // Receiving Line
     public static final String ERROR_RECEIVING_LINE_DOCUMENT_ACTIVE_FOR_PO = "errors.receivingLine.documentActiveForPo";
@@ -300,6 +302,7 @@
     public static final String MESSAGE_DUPLICATE_RECEIVING_LINE_BILL_OF_LADING_NUMBER = "message.duplicate.receivingLine.billOfLadingNumber";
     public static final String MESSAGE_RECEIVING_LINEITEM_RETURN_NOTE_TEXT = "message.receiving.lineitem.return";
     public static final String MESSAGE_RECEIVING_LINEITEM_DAMAGE_NOTE_TEXT = "message.receiving.lineitem.damage";
+    public static final String WARNING_RECEIVING_LINEITEM_ADD_UNORDERED = "warning.receiving.lineitem.add.unordered";
     public static final String ERROR_RECEIVING_LINE_QTYRETURNED_GT_QTYRECEIVED = "errors.receivingLine.quantityReturnedGreaterThanQuantityReceived";
     public static final String ERROR_RECEIVING_LINE_QTYDAMAGED_GT_QTYRECEIVED = "errors.receivingLine.quantityDamagedGreaterThanQuantityReceived";
     
Index: work/src/org/kuali/kfs/module/purap/document/PurchasingAccountsPayableDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/PurchasingAccountsPayableDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/PurchasingAccountsPayableDocument.java	(working copy)
@@ -204,7 +204,7 @@
 
     public List<PurApItem> getItems();
 
-    public void setItems(List items);
+    public void setItems(List<PurApItem> items);
 
     public String getVendorNumber();
 
Index: work/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestProcessItemValidation.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestProcessItemValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/validation/impl/PaymentRequestProcessItemValidation.java	(working copy)
@@ -138,6 +138,7 @@
 
         // check that non-quantity based items are not trying to pay on a zero encumbrance amount (check only prior to ap approval)
         if ((ObjectUtils.isNull(item.getPaymentRequest().getPurapDocumentIdentifier())) || (PurapConstants.PaymentRequestStatuses.APPDOC_IN_PROCESS.equals(item.getPaymentRequest().getAppDocStatus()))) {
+// RICE20 : needed? :  !purapService.isFullDocumentEntryCompleted(item.getPaymentRequest())) {
             if ((item.getItemType().isAmountBasedGeneralLedgerIndicator()) && ((item.getExtendedPrice() != null) && item.getExtendedPrice().isNonZero())) {
                 if (item.getPoOutstandingAmount() == null || item.getPoOutstandingAmount().isZero()) {
                     valid = false;
@@ -340,4 +341,5 @@
     protected void setPreqAccountingLine(PurApAccountingLine preqAccountingLine) {
         this.preqAccountingLine = preqAccountingLine;
     }
+
 }
Index: work/src/org/kuali/kfs/module/purap/document/validation/impl/AccountsPayableBankCodeValidation.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/validation/impl/AccountsPayableBankCodeValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/validation/impl/AccountsPayableBankCodeValidation.java	(working copy)
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008-2009 The Kuali Foundation
+ * Copyright 2008-2009 The Kuali Foundation
  * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,12 +37,12 @@
      */
     public boolean validate(AttributedDocumentEvent event) {
         LOG.debug("validate start");
-
+        
         AccountsPayableDocumentBase apDocument = (AccountsPayableDocumentBase) accountingDocumentForValidation;
 
         boolean isValid = true;
         if (isDocumentTypeUsingBankCode(apDocument)) {
-            isValid = BankCodeValidation.validate(apDocument.getBankCode(), PurapPropertyConstants.BANK_CODE, false, true);
+            isValid = BankCodeValidation.validate(apDocument, apDocument.getBankCode(), PurapPropertyConstants.BANK_CODE, false, true);
         }
 
         return isValid;
@@ -62,7 +62,6 @@
 
     /**
      * Sets the accountingDocumentForValidation attribute value.
-     * 
      * @param accountingDocumentForValidation The accountingDocumentForValidation to set.
      */
     public void setAccountingDocumentForValidation(AccountingDocument accountingDocumentForValidation) {
@@ -70,8 +69,7 @@
     }
 
     /**
-     * Gets the accountingDocumentForValidation attribute.
-     * 
+     * Gets the accountingDocumentForValidation attribute. 
      * @return Returns the accountingDocumentForValidation.
      */
     public AccountingDocument getAccountingDocumentForValidation() {
Index: work/src/org/kuali/kfs/module/purap/document/validation/impl/VendorCreditMemoInitTabReferenceNumberValidation.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/validation/impl/VendorCreditMemoInitTabReferenceNumberValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/validation/impl/VendorCreditMemoInitTabReferenceNumberValidation.java	(working copy)
@@ -23,6 +23,7 @@
 import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
 import org.kuali.kfs.module.purap.document.VendorCreditMemoDocument;
 import org.kuali.kfs.module.purap.document.service.PaymentRequestService;
+import org.kuali.kfs.module.purap.document.service.PurapService;
 import org.kuali.kfs.module.purap.document.service.PurchaseOrderService;
 import org.kuali.kfs.sys.document.validation.GenericValidation;
 import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
@@ -35,6 +36,7 @@
 public class VendorCreditMemoInitTabReferenceNumberValidation extends GenericValidation {
 
     private PaymentRequestService paymentRequestService;
+    private PurapService purapService;
     private PurchaseOrderService purchaseOrderService;
     private VendorService vendorService;
     
@@ -58,6 +60,7 @@
                     GlobalVariables.getMessageMap().putErrorWithoutFullErrorPath(PurapPropertyConstants.PAYMENT_REQUEST_ID, PurapKeyConstants.ERROR_CREDIT_MEMO_PAYMENT_REQEUEST_INVALID, preqNumber.toString());
                     valid = false;
                 }
+// RICE20 : !purapService.isFullDocumentEntryCompleted(preq) ||
                 else if ((PurapConstants.PaymentRequestStatuses.APPDOC_IN_PROCESS.equals(preq.getAppDocStatus())) || (PurapConstants.PaymentRequestStatuses.CANCELLED_STATUSES.contains(preq.getAppDocStatus()))) {
                     GlobalVariables.getMessageMap().putErrorWithoutFullErrorPath(PurapPropertyConstants.PAYMENT_REQUEST_ID, PurapKeyConstants.ERROR_CREDIT_MEMO_PAYMENT_REQEUEST_INVALID_SATATUS, preqNumber.toString());
                     valid = false;
@@ -119,4 +122,12 @@
         this.vendorService = vendorService;
     }
 
+    public PurapService getPurapService() {
+        return purapService;
+    }
+
+    public void setPurapService(PurapService purapService) {
+        this.purapService = purapService;
+    }
+
 }
Index: work/src/org/kuali/kfs/module/purap/document/validation/impl/PurchasingProcessVendorValidation.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/validation/impl/PurchasingProcessVendorValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/validation/impl/PurchasingProcessVendorValidation.java	(working copy)
@@ -24,6 +24,8 @@
 import org.kuali.kfs.module.purap.PurapPropertyConstants;
 import org.kuali.kfs.module.purap.PurapRuleConstants;
 import org.kuali.kfs.module.purap.document.PurchasingDocument;
+import org.kuali.kfs.module.purap.document.PurchasingDocumentBase;
+import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.KFSKeyConstants;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
@@ -83,8 +85,15 @@
 
         // make sure that the vendor is not debarred
         if (vendorDetail.isVendorDebarred()) {
-            valid &= false;
-            errorMap.putError(VendorPropertyConstants.VENDOR_NAME, PurapKeyConstants.ERROR_DEBARRED_VENDOR);
+            if (parameterService.getIndicatorParameter(KFSConstants.ParameterNamespaces.PURCHASING, "Requisition", PurapParameterConstants.SHOW_DEBARRED_VENDOR_WARNING_IND)) {
+                if (StringUtils.isEmpty(((PurchasingDocumentBase)purDocument).getJustification())) {
+                    errorMap.putWarning(VendorPropertyConstants.VENDOR_NAME, PurapKeyConstants.WARNING_DEBARRED_VENDOR, vendorDetail.getVendorName());
+                    valid &= false;
+                }
+            } else {
+                errorMap.putError(VendorPropertyConstants.VENDOR_NAME, PurapKeyConstants.ERROR_DEBARRED_VENDOR);
+                valid &= false;
+            }
         }
 
         // make sure that the vendor is of allowed type
Index: work/src/org/kuali/kfs/module/purap/document/validation/impl/AccountsPayableProcessApprovalAtAccountsPayableReviewAllowedValidation.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/validation/impl/AccountsPayableProcessApprovalAtAccountsPayableReviewAllowedValidation.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/validation/impl/AccountsPayableProcessApprovalAtAccountsPayableReviewAllowedValidation.java	(working copy)
@@ -23,7 +23,10 @@
 import org.kuali.kfs.sys.document.validation.GenericValidation;
 import org.kuali.kfs.sys.document.validation.event.AttributedDocumentEvent;
 import org.kuali.rice.krad.util.GlobalVariables;
+import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
 
+import org.kuali.kfs.module.purap.PurapConstants;
+
 public class AccountsPayableProcessApprovalAtAccountsPayableReviewAllowedValidation extends GenericValidation {
 
     /**
@@ -41,7 +44,15 @@
         if (((AccountsPayableDocument)event.getDocument()).isDocumentStoppedInRouteNode(AccountsPayableStatuses.NODE_ACCOUNT_PAYABLE_REVIEW)) {
             if (!((AccountsPayableDocument)event.getDocument()).approvalAtAccountsPayableReviewAllowed()) {
                 valid &= false;
-                GlobalVariables.getMessageMap().putError(KFSConstants.GLOBAL_ERRORS, PurapKeyConstants.ERROR_AP_REQUIRES_ATTACHMENT);
+                KualiWorkflowDocument workflowDoc = event.getDocument().getDocumentHeader().getWorkflowDocument();
+                if(PurapConstants.PurapDocTypeCodes.CREDIT_MEMO_DOCUMENT.equals(workflowDoc.getDocumentType())) {
+                    GlobalVariables.getMessageMap().putError(KFSConstants.GLOBAL_ERRORS, PurapKeyConstants.ERROR_CREDIT_MEMO_REQUIRES_ATTACHMENT);
+                }
+                else {
+                        GlobalVariables.getMessageMap().putError(KFSConstants.GLOBAL_ERRORS, PurapKeyConstants.ERROR_AP_REQUIRES_ATTACHMENT);
+                }
+                
+                
             }
         }
         GlobalVariables.getMessageMap().clearErrorPath();
Index: work/src/org/kuali/kfs/module/purap/document/validation/configuration/PurapValidatorDefinitions.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/validation/configuration/PurapValidatorDefinitions.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/validation/configuration/PurapValidatorDefinitions.xml	(working copy)
@@ -637,6 +637,7 @@
 
 	<bean id="VendorCreditMemo-initTabReferenceNumberValidation" class="org.kuali.kfs.module.purap.document.validation.impl.VendorCreditMemoInitTabReferenceNumberValidation" abstract="true">
 		<property name="paymentRequestService" ref="paymentRequestService" />
+		<property name="purapService" ref="purapService" />
 		<property name="purchaseOrderService" ref="purchaseOrderService" />
 		<property name="vendorService" ref="vendorService" />
 	</bean>
Index: work/src/org/kuali/kfs/module/purap/document/RequisitionDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/RequisitionDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/RequisitionDocument.java	(working copy)
@@ -295,7 +295,7 @@
      * a set number of days have passed since the document's creation.
      * 
      * @return True if copying of this requisition is allowed.
-     * @see org.kuali.rice.krad.document.Document#getAllowsCopy()
+     * @see org.kuali.rice.kns.document.Document#getAllowsCopy()
      */
     @Override
     public boolean getAllowsCopy() {
@@ -321,7 +321,7 @@
     /**
      * Performs logic needed to copy Requisition Document.
      * 
-     * @see org.kuali.rice.krad.document.Document#toCopy()
+     * @see org.kuali.rice.kns.document.Document#toCopy()
      */
     @Override
     public void toCopy() throws WorkflowException, ValidationException {
@@ -419,7 +419,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#doRouteStatusChange()
+     * @see org.kuali.rice.kns.document.DocumentBase#doRouteStatusChange()
      */
     @Override
     public void doRouteStatusChange(DocumentRouteStatusChange statusChangeEvent) {
@@ -461,7 +461,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#handleRouteLevelChange(org.kuali.rice.kew.clientapp.vo.DocumentRouteLevelChangeDTO)
+     * @see org.kuali.rice.kns.document.DocumentBase#handleRouteLevelChange(org.kuali.rice.kew.clientapp.vo.DocumentRouteLevelChangeDTO)
      */
     @Override
     public void doRouteLevelChange(DocumentRouteLevelChange change) {
@@ -492,8 +492,8 @@
         catch (WorkflowException e) {
             String errorMsg = "Workflow Error found checking actions requests on document with id " + getDocumentNumber() + ". *** WILL NOT UPDATE PURAP STATUS ***";
             LOG.warn(errorMsg, e);
-        }*/
         }
+    }
 
     /**
      * @see org.kuali.kfs.sys.document.AccountingDocument#getSourceAccountingLineClass()
@@ -610,7 +610,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.Document#getDocumentTitle()
+     * @see org.kuali.rice.kns.document.Document#getDocumentTitle()
      */
     @Override
     public String getDocumentTitle() {
@@ -660,6 +660,7 @@
     /**
      * Used for routing only.
      * 
+     * @deprecated
      */
     public String getStatusDescription() {
         return getAppDocStatus();
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderSplitDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderSplitDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderSplitDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="POSP"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderSplitDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderSplitDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PaymentRequestDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PaymentRequestDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PaymentRequestDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="PaymentRequestDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="PREQ"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PaymentRequestDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PaymentRequestDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PaymentRequestDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/BulkReceivingDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/BulkReceivingDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/BulkReceivingDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="RCVB"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.BulkReceivingDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.BulkReceivingDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.ReceivingDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.BulkReceivingDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderRemoveHoldDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderRemoveHoldDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderRemoveHoldDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="PORH"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderRemoveHoldDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderRemoveHoldDocument"/>
     <property name="businessRulesClass" value="org.kuali.rice.krad.rules.TransactionalDocumentRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderRemoveHoldDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/ContractManagerAssignmentDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/ContractManagerAssignmentDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/ContractManagerAssignmentDocument.xml	(working copy)
@@ -23,6 +23,7 @@
     
     <property name="documentTypeName" value="ACM"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.ContractManagerAssignmentDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.ContractManagerAssignmentDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.purap.document.validation.impl.ContractManagerAssignmentDocumentRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.sys.document.authorization.FinancialSystemTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.ContractManagerAssignmentDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderReopenDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderReopenDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderReopenDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="POR"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderReopenDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderReopenDocument"/>
     <property name="businessRulesClass" value="org.kuali.rice.krad.rules.TransactionalDocumentRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderReopenDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/ReceivingDocumentForSearchingDataDictionary.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/ReceivingDocumentForSearchingDataDictionary.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/ReceivingDocumentForSearchingDataDictionary.xml	(working copy)
@@ -21,7 +21,7 @@
   
     <property name="documentTypeName" value="RCV"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.ReceivingDocumentForSearching"/>
-  
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.ReceivingDocumentForSearching"/>
     <property name="workflowAttributes">
     	<ref bean="ReceivingDocumentForSearching-workflowAttributes"/>
     </property>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderVoidDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderVoidDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderVoidDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="POV"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderVoidDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderVoidDocument"/>
     <property name="businessRulesClass" value="org.kuali.rice.krad.rules.TransactionalDocumentRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderVoidDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderCloseDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderCloseDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderCloseDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="POC"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderCloseDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderCloseDocument"/>
     <property name="businessRulesClass" value="org.kuali.rice.krad.rules.TransactionalDocumentRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderCloseDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderAmendmentDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderAmendmentDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderAmendmentDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="POA"/>
     <property name="sessionDocument" value="true"/>    
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderAmendmentDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderAmendmentDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderAmendmentDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/ElectronicInvoiceRejectDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/ElectronicInvoiceRejectDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/ElectronicInvoiceRejectDocument.xml	(working copy)
@@ -23,6 +23,7 @@
     
     <property name="documentTypeName" value="EIRT"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.ElectronicInvoiceRejectDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.ElectronicInvoiceRejectDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.purap.document.validation.impl.ElectronicInvoiceRejectDocumentRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.ElectronicInvoiceRejectDocumentAuthorizer"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/LineItemReceivingDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/LineItemReceivingDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/LineItemReceivingDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="LineItemReceivingDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="RCVL"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.LineItemReceivingDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.LineItemReceivingDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.purap.document.validation.impl.LineItemReceivingDocumentRule"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.module.purap.document.validation.impl.LineItemReceivingDocumentPreRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.ReceivingDocumentAuthorizerBase"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/CorrectionReceivingDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/CorrectionReceivingDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/CorrectionReceivingDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="CorrectionReceivingDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="RCVC"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.CorrectionReceivingDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.CorrectionReceivingDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.module.purap.document.validation.impl.CorrectionReceivingDocumentRule"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.module.purap.document.validation.impl.LineItemReceivingDocumentPreRule"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.ReceivingDocumentAuthorizerBase"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="PO"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>        
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderDocumentPresentationController"/>
@@ -186,6 +187,7 @@
         <ref bean="PurchaseOrderDocument-assignedUserPrincipalName"/>
         <ref bean="PurchaseOrderDocument-sensitive"/>
 		<ref bean="PurchaseOrderDocument-accountDistributionMethod"/> 
+        <ref bean="RequisitionDocument-justification"/>
       </list>
     </property>
     <property name="validationMap" ref="PurchaseOrderDocument-validations"/>
@@ -1089,7 +1091,6 @@
       <bean parent="TextControlDefinition" p:size="9"/>
     </property>
   </bean>
-  
   <bean id="PurchaseOrderDocument-purchaseOrderConfirmedIndicator" parent="PurchaseOrderDocument-purchaseOrderConfirmedIndicator-parentBean"/>
 
   <bean id="PurchaseOrderDocument-purchaseOrderConfirmedIndicator-parentBean" abstract="true" parent="AttributeDefinition">
@@ -1168,6 +1169,8 @@
   </bean>
 
   <bean id="PurchaseOrderDocument-purchaseOrderQuoteTypeCode" parent="PurchaseOrderDocument-purchaseOrderQuoteTypeCode-parentBean"/>
+
+
   <bean id="PurchaseOrderDocument-purchaseOrderQuoteTypeCode-parentBean" abstract="true" parent="AttributeDefinition">
     <property name="name" value="purchaseOrderQuoteTypeCode"/>
     <property name="forceUppercase" value="true"/>
@@ -1509,6 +1512,20 @@
 	    </property>
 	</bean>
     
+    <bean id="RequisitionDocument-justification" parent="RequisitionDocument-justification-parentBean"/>
+
+  	<bean id="RequisitionDocument-justification-parentBean" abstract="true" parent="AttributeDefinition">
+    	<property name="name" value="justification"/>
+   	 	<property name="label" value="Justification"/>
+   	 	<property name="maxLength" value="255"/>
+    	<property name="validationPattern">
+      		<ref bean="AnyCharacterWithWhitespaceValidation" />
+    	</property>
+    	<property name="control">
+      		<bean parent="TextareaControlDefinition" p:rows="5" p:cols="50"/>
+    	</property>
+  	</bean>
+    
     <!-- workflow attributes for routing -->
     <bean id="PurchaseOrderDocument-workflowAttributes" parent="PurchaseOrderDocument-workflowAttributes-parentBean"/>
 
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/VendorCreditMemoDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/VendorCreditMemoDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/VendorCreditMemoDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="VendorCreditMemoDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="CM"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.VendorCreditMemoDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.VendorCreditMemoDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="promptBeforeValidationClass" value="org.kuali.kfs.module.purap.document.validation.impl.CreditMemoDocumentPreRules"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderPaymentHoldDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderPaymentHoldDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderPaymentHoldDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="POPH"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderPaymentHoldDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderPaymentHoldDocument"/>
     <property name="businessRulesClass" value="org.kuali.rice.krad.rules.TransactionalDocumentRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderPaymentHoldDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/RequisitionDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/RequisitionDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/RequisitionDocument.xml	(working copy)
@@ -20,6 +20,7 @@
   <bean id="RequisitionDocument-parentBean" abstract="true" parent="TransactionalDocumentEntry">
     <property name="documentTypeName" value="REQS"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.RequisitionDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.RequisitionDocument"/>
     <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.RequisitionDocumentPresentationController"/>
@@ -157,6 +158,7 @@
         <ref bean="RequisitionDocument-createDateForResult"/>
         <ref bean="RequisitionDocument-sensitive"/>
         <ref bean="RequisitionDocument-accountDistributionMethod"/>
+        <ref bean="RequisitionDocument-justification"/>
       </list>
     </property>
     <property name="validationMap" ref="RequisitionDocument-validations"/>
@@ -1027,6 +1029,20 @@
       <bean parent="SelectControlDefinition" p:valuesFinderClass="org.kuali.kfs.module.purap.businessobject.options.AccountDistributionMethodValuesFinder" p:includeKeyInLabel="false"/>
     </property>
   </bean>
+
+  <bean id="RequisitionDocument-justification" parent="RequisitionDocument-justification-parentBean"/>
+
+  <bean id="RequisitionDocument-justification-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="justification"/>
+    <property name="label" value="Justification"/>
+    <property name="maxLength" value="255"/>
+    <property name="validationPattern">
+      <ref bean="AnyCharacterWithWhitespaceValidation" />
+    </property>
+    <property name="control">
+      <bean parent="TextareaControlDefinition" p:rows="5" p:cols="50"/>
+    </property>
+  </bean>
   
   <!-- Requisition accountingInformation -->
     <bean id="requisitionAccountingInformation" parent="requisitionAccountingInformation-parent"/>
Index: work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderRetransmitDocument.xml
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderRetransmitDocument.xml	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/datadictionary/PurchaseOrderRetransmitDocument.xml	(working copy)
@@ -21,6 +21,7 @@
     <property name="documentTypeName" value="PORT"/>
     <property name="sessionDocument" value="true"/>
     <property name="documentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderRetransmitDocument"/>
+    <property name="baseDocumentClass" value="org.kuali.kfs.module.purap.document.PurchaseOrderRetransmitDocument"/>
     <property name="businessRulesClass" value="org.kuali.rice.krad.rules.TransactionalDocumentRuleBase"/>
     <property name="documentAuthorizerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchasingAccountsPayableTransactionalDocumentAuthorizerBase"/>
     <property name="documentPresentationControllerClass" value="org.kuali.kfs.module.purap.document.authorization.PurchaseOrderRetransmitDocumentPresentationController"/>
Index: work/src/org/kuali/kfs/module/purap/document/authorization/PaymentRequestDocumentPresentationController.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/authorization/PaymentRequestDocumentPresentationController.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/authorization/PaymentRequestDocumentPresentationController.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2008-2009 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -42,7 +42,7 @@
 
 public class PaymentRequestDocumentPresentationController extends PurchasingAccountsPayableDocumentPresentationController {
 
-
+    
     @Override
     public boolean canSave(Document document) {
         PaymentRequestDocument paymentRequestDocument = (PaymentRequestDocument) document;
@@ -54,10 +54,10 @@
         if (canEditPreExtraction(paymentRequestDocument)) {
             return true;
         }
-
+        
         return super.canSave(document);
     }
-
+    
     @Override
     public boolean canReload(Document document) {
         PaymentRequestDocument paymentRequestDocument = (PaymentRequestDocument) document;
@@ -65,7 +65,7 @@
         if (StringUtils.equals(paymentRequestDocument.getAppDocStatus(), PaymentRequestStatuses.APPDOC_INITIATE)) {
             return false;
         }
-
+        
         if (canEditPreExtraction(paymentRequestDocument)) {
             return true;
         }
@@ -82,11 +82,11 @@
     @Override
     public boolean canApprove(Document document) {
         PaymentRequestDocument paymentRequestDocument = (PaymentRequestDocument) document;
-
+        
         if (paymentRequestDocument.isPaymentRequestedCancelIndicator() || paymentRequestDocument.isHoldIndicator()) {
             return false;
         }
-
+        
         return super.canApprove(document);
     }
 
@@ -97,7 +97,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.authorization.DocumentPresentationControllerBase#canEdit(org.kuali.rice.krad.document.Document)
+     * @see org.kuali.rice.kns.document.authorization.DocumentPresentationControllerBase#canEdit(org.kuali.rice.kns.document.Document)
      */
     @Override
     public boolean canEdit(Document document) {
@@ -105,44 +105,40 @@
         boolean fullDocEntryCompleted = SpringContext.getBean(PurapService.class).isFullDocumentEntryCompleted(paymentRequestDocument);
         WorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
 
-        //  fiscal officer review gets the doc editable once its enroute, but no one else does
+        // if the hold or cancel indicator is true, don't allow editing
+        if (paymentRequestDocument.isHoldIndicator() || paymentRequestDocument.isPaymentRequestedCancelIndicator()) {
+            return false;
+        }
         if (fullDocEntryCompleted) {
+            //  after fullDocEntry is completed, only fiscal officer reviewers can edit
             if (paymentRequestDocument.isDocumentStoppedInRouteNode(PaymentRequestStatuses.NODE_ACCOUNT_REVIEW)) {
                 return true;
             }
             return false;
+        } else {
+            //before fullDocEntry is completed, document can be edited (could be preroute or enroute)
+            return true;
         }
-
-        // if the hold or cancel indicator is true, don't allow editing
-        if (paymentRequestDocument.isHoldIndicator() || paymentRequestDocument.isPaymentRequestedCancelIndicator()) {
-            return false;
-        }
-
-        //  in general, the doc should not be editable once its enroute
-        if (workflowDocument.isEnroute() || workflowDocument.isException()) {
-            return false;
-        }
-        return super.canEdit(document);
     }
 
     /**
-     *
-     * @see org.kuali.rice.krad.document.authorization.TransactionalDocumentPresentationControllerBase#getEditModes(org.kuali.rice.krad.document.Document)
+     * 
+     * @see org.kuali.rice.kns.document.authorization.TransactionalDocumentPresentationControllerBase#getEditModes(org.kuali.rice.kns.document.Document)
      */
     @Override
     public Set<String> getEditModes(Document document) {
         Set<String> editModes = super.getEditModes(document);
         WorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
         PaymentRequestDocument paymentRequestDocument = (PaymentRequestDocument)document;
-
+        
         if (canProcessorCancel(paymentRequestDocument)) {
             editModes.add(PaymentRequestEditMode.ACCOUNTS_PAYABLE_PROCESSOR_CANCEL);
         }
-
+        
         if (canManagerCancel(paymentRequestDocument)) {
             editModes.add(PaymentRequestEditMode.ACCOUNTS_PAYABLE_MANAGER_CANCEL);
         }
-
+        
         if (canHold(paymentRequestDocument)) {
             editModes.add(PaymentRequestEditMode.HOLD);
         }
@@ -162,11 +158,11 @@
         if (paymentRequestDocument.getAppDocStatus().equals(PurapConstants.PaymentRequestStatuses.APPDOC_INITIATE)) {
             editModes.add(PaymentRequestEditMode.DISPLAY_INIT_TAB);
         }
-
+        
         if (ObjectUtils.isNotNull(paymentRequestDocument.getVendorHeaderGeneratedIdentifier())) {
             editModes.add(PaymentRequestEditMode.LOCK_VENDOR_ENTRY);
         }
-
+        
         if (SpringContext.getBean(PurapService.class).isFullDocumentEntryCompleted(paymentRequestDocument)) {
             editModes.add(PaymentRequestEditMode.FULL_DOCUMENT_ENTRY_COMPLETED);
         }
@@ -191,7 +187,7 @@
             else {
                 // display the "clear all taxes" button if doc is not using use tax
                 editModes.add(PaymentRequestEditMode.CLEAR_ALL_TAXES);
-
+                
             }
         }
 
@@ -200,11 +196,11 @@
             editModes.add(PaymentRequestEditMode.TAX_AREA_EDITABLE);
         }
         /*
-        if (PaymentRequestStatuses.AWAITING_TAX_REVIEW.equals(paymentRequestDocument.getAppDocStatus())) {
+        if (PaymentRequestStatuses.AWAITING_TAX_REVIEW.equals(paymentRequestDocument.getStatusCode())) {
             editModes.add(PaymentRequestEditMode.TAX_AREA_EDITABLE);
         }
         */
-
+        
         // the tax tab is viewable to everyone after tax is approved
         if (PaymentRequestStatuses.APPDOC_DEPARTMENT_APPROVED.equals(paymentRequestDocument.getAppDocStatus()) &&
                 // if and only if the preq has gone through tax review would TaxClassificationCode be non-empty
@@ -247,7 +243,7 @@
         
         String docStatus = paymentRequestDocument.getAppDocStatus();
         boolean requestCancelIndicator = paymentRequestDocument.getPaymentRequestedCancelIndicator();
-        boolean holdIndicator = paymentRequestDocument.isHoldIndicator();
+        boolean holdIndicator = paymentRequestDocument.isHoldIndicator();        
         boolean extracted = paymentRequestDocument.isExtracted();
         
         boolean preroute = 
@@ -263,13 +259,13 @@
             PaymentRequestStatuses.APPDOC_AUTO_APPROVED.equals(docStatus);
         
         boolean can = false;
-        if (preroute) {
+        if (PaymentRequestStatuses.STATUSES_PREROUTE.contains(docStatus)) {
             can = true;
         }
-        else if (enroute) {
+        else if (PaymentRequestStatuses.STATUSES_ENROUTE.contains(docStatus)) {
             can = requestCancelIndicator;
         }
-        else if (postroute) {
+        else if (PaymentRequestStatuses.STATUSES_POSTROUTE.contains(docStatus)) {
             can = !requestCancelIndicator && !holdIndicator && !extracted;
         }
 
@@ -284,7 +280,7 @@
         
         String docStatus = paymentRequestDocument.getAppDocStatus();
         boolean requestCancelIndicator = paymentRequestDocument.getPaymentRequestedCancelIndicator();
-        boolean holdIndicator = paymentRequestDocument.isHoldIndicator();
+        boolean holdIndicator = paymentRequestDocument.isHoldIndicator();        
         boolean extracted = paymentRequestDocument.isExtracted();
         
         boolean preroute = 
@@ -300,10 +296,11 @@
             PaymentRequestStatuses.APPDOC_AUTO_APPROVED.equals(docStatus);
         
         boolean can = false;
-        if (preroute || enroute) {
+        if (PaymentRequestStatuses.STATUSES_PREROUTE.contains(docStatus) || 
+                PaymentRequestStatuses.STATUSES_ENROUTE.contains(docStatus)) {
             can = true;
         }
-        else if (postroute) {
+        else if (PaymentRequestStatuses.STATUSES_POSTROUTE.contains(docStatus)) {
             can = !requestCancelIndicator && !holdIndicator && !extracted;
         }
 
@@ -316,7 +313,7 @@
      * - Payment Request is not already being requested to be canceled, and
      * - Payment Request has not already been extracted to PDP, and
      * - Payment Request status is not in the list of "STATUSES_DISALLOWING_HOLD" or document is being adhoc routed; and
-     *
+     * 
      * @return True if the document state allows placing the Payment Request on hold.
      */
     protected boolean canHold(PaymentRequestDocument paymentRequestDocument) {
@@ -335,7 +332,7 @@
      * - Payment Request is not already being requested to be canceled, and
      * - Payment Request has not already been extracted to PDP, and
      * - Payment Request status is not in the list of "STATUSES_DISALLOWING_REQUEST_CANCEL" or document is being adhoc routed; and
-     *
+     * 
      * @return True if the document state allows placing the request that the Payment Request be canceled.
      */
     protected boolean canRequestCancel(PaymentRequestDocument paymentRequestDocument) {
@@ -351,25 +348,25 @@
     /**
      * Determines whether the Remove Hold button shall be available. Conditions:
      * - the hold indicator is set to true
-     *
-     * Because the state of the Payment Request cannot be changed while the document is on hold,
-     * we should not have to check the state of the document to remove the hold.
+     * 
+     * Because the state of the Payment Request cannot be changed while the document is on hold, 
+     * we should not have to check the state of the document to remove the hold.  
      * For example, the document should not be allowed to be approved or extracted while on hold.
-     *
+     * 
      * @return True if the document state allows removing the Payment Request from hold.
      */
     protected boolean canRemoveHold(PaymentRequestDocument paymentRequestDocument) {
-        return paymentRequestDocument.isHoldIndicator();
+        return paymentRequestDocument.isHoldIndicator();       
     }
 
     /**
      * Determines whether the Remove Request Cancel button shall be available. Conditions:
-     * - the request cancel indicator is set to true;  and
-     *
-     * Because the state of the Payment Request cannot be changed while the document is set to request cancel,
-     * we should not have to check the state of the document to remove the request cancel.
+     * - the request cancel indicator is set to true;  and 
+     *   
+     * Because the state of the Payment Request cannot be changed while the document is set to request cancel, 
+     * we should not have to check the state of the document to remove the request cancel.  
      * For example, the document should not be allowed to be approved or extracted while set to request cancel.
-     *
+     *  
      * @return True if the document state allows removing a request that the Payment Request be canceled.
      */
     protected boolean canRemoveRequestCancel(PaymentRequestDocument paymentRequestDocument) {
Index: work/src/org/kuali/kfs/module/purap/document/PurchasingDocumentBase.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/PurchasingDocumentBase.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/PurchasingDocumentBase.java	(working copy)
@@ -139,6 +139,7 @@
     protected String vendorShippingPaymentTermsCode;
     protected String capitalAssetSystemTypeCode;
     protected String capitalAssetSystemStateCode;
+    protected String justification;
 
     // NOT PERSISTED IN DB
     protected String supplierDiversityLabel;
@@ -1092,6 +1093,22 @@
         this.capitalAssetSystemStateCode = capitalAssetSystemStateCode;
     }
 
+    /**
+     * Gets the justification attribute. 
+     * @return Returns the justification.
+     */
+    public String getJustification() {
+        return justification;
+    }
+
+    /**
+     * Sets the justification attribute value.
+     * @param justification The justification to set.
+     */
+    public void setJustification(String justification) {
+        this.justification = justification;
+    }
+
     public CapitalAssetSystemType getCapitalAssetSystemType() {
         if(ObjectUtils.isNull(capitalAssetSystemType)){
             this.refreshReferenceObject("capitalAssetSystemType");
Index: work/src/org/kuali/kfs/module/purap/document/web/struts/LineItemReceivingAction.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/web/struts/LineItemReceivingAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/web/struts/LineItemReceivingAction.java	(working copy)
@@ -239,9 +239,10 @@
         LineItemReceivingForm lineItemReceivingForm = (LineItemReceivingForm) form;
         LineItemReceivingItem item = lineItemReceivingForm.getNewLineItemReceivingItemLine();
         LineItemReceivingDocument lineItemReceivingDocument = (LineItemReceivingDocument) lineItemReceivingForm.getDocument();
+        
         boolean rulePassed = SpringContext.getBean(KualiRuleService.class).applyRules(new AddReceivingItemEvent(PurapPropertyConstants.NEW_LINE_ITEM_RECEIVING_ITEM_LINE, lineItemReceivingDocument, item));
-
         if (rulePassed) {
+            lineItemReceivingForm.setHideAddUnorderedItem(true); // hide the add unordered item line once an item is added
             item = lineItemReceivingForm.getAndResetNewReceivingItemLine();                       
             lineItemReceivingDocument.addItem(item);                       
             //TODO: we need to set the line number correctly to match up to PO
@@ -299,5 +300,41 @@
 
         return mapping.findForward(KFSConstants.MAPPING_BASIC);
     }
+    
+    /**
+     * Gives a warning before showing the add new unordered line item; if the user confirms the action, proceeds;
+     * otherwise cancels the action and returns to the current LineItemReceivingDocument.
+     * 
+     * @param mapping An ActionMapping
+     * @param form An ActionForm
+     * @param request The HttpServletRequest
+     * @param response The HttpServletResponse
+     * @throws Exception
+     * @return An ActionForward
+     */
+    public ActionForward showAddUnorderedItem(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
+        LineItemReceivingForm lineItemReceivingForm = (LineItemReceivingForm)form;
 
+        boolean shouldGiveWarning = lineItemReceivingForm.shouldGiveAddUnorderedItemWarning();        
+        if (!shouldGiveWarning) {
+            lineItemReceivingForm.setHideAddUnorderedItem(false);
+            return mapping.findForward(KFSConstants.MAPPING_BASIC);            
+        }
+        
+        String msgkey = PurapKeyConstants.WARNING_RECEIVING_LINEITEM_ADD_UNORDERED;
+        String msgtxt = SpringContext.getBean(KualiConfigurationService.class).getPropertyString(msgkey);
+        Object question = request.getParameter(KFSConstants.QUESTION_INST_ATTRIBUTE_NAME);        
+
+        if (question == null) {
+            return performQuestionWithoutInput(mapping, form, request, response, msgkey, msgtxt, KFSConstants.CONFIRMATION_QUESTION, "showAddUnorderedItem", "");
+        }
+
+        Object buttonClicked = request.getParameter(KFSConstants.QUESTION_CLICKED_BUTTON);
+        if ((msgkey.equals(question)) && ConfirmationQuestion.YES.equals(buttonClicked)) {                
+            lineItemReceivingForm.setHideAddUnorderedItem(false);
+        }        
+        
+        return mapping.findForward(KFSConstants.MAPPING_BASIC);
+    }    
+
 }
Index: work/src/org/kuali/kfs/module/purap/document/web/struts/ElectronicInvoiceTestAction.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/web/struts/ElectronicInvoiceTestAction.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/web/struts/ElectronicInvoiceTestAction.java	(working copy)
@@ -15,9 +15,7 @@
  */
 package org.kuali.kfs.module.purap.document.web.struts;
 
-import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.InputStream;
 import java.io.StringBufferInputStream;
 import java.util.List;
 
@@ -25,21 +23,16 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.math.RandomUtils;
 import org.apache.struts.action.ActionForm;
 import org.apache.struts.action.ActionForward;
 import org.apache.struts.action.ActionMapping;
-import org.apache.struts.upload.FormFile;
-import org.kuali.kfs.module.purap.batch.ElectronicInvoiceInputFileType;
-import org.kuali.kfs.module.purap.businessobject.ElectronicInvoice;
 import org.kuali.kfs.module.purap.businessobject.PurchaseOrderItem;
 import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
 import org.kuali.kfs.module.purap.document.service.PurchaseOrderService;
 import org.kuali.kfs.module.purap.util.ElectronicInvoiceUtils;
 import org.kuali.kfs.sys.KFSConstants;
-import org.kuali.kfs.sys.batch.service.BatchInputFileService;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.vnd.businessobject.PaymentTermType;
 import org.kuali.rice.core.api.datetime.DateTimeService;
@@ -59,6 +52,21 @@
     private static final String PHONE_NUMBER = "phoneNumber";
 
     /**
+     * @see org.kuali.rice.kns.web.struts.action.KualiAction#execute(org.apache.struts.action.ActionMapping,
+     *      org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
+     */
+    @Override
+    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
+        // TODO Uncomment the following code. This method doesn't need override. 
+        // It's here as a temp get-around for a bug complaining method "generate" cannot be found 
+        String methodToCall = findMethodToCall(form, request);
+        if (StringUtils.equals(methodToCall, "generate")) {
+            return generate(mapping, form, request, response);
+        }
+        return mapping.findForward(KFSConstants.MAPPING_BASIC);
+    }
+    
+    /**
      * @see org.kuali.rice.kns.web.struts.action.KualiAction#checkAuthorization(org.apache.struts.action.ActionForm, java.lang.String)
      * 
      * Only allow users to test eInvoicing in the test environment
@@ -70,100 +78,55 @@
             throw new AuthorizationException(GlobalVariables.getUserSession().getPerson().getPrincipalName(), methodToCall, this.getClass().getSimpleName());
         }
     }
-
-    @Override
-    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
-        DateTimeService dateTimeService = SpringContext.getBean(DateTimeService.class);
-        
+    
+    /**
+     * Generates Electronic Invoice xml file from a Purchase Order, for testing purpose only.     
+     */
+    public ActionForward generate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
         checkAuthorization(form, "");
-        
-        //get parameters - are we doing upload xml or create based on PO?
-        String action = request.getParameter("action");
-        
-        String currDate = ElectronicInvoiceUtils.getDateDisplayText(dateTimeService.getCurrentDate()); // getting date in kfs format
-        
-        if ("postXML".equalsIgnoreCase(action)) {
-            // get the file and send the contents to the eInvoice mechanism and display the results
-            ElectronicInvoiceTestForm rejectForm = (ElectronicInvoiceTestForm) form;
-            FormFile xmlFile = rejectForm.getXmlFile();
-            if (xmlFile != null) {
-                if (!StringUtils.isEmpty(xmlFile.getFileName())) {
-                    if (xmlFile.getFileName().endsWith(".xml")) {
-                        
-                        BatchInputFileService batchInputFileService = SpringContext.getBean(BatchInputFileService.class);
-                        ElectronicInvoiceInputFileType batchType = SpringContext.getBean(ElectronicInvoiceInputFileType.class);
-                        
-                        byte[] fileByteContent = IOUtils.toByteArray(xmlFile.getInputStream());
 
-                        Object parsedObject = batchInputFileService.parse(batchType, fileByteContent);
-                        ElectronicInvoice eInvoice = (ElectronicInvoice)parsedObject;
-                        eInvoice.setFileName(xmlFile.getFileName());
-                        
-                        if (parsedObject != null) {
-                            boolean validateSuccessful = batchInputFileService.validate(batchType, parsedObject);
+        ElectronicInvoiceTestForm testForm = (ElectronicInvoiceTestForm)form;
+        String poDocNumber = testForm.getPoDocNumber();
+        LOG.info("Generating Electronic Invoice XML file for Purchase Order Document " + poDocNumber);
+        PurchaseOrderService poService = SpringContext.getBean(PurchaseOrderService.class);
+        PurchaseOrderDocument po = null;
+        try {
+            po = poService.getPurchaseOrderByDocumentNumber(poDocNumber);
+        }
+        catch (Exception e) {
+            throw e;
+        }
 
-                            if (validateSuccessful) {
-                                InputStream saveStream = new ByteArrayInputStream(fileByteContent);
-                                batchInputFileService.save(GlobalVariables.getUserSession().getPerson(), batchType, ""+RandomUtils.nextInt(), saveStream, parsedObject);
-                            }
-                        }
-                    } else {
-                        throw new RuntimeException("Invalid file type " + xmlFile.getFileName());
-                    }
-                } else {
-                    throw new RuntimeException("Invalid file name " + xmlFile.getFileName());
-                }
-            } else {
-                throw new RuntimeException("Error getting xml file");
-            }
-        } else if ("returnXML".equalsIgnoreCase(action)) {
-            
-            String poDocNumber = request.getParameter("poDocNumber");
-            
-            LOG.info("Generating xml for the po - " + poDocNumber);
-            
-            PurchaseOrderService poService = SpringContext.getBean(PurchaseOrderService.class);
-            PurchaseOrderDocument po = null;
-            try{
-                po = poService.getPurchaseOrderByDocumentNumber(poDocNumber);
-            }catch(Exception e){
-                throw e;
-            }
-            
-            response.setHeader("Cache-Control", "max-age=30");
-            response.setContentType("application/xml");
+        response.setHeader("Cache-Control", "max-age=30");
+        response.setContentType("application/xml");
+        StringBuffer sbContentDispValue = new StringBuffer();
+        String useJavascript = request.getParameter("useJavascript");
+        if (useJavascript == null || useJavascript.equalsIgnoreCase("false")) {
+            sbContentDispValue.append("attachment");
+        }
+        else {
+            sbContentDispValue.append("inline");
+        }
+        StringBuffer sbFilename = new StringBuffer();
+        sbFilename.append("PO_");
+        sbFilename.append(poDocNumber);
+        sbFilename.append(".xml");
+        sbContentDispValue.append("; filename=");
+        sbContentDispValue.append(sbFilename);
+        response.setHeader("Content-disposition", sbContentDispValue.toString());
 
-            StringBuffer sbContentDispValue = new StringBuffer();
-            String useJavascript = request.getParameter("useJavascript");
-            if (useJavascript == null || useJavascript.equalsIgnoreCase("false")) {
-                sbContentDispValue.append("attachment");
+        // lookup the PO and fill in the XML with valid data
+        if (po != null) {
+            String duns = "";
+            if (po.getVendorDetail() != null) {
+                duns = StringUtils.defaultString(po.getVendorDetail().getVendorDunsNumber());
             }
-            else {
-                sbContentDispValue.append("inline");
-            }
-            StringBuffer sbFilename = new StringBuffer();
-            sbFilename.append("PO_");
-            sbFilename.append(poDocNumber);
-            sbFilename.append(".xml");
-            sbContentDispValue.append("; filename=");
-            sbContentDispValue.append(sbFilename);
 
-            response.setHeader("Content-disposition", sbContentDispValue.toString());
-
+            DateTimeService dateTimeService = SpringContext.getBean(DateTimeService.class);
+            String currDate = ElectronicInvoiceUtils.getDateDisplayText(dateTimeService.getCurrentDate()); // getting date in kfs format
+            String vendorNumber = po.getVendorDetail().getVendorNumber();
             
-            // lookup the PO and fill in the XML will valid data
-            
-            if (po != null) {   
-                
-                String duns = "";
-                if (po.getVendorDetail() != null){
-                    duns = StringUtils.defaultString(po.getVendorDetail().getVendorDunsNumber());
-                }
-                
-                String vendorNumber = po.getVendorDetail().getVendorNumber();
-                
-                String eInvoiceFile = 
-                
+            String eInvoiceFile =
                 "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                 "\n<!-- ******Testing tool generated XML****** Version 1.2." +
                 "\n\n  Generated On " + currDate + " for PO " + po.getPurapDocumentIdentifier() + " (Doc# " + poDocNumber + ") -->\n\n" +   
@@ -275,25 +238,14 @@
                 "  </Request>\n" +
                 "</cXML>";
 
-//                response.setContentLength(eInvoiceFile.length());
-
-                ServletOutputStream sos;
-
-                sos = response.getOutputStream();
-                
-                ByteArrayOutputStream baOutStream = new ByteArrayOutputStream();
-                StringBufferInputStream inStream = new StringBufferInputStream(eInvoiceFile);
-                convert(baOutStream, inStream);
-//                
-//                baOutStream.flush();
-                response.setContentLength(baOutStream.size());
-
-//                ServletOutputStream sosTemp = response.getOutputStream();
-                baOutStream.writeTo(sos);
-                sos.flush();
-                
-                return null;
-            }
+            ServletOutputStream sos;
+            sos = response.getOutputStream();
+            ByteArrayOutputStream baOutStream = new ByteArrayOutputStream();
+            StringBufferInputStream inStream = new StringBufferInputStream(eInvoiceFile);
+            convert(baOutStream, inStream);         
+            response.setContentLength(baOutStream.size());
+            baOutStream.writeTo(sos);
+            sos.flush();
         }
 
       return mapping.findForward(KFSConstants.MAPPING_BASIC);
@@ -364,14 +316,11 @@
         String returnXML = "";
         
         if (StringUtils.isNotEmpty(deliveryDate)){
-            returnXML = returnXML + "              <InvoiceDetailShipping shippingDate=\"" +  deliveryDate + "\"> <!--Delivery reqd date -->\n";
+            returnXML += "              <InvoiceDetailShipping shippingDate=\"" +  deliveryDate + "\"> <!--Delivery reqd date -->\n";
         }else{
-            returnXML = returnXML + "              <InvoiceDetailShipping> <!-- shipTo address same as billTo-->\n";
+            returnXML += "              <InvoiceDetailShipping> <!-- shipTo address same as billTo-->\n";
         }
-
-        returnXML = returnXML + 
-                    getContactXMLChunk("shipTo",po) +
-                    "              </InvoiceDetailShipping>\n";
+        returnXML += getContactXMLChunk("shipTo",po) + "              </InvoiceDetailShipping>\n";        
         
         return returnXML;
         
@@ -396,12 +345,11 @@
         "                      </PostalAddress>\n";
         
         if (StringUtils.isNotEmpty(po.getDeliveryToEmailAddress())){
-            returnXML = returnXML + 
-            "                      <Email name=\"" + po.getDeliveryToEmailAddress() + "\">" + po.getDeliveryToEmailAddress() + "</Email>\n";
+            returnXML += "                      <Email name=\"" + po.getDeliveryToEmailAddress() + "\">" + po.getDeliveryToEmailAddress() + "</Email>\n";
         }
         
         if (StringUtils.isNotEmpty(po.getDeliveryToPhoneNumber())){
-            returnXML = returnXML + 
+            returnXML +=  
             "                      <Phone name=\"" + po.getDeliveryToPhoneNumber() + "\">\n" +
             "                          <TelephoneNumber>\n" +
             "                              <CountryCode isoCountryCode=\"US\">1</CountryCode>\n" +
@@ -411,13 +359,8 @@
             "                      </Phone>\n";
         }    
         
-        returnXML = returnXML + 
-//        "                      <URL name=\"sampleCompanyURL\">www.abc.com</URL>\n" +
-        "                  </Contact>\n";
-        
-        
-        return returnXML;
-        
+        returnXML += "                  </Contact>\n";                
+        return returnXML;        
     }
     
     private String getPhoneNumber(String whichPart,String phNo){
Index: work/src/org/kuali/kfs/module/purap/document/web/struts/LineItemReceivingForm.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/web/struts/LineItemReceivingForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/web/struts/LineItemReceivingForm.java	(working copy)
@@ -42,6 +42,7 @@
     protected Integer purchaseOrderId;
     protected LineItemReceivingItem newLineItemReceivingItemLine;
     protected boolean fromPurchaseOrder = false;
+    protected Boolean hideAddUnorderedItem = true;    
     
     /**
      * Constructs a LineItemReceivingForm instance and sets up the appropriately casted document.
@@ -197,6 +198,15 @@
         return SpringContext.getBean(ParameterService.class).getParameterValueAsBoolean(LineItemReceivingDocument.class, PurapParameterConstants.SHOW_CLEAR_AND_LOAD_QTY_BUTTONS);        
     }
 
+    /**
+     * Indicates if a warning should be given when users click "add unordered item" button, according to the system parameter.
+     *  
+     * @return true if the parameter says YES; otherwise faluse.
+     */
+    public boolean shouldGiveAddUnorderedItemWarning(){        
+        return SpringContext.getBean(ParameterService.class).getIndicatorParameter(LineItemReceivingDocument.class, PurapParameterConstants.UNORDERED_ITEM_WARNING_IND);
+    }
+
     public boolean isFromPurchaseOrder() {
         return fromPurchaseOrder;
     }
@@ -205,4 +215,12 @@
         this.fromPurchaseOrder = fromPurchaseOrder;
     }
 
+    public Boolean getHideAddUnorderedItem() {
+        return hideAddUnorderedItem;
+    }
+
+    public void setHideAddUnorderedItem(Boolean hideAddUnorderedItem) {
+        this.hideAddUnorderedItem = hideAddUnorderedItem;
+    }
+    
 }
Index: work/src/org/kuali/kfs/module/purap/document/web/struts/ElectronicInvoiceTestForm.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/web/struts/ElectronicInvoiceTestForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/web/struts/ElectronicInvoiceTestForm.java	(working copy)
@@ -15,38 +15,28 @@
  */
 package org.kuali.kfs.module.purap.document.web.struts;
 
-import org.apache.struts.upload.FormFile;
-import org.kuali.rice.kns.web.struts.form.KualiDocumentFormBase;
+import org.kuali.rice.kns.web.struts.form.KualiForm;
 
 /**
  * Struts Action Form for Electroinc Invoice Reject document.
  */
-public class ElectronicInvoiceTestForm extends KualiDocumentFormBase {
+public class ElectronicInvoiceTestForm extends KualiForm {
 
-    protected FormFile xmlFile;
-    protected String returnXml;
+    protected String poDocNumber;
 
-    public FormFile getXmlFile() {
-        return xmlFile;
-    }
-
-    public void setXmlFile(FormFile xmlFile) {
-        this.xmlFile = xmlFile;
-    }
-    
-    public String getReturnXml() {
-        return returnXml;
-    }
-
-    public void setReturnXml(String returnXml) {
-        this.returnXml = returnXml;
-    }
-
     /**
      * Constructs a PaymentRequestForm instance and sets up the appropriately casted document.
      */
     public ElectronicInvoiceTestForm() {
         super();
     }
-    
+
+    public String getPoDocNumber() {
+        return poDocNumber;
+    }
+
+    public void setPoDocNumber(String poDocNumber) {
+        this.poDocNumber = poDocNumber;
+    }
+        
 }
Index: work/src/org/kuali/kfs/module/purap/document/web/struts/PurchaseOrderForm.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/web/struts/PurchaseOrderForm.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/web/struts/PurchaseOrderForm.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2006 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -47,6 +47,7 @@
 import org.kuali.kfs.module.purap.document.PurchaseOrderDocument;
 import org.kuali.kfs.module.purap.document.PurchaseOrderSplitDocument;
 import org.kuali.kfs.module.purap.document.service.PaymentRequestService;
+import org.kuali.kfs.module.purap.document.service.PurapService;
 import org.kuali.kfs.module.purap.document.service.PurchaseOrderService;
 import org.kuali.kfs.module.purap.document.service.ReceivingService;
 import org.kuali.kfs.module.purap.util.PurApItemUtils;
@@ -77,7 +78,7 @@
     protected PurchaseOrderVendorStipulation newPurchaseOrderVendorStipulationLine;
     protected PurchaseOrderVendorQuote newPurchaseOrderVendorQuote;
     protected Long awardedVendorNumber;
-
+    
     // Retransmit.
     protected String[] retransmitItemsSelected = {};
     protected String retransmitTransmissionMethod;
@@ -86,7 +87,7 @@
 
     // Need this for amendment for accounting line only
     protected Map accountingLineEditingMode;
-
+    
     protected String splitNoteText;
 
     // Assign Sensitive Data related fields
@@ -114,7 +115,7 @@
     protected String getDefaultDocumentTypeName() {
         return "PO";
     }
-
+    
     public Map getAccountingLineEditingMode() {
         return accountingLineEditingMode;
     }
@@ -162,15 +163,15 @@
     public void setPurchaseOrderDocument(PurchaseOrderDocument purchaseOrderDocument) {
         setDocument(purchaseOrderDocument);
     }
-
+    
     public String getSplitNoteText() {
         return splitNoteText;
     }
 
     public void setSplitNoteText(String splitNoteText) {
         this.splitNoteText = splitNoteText;
-    }
-
+    }       
+    
     public String getSensitiveDataAssignmentReason() {
         return sensitiveDataAssignmentReason;
     }
@@ -202,7 +203,7 @@
     public void setSensitiveDatasAssigned(List<SensitiveData> poSensitiveData) {
         this.sensitiveDatasAssigned = poSensitiveData;
     }
-
+    
     @Override
     public Class getCapitalAssetLocationClass() {
         return PurchaseOrderCapitalAssetLocation.class;
@@ -217,8 +218,8 @@
     public CapitalAssetLocation setupNewPurchasingCapitalAssetLocationLine() {
         CapitalAssetLocation location = new RequisitionCapitalAssetLocation();
         return location;
-    }
-
+    }    
+    
     /**
      * @see org.kuali.kfs.module.purap.document.web.struts.PurchasingFormBase#setupNewPurchasingItemLine()
      */
@@ -246,9 +247,9 @@
     }
 
     public boolean isReadOnlyReceivingRequired() {
-
+        
         PurchaseOrderDocument poDoc = getPurchaseOrderDocument();
-
+        
         if (poDoc instanceof PurchaseOrderAmendmentDocument){
             if (!poDoc.isReceivingDocumentRequiredIndicator()){
                 return SpringContext.getBean(PaymentRequestService.class).hasActivePaymentRequestsForPurchaseOrder(poDoc.getPurapDocumentIdentifier());
@@ -262,7 +263,7 @@
 
     /**
      * Returns the new Purchase Order Vendor Stipulation Line and resets it.
-     *
+     * 
      * @return the new Purchase Order Vendor Stipulation Line.
      */
     public PurchaseOrderVendorStipulation getAndResetNewPurchaseOrderVendorStipulationLine() {
@@ -359,7 +360,7 @@
             getDocInfo().add(new HeaderField("DataDictionary.PurchaseOrderDocument.attributes.appDocStatus", "Not Available"));
         }
     }
-
+    
     /**
      * @see org.kuali.kfs.sys.web.struts.KualiAccountingDocumentFormBase#populate(javax.servlet.http.HttpServletRequest)
      */
@@ -376,13 +377,13 @@
         NoteService noteService = SpringContext.getBean(NoteService.class);
         for (Note note : noteService.getByRemoteObjectId(po.getObjectId())) {
             note.refreshReferenceObject("attachment");
-        }
+        }        
     }
-
+    
     /**
      * Processes validation rules having to do with any payment requests that the given purchase order may have. Specifically,
      * validates that at least one payment request exists, and makes further checks about the status of such payment requests.
-     *
+     * 
      * @param document A PurchaseOrderDocument
      * @return True if the document passes all the validations.
      */
@@ -414,7 +415,7 @@
                         checkInProcess = false;
                         break;
                     }
-                    if (StringUtils.equalsIgnoreCase(pReq.getAppDocStatus(), PaymentRequestStatuses.APPDOC_IN_PROCESS)) {
+                    if (!SpringContext.getBean(PurapService.class).isFullDocumentEntryCompleted(pReq)) {
                         hasInProcess = true;
                     }
                 }
@@ -432,12 +433,12 @@
      * purchase order must be current and not pending, and the user must be in purchasing group. These are same as the conditions
      * for displaying the payment hold button. In addition to these conditions, we also have to check that there is no In Process
      * Payment Requests nor Credit Memos associated with the PO.
-     *
+     * 
      * @return boolean true if the amend button can be displayed.
      */
     protected boolean canAmend() {
         boolean can = SpringContext.getBean(PurchaseOrderService.class).isPurchaseOrderOpenForProcessing(getPurchaseOrderDocument());
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
@@ -446,19 +447,19 @@
 
         return can;
     }
-
+    
     /**
      * Determines whether to display the void button for the purchase order document. Conditions:
      * PO is in Pending Print status, or is in Open status and has no PREQs against it;
      * PO's current indicator is true and pending indicator is false;
      * and the user is a member of the purchasing group).
-     *
+     * 
      * @return boolean true if the void button can be displayed.
      */
     protected boolean canVoid() {
         // check PO status etc
         boolean can = getPurchaseOrderDocument().isPurchaseOrderCurrentIndicator() && !getPurchaseOrderDocument().isPendingActionIndicator();
-
+               
         if (can) {
             boolean pendingPrint = PurchaseOrderStatuses.APPDOC_PENDING_PRINT.equals(getPurchaseOrderDocument().getAppDocStatus());
             boolean open = PurchaseOrderStatuses.APPDOC_OPEN.equals(getPurchaseOrderDocument().getAppDocStatus());
@@ -477,43 +478,43 @@
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER_VOID, GlobalVariables.getUserSession().getPerson());
         }
 
-        return can;
+        return can;        
     }
-
+    
     /**
      * Determines whether to display the close order button to close the purchase order document. Conditions:
-     * PO must be in Open status; must have at least one Payment Request in any status other than "In Process",
-     * and the PO cannot have any Payment Requests in "In Process" status.
+     * PO must be in Open status; must have at least one Payment Request in any status other than "In Process", 
+     * and the PO cannot have any Payment Requests in "In Process" status. 
      * This button is available to all faculty/staff.
-     *
+     * 
      * @return boolean true if the close order button can be displayed.
      */
-    protected boolean canClose() {
+    protected boolean canClose() {        
         // check PO status etc
         boolean can = PurchaseOrderStatuses.APPDOC_OPEN.equals(getPurchaseOrderDocument().getAppDocStatus());
         can = can && getPurchaseOrderDocument().isPurchaseOrderCurrentIndicator() && !getPurchaseOrderDocument().isPendingActionIndicator();
         can = can && processPaymentRequestRulesForCanClose(getPurchaseOrderDocument());
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER_CLOSE, GlobalVariables.getUserSession().getPerson());
         }
 
-        return can;
+        return can;        
     }
 
     /**
      * Determines whether to display the open order button to reopen the purchase order document.
      * Conditions: PO status is close, PO is current and not pending, and the user is in purchasing group.
-     *
+     * 
      * @return boolean true if the reopen order button can be displayed.
      */
     protected boolean canReopen() {
         // check PO status etc
         boolean can = PurchaseOrderStatuses.APPDOC_CLOSED.equals(getPurchaseOrderDocument().getAppDocStatus());
         can = can && getPurchaseOrderDocument().isPurchaseOrderCurrentIndicator() && !getPurchaseOrderDocument().isPendingActionIndicator();
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
@@ -522,53 +523,53 @@
 
         return can;
     }
-
+    
     /**
      * Determines whether to display the payment hold buttons for the purchase order document.
      * Conditions: PO status must be open, must be current and not pending, and the user must be in purchasing group.
-     *
+     * 
      * @return boolean true if the payment hold button can be displayed.
      */
     protected boolean canHoldPayment() {
         // check PO status etc
         boolean can = PurchaseOrderStatuses.APPDOC_OPEN.equals(getPurchaseOrderDocument().getAppDocStatus());
         can = can && getPurchaseOrderDocument().isPurchaseOrderCurrentIndicator() && !getPurchaseOrderDocument().isPendingActionIndicator();
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER_PAYMENT_HOLD, GlobalVariables.getUserSession().getPerson());
         }
 
-        return can;
+        return can;        
     }
-
+    
     /**
      * Determines whether to display the remove hold button for the purchase order document.
      * Conditions are: PO status must be payment hold, must be current and not pending, and the user must be in purchasing group.
-     *
+     * 
      * @return boolean true if the remove hold button can be displayed.
      */
     protected boolean canRemoveHold() {
         // check PO status etc
         boolean can = PurchaseOrderStatuses.APPDOC_PAYMENT_HOLD.equals(getPurchaseOrderDocument().getAppDocStatus());
         can = can && getPurchaseOrderDocument().isPurchaseOrderCurrentIndicator() && !getPurchaseOrderDocument().isPendingActionIndicator();
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER_REMOVE_HOLD, GlobalVariables.getUserSession().getPerson());
         }
 
-        return can;
+        return can;        
     }
-
+        
     /**
-     * Determines whether to display the retransmit button. Conditions:
-     * PO status must be open, and must be current and not pending, and the last transmit date must not be null.
-     * If the purchase order is an Automated Purchase Order (APO) and does not have any sensitive data set to true,
+     * Determines whether to display the retransmit button. Conditions: 
+     * PO status must be open, and must be current and not pending, and the last transmit date must not be null. 
+     * If the purchase order is an Automated Purchase Order (APO) and does not have any sensitive data set to true, 
      * then any users can see the retransmit button, otherwise, only users in the purchasing group can see it.
-     *
+     * 
      * @return boolean true if the retransmit button can be displayed.
      */
     protected boolean canRetransmit() {
@@ -578,11 +579,11 @@
         can = can && getPurchaseOrderDocument().getPurchaseOrderLastTransmitTimestamp() != null;
         can = can && !PurapConstants.RequisitionSources.B2B.equals(getPurchaseOrderDocument().getRequisitionSourceCode());
         can = can && !editingMode.containsKey(PurapAuthorizationConstants.PurchaseOrderEditMode.DISPLAY_RETRANSMIT_TAB);
-
+        
         if (!can) {
-            return false;
+            return false;       
         }
-
+        
         // check user authorization
         DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
         if (getPurchaseOrderDocument().getPurchaseOrderAutomaticIndicator()) {
@@ -591,25 +592,25 @@
         }
         else {
             // for NON_APO use authorization for PurchaseOrderDocument, which is purchasing user
-            can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER, GlobalVariables.getUserSession().getPerson());
+            can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER, GlobalVariables.getUserSession().getPerson());            
         }
-
+        
         return can;
     }
 
     /**
-     * Determines whether to display the button to print the pdf on a retransmit document.
-     * We're currently sharing the same button image as the button for creating a retransmit document but this may change someday.
-     * This button should only appear on Retransmit Document. If it is an Automated Purchase Order (APO)
+     * Determines whether to display the button to print the pdf on a retransmit document. 
+     * We're currently sharing the same button image as the button for creating a retransmit document but this may change someday. 
+     * This button should only appear on Retransmit Document. If it is an Automated Purchase Order (APO) 
      * then any users can see this button, otherwise, only users in the purchasing group can see it.
-     *
+     * 
      * @return boolean true if the print retransmit button can be displayed.
      */
     protected boolean canPrintRetransmit() {
         // check PO status etc
         boolean can = getPurchaseOrderDocument().getDocumentHeader().getWorkflowDocument().getDocumentTypeName().equals(PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_RETRANSMIT_DOCUMENT);
         can = can && editingMode.containsKey(PurapAuthorizationConstants.PurchaseOrderEditMode.DISPLAY_RETRANSMIT_TAB);
-
+        
         if (can) {
             // check user authorization: same as retransmit init, since whoever can init retransmit PO shall be able to print
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
@@ -619,18 +620,18 @@
             }
             else {
                 // for NON_APO use authorization for PurchaseOrderDocument, which is purchasing user
-                can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER, GlobalVariables.getUserSession().getPerson());
+                can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER, GlobalVariables.getUserSession().getPerson());            
             }
         }
-
+      
         return can;
-    }
-
+    }    
+    
     /**
-     * Determines if a Split PO Document can be created from this purchase order. Conditions:
-     * The parent PO status is either "In Process" or "Awaiting Purchasing Review"; requisition source is not B2B; has at least 2 items,
+     * Determines if a Split PO Document can be created from this purchase order. Conditions: 
+     * The parent PO status is either "In Process" or "Awaiting Purchasing Review"; requisition source is not B2B; has at least 2 items, 
      * and PO is not in the process of being split; user must be in purchasing group.
-     *
+     * 
      * @return boolean true if the split PO button can be displayed.
      */
     protected boolean canSplitPo() {
@@ -640,77 +641,73 @@
         can = can || PurchaseOrderStatuses.APPDOC_AWAIT_PURCHASING_REVIEW.equals(getPurchaseOrderDocument().getAppDocStatus());
         
         // can't split a SplitPO Document, according to new specs
-        can = can && !(getPurchaseOrderDocument() instanceof PurchaseOrderSplitDocument);
-
-        // can't initiate another split during the splitting process.
+        can = can && !(getPurchaseOrderDocument() instanceof PurchaseOrderSplitDocument); 
+        
+        // can't initiate another split during the splitting process. 
         can = can && !editingMode.containsKey(PurapAuthorizationConstants.PurchaseOrderEditMode.SPLITTING_ITEM_SELECTION);
-
+        
         // Requisition Source must not be B2B.
         can = can && !getPurchaseOrderDocument().getRequisitionSourceCode().equals(PurapConstants.RequisitionSources.B2B);
-
+        
         // PO must have more than one line item.
         if (can) {
             List<PurApItem> items = (List<PurApItem>)getPurchaseOrderDocument().getItems();
             int itemsBelowTheLine = PurApItemUtils.countBelowTheLineItems(items);
             can = items.size() - itemsBelowTheLine > 1;
         }
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER_SPLIT, GlobalVariables.getUserSession().getPerson());
         }
-
+              
         return can;
     }
-
+    
     /**
      * Determines whether the PO is in a status that signifies it has enough information to generate a Split PO.
-     *
+     * 
      * @return  True if the PO can continue to be split.
      */
     protected boolean canContinuePoSplit() {
         boolean can = editingMode.containsKey(PurapAuthorizationConstants.PurchaseOrderEditMode.SPLITTING_ITEM_SELECTION);
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.PURCHASE_ORDER_SPLIT, GlobalVariables.getUserSession().getPerson());
         }
-
-        return can;
+              
+        return can;        
     }
-
+    
     /**
      * Determines if a line item receiving document can be created for the purchase order.
-     *
+     * 
      * @return boolean true if the receiving document button can be displayed.
      */
-    protected boolean canCreateReceiving() {
-        // check PO status and item info
+    protected boolean canCreateReceiving() {       
+        // check PO status and item info 
         boolean can = SpringContext.getBean(ReceivingService.class).canCreateLineItemReceivingDocument(getPurchaseOrderDocument());
-
+        
         // check user authorization
         if (can) {
             DocumentAuthorizer documentAuthorizer = SpringContext.getBean(DocumentHelperService.class).getDocumentAuthorizer(getPurchaseOrderDocument());
             can = documentAuthorizer.canInitiate(KFSConstants.FinancialDocumentTypeCodes.LINE_ITEM_RECEIVING, GlobalVariables.getUserSession().getPerson());
         }
-
+              
         return can;
     }
-
+    
     /**
      * Creates a MAP for all the buttons to appear on the Purchase Order Form, and sets the attributes of these buttons.
-     *
+     * 
      * @return the button map created.
-     *
-     * KRAD Conversion: Performs customization of extra buttons.
-     *
-     * No data dictionary is involved.
      */
     protected Map<String, ExtraButton> createButtonsMap() {
         HashMap<String, ExtraButton> result = new HashMap<String, ExtraButton>();
-
+        
         // Retransmit button
         ExtraButton retransmitButton = new ExtraButton();
         retransmitButton.setExtraButtonProperty("methodToCall.retransmitPo");
@@ -728,7 +725,7 @@
         printingPreviewButton.setExtraButtonProperty("methodToCall.printingPreviewPo");
         printingPreviewButton.setExtraButtonSource("${" + KFSConstants.EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_previewpf.gif");
         printingPreviewButton.setExtraButtonAltText("PrintingPreview");
-
+        
         // Print button
         ExtraButton printButton = new ExtraButton();
         printButton.setExtraButtonProperty("methodToCall.firstTransmitPrintPo");
@@ -782,43 +779,43 @@
         receivingButton.setExtraButtonProperty("methodToCall.createReceivingLine");
         receivingButton.setExtraButtonSource("${" + KFSConstants.EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_receiving.gif");
         receivingButton.setExtraButtonAltText("Receiving");
-
+        
         // Split PO button
         ExtraButton splitPoButton = new ExtraButton();
         splitPoButton.setExtraButtonProperty("methodToCall.splitPo");
         splitPoButton.setExtraButtonSource("${" + KFSConstants.EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_splitorder.gif");
         splitPoButton.setExtraButtonAltText("Split this PO");
-
+        
         // Continue button
         ExtraButton continueButton = new ExtraButton();
         continueButton.setExtraButtonProperty("methodToCall.continuePurchaseOrderSplit");
         continueButton.setExtraButtonSource("${" + KFSConstants.RICE_EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_continue.gif");
         continueButton.setExtraButtonAltText("Continue");
-
+        
         // Cancel Split button
         ExtraButton cancelSplitButton = new ExtraButton();
         cancelSplitButton.setExtraButtonProperty("methodToCall.cancelPurchaseOrderSplit");
         cancelSplitButton.setExtraButtonSource("${" + KFSConstants.EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_cancelsplit.gif");
         cancelSplitButton.setExtraButtonAltText("Cancel Splitting the PO");
-
+        
         // Assign Sensitive Data button
         ExtraButton assignSensitiveDataButton = new ExtraButton();
         assignSensitiveDataButton.setExtraButtonProperty("methodToCall.assignSensitiveData");
         assignSensitiveDataButton.setExtraButtonSource("${" + KFSConstants.EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_sensitivedata.gif ");
         assignSensitiveDataButton.setExtraButtonAltText("Assign sensitive data to the PO");
-
+        
         // Submit Sensitive Data Assignment button
         ExtraButton submitSensitiveDataButton = new ExtraButton();
         submitSensitiveDataButton.setExtraButtonProperty("methodToCall.submitSensitiveData");
         submitSensitiveDataButton.setExtraButtonSource("${" + KFSConstants.RICE_EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_submit.gif");
         submitSensitiveDataButton.setExtraButtonAltText("Submit sensitive data assignment");
-
+        
         // Cancel Sensitive Data Assignment button
         ExtraButton cancelSensitiveDataButton = new ExtraButton();
         cancelSensitiveDataButton.setExtraButtonProperty("methodToCall.cancelSensitiveData");
         cancelSensitiveDataButton.setExtraButtonSource("${" + KFSConstants.RICE_EXTERNALIZABLE_IMAGES_URL_KEY + "}buttonsmall_cancel.gif");
         cancelSensitiveDataButton.setExtraButtonAltText("Cancel sensitive data assignment");
-
+        
         result.put(retransmitButton.getExtraButtonProperty(), retransmitButton);
         result.put(printingRetransmitButton.getExtraButtonProperty(), printingRetransmitButton);
         result.put(printingPreviewButton.getExtraButtonProperty(), printingPreviewButton);
@@ -837,25 +834,21 @@
         result.put(submitSensitiveDataButton.getExtraButtonProperty(), submitSensitiveDataButton);
         result.put(cancelSensitiveDataButton.getExtraButtonProperty(), cancelSensitiveDataButton);
         result.put(resendPoCxmlButton.getExtraButtonProperty(), resendPoCxmlButton);
-
+        
         return result;
     }
 
     /**
      * Override the superclass method to add appropriate buttons for
      * PurchaseOrderDocument.
-     *
+     * 
      * @see org.kuali.rice.kns.web.struts.form.KualiForm#getExtraButtons()
-     *
-     * KRAD Conversion: Performs customization of an extra button.
-     *
-     * No data dictionary is involved.
      */
     @Override
     public List<ExtraButton> getExtraButtons() {
-        super.getExtraButtons();
-        Map buttonsMap = createButtonsMap();
-
+        super.getExtraButtons();        
+        Map buttonsMap = createButtonsMap();   
+        
         if (getEditingMode().containsKey(PurapAuthorizationConstants.PurchaseOrderEditMode.ASSIGN_SENSITIVE_DATA)) {
             extraButtons.add((ExtraButton) buttonsMap.get("methodToCall.assignSensitiveData"));
             if (getPurchaseOrderDocument().getAssigningSensitiveData()) {
@@ -925,7 +918,7 @@
             extraButtons.add((ExtraButton) buttonsMap.get("methodToCall.continuePurchaseOrderSplit"));
             extraButtons.add((ExtraButton) buttonsMap.get("methodToCall.cancelPurchaseOrderSplit"));
         }
-
+        
         return extraButtons;
     }
 
Index: work/src/org/kuali/kfs/module/purap/document/LineItemReceivingDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/LineItemReceivingDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/LineItemReceivingDocument.java	(working copy)
@@ -222,8 +222,8 @@
     }
 
 
-    protected boolean isAwaitingPurchaseOrderOpen() {
-        return SpringContext.getBean(PurchaseOrderService.class).isPurchaseOrderOpenForProcessing(getPurchaseOrderDocument());
+    protected boolean isRelatesToOutstandingTransactionsRequired() {
+        return SpringContext.getBean(ReceivingService.class).hasNewUnorderedItem(this) && !SpringContext.getBean(PurchaseOrderService.class).isPurchaseOrderOpenForProcessing(getPurchaseOrderDocument());
     }
 
     /**
@@ -233,7 +233,7 @@
      * @see org.kuali.kfs.sys.document.FinancialSystemTransactionalDocumentBase#answerSplitNodeQuestion(java.lang.String)
      */
     public boolean answerSplitNodeQuestion(String nodeName) throws UnsupportedOperationException {
-        if (nodeName.equals(PurapWorkflowConstants.RELATES_TO_OUTSTANDING_TRANSACTIONS)) return !isAwaitingPurchaseOrderOpen();
+        if (nodeName.equals(PurapWorkflowConstants.RELATES_TO_OUTSTANDING_TRANSACTIONS)) return isRelatesToOutstandingTransactionsRequired();
         throw new UnsupportedOperationException("Cannot answer split question for this node you call \""+nodeName+"\"");
     }
     
Index: work/src/org/kuali/kfs/module/purap/document/PurchaseOrderDocument.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/PurchaseOrderDocument.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/PurchaseOrderDocument.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2006 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -145,11 +145,11 @@
     protected Date purchaseOrderQuoteInitializationDate;
     protected Date purchaseOrderQuoteAwardedDate;
     protected String assignedUserPrincipalId;
-
+    
     // COLLECTIONS
     protected List<PurchaseOrderVendorStipulation> purchaseOrderVendorStipulations;
     protected List<PurchaseOrderVendorQuote> purchaseOrderVendorQuotes;
-
+    
     // NOT PERSISTED IN DB
     protected String statusChange;
     protected String alternateVendorNumber;
@@ -160,12 +160,12 @@
     protected boolean pendingSplit = false;           // Needed for authorization
     protected boolean copyingNotesWhenSplitting;      // Check box on Split PO tab
     protected boolean assigningSensitiveData = false; // whether the form is currently used for assigning sensitive data to the PO
-    protected List<PurchaseOrderSensitiveData> purchaseOrderSensitiveData;
+    protected List<PurchaseOrderSensitiveData> purchaseOrderSensitiveData;  
     protected String assignedUserPrincipalName; // this serves as a temporary holder before validation is done
-
+    
     //this is a holder for the accountinglines for GL purposes only; used only for PO change docs
     protected List<SourceAccountingLine> glOnlySourceAccountingLines;
-
+    
     // REFERENCE OBJECTS
     protected PurchaseOrderVendorChoice purchaseOrderVendorChoice;
     protected PaymentTermType vendorPaymentTerms;
@@ -185,13 +185,13 @@
 
     @Override
     public PurchasingDocumentSpecificService getDocumentSpecificService() {
-        return SpringContext.getBean(PurchaseOrderService.class);
+        return SpringContext.getBean(PurchaseOrderService.class);    
     }
-
+    
     /**
      * Overrides the method in PurchasingAccountsPayableDocumentBase to add the criteria
      * specific to Purchase Order Document.
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.PurchasingAccountsPayableDocumentBase#isInquiryRendered()
      */
     @Override
@@ -208,23 +208,23 @@
             return true;
         }
     }
-
+    
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#getDocumentTitle()
+     * @see org.kuali.rice.kns.document.DocumentBase#getDocumentTitle()
      */
     @Override
     public String getDocumentTitle() {
         if (SpringContext.getBean(ParameterService.class).getParameterValueAsBoolean(PurchaseOrderDocument.class, PurapParameterConstants.PURAP_OVERRIDE_PO_DOC_TITLE)) {
             return getCustomDocumentTitle();
         }
-
+        
         return this.buildDocumentTitle(super.getDocumentTitle());
     }
 
     /**
-     * Returns a custom document title based on the workflow document title.
+     * Returns a custom document title based on the workflow document title. 
      * Depending on what route level the document is currently in, various info may be added to the documents title.
-     *
+     * 
      * @return - Customized document title text dependent upon route level.
      */
     protected String getCustomDocumentTitle() {
@@ -271,15 +271,15 @@
     public Class getSourceAccountingLineClass() {
       //NOTE: do not do anything with this method as it is used by routing etc!
         return super.getSourceAccountingLineClass();
-    }
-
+    } 
+    
     /**
      * Returns the first PO item's first accounting line (assuming the item list is sequentially ordered).
-     *
+     * 
      * @return - The first accounting line of the first PO item.
      */
     protected PurApAccountingLine getFirstAccount() {
-        // loop through items, and pick the first item with non-empty accounting lines
+        // loop through items, and pick the first item with non-empty accouting lines
         if (getItems() != null && !getItems().isEmpty()) {
             for (Iterator iter = getItems().iterator(); iter.hasNext();) {
                 PurchaseOrderItem item = (PurchaseOrderItem)iter.next();
@@ -293,7 +293,7 @@
         }
         return null;
     }
-
+            
     public String getAssignedUserPrincipalId() {
         return assignedUserPrincipalId;
     }
@@ -316,16 +316,16 @@
     }
 
     public void setAssignedUserPrincipalName(String assignedUserPrincipalName) {
-        this.assignedUserPrincipalName = assignedUserPrincipalName;
+        this.assignedUserPrincipalName = assignedUserPrincipalName;           
         // each time this field changes we need to update the assigned user ID and ref obj to keep consistent
         // this code can be moved to where PO is saved and with validation too, which may be more appropriate
         Person assignedUser = null;
-        if (assignedUserPrincipalName != null)
+        if (assignedUserPrincipalName != null) 
             assignedUser = SpringContext.getBean(PersonService.class).getPersonByPrincipalName(assignedUserPrincipalName);
-        if (assignedUser != null)
-            assignedUserPrincipalId = assignedUser.getPrincipalId();
+        if (assignedUser != null) 
+            assignedUserPrincipalId = assignedUser.getPrincipalId();        
         else
-            assignedUserPrincipalId = null;
+            assignedUserPrincipalId = null;        
     }
 
     public boolean getAssigningSensitiveData() {
@@ -345,7 +345,7 @@
     public void setPurchaseOrderSensitiveData(List<PurchaseOrderSensitiveData> purchaseOrderSensitiveData) {
         this.purchaseOrderSensitiveData = purchaseOrderSensitiveData;
     }
-
+    
     public ContractManager getContractManager() {
         if (ObjectUtils.isNull(contractManager))
             refreshReferenceObject(PurapPropertyConstants.CONTRACT_MANAGER);
@@ -376,7 +376,7 @@
         }
         return managedLists;
     }
-
+    
     /**
      * @see org.kuali.kfs.module.purap.document.PurchasingAccountsPayableDocumentBase#getOverrideWorkflowButtons()
      */
@@ -442,7 +442,7 @@
         WorkflowDocument workFlowDocument = getDocumentHeader().getWorkflowDocument();
         String documentType = workFlowDocument.getDocumentTypeName();
 
-
+        
         if ((documentType.equals(PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_DOCUMENT)) ||
             (documentType.equals(PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_SPLIT_DOCUMENT))) {
             if (workFlowDocument.isCanceled()) {
@@ -469,7 +469,7 @@
 
     /**
      * Populates this Purchase Order from the related Requisition Document.
-     *
+     * 
      * @param requisitionDocument the Requisition Document from which field values are copied.
      */
     public void populatePurchaseOrderFromRequisition(RequisitionDocument requisitionDocument) {
@@ -486,7 +486,7 @@
         this.setBillingPostalCode(requisitionDocument.getBillingPostalCode());
         this.setBillingCountryCode(requisitionDocument.getBillingCountryCode());
         this.setBillingPhoneNumber(requisitionDocument.getBillingPhoneNumber());
-
+        
         this.setReceivingName(requisitionDocument.getReceivingName());
         this.setReceivingCityName(requisitionDocument.getReceivingCityName());
         this.setReceivingLine1Address(requisitionDocument.getReceivingLine1Address());
@@ -513,7 +513,7 @@
         this.setDeliveryToName(requisitionDocument.getDeliveryToName());
         this.setDeliveryToPhoneNumber(requisitionDocument.getDeliveryToPhoneNumber());
         this.setDeliveryBuildingOtherIndicator(requisitionDocument.isDeliveryBuildingOtherIndicator());
-
+        
         this.setPurchaseOrderBeginDate(requisitionDocument.getPurchaseOrderBeginDate());
         this.setPurchaseOrderCostSourceCode(requisitionDocument.getPurchaseOrderCostSourceCode());
         this.setPostingYear(requisitionDocument.getPostingYear());
@@ -536,7 +536,7 @@
         this.setPurchaseOrderTotalLimit(requisitionDocument.getPurchaseOrderTotalLimit());
         this.setPurchaseOrderTransmissionMethodCode(requisitionDocument.getPurchaseOrderTransmissionMethodCode());
         this.setUseTaxIndicator( requisitionDocument.isUseTaxIndicator() );
-
+        
         this.setVendorCityName(requisitionDocument.getVendorCityName());
         this.setVendorContractGeneratedIdentifier(requisitionDocument.getVendorContractGeneratedIdentifier());
         this.setVendorCountryCode(requisitionDocument.getVendorCountryCode());
@@ -554,7 +554,8 @@
         this.setVendorPostalCode(requisitionDocument.getVendorPostalCode());
         this.setVendorStateCode(requisitionDocument.getVendorStateCode());
         this.setVendorRestrictedIndicator(requisitionDocument.getVendorRestrictedIndicator());
-
+        this.setJustification(requisitionDocument.getJustification());
+        
         this.setExternalOrganizationB2bSupplierIdentifier(requisitionDocument.getExternalOrganizationB2bSupplierIdentifier());
         this.setRequisitionSourceCode(requisitionDocument.getRequisitionSourceCode());
         this.setAccountsPayablePurchasingDocumentLinkIdentifier(requisitionDocument.getAccountsPayablePurchasingDocumentLinkIdentifier());
@@ -570,20 +571,20 @@
             items.add(new PurchaseOrderItem((RequisitionItem)reqItem, this, reqCamsItem));
         }
         this.setItems(items);
-
+        
         // Copy capital asset information that is directly off the document.
         this.setCapitalAssetSystemTypeCode(requisitionDocument.getCapitalAssetSystemTypeCode());
         this.setCapitalAssetSystemStateCode(requisitionDocument.getCapitalAssetSystemStateCode());
         for (CapitalAssetSystem capitalAssetSystem : requisitionDocument.getPurchasingCapitalAssetSystems()) {
             this.getPurchasingCapitalAssetSystems().add(new PurchaseOrderCapitalAssetSystem((RequisitionCapitalAssetSystem)capitalAssetSystem));
         }
-
+        
         this.fixItemReferences();
     }
 
     /**
      * Returns the Vendor Stipulation at the specified index in this Purchase Order.
-     *
+     * 
      * @param index the specified index.
      * @return the Vendor Stipulation at the specified index.
      */
@@ -623,7 +624,7 @@
         super.doRouteStatusChange(statusChangeEvent);
         String currentDocumentTypeName = this.getDocumentHeader().getWorkflowDocument().getDocumentTypeName();
         // child classes need to call super, but we don't want to inherit the post-processing done by this PO class other than to the Split
-        if (PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_DOCUMENT.equals(currentDocumentTypeName) || PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_SPLIT_DOCUMENT.equals(currentDocumentTypeName)) {
+        if (PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_DOCUMENT.equals(currentDocumentTypeName) || PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_SPLIT_DOCUMENT.equals(currentDocumentTypeName)) { 
             try {
                 // DOCUMENT PROCESSED
                 if (getDocumentHeader().getWorkflowDocument().isProcessed()) {
@@ -655,10 +656,10 @@
             }
         }
     }
-    
+
     /**
      * Returns the name of the current route node.
-     *
+     * 
      * @param wd the current workflow document.
      * @return the name of the current route node.
      * @throws WorkflowException
@@ -675,7 +676,7 @@
 
     /**
      * Sends FYI workflow request to the given user on this document.
-     *
+     * 
      * @param workflowDocument the associated workflow document.
      * @param userNetworkId the network ID of the user to be sent to.
      * @param annotation the annotation notes contained in this document.
@@ -693,7 +694,7 @@
     }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#handleRouteLevelChange(org.kuali.rice.kew.clientapp.vo.DocumentRouteLevelChangeDTO)
+     * @see org.kuali.rice.kns.document.DocumentBase#handleRouteLevelChange(org.kuali.rice.kew.clientapp.vo.DocumentRouteLevelChangeDTO)
      */
     @Override
     public void doRouteLevelChange(DocumentRouteLevelChange levelChangeEvent) {
@@ -706,10 +707,7 @@
             ReportCriteriaDTO reportCriteriaDTO = new ReportCriteriaDTO(Long.valueOf(getDocumentNumber()));
             reportCriteriaDTO.setTargetNodeName(newNodeName);
             try {
-                String nodeName = SpringContext.getBean(WorkflowDocumentService.class).getCurrentRouteLevelName(getDocumentHeader().getWorkflowDocument());
-                String disapprovalStatus = PurapConstants.PurchaseOrderStatuses.getPurchaseOrderAppDocDisapproveStatuses().get(nodeName);
-
-                //NodeDetails newNodeDetails = NodeDetailEnum.getNodeDetailEnumByName(newNodeName);                
+                NodeDetails newNodeDetails = NodeDetailEnum.getNodeDetailEnumByName(newNodeName);
                 if (ObjectUtils.isNotNull(newNodeDetails)) {
                     String newStatusCode = newNodeDetails.getAwaitingStatusCode();
                     if (StringUtils.isNotBlank(newStatusCode)) {
@@ -717,7 +715,7 @@
                             // if an approve or complete request will be created then we need to set the status as awaiting for
                             // the new node
                             SpringContext.getBean(PurapService.class).updateStatus(this, newStatusCode);
-                            setAppDocStatus(PurapConstants.PurchaseOrderStatuses.getPurchaseOrderAppDocDisapproveStatuses().get(newStatusCode));                                                       
+                            
                             SpringContext.getBean(PurapService.class).saveDocumentNoValidation(this);
                         }
                     }
@@ -727,11 +725,11 @@
                 String errorMsg = "Workflow Error found checking actions requests on document with id " + getDocumentNumber() + ". *** WILL NOT UPDATE PURAP STATUS ***";
                 LOG.warn(errorMsg, e);
             }
-        }*/
         }
+    }
 
     /**
-     * @see org.kuali.rice.krad.document.DocumentBase#doActionTaken(org.kuali.rice.kew.clientapp.vo.ActionTakenEventDTO)
+     * @see org.kuali.rice.kns.document.DocumentBase#doActionTaken(org.kuali.rice.kew.clientapp.vo.ActionTakenEventDTO)
      */
     @Override
     public void doActionTaken(ActionTakenEvent event) {
@@ -741,7 +739,7 @@
 
     /**
      * Gets the active items in this Purchase Order.
-     *
+     * 
      * @return the list of all active items in this Purchase Order.
      */
     public List getItemsActiveOnly() {
@@ -757,7 +755,7 @@
 
     /**
      * Gets the active items in this Purchase Order, and sets up the alternate amount for GL entry creation.
-     *
+     * 
      * @return the list of all active items in this Purchase Order.
      */
     public List getItemsActiveOnlySetupAlternateAmount() {
@@ -987,7 +985,7 @@
     }
 
     public ShippingTitle getVendorShippingTitle() {
-
+        
         if( ObjectUtils.isNull(vendorShippingTitle) ){
             this.refreshReferenceObject("vendorShippingTitle");
         }
@@ -1061,7 +1059,7 @@
     public void setPurchaseOrderCurrentIndicator(boolean purchaseOrderCurrentIndicator) {
         this.purchaseOrderCurrentIndicator = purchaseOrderCurrentIndicator;
     }
-
+    
     public Timestamp getPurchaseOrderFirstTransmissionTimestamp() {
         return purchaseOrderFirstTransmissionTimestamp;
     }
@@ -1071,7 +1069,7 @@
     }
 
     /**
-     * Gets the purchaseOrderQuoteAwardedDate attribute.
+     * Gets the purchaseOrderQuoteAwardedDate attribute. 
      * @return Returns the purchaseOrderQuoteAwardedDate.
      */
     public Date getPurchaseOrderQuoteAwardedDate() {
@@ -1087,7 +1085,7 @@
     }
 
     /**
-     * Gets the purchaseOrderQuoteInitializationDate attribute.
+     * Gets the purchaseOrderQuoteInitializationDate attribute. 
      * @return Returns the purchaseOrderQuoteInitializationDate.
      */
     public Date getPurchaseOrderQuoteInitializationDate() {
@@ -1104,7 +1102,7 @@
 
     /**
      * Gets the alternateVendorNumber attribute.
-     *
+     * 
      * @return Returns the alternateVendorNumber.
      */
     public String getAlternateVendorNumber() {
@@ -1125,7 +1123,7 @@
 
     /**
      * Sets the alternateVendorNumber attribute value.
-     *
+     * 
      * @param alternateVendorNumber The vendorNumber to set.
      */
     public void setAlternateVendorNumber(String vendorNumber) {
@@ -1147,7 +1145,7 @@
 
     /**
      * Sets alternate vendor fields based on a given VendorDetail.
-     *
+     * 
      * @param vendorDetail the vendor detail used to set vendor fields.
      */
     public void templateAlternateVendor(VendorDetail vendorDetail) {
@@ -1227,7 +1225,7 @@
 
     /**
      * Returns true if a vendor has been awarded for this Purchase Order.
-     *
+     * 
      * @return true if a vendor has been awarded for this Purchase Order.
      */
     public boolean isPurchaseOrderAwarded() {
@@ -1236,7 +1234,7 @@
 
     /**
      * Returns the quote from the awarded vendor.
-     *
+     * 
      * @return the quote from the awarded vendor.
      */
     public PurchaseOrderVendorQuote getAwardedVendorQuote() {
@@ -1267,7 +1265,7 @@
 
     /**
      * Gets the total dollar amount for this Purchase Order.
-     *
+     * 
      * @param includeInactive indicates whether inactive items shall be included.
      * @param includeBelowTheLine indicates whether below the line items shall be included.
      * @return the total dollar amount for this Purchase Order.
@@ -1275,7 +1273,7 @@
     public KualiDecimal getTotalDollarAmount(boolean includeInactive, boolean includeBelowTheLine) {
         KualiDecimal total = new KualiDecimal(BigDecimal.ZERO);
         for (PurApItem item : (List<PurApItem>) getItems()) {
-
+            
             if (item.getPurapDocument() == null) {
                 item.setPurapDocument(this);
             }
@@ -1308,7 +1306,7 @@
 
     /**
      * Gets the pre tax total dollar amount for this Purchase Order.
-     *
+     * 
      * @param includeInactive indicates whether inactive items shall be included.
      * @param includeBelowTheLine indicates whether below the line items shall be included.
      * @return the total dollar amount for this Purchase Order.
@@ -1326,7 +1324,7 @@
         return total;
     }
 
-
+    
     @Override
     public KualiDecimal getTotalTaxAmount() {
         // return total without inactive and with below the line
@@ -1340,7 +1338,7 @@
 
     /**
      * Gets the tax total amount for this Purchase Order.
-     *
+     * 
      * @param includeInactive indicates whether inactive items shall be included.
      * @param includeBelowTheLine indicates whether below the line items shall be included.
      * @return the total dollar amount for this Purchase Order.
@@ -1360,7 +1358,7 @@
 
     /**
      * Returns true if this Purchase Order contains unpaid items in the Payment Request or Credit Memo.
-     *
+     * 
      * @return true if this Purchase Order contains unpaid items in the Payment Request or Credit Memo.
      */
     public boolean getContainsUnpaidPaymentRequestsOrCreditMemos() {
@@ -1388,14 +1386,14 @@
         }
         return false;
     }
-
+    
     public boolean getAdditionalChargesExist() {
         List<PurchaseOrderItem> items = this.getItems();
         for( PurchaseOrderItem item : items ) {
             if ((item != null) &&
-                (item.getItemType() != null) &&
-                (item.getItemType().isAdditionalChargeIndicator()) &&
-                (item.getExtendedPrice() != null) &&
+                (item.getItemType() != null) && 
+                (item.getItemType().isAdditionalChargeIndicator()) && 
+                (item.getExtendedPrice() != null) && 
                 (!KualiDecimal.ZERO.equals(item.getExtendedPrice()))) {
                 return true;
             }
@@ -1405,7 +1403,7 @@
 
     /**
      * Used for routing only.
-     *
+     * 
      * @deprecated
      */
     public String getContractManagerName() {
@@ -1414,7 +1412,7 @@
 
     /**
      * Used for routing only.
-     *
+     * 
      * @deprecated
      */
     public void setContractManagerName(String contractManagerName) {
@@ -1422,14 +1420,16 @@
 
     /**
      * Used for routing only.
+     * 
      * @deprecated
      */
     public String getStatusDescription() {
-        return "";        
+        return "";
     }
 
     /**
      * Used for routing only.
+     * 
      * @deprecated
      */
     public void setStatusDescription(String statusDescription) {
@@ -1447,7 +1447,7 @@
     public void setInternalPurchasingLimit(KualiDecimal internalPurchasingLimit) {
         this.internalPurchasingLimit = internalPurchasingLimit;
     }
-
+    
     public boolean isPendingSplit() {
         return pendingSplit;
     }
@@ -1455,7 +1455,7 @@
     public void setPendingSplit(boolean pendingSplit) {
         this.pendingSplit = pendingSplit;
     }
-
+    
     public boolean isCopyingNotesWhenSplitting() {
         return copyingNotesWhenSplitting;
     }
@@ -1487,11 +1487,11 @@
     public Class getPurchasingCapitalAssetSystemClass() {
         return PurchaseOrderCapitalAssetSystem.class;
     }
-
+    
     /**
-     * Validates whether we can indeed close the PO. Return false and give error if
+     * Validates whether we can indeed close the PO. Return false and give error if 
      * the outstanding encumbrance amount of the trade in item is less than 0.
-     *
+     * 
      * @param po
      * @return
      */
@@ -1504,14 +1504,14 @@
         }
         return true;
     }
-
+    
     /**
      * Provides answers to the following splits:
      * RequiresContractManagementReview
      * RequiresBudgetReview
      * VendorIsEmployeeOrNonResidentAlien
      * TransmissionMethodIsPrint
-     *
+     * 
      * @see org.kuali.kfs.sys.document.FinancialSystemTransactionalDocumentBase#answerSplitNodeQuestion(java.lang.String)
      */
     @Override
@@ -1530,7 +1530,7 @@
         }
         return super.answerSplitNodeQuestion(nodeName);
     }
-
+    
     protected boolean isContractManagementReviewRequired() {
         KualiDecimal internalPurchasingLimit = SpringContext.getBean(PurchaseOrderService.class).getInternalPurchasingDollarLimit(this);
         return ((ObjectUtils.isNull(internalPurchasingLimit)) || (internalPurchasingLimit.compareTo(this.getTotalDollarAmount()) < 0));
@@ -1540,10 +1540,10 @@
     protected boolean isAwardReviewRequired() {
         ParameterService parameterService = SpringContext.getBean(ParameterService.class);
         boolean objectCodeAllowed = true;
-
+        
         for (PurApItem item : (List<PurApItem>) this.getItems()) {
             for (PurApAccountingLine accountingLine : item.getSourceAccountingLines()) {
-
+                
                 objectCodeAllowed = isObjectCodeAllowedForAwardRouting(accountingLine, parameterService);
                 // We should return true as soon as we have at least one objectCodeAllowed=true so that the PO will stop at Award
                 // level.
@@ -1553,9 +1553,9 @@
 
             }
         }
-        return objectCodeAllowed;
+        return objectCodeAllowed;        
     }
-
+    
     protected boolean isObjectCodeAllowedForAwardRouting(PurApAccountingLine accountingLine, ParameterService parameterService) {
         if (ObjectUtils.isNull(accountingLine.getObjectCode())) {
             return false;
@@ -1577,7 +1577,7 @@
         }
         return objectCodeAllowed;
     }
-
+    
     protected boolean isBudgetReviewRequired() {
         boolean alwaysRoutes = true;
         String documentHeaderId = null;
@@ -1616,10 +1616,10 @@
 
         return true;
     }
-
+    
     public List<Account> getAccountsForAwardRouting() {
         List<Account> accounts = new ArrayList<Account>();
-
+        
         ParameterService parameterService = SpringContext.getBean(ParameterService.class);
         for (PurApItem item : (List<PurApItem>) this.getItems()) {
             for (PurApAccountingLine accountingLine : item.getSourceAccountingLines()) {
@@ -1659,18 +1659,18 @@
 //        }
         return searchCriteria;
     }
-
+    
     /**
      * @return the purchase order current indicator
      */
     public boolean getPurchaseOrderCurrentIndicatorForSearching() {
         return purchaseOrderCurrentIndicator;
     }
-
+    
     public String getDocumentTitleForResult() throws WorkflowException{
         return KewApiServiceLocator.getDocumentTypeService().getDocumentTypeByName(this.getDocumentHeader().getWorkflowDocument().getDocumentTypeName()).getLabel();
     }
-
+    
     /**
      * Checks whether the purchase order needs a warning to be displayed, i.e. it never has been opened.
      * @return true if the purchase order needs a warning; false otherwise.
Index: work/src/org/kuali/kfs/module/purap/document/PurapItemOperations.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/PurapItemOperations.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/PurapItemOperations.java	(working copy)
@@ -17,6 +17,8 @@
 
 import java.util.List;
 
+import org.kuali.kfs.module.purap.businessobject.PurApItem;
+
 /**
  * This class allows for the use of items by multiple purap type docs
  */
@@ -24,7 +26,7 @@
     
     public List getItems();
 
-    public void setItems(List items);
+    public void setItems(List<PurApItem> items);
 
     public <T extends Object>T getItem(int pos);
 
Index: work/src/org/kuali/kfs/module/purap/document/service/PurapService.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/PurapService.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/PurapService.java	(working copy)
@@ -128,6 +128,23 @@
     public boolean isFullDocumentEntryCompleted(PurchasingAccountsPayableDocument purapDocument);
 
     /**
+     * Determines if full entry mode has ended for this Payment Request status
+     * 
+     * @param purapDocumentStatus String
+     * @return a boolean to indicate if document has completed full entry mode
+     */
+    public boolean isPaymentRequestFullDocumentEntryCompleted(String purapDocumentStatus);
+    
+    /**
+     * Determines if full entry mode has ended for this Vendor Credit Memo status
+     * 
+     * @param purapDocumentStatus String
+     * @return a boolean to indicate if document has completed full entry mode
+     */
+    public boolean isVendorCreditMemoFullDocumentEntryCompleted(String purapDocumentStatus);
+        
+
+    /**
      * Create a close or reopen purchase order document.
      * 
      * @param purapDocument PurchasingAccountsPayableDocument
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/PurchaseOrderServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/PurchaseOrderServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/PurchaseOrderServiceImpl.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2006 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -33,10 +33,11 @@
 import org.apache.commons.lang.text.StrBuilder;
 import org.kuali.kfs.integration.purap.CapitalAssetSystem;
 import org.kuali.kfs.module.purap.PurapConstants;
-import org.kuali.kfs.module.purap.PurapConstants.CreditMemoStatuses;
+import org.kuali.kfs.module.purap.PurapKeyConstants;
+import org.kuali.kfs.module.purap.PurapParameterConstants;
+import org.kuali.kfs.module.purap.PurapPropertyConstants;
 import org.kuali.kfs.module.purap.PurapConstants.PODocumentsStrings;
 import org.kuali.kfs.module.purap.PurapConstants.POTransmissionMethods;
-import org.kuali.kfs.module.purap.PurapConstants.PaymentRequestStatuses;
 import org.kuali.kfs.module.purap.PurapConstants.PurchaseOrderDocTypes;
 import org.kuali.kfs.module.purap.PurapConstants.PurchaseOrderStatuses;
 import org.kuali.kfs.module.purap.PurapConstants.RequisitionSources;
@@ -77,6 +78,7 @@
 import org.kuali.kfs.module.purap.util.ThresholdHelper.ThresholdSummary;
 import org.kuali.kfs.sys.KFSConstants;
 import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
 import org.kuali.kfs.sys.context.SpringContext;
 import org.kuali.kfs.sys.document.FinancialSystemTransactionalDocumentBase;
 import org.kuali.kfs.sys.document.validation.event.AttributedRouteDocumentEvent;
@@ -154,7 +156,7 @@
     private MailService mailService;
     private B2BPurchaseOrderService b2bPurchaseOrderService;
     private DataDictionaryService dataDictionaryService;
-
+    
     public void setB2bPurchaseOrderService(B2BPurchaseOrderService purchaseOrderService) {
         b2bPurchaseOrderService = purchaseOrderService;
     }
@@ -214,7 +216,7 @@
     public void setMaintenanceDocumentService(MaintenanceDocumentService maintenanceDocumentService) {
         this.maintenanceDocumentService = maintenanceDocumentService;
     }
-
+    
     public void setParameterService(ParameterService parameterService) {
         this.parameterService = parameterService;
     }
@@ -231,28 +233,28 @@
     public boolean isPurchaseOrderOpenForProcessing(PurchaseOrderDocument purchaseOrderDocument) {
         boolean can = PurchaseOrderStatuses.APPDOC_OPEN.equals(purchaseOrderDocument.getAppDocStatus());
         can = can && purchaseOrderDocument.isPurchaseOrderCurrentIndicator() && !purchaseOrderDocument.isPendingActionIndicator();
-
-        // in addition, check conditions about No In Process PREQ and CM)
+        // can't be any PREQ or CM that have not completed fullDocumentEntry 
         if (can) {
             List<PaymentRequestView> preqViews = purchaseOrderDocument.getRelatedViews().getRelatedPaymentRequestViews();
             if ( preqViews != null ) {
                 for (PaymentRequestView preqView : preqViews) {
-                    if (StringUtils.equalsIgnoreCase(preqView.getAppDocStatus(), PaymentRequestStatuses.APPDOC_IN_PROCESS)) {
+                if (!purapService.isPaymentRequestFullDocumentEntryCompleted(preqView.getStatusCode())) {
                         return false;
                     }
                 }
-            }
+            }            
             List<CreditMemoView> cmViews = purchaseOrderDocument.getRelatedViews().getRelatedCreditMemoViews();
             if ( cmViews != null ) {
                 for (CreditMemoView cmView : cmViews) {
-                    if (StringUtils.equalsIgnoreCase(cmView.getAppDocStatus(), CreditMemoStatuses.APPDOC_IN_PROCESS)) {
+                if (!purapService.isVendorCreditMemoFullDocumentEntryCompleted(cmView.getCreditMemoStatusCode())) {
                         return false;
                     }
                 }
             }
         }
 
-        return can;
+        // passed all conditions; return true
+        return true;
     }
 
     public boolean isCommodityCodeRequiredOnPurchaseOrder() {
@@ -267,7 +269,7 @@
     
     /**
      * Sets the error map to a new, empty error map before calling saveDocumentNoValidation to save the document.
-     *
+     * 
      * @param document The purchase order document to be saved.
      */
     protected void saveDocumentNoValidationUsingClearMessageMap(PurchaseOrderDocument document) {
@@ -283,7 +285,7 @@
 
     /**
      * Calls the saveDocument method of documentService to save the document.
-     *
+     * 
      * @param document The document to be saved.
      */
     protected void saveDocumentStandardSave(PurchaseOrderDocument document) {
@@ -314,7 +316,7 @@
         CapitalAssetSystem resultSystem = new PurchaseOrderCapitalAssetSystem();
         return resultSystem;
     }
-
+    
     /**
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#createAutomaticPurchaseOrderDocument(org.kuali.kfs.module.purap.document.RequisitionDocument)
      */
@@ -378,7 +380,7 @@
 
     /**
      * Create Purchase Order and populate with data from Requisition and other default data
-     *
+     * 
      * @param reqDocument The requisition document from which we create the purchase order document.
      * @return The purchase order document created by this method.
      * @throws WorkflowException
@@ -426,9 +428,9 @@
     public KualiDecimal getInternalPurchasingDollarLimit(PurchaseOrderDocument document) {
         if ((document.getVendorContract() != null) && (document.getContractManager() != null)) {
             KualiDecimal contractDollarLimit = vendorService.getApoLimitFromContract(document.getVendorContract().getVendorContractGeneratedIdentifier(), document.getChartOfAccountsCode(), document.getOrganizationCode());
-            //FIXME somehow data fields such as contractManagerDelegationDollarLimit in reference object contractManager didn't get retrieved
+            //FIXME somehow data fields such as contractManagerDelegationDollarLimit in reference object contractManager didn't get retrieved 
             // (are null) as supposed to be (this happens whether or not proxy is set to true), even though contractManager is not null;
-            // so here we have to manually refresh the contractManager to retrieve the fields
+            // so here we have to manually refresh the contractManager to retrieve the fields 
             if (document.getContractManager().getContractManagerDelegationDollarLimit() == null) {
                 document.refreshReferenceObject(PurapPropertyConstants.CONTRACT_MANAGER);
             }
@@ -467,7 +469,7 @@
 
     /**
      * Loops through the collection of error messages and adding each of them to the error map.
-     *
+     * 
      * @param errorKey The resource key used to retrieve the error text from the error message resource bundle.
      * @param errors The collection of error messages.
      */
@@ -483,7 +485,7 @@
 
     /**
      * TODO RELEASE 3 - QUOTE
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#printPurchaseOrderQuoteRequestsListPDF(org.kuali.kfs.module.purap.document.PurchaseOrderDocument,
      *      java.io.ByteArrayOutputStream)
      */
@@ -502,7 +504,7 @@
 
     /**
      * TODO RELEASE 3 - QUOTE
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#printPurchaseOrderQuotePDF(org.kuali.kfs.module.purap.document.PurchaseOrderDocument,
      *      org.kuali.kfs.module.purap.businessobject.PurchaseOrderVendorQuote, java.io.ByteArrayOutputStream)
      */
@@ -603,7 +605,7 @@
      * This method creates a new Purchase Order Document using the given document type based off the given source document. This
      * method will return null if the source document given is null.<br>
      * <br> ** THIS METHOD DOES NOT SAVE EITHER THE GIVEN SOURCE DOCUMENT OR THE NEW DOCUMENT CREATED
-     *
+     * 
      * @param sourceDocument - document the new Purchase Order Document should be based off of in terms of data
      * @param docType - document type of the potential new Purchase Order Document
      * @return the new Purchase Order Document of the given document type or null if the given source document is null
@@ -640,18 +642,18 @@
             item.getSourceAccountingLines().iterator();
             // we only need to do this once to apply to all items, so we can break out of the loop now
             SequenceAccessorService sas = SpringContext.getBean(SequenceAccessorService.class);
-            Integer itemIdentifier = sas.getNextAvailableSequenceNumber("PO_ITM_ID", PurApItem.class).intValue();
-            item.setItemIdentifier(itemIdentifier);
+            Integer itemIdentifier = sas.getNextAvailableSequenceNumber("PO_ITM_ID", PurApItem.class).intValue(); 
+            item.setItemIdentifier(itemIdentifier); 
         }
 
         updateCapitalAssetRelatedCollections(newPurchaseOrderChangeDocument);
         newPurchaseOrderChangeDocument.refreshNonUpdateableReferences();
-
+        
         return newPurchaseOrderChangeDocument;
     }
 
     protected void updateCapitalAssetRelatedCollections(PurchaseOrderDocument newDocument) {
-
+ 
         for (PurchasingCapitalAssetItem capitalAssetItem : newDocument.getPurchasingCapitalAssetItems()) {
             Integer lineNumber = capitalAssetItem.getPurchasingItem().getItemLineNumber();
             PurApItem newItem = newDocument.getItemByLineNumber(lineNumber.intValue());
@@ -660,17 +662,17 @@
             capitalAssetItem.setCapitalAssetSystemIdentifier(null);
             CapitalAssetSystem oldSystem = capitalAssetItem.getPurchasingCapitalAssetSystem();
             capitalAssetItem.setPurchasingCapitalAssetSystem(new PurchaseOrderCapitalAssetSystem(oldSystem));
-
+            
         }
     }
-
+    
     /**
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#createAndSavePotentialChangeDocument(java.lang.String,
      *      java.lang.String, java.lang.String)
      */
     public PurchaseOrderDocument createAndSavePotentialChangeDocument(String documentNumber, String docType, String currentDocumentStatusCode) {
         PurchaseOrderDocument currentDocument = getPurchaseOrderByDocumentNumber(documentNumber);
-
+        
         try {
             PurchaseOrderDocument newDocument = createPurchaseOrderDocumentFromSourceDocument(currentDocument, docType);
             
@@ -721,7 +723,7 @@
            
             if (ObjectUtils.isNotNull(newDocument)) {
                 try {
-                    // set the pending indictor before routing, so that when routing is done in synch mode, the pending indicator won't be set again after route finishes and cause inconsistency
+                    // set the pending indictor before routing, so that when routing is done in synch mode, the pending indicator won't be set again after route finishes and cause inconsistency 
                     currentDocument.setPendingActionIndicator(true);
                     documentService.routeDocument(newDocument, annotation, adhocRoutingRecipients);
                 }
@@ -746,34 +748,34 @@
             throw new RuntimeException(errorMsg, we);
         }
     }
-
+    
     /**
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#createAndSavePurchaseOrderSplitDocument(java.util.List, java.lang.String, boolean)
      */
     public PurchaseOrderSplitDocument createAndSavePurchaseOrderSplitDocument(List<PurchaseOrderItem> newPOItems, PurchaseOrderDocument currentDocument, boolean copyNotes, String splitNoteText) {
-
+        
         if (ObjectUtils.isNull(currentDocument)) {
             String errorMsg = "Attempting to create new PO of type PurchaseOrderSplitDocument from source PO doc that is null";
             LOG.error(errorMsg);
             throw new RuntimeException(errorMsg);
         }
         String documentNumber = currentDocument.getDocumentNumber();
-
+        
         try {
             // Create the new Split PO document (throws WorkflowException)
             PurchaseOrderSplitDocument newDocument = (PurchaseOrderSplitDocument)documentService.getNewDocument(PurchaseOrderDocTypes.PURCHASE_ORDER_SPLIT_DOCUMENT);
 
             if (ObjectUtils.isNotNull(newDocument)) {
-
+                
                 // Prepare for copying fields over from the current document.
                 Set<Class> classesToExclude = getClassesToExcludeFromCopy();
                 Map<String, Class> uncopyableFields = PurapConstants.UNCOPYABLE_FIELDS_FOR_PO;
                 uncopyableFields.putAll(PurapConstants.uncopyableFieldsForSplitPurchaseOrder());
-
+                
                 // Copy all fields over from the current document except the items and the above-specified fields.
                 PurApObjectUtils.populateFromBaseWithSuper(currentDocument, newDocument, uncopyableFields, classesToExclude);
                 newDocument.getDocumentHeader().setDocumentDescription(currentDocument.getDocumentHeader().getDocumentDescription());
-                newDocument.getDocumentHeader().setOrganizationDocumentNumber(currentDocument.getDocumentHeader().getOrganizationDocumentNumber());
+                newDocument.getDocumentHeader().setOrganizationDocumentNumber(currentDocument.getDocumentHeader().getOrganizationDocumentNumber());   
                 newDocument.setPurchaseOrderCurrentIndicator(true);
                 newDocument.setPendingActionIndicator(false);
                 newDocument.setAccountDistributionMethod(currentDocument.getAccountDistributionMethod());
@@ -781,9 +783,9 @@
                 newDocument.setItems(newPOItems);
                 SpringContext.getBean(PurapService.class).addBelowLineItems(newDocument);
                 newDocument.renumberItems(0);
-
+                
                 newDocument.setPostingYear(currentDocument.getPostingYear());
-
+                
                 if (copyNotes) {
                     // Copy the old notes, except for the one that contains the split note text.
                     List<Note> notes = (List<Note>)currentDocument.getNotes();
@@ -797,7 +799,7 @@
                             }
                             catch (Exception e) {
                                 throw new RuntimeException(e);
-                            }
+                            }                           
                         }
                     }
                 }
@@ -815,16 +817,16 @@
                               
                 //fix references before saving
                 fixItemReferences(newDocument);
-
+                
                 purapService.saveDocumentNoValidation(newDocument);
-
+                                   
                 return newDocument;
             }
             else {
                 String errorMsg = "Attempting to create new PO of type 'PurchaseOrderSplitDocument' from source PO doc id " + documentNumber + " returned null for new document";
                 LOG.error(errorMsg);
                 throw new RuntimeException(errorMsg);
-            }
+            }            
         }
         catch (WorkflowException we) {
             String errorMsg = "Workflow Exception caught trying to create and save PO document of type PurchaseOrderSplitDocument using source document with doc id '" + documentNumber + "'";
@@ -832,12 +834,12 @@
             throw new RuntimeException(errorMsg, we);
         }
     }
-
+    
     /**
      * Gets a set of classes to exclude from those whose fields will be copied during a copy operation from one Document to
      * another.
-     *
-     * @return A Set<Class>
+     * 
+     * @return A Set<Class> 
      */
     protected Set<Class> getClassesToExcludeFromCopy() {
         Set<Class> classesToExclude = new HashSet<Class>();
@@ -852,8 +854,8 @@
 
     /**
      * Returns the current route node name.
-     *
-     * @param wd The WorkflowDocument object whose current route node we're trying to get.
+     * 
+     * @param wd The KualiWorkflowDocument object whose current route node we're trying to get.
      * @return The current route node name.
      * @throws WorkflowException
      */
@@ -874,7 +876,7 @@
         LOG.debug("completePurchaseOrder() started");
         setCurrentAndPendingIndicatorsForApprovedPODocuments(po);
         setupDocumentForPendingFirstTransmission(po);
-
+        
         // check thresholds to see if receiving is required for purchase order
         if (!po.isReceivingDocumentRequiredIndicator()) {
             setReceivingRequiredIndicatorForPurchaseOrder(po);
@@ -885,7 +887,7 @@
 
         // PERFORM ANY LOGIC THAT COULD POTENTIALLY CAUSE THE DOCUMENT TO FAIL BEFORE THIS LINE
         // FOLLOWING LINES COULD INVOLVE TRANSMITTING THE PO TO THE VENDOR WHICH WILL NOT BE REVERSED IN A TRANSACTION ROLLBACK
-
+        
         // if the document is set in a Pending Transmission status then don't OPEN the PO just leave it as is
         if (!PurchaseOrderStatuses.STATUSES_BY_TRANSMISSION_TYPE.values().contains(po.getAppDocStatus())) {
             attemptSetupOfInitialOpenOfDocument(po);
@@ -918,7 +920,7 @@
         else {
             //PO transmission failed; record errors and change status to "cxml failed"
             try {
-                String noteText = "Unable to transmit the PO for the following reasons:\n" + errors;
+                String noteText = "Unable to transmit the PO for the following reasons:\n" + errors;                
                 int noteMaxSize = dataDictionaryService.getAttributeMaxLength("Note", "noteText");
 
                 // Break up the note into multiple pieces if the note is too large to fit in the database field.
@@ -951,55 +953,10 @@
         }
         purapService.saveDocumentNoValidation(po);
     }
-    
-    public boolean canHoldPayment(PurchaseOrderDocument purchaseOrder){
-        
-        if (purchaseOrder.getAppDocStatus().equals(PurapConstants.PurchaseOrderStatuses.APPDOC_OPEN) && 
-            purchaseOrder.isPurchaseOrderCurrentIndicator() && 
-            !purchaseOrder.isPendingActionIndicator()) {
-            return true;
-        }
-
-        return false;
-    }
-    
-    public boolean canAmendPurchaseOrder(PurchaseOrderDocument purchaseOrder){
-        boolean canAmend = false;
-
-        //The other conditions for displaying amend button (apart from the condition about No In Process PREQ and CM)
-        //are the same as the conditions for displaying the Payment Hold button, so we're reusing that method here.
-        if (canHoldPayment(purchaseOrder)) {
-
-           canAmend = true;
-
-           if (purchaseOrder.getRelatedViews().getRelatedPaymentRequestViews() != null &&
-               purchaseOrder.getRelatedViews().getRelatedPaymentRequestViews().size() > 0) {
-
-               for (PaymentRequestView preq : purchaseOrder.getRelatedViews().getRelatedPaymentRequestViews()) {
-                   if (StringUtils.equalsIgnoreCase(preq.getAppDocStatus(), PaymentRequestStatuses.APPDOC_IN_PROCESS)) {
-                       return false;
-                   }
-               }
-
-           }
-
-            if (purchaseOrder.getRelatedViews().getRelatedCreditMemoViews() != null &&
-                purchaseOrder.getRelatedViews().getRelatedCreditMemoViews().size() > 0) {
-
-                for (CreditMemoView cm : purchaseOrder.getRelatedViews().getRelatedCreditMemoViews()) {
-                    if (StringUtils.equalsIgnoreCase(cm.getAppDocStatus(), CreditMemoStatuses.APPDOC_IN_PROCESS)) {
-                        return false;
-                    }
-                }
-            }
-        }
-
-        return canAmend;
-    }
-    
+           
     public void completePurchaseOrderAmendment(PurchaseOrderDocument poa) {
         LOG.debug("completePurchaseOrderAmendment() started");
-
+        
         setCurrentAndPendingIndicatorsForApprovedPODocuments(poa);
 
         if (SpringContext.getBean(PaymentRequestService.class).hasActivePaymentRequestsForPurchaseOrder(poa.getPurapDocumentIdentifier())) {
@@ -1008,7 +965,7 @@
         }
         // check thresholds to see if receiving is required for purchase order amendment
         else if (!poa.isReceivingDocumentRequiredIndicator()) {
-            setReceivingRequiredIndicatorForPurchaseOrder(poa);
+            setReceivingRequiredIndicatorForPurchaseOrder(poa);                       
         }
 
         // if unordered items have been added to the PO then send an FYI to all fiscal officers
@@ -1080,7 +1037,7 @@
     /**
      * Creates a note to be added to the Vendor Maintenance Document which is spawned
      * from the PurchaseOrderDocument.
-     *
+     * 
      * @param maintainable
      * @param documentNumber
      * @param poID
@@ -1099,10 +1056,10 @@
         noteList.add(newBONote);
         noteService.saveNoteList(noteList);
     }
-
+    
     /**
      * Checks whether the vendor is currently locked.
-     *
+     * 
      * @param document The MaintenanceDocument containing the vendor.
      * @return boolean true if the vendor is currently locked and false otherwise.
      */
@@ -1115,7 +1072,7 @@
             return true;
         }
     }
-
+    
     /**
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#updateVendorWithMissingCommodityCodesIfNecessary(org.kuali.kfs.module.purap.document.PurchaseOrderDocument)
      */
@@ -1163,10 +1120,10 @@
             return null;
         }
     }
-
+    
     /**
      * Update the purchase order document with the appropriate status for pending first transmission based on the transmission type.
-     *
+     * 
      * @param po The purchase order document whose status to be updated.
      */
     protected void setupDocumentForPendingFirstTransmission(PurchaseOrderDocument po) {
@@ -1182,7 +1139,7 @@
     /**
      * If the status of the purchase order is not OPEN and the initial open date is null, sets the initial open date to current date
      * and update the status to OPEN, then save the purchase order.
-     *
+     * 
      * @param po The purchase order document whose initial open date and status we want to update.
      */
     protected void attemptSetupOfInitialOpenOfDocument(PurchaseOrderDocument po) {
@@ -1270,7 +1227,7 @@
      * saved to the db previously), get the notes of the purchase order from the database, fix the notes' fields by calling the
      * fixDbNoteFields, then set the notes to the purchase order. Otherwise (I think this means if it's a new purchase order), set
      * the notes of this purchase order to be the notes of the documentBusinessObject.
-     *
+     * 
      * @param po The current purchase order.
      * @param documentBusinessObject The oldest purchase order whose purapDocumentIdentifier is the same as the po's
      *        purapDocumentIdentifier.
@@ -1292,7 +1249,7 @@
 
     /**
      * This method fixes non ojb managed missing fields from the db
-     *
+     * 
      * @param documentBusinessObject The oldest purchase order whose purapDocumentIdentifier is the same as the po's
      *        purapDocumentIdentifier.
      * @param dbNotes The notes of the purchase order obtained from the database.
@@ -1394,7 +1351,7 @@
     /**
      * Update the statuses of both the old purchase order and the new purchase orders, then save the old and the new purchase
      * orders.
-     *
+     * 
      * @param newPO The new change purchase order document (e.g. the PurchaseOrderAmendmentDocument that was resulted from the user
      *        clicking on the amend button).
      * @param newPOStatus The status to be set on the new change purchase order document.
@@ -1424,34 +1381,34 @@
             ThresholdSummary thresholdSummary = thresholdHelper.getThresholdSummary();
             ReceivingThreshold receivingThreshold = thresholdHelper.getReceivingThreshold();
             po.setReceivingDocumentRequiredIndicator(true);
-
+            
             String notetxt = "Receiving is set to be required because the threshold summary with a total amount of " + thresholdSummary.getTotalAmount();
-            notetxt += " exceeds the receiving threshold of " + receivingThreshold.getThresholdAmount();
-            notetxt += " with respect to the threshold criteria ";
-
+            notetxt += " exceeds the receiving threshold of " + receivingThreshold.getThresholdAmount();            
+            notetxt += " with respect to the threshold criteria "; 
+            
             if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART){
                 notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
             } else if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART_AND_ACCOUNTTYPE){
-                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
-                notetxt += " - Account Type " + receivingThreshold.getAccountTypeCode();
+                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();       
+                notetxt += " - Account Type " + receivingThreshold.getAccountTypeCode();                       
             } else if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART_AND_SUBFUND){
-                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
-                notetxt += " - Sub-Fund " + receivingThreshold.getSubFundGroupCode();
+                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();  
+                notetxt += " - Sub-Fund " + receivingThreshold.getSubFundGroupCode();       
             } else if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART_AND_COMMODITYCODE){
-                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
+                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();      
                 notetxt += " - Commodity Code " + receivingThreshold.getPurchasingCommodityCode();
             } else if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART_AND_OBJECTCODE){
-                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
+                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();     
                 notetxt += " - Object code " + receivingThreshold.getFinancialObjectCode();
             } else if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART_AND_ORGANIZATIONCODE){
-                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
+                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();    
                 notetxt += " - Organization " + receivingThreshold.getOrganizationCode();
             } else if (thresholdSummary.getThresholdCriteria() == ThresholdHelper.CHART_AND_VENDOR){
-                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();
+                notetxt += " Chart " + receivingThreshold.getChartOfAccountsCode();  
                 notetxt += " - Vendor " + receivingThreshold.getVendorNumber();
             }
 
-            try {
+            try { 
                 Note note = documentService.createNoteFromDocument(po, notetxt);
 //                documentService.addNoteToDocument(po, note);
                 noteService.save(note);
@@ -1466,13 +1423,13 @@
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#hasNewUnorderedItem(org.kuali.kfs.module.purap.document.PurchaseOrderDocument)
      */
     public boolean hasNewUnorderedItem(PurchaseOrderDocument po){
-
+        
         boolean itemAdded = false;
-
+        
         for(PurchaseOrderItem poItem: (List<PurchaseOrderItem>)po.getItems()){
             //only check, active, above the line, unordered items
             if (poItem.isItemActiveIndicator() && poItem.getItemType().isLineItemIndicator() && PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE.equals(poItem.getItemTypeCode()) ) {
-
+                
                 //if the item identifier is null its new, or if the item doesn't exist on the current purchase order it's new
                 if( poItem.getItemIdentifier() == null || !purchaseOrderDao.itemExistsOnPurchaseOrder(poItem.getItemLineNumber(), purchaseOrderDao.getDocumentNumberForCurrentPurchaseOrder(po.getPurapDocumentIdentifier()) )){
                     itemAdded = true;
@@ -1480,45 +1437,45 @@
                 }
             }
         }
-
+        
         return itemAdded;
     }
     
     public boolean isNewUnorderedItem(PurchaseOrderItem poItem){
-
+        
         boolean itemAdded = false;
-
+        
         //only check, active, above the line, unordered items
         if (poItem.isItemActiveIndicator() && poItem.getItemType().isLineItemIndicator() && PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE.equals(poItem.getItemTypeCode()) ) {
-
+            
             //if the item identifier is null its new, or if the item doesn't exist on the current purchase order it's new
             if( poItem.getItemIdentifier() == null || !purchaseOrderDao.itemExistsOnPurchaseOrder(poItem.getItemLineNumber(), purchaseOrderDao.getDocumentNumberForCurrentPurchaseOrder(poItem.getPurchaseOrder().getPurapDocumentIdentifier()) )){
                 itemAdded = true;
             }
         }
-
+        
         return itemAdded;
     }
 
     public boolean isNewItemForAmendment(PurchaseOrderItem poItem){
-
+        
         boolean itemAdded = false;
-
+        
         //only check, active, above the line, unordered items
         if (poItem.isItemActiveIndicator() && poItem.getItemType().isLineItemIndicator()) {
-
+            
             //if the item identifier is null its new, or if the item doesn't exist on the current purchase order it's new
             if( poItem.getItemIdentifier() == null || !purchaseOrderDao.itemExistsOnPurchaseOrder(poItem.getItemLineNumber(), purchaseOrderDao.getDocumentNumberForCurrentPurchaseOrder(poItem.getPurchaseOrder().getPurapDocumentIdentifier()) )){
                 itemAdded = true;
             }
         }
-
+        
         return itemAdded;
     }
-
+    
     /**
      * Sends an FYI to fiscal officers for new unordered items.
-     *
+     * 
      * @param po
      */
     protected void sendFyiForNewUnorderedItems(PurchaseOrderDocument po){
@@ -1526,7 +1483,7 @@
         List<AdHocRoutePerson> fyiList = createFyiFiscalOfficerListForNewUnorderedItems(po);
         String annotation = "Notification of New Unordered Items for Purchase Order" + po.getPurapDocumentIdentifier() + "(document id " + po.getDocumentNumber() + ")";
         String responsibilityNote = "Purchase Order Amendment Routed By User";
-
+        
         for(AdHocRoutePerson adHocPerson: fyiList){
             try{
                 po.appSpecificRouteDocumentToUser(
@@ -1540,10 +1497,10 @@
 
         }
     }
-
+    
     /**
      * Creates a list of fiscal officers for new unordered items added to a purchase order.
-     *
+     * 
      * @param po
      * @return
      */
@@ -1552,11 +1509,11 @@
         List<AdHocRoutePerson> adHocRoutePersons = new ArrayList<AdHocRoutePerson>();
         Map fiscalOfficers = new HashMap();
         AdHocRoutePerson adHocRoutePerson = null;
-
+        
         for(PurchaseOrderItem poItem: (List<PurchaseOrderItem>)po.getItems()){
             //only check, active, above the line, unordered items
             if (poItem.isItemActiveIndicator() && poItem.getItemType().isLineItemIndicator() && PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE.equals(poItem.getItemTypeCode()) ) {
-
+                
                 //if the item identifier is null its new, or if the item doesn't exist on the current purchase order it's new
                 if( poItem.getItemIdentifier() == null || !purchaseOrderDao.itemExistsOnPurchaseOrder(poItem.getItemLineNumber(), purchaseOrderDao.getDocumentNumberForCurrentPurchaseOrder(po.getPurapDocumentIdentifier()) )){
 
@@ -1565,10 +1522,10 @@
 
                         //check for dupes of fiscal officer
                         if( fiscalOfficers.containsKey(account.getAccount().getAccountFiscalOfficerUser().getPrincipalName()) == false ){
-
+                        
                             //add fiscal officer to list
                             fiscalOfficers.put(account.getAccount().getAccountFiscalOfficerUser().getPrincipalName(), account.getAccount().getAccountFiscalOfficerUser().getPrincipalName());
-
+                            
                             //create AdHocRoutePerson object and add to list
                             adHocRoutePerson = new AdHocRoutePerson();
                             adHocRoutePerson.setId(account.getAccount().getAccountFiscalOfficerUser().getPrincipalName());
@@ -1576,14 +1533,72 @@
                             adHocRoutePersons.add(adHocRoutePerson);
                         }
                     }
-                }
+                }                
             }
         }
 
         return adHocRoutePersons;
     }
+    
+    
+    /**
+     * Sends an FYI to fiscal officers for general ledger entries created for amend purchase order
+     * 
+     * @param po
+     */
+    public void sendFyiForGLEntries(PurchaseOrderDocument po){
 
+        List<AdHocRoutePerson> fyiList = createFyiFiscalOfficerListForAmendGlEntries(po);
+        String annotation = "Amendment to Purchase Order " + po.getPurapDocumentIdentifier() + "( Document id " + po.getDocumentNumber() + ")" +
+                              " resulted in the generation of Pending General Ledger Entries.";
+        String responsibilityNote = "Purchase Order Amendment Routed By User";
+        
+        for(AdHocRoutePerson adHocPerson: fyiList){
+            try{
+                po.appSpecificRouteDocumentToUser(
+                        po.getDocumentHeader().getWorkflowDocument(),
+                        adHocPerson.getId(),
+                        annotation,
+                        responsibilityNote);
+            }catch (WorkflowException e) {
+                throw new RuntimeException("Error routing fyi for document with id " + po.getDocumentNumber(), e);
+            }
+
+        }
+    }
+    
     /**
+     * Creates a list of fiscal officers for amend genera
+     * 
+     * @param po
+     * @return
+     */
+    protected List<AdHocRoutePerson> createFyiFiscalOfficerListForAmendGlEntries(PurchaseOrderDocument po){
+
+        List<AdHocRoutePerson> adHocRoutePersons = new ArrayList<AdHocRoutePerson>();
+        Map fiscalOfficers = new HashMap();
+        AdHocRoutePerson adHocRoutePerson = null;
+        
+        for(PurchaseOrderItem poItem: (List<PurchaseOrderItem>)po.getItems()){
+                     // loop through accounts and pull off fiscal officer
+                    for(PurApAccountingLine account : poItem.getSourceAccountingLines()){
+                        //check for dupes of fiscal officer
+                        if( fiscalOfficers.containsKey(account.getAccount().getAccountFiscalOfficerUser().getPrincipalName()) == false ){
+                            //add fiscal officer to list
+                            fiscalOfficers.put(account.getAccount().getAccountFiscalOfficerUser().getPrincipalName(), account.getAccount().getAccountFiscalOfficerUser().getPrincipalName());
+                            //create AdHocRoutePerson object and add to list
+                            adHocRoutePerson = new AdHocRoutePerson();
+                            adHocRoutePerson.setId(account.getAccount().getAccountFiscalOfficerUser().getPrincipalName());
+                            adHocRoutePerson.setActionRequested(KFSConstants.WORKFLOW_FYI_REQUEST);
+                            adHocRoutePersons.add(adHocRoutePerson);
+                        }
+                    }
+        }
+
+        return adHocRoutePersons;
+    }
+    
+    /**
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#categorizeItemsForSplit(java.util.List)
      */
     public HashMap<String, List<PurchaseOrderItem>> categorizeItemsForSplit(List<PurchaseOrderItem> items) {
@@ -1594,7 +1609,7 @@
         for (PurchaseOrderItem item : items) {
             if(item.isMovingToSplit()) {
                 movingPOItems.add(item);
-            }
+            }          
             else {
                 remainingPOItems.add(item);
                 if (item.getItemType().isLineItemIndicator()) {
@@ -1617,7 +1632,7 @@
         PurchaseOrderVendorQuote newPOVendorQuote = populateAddressForPOVendorQuote(vendor, documentNumber);
 
         //Set the vendorPhoneNumber on the quote to be the first "phone number" type phone
-        //found on the list. If there's no "phone number" type found, the quote's
+        //found on the list. If there's no "phone number" type found, the quote's 
         //vendorPhoneNumber will be blank regardless of any other types of phone found on the list.
         for (VendorPhoneNumber phone : vendor.getVendorPhoneNumbers()) {
             if (VendorConstants.PhoneTypes.PHONE.equals(phone.getVendorPhoneTypeCode())) {
@@ -1625,10 +1640,10 @@
                 break;
             }
         }
-
+        
         return newPOVendorQuote;
     }
-
+    
     /**
      * Creates the new PurchaseOrderVendorQuote and populate the address fields for it.
      *
@@ -1667,11 +1682,11 @@
         }
         return newPOVendorQuote;
     }
-
+    
     /**
      * Obtains the defaultAddress of the vendor and setting the default address fields on
      * the vendor.
-     *
+     * 
      * @param vendor The VendorDetail object whose default address we'll obtain and set the fields.
      */
     protected void updateDefaultVendorAddress(VendorDetail vendor) {
@@ -1690,9 +1705,9 @@
             vendor.setDefaultFaxNumber(defaultAddress.getVendorFaxNumber());
         }
     }
-
+    
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#processACMReq(org.kuali.kfs.module.purap.document.ContractManagerAssignmentDocument)
      */
     public void processACMReq(ContractManagerAssignmentDocument acmDoc) {
@@ -1714,9 +1729,9 @@
 
         }// endfor
     }
-
+    
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.PurchaseOrderService#autoCloseFullyDisencumberedOrders()
      */
     public boolean autoCloseFullyDisencumberedOrders() {
@@ -1791,7 +1806,7 @@
                 sendMessage(message, emailBody.toString());
             }
             LOG.info("autoCloseRecurringOrders() ended");
-
+            
             return false;
         }
         LOG.info("autoCloseRecurringOrders() The autoCloseRecurringOrdersDate found in the Application Settings table was " + recurringOrderDateString);
@@ -1811,7 +1826,7 @@
                 sendMessage(message, emailBody.toString());
             }
             LOG.info("autoCloseRecurringOrders() ended");
-
+            
             return false;
         }
 
@@ -1823,10 +1838,10 @@
             if (poAutoClose.getRecurringPaymentEndDate().before(appSettingsDay)) {
                 String newStatus = PurapConstants.PurchaseOrderStatuses.APPDOC_PENDING_CLOSE;
                 String annotation = "This recurring PO was automatically closed in batch.";
-                String documentType = PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_CLOSE_DOCUMENT;
-                PurchaseOrderDocument document = getPurchaseOrderByDocumentNumber(poAutoClose.getDocumentNumber());
-                boolean rulePassed = SpringContext.getBean(KualiRuleService.class).applyRules(new AttributedRouteDocumentEvent("", document));
-
+                String documentType = PurapConstants.PurchaseOrderDocTypes.PURCHASE_ORDER_CLOSE_DOCUMENT;                
+                PurchaseOrderDocument document = getPurchaseOrderByDocumentNumber(poAutoClose.getDocumentNumber());                
+                boolean rulePassed = SpringContext.getBean(KualiRuleService.class).applyRules(new AttributedRouteDocumentEvent("", document));                                
+                
 				boolean success = true;
                 if (success) {
                     ++counter;
@@ -1864,7 +1879,7 @@
 
     /**
      * Creates and returns a Calendar object of today minus three months.
-     *
+     * 
      * @return Calendar object of today minus three months.
      */
     protected Calendar getTodayMinusThreeMonths() {
@@ -1877,14 +1892,14 @@
         todayMinusThreeMonths.set(Calendar.AM_PM, Calendar.AM);
         return todayMinusThreeMonths;
     }
-
+    
     /**
      * Sets the to addresses, from address and the subject of the email.
-     *
+     * 
      * @param message         The MailMessage object of the email to be sent.
-     * @param parameterEmail  The String of email addresses with delimiters of ";"
+     * @param parameterEmail  The String of email addresses with delimiters of ";" 
      *                        obtained from the system parameter.
-     * @return                The MailMessage object after the to addresses, from
+     * @return                The MailMessage object after the to addresses, from 
      *                        address and the subject have been set.
      */
     protected MailMessage setMessageAddressesAndSubject(MailMessage message, String parameterEmail) {
@@ -1898,20 +1913,15 @@
             }
         }
 
-        message.setFromAddress(toAddressList[0]);
-        if (SpringContext.getBean(Config.class).isProductionEnvironment()) {
+        message.setFromAddress(toAddressList[0]); 
             message.setSubject("Auto Close Recurring Purchase Orders");
-        }
-        else {
-            message.setSubject(kualiConfigurationService.getPropertyValueAsString(KFSConstants.ENVIRONMENT_KEY) + " - Auto Close Recurring Purchase Orders");
-        }
         return message;
     }
-
+    
     /**
      * Sends the email by calling the sendMessage method in mailService and log error if exception occurs
      * during the attempt to send the message.
-     *
+     * 
      * @param message    The MailMessage object containing information to be sent.
      * @param emailBody  The String containing the body of the email to be sent.
      */
@@ -1923,12 +1933,12 @@
         catch (Exception e) {
             // Don't stop the show if the email has problem, log it and continue.
             LOG.error("autoCloseRecurringOrders(): email problem. Message not sent.", e);
-        }
+        }        
     }
-
+    
     /**
      * Resets the AUTO_CLOSE_RECURRING_ORDER_DT system parameter to "mm/dd/yyyy".
-     *
+     * 
      */
     protected void resetAutoCloseRecurringOrderDateParameter() {
         Parameter autoCloseRecurringPODate = parameterService.getParameter(AutoCloseRecurringOrdersStep.class, PurapParameterConstants.AUTO_CLOSE_RECURRING_PO_DATE);
@@ -1938,10 +1948,10 @@
             parameterService.updateParameter(updatedParameter.build());
         }
     }
-
+    
     /**
      * Gets a List of excluded vendor choice codes from PurapConstants.
-     *
+     * 
      * @return a List of excluded vendor choice codes
      */
     protected List<String> getExcludedVendorChoiceCodes() {
@@ -1952,13 +1962,13 @@
         }
         return excludedVendorChoiceCodes;
     }
-
+    
     /**
      * Creates and add a note to the purchase order document using the annotation String
      * in the input parameter. This method is used by the autoCloseRecurringOrders() and
      * autoCloseFullyDisencumberedOrders to add a note to the purchase order to
      * indicate that the purchase order was closed by the batch job.
-     *
+     * 
      * @param purchaseOrderDocument The purchase order document that is being closed by the batch job.
      * @param annotation            The string to appear on the note to be attached to the purchase order.
      */
@@ -1972,7 +1982,7 @@
             String errorMessage = "Error creating and saving close note for purchase order with document service";
             LOG.error("createNoteForAutoCloseRecurringOrders " + errorMessage, e);
             throw new RuntimeException(errorMessage, e);
-        }
+        }   
     }
 
     /**
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/ReceivingServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/ReceivingServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/ReceivingServiceImpl.java	(working copy)
@@ -1,12 +1,12 @@
 /*
  * Copyright 2008 The Kuali Foundation
- *
+ * 
  * Licensed under the Educational Community License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.opensource.org/licenses/ecl2.php
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -106,49 +106,49 @@
     }
 
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.ReceivingService#populateReceivingLineFromPurchaseOrder(org.kuali.kfs.module.purap.document.LineItemReceivingDocument)
      */
     @Override
     public void populateReceivingLineFromPurchaseOrder(LineItemReceivingDocument rlDoc) {
-
+        
         if(rlDoc == null){
             rlDoc = new LineItemReceivingDocument();
         }
-
+                             
         //retrieve po by doc id
         PurchaseOrderDocument poDoc = null;
         poDoc = purchaseOrderService.getCurrentPurchaseOrder(rlDoc.getPurchaseOrderIdentifier());
 
         if(poDoc != null){
             rlDoc.populateReceivingLineFromPurchaseOrder(poDoc);
-        }
-
+        }                
+        
     }
 
     @Override
     public void populateCorrectionReceivingFromReceivingLine(CorrectionReceivingDocument rcDoc) {
-
+        
         if(rcDoc == null){
             rcDoc = new CorrectionReceivingDocument();
         }
-
+                             
         //retrieve receiving line by doc id
         LineItemReceivingDocument rlDoc = rcDoc.getLineItemReceivingDocument();
 
         if(rlDoc != null){
             rcDoc.populateCorrectionReceivingFromReceivingLine(rlDoc);
-        }
-
+        }                
+        
     }
 
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.ReceivingService#populateAndSaveLineItemReceivingDocument(org.kuali.kfs.module.purap.document.LineItemReceivingDocument)
      */
     @Override
     public void populateAndSaveLineItemReceivingDocument(LineItemReceivingDocument rlDoc) throws WorkflowException {
-        try {
+        try {            
             documentService.saveDocument(rlDoc, AttributedContinuePurapEvent.class);
         }
         catch (WorkflowException we) {
@@ -167,31 +167,31 @@
     }
 
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.ReceivingService#canCreateLineItemReceivingDocument(java.lang.Integer, java.lang.String)
      */
     @Override
     public boolean canCreateLineItemReceivingDocument(Integer poId, String receivingDocumentNumber) throws RuntimeException {
-
+        
         PurchaseOrderDocument po = purchaseOrderService.getCurrentPurchaseOrder(poId);
-
-        return canCreateLineItemReceivingDocument(po, receivingDocumentNumber);
+        
+        return canCreateLineItemReceivingDocument(po, receivingDocumentNumber);            
     }
 
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.ReceivingService#canCreateLineItemReceivingDocument(org.kuali.kfs.module.purap.document.PurchaseOrderDocument)
      */
     @Override
     public boolean canCreateLineItemReceivingDocument(PurchaseOrderDocument po) throws RuntimeException {
         return canCreateLineItemReceivingDocument(po, null);
     }
-
+    
     protected boolean canCreateLineItemReceivingDocument(PurchaseOrderDocument po, String receivingDocumentNumber) {
         boolean canCreate = false;
 
-        if (isPurchaseOrderValidForLineItemReceivingDocumentCreation(po) &&
-            !isLineItemReceivingDocumentInProcessForPurchaseOrder(po.getPurapDocumentIdentifier(), receivingDocumentNumber) &&
+        if (isPurchaseOrderValidForLineItemReceivingDocumentCreation(po) && 
+            !isLineItemReceivingDocumentInProcessForPurchaseOrder(po.getPurapDocumentIdentifier(), receivingDocumentNumber) && 
             !isCorrectionReceivingDocumentInProcessForPurchaseOrder(po.getPurapDocumentIdentifier(), null)) {
             canCreate = true;
         }
@@ -204,7 +204,7 @@
         PurchaseOrderDocument po = purchaseOrderService.getCurrentPurchaseOrder(poId);
         return isPurchaseOrderValidForLineItemReceivingDocumentCreation(po);
     }
-
+    
     protected boolean isPurchaseOrderValidForLineItemReceivingDocumentCreation(PurchaseOrderDocument po){
         return po != null &&
                ObjectUtils.isNotNull(po.getPurapDocumentIdentifier()) && 
@@ -235,7 +235,7 @@
             !isCorrectionReceivingDocumentInProcessForReceivingLine(rl.getDocumentNumber(), receivingCorrectionDocNumber)){
             canCreate = true;
         }
-
+        
         return canCreate;
     }
 
@@ -246,13 +246,13 @@
     @Override
     public List<String> getLineItemReceivingDocumentNumbersInProcessForPurchaseOrder(Integer poId,
                                                                                      String receivingDocumentNumber){
-
+        
         List<String> inProcessDocNumbers = new ArrayList<String>();
         List<String> docNumbers = receivingDao.getDocumentNumbersByPurchaseOrderId(poId);
         WorkflowDocument workflowDocument = null;
 
         for (String docNumber : docNumbers) {
-
+        
             try{
                 workflowDocument = workflowDocumentService.loadWorkflowDocument(docNumber, GlobalVariables.getUserSession().getPerson());
             }catch(WorkflowException we){
@@ -306,9 +306,9 @@
         else {
             return null;
         }
-
+        
     }
-
+    
     protected boolean isCorrectionReceivingDocumentInProcessForPurchaseOrder(Integer poId, String receivingDocumentNumber) throws RuntimeException{
         return !getCorrectionReceivingDocumentNumbersInProcessForPurchaseOrder(poId, receivingDocumentNumber).isEmpty();
     }
@@ -316,15 +316,15 @@
     @Override
     public List<String> getCorrectionReceivingDocumentNumbersInProcessForPurchaseOrder(Integer poId,
                                                                                        String receivingDocumentNumber){
-
+        
         boolean isInProcess = false;
-
+        
         List<String> inProcessDocNumbers = new ArrayList<String>();
         List<String> docNumbers = receivingDao.getCorrectionReceivingDocumentNumbersByPurchaseOrderId(poId);
         WorkflowDocument workflowDocument = null;
 
         for (String docNumber : docNumbers) {
-
+        
             try{
                 workflowDocument = workflowDocumentService.loadWorkflowDocument(docNumber, GlobalVariables.getUserSession().getPerson());
             }catch(WorkflowException we){
@@ -341,17 +341,17 @@
 
         return inProcessDocNumbers;
     }
-
-
+    
+    
     protected boolean isCorrectionReceivingDocumentInProcessForReceivingLine(String receivingDocumentNumber, String receivingCorrectionDocNumber) throws RuntimeException{
-
+        
         boolean isInProcess = false;
-
+        
         List<String> docNumbers = receivingDao.getCorrectionReceivingDocumentNumbersByReceivingLineNumber(receivingDocumentNumber);
         WorkflowDocument workflowDocument = null;
 
         for (String docNumber : docNumbers) {
-
+        
             try{
                 workflowDocument = workflowDocumentService.loadWorkflowDocument(docNumber, GlobalVariables.getUserSession().getPerson());
             }catch(WorkflowException we){
@@ -362,7 +362,7 @@
                  workflowDocument.isException() ||
                  workflowDocument.isFinal()) &&
                  docNumber.equals(receivingCorrectionDocNumber) == false ){
-
+                     
                 isInProcess = true;
                 break;
             }
@@ -372,7 +372,7 @@
     }
 
     /**
-     *
+     * 
      * @see org.kuali.kfs.module.purap.document.service.ReceivingService#receivingLineDuplicateMessages(org.kuali.kfs.module.purap.document.LineItemReceivingDocument)
      */
     @Override
@@ -382,92 +382,92 @@
         Integer poId = rlDoc.getPurchaseOrderIdentifier();
         StringBuffer currentMessage = new StringBuffer("");
         List<String> docNumbers = null;
-
+        
         //check vendor date for duplicates
         if( rlDoc.getShipmentReceivedDate() != null ){
             docNumbers = receivingDao.duplicateVendorDate(poId, rlDoc.getShipmentReceivedDate());
             if( hasDuplicateEntry(docNumbers) ){
-                appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_VENDOR_DATE, rlDoc.getPurchaseOrderIdentifier());
+                appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_VENDOR_DATE, rlDoc.getPurchaseOrderIdentifier());                                
             }
         }
-
+        
         //check packing slip number for duplicates
         if( !StringUtils.isEmpty(rlDoc.getShipmentPackingSlipNumber()) ){
             docNumbers = receivingDao.duplicatePackingSlipNumber(poId, rlDoc.getShipmentPackingSlipNumber());
             if( hasDuplicateEntry(docNumbers) ){
-                appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_PACKING_SLIP_NUMBER, rlDoc.getPurchaseOrderIdentifier());
+                appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_PACKING_SLIP_NUMBER, rlDoc.getPurchaseOrderIdentifier());                                
             }
         }
-
+        
         //check bill of lading number for duplicates
         if( !StringUtils.isEmpty(rlDoc.getShipmentBillOfLadingNumber()) ){
             docNumbers = receivingDao.duplicateBillOfLadingNumber(poId, rlDoc.getShipmentBillOfLadingNumber());
             if( hasDuplicateEntry(docNumbers) ){
-                appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_BILL_OF_LADING_NUMBER, rlDoc.getPurchaseOrderIdentifier());
+                appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_BILL_OF_LADING_NUMBER, rlDoc.getPurchaseOrderIdentifier());                
             }
         }
-
+        
        //add message if one exists
        if(currentMessage.length() > 0){
            //add suffix
            appendDuplicateMessage(currentMessage, PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_SUFFIX, rlDoc.getPurchaseOrderIdentifier() );
-
+           
            //add msg to map
            msgs.put(PurapConstants.LineItemReceivingDocumentStrings.DUPLICATE_RECEIVING_LINE_QUESTION, currentMessage.toString());
        }
-
+       
        return msgs;
     }
 
     /**
      * Looks at a list of doc numbers, but only considers an entry duplicate
      * if the document is in a Final status.
-     *
+     * 
      * @param docNumbers
      * @return
      */
     protected boolean hasDuplicateEntry(List<String> docNumbers){
-
+        
         boolean isDuplicate = false;
         WorkflowDocument workflowDocument = null;
 
         for (String docNumber : docNumbers) {
-
+        
             try{
                 workflowDocument = workflowDocumentService.loadWorkflowDocument(docNumber, GlobalVariables.getUserSession().getPerson());
             }catch(WorkflowException we){
                 throw new RuntimeException(we);
             }
-
+            
             //if the doc number exists, and is in final status, consider this a dupe and return
             if(workflowDocument.isFinal()){
                 isDuplicate = true;
                 break;
             }
         }
-
+        
         return isDuplicate;
 
     }
     protected void appendDuplicateMessage(StringBuffer currentMessage, String duplicateMessageKey, Integer poId){
-
+        
         //append prefix if this is first call
         if(currentMessage.length() == 0){
             String messageText = configurationService.getPropertyValueAsString(PurapKeyConstants.MESSAGE_DUPLICATE_RECEIVING_LINE_PREFIX);
             String prefix = MessageFormat.format(messageText, poId.toString() );
-
+            
             currentMessage.append(prefix);
         }
-
+        
         //append message
         currentMessage.append( configurationService.getPropertyValueAsString(duplicateMessageKey) );
     }
 
     @Override
     public void completeCorrectionReceivingDocument(ReceivingDocument correctionDocument){
-
+       
         ReceivingDocument receivingDoc = ((CorrectionReceivingDocument)correctionDocument).getLineItemReceivingDocument();
-
+        
         for (CorrectionReceivingItem correctionItem : (List<CorrectionReceivingItem>)correctionDocument.getItems()) {
             if(!StringUtils.equalsIgnoreCase(correctionItem.getItemType().getItemTypeCode(),PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE)) {
 
@@ -482,11 +482,11 @@
                 }
             }
         }
-
+        
     }
-
+    
     /**
-     *
+     * 
      * This method deletes unneeded items and updates the totals on the po and does any additional processing based on items i.e. FYI etc
      * @param receivingDocument receiving document
      */
@@ -503,15 +503,15 @@
             CorrectionReceivingDocument correctionDocument = (CorrectionReceivingDocument)receivingDocument;
             poDoc = purchaseOrderService.getCurrentPurchaseOrder(correctionDocument.getLineItemReceivingDocument().getPurchaseOrderIdentifier());
         }
-
+        
         updateReceivingTotalsOnPurchaseOrder(receivingDocument, poDoc);
 
         //TODO: custom doc specific service hook here for correction to do it's receiving doc update
-
+        
         purapService.saveDocumentNoValidation(poDoc);
 
         sendFyiForItems(receivingDocument);
-
+        
         spawnPoAmendmentForUnorderedItems(receivingDocument, poDoc);
 
         purapService.saveDocumentNoValidation(receivingDocument);
@@ -519,7 +519,7 @@
 
     @Override
     public void createNoteForReturnedAndDamagedItems(ReceivingDocument recDoc){
-
+        
         for (ReceivingItem item : (List<ReceivingItem>)recDoc.getItems()){
             if(!StringUtils.equalsIgnoreCase(item.getItemType().getItemTypeCode(),PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE)) {
                 if (item.getItemReturnedTotalQuantity() != null && item.getItemReturnedTotalQuantity().isGreaterThan(KualiDecimal.ZERO)){
@@ -529,10 +529,10 @@
                         addNoteToReceivingDocument(recDoc, noteString);
                     }catch (Exception e){
                         String errorMsg = "Note Service Exception caught: " + e.getLocalizedMessage();
-                        throw new RuntimeException(errorMsg, e);
+                        throw new RuntimeException(errorMsg, e);                    
                     }
                 }
-
+                
                 if (item.getItemDamagedTotalQuantity() != null && item.getItemDamagedTotalQuantity().isGreaterThan(KualiDecimal.ZERO)){
                     try{
                         String noteString = SpringContext.getBean(ConfigurationService.class).getPropertyValueAsString(PurapKeyConstants.MESSAGE_RECEIVING_LINEITEM_DAMAGE_NOTE_TEXT);
@@ -540,82 +540,82 @@
                         addNoteToReceivingDocument(recDoc, noteString);
                     }catch (Exception e){
                         String errorMsg = "Note Service Exception caught: " + e.getLocalizedMessage();
-                        throw new RuntimeException(errorMsg, e);
+                        throw new RuntimeException(errorMsg, e);                    
                     }
                 }
             }
         }
     }
-
+    
     protected void updateReceivingTotalsOnPurchaseOrder(ReceivingDocument receivingDocument, PurchaseOrderDocument poDoc) {
         for (ReceivingItem receivingItem : (List<ReceivingItem>)receivingDocument.getItems()) {
             ItemType itemType = receivingItem.getItemType();
             if(!StringUtils.equalsIgnoreCase(itemType.getItemTypeCode(),PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE)) {
                 //TODO: Chris - this method of getting the line out of po should be turned into a method that can get an item based on a combo or itemType and line
                 PurchaseOrderItem poItem = (PurchaseOrderItem)poDoc.getItemByLineNumber(receivingItem.getItemLineNumber());
-
+                
                 if(ObjectUtils.isNotNull(poItem)) {
-
+                    
                     KualiDecimal poItemReceivedTotal = poItem.getItemReceivedTotalQuantity();
-
+                    
                     KualiDecimal receivingItemReceivedOriginal = receivingItem.getItemOriginalReceivedTotalQuantity();
                     /**
                      * FIXME: It's coming as null although we set the default value in the LineItemReceivingItem constructor - mpv
                      */
                     if (ObjectUtils.isNull(receivingItemReceivedOriginal)){
-                        receivingItemReceivedOriginal = KualiDecimal.ZERO;
+                        receivingItemReceivedOriginal = KualiDecimal.ZERO; 
                     }
-                    KualiDecimal receivingItemReceived = receivingItem.getItemReceivedTotalQuantity();
-                    KualiDecimal receivingItemTotalReceivedAdjested = receivingItemReceived.subtract(receivingItemReceivedOriginal);
-
+                    KualiDecimal receivingItemReceived = receivingItem.getItemReceivedTotalQuantity(); 
+                    KualiDecimal receivingItemTotalReceivedAdjested = receivingItemReceived.subtract(receivingItemReceivedOriginal); 
+                    
                     if (ObjectUtils.isNull(poItemReceivedTotal)){
                         poItemReceivedTotal = KualiDecimal.ZERO;
                     }
-                    KualiDecimal poItemReceivedTotalAdjusted = poItemReceivedTotal.add(receivingItemTotalReceivedAdjested);
-
+                    KualiDecimal poItemReceivedTotalAdjusted = poItemReceivedTotal.add(receivingItemTotalReceivedAdjested); 
+                    
                     KualiDecimal receivingItemReturnedOriginal = receivingItem.getItemOriginalReturnedTotalQuantity();
                     if (ObjectUtils.isNull(receivingItemReturnedOriginal)){
-                        receivingItemReturnedOriginal = KualiDecimal.ZERO;
+                        receivingItemReturnedOriginal = KualiDecimal.ZERO; 
                     }
-
+                    
                     KualiDecimal receivingItemReturned = receivingItem.getItemReturnedTotalQuantity();
                     if (ObjectUtils.isNull(receivingItemReturned)){
-                        receivingItemReturned = KualiDecimal.ZERO;
+                        receivingItemReturned = KualiDecimal.ZERO; 
                     }
-
-                    KualiDecimal receivingItemTotalReturnedAdjusted = receivingItemReturned.subtract(receivingItemReturnedOriginal);
-
+                    
+                    KualiDecimal receivingItemTotalReturnedAdjusted = receivingItemReturned.subtract(receivingItemReturnedOriginal); 
+                    
                     poItemReceivedTotalAdjusted = poItemReceivedTotalAdjusted.subtract(receivingItemTotalReturnedAdjusted);
-
+                    
                     poItem.setItemReceivedTotalQuantity(poItemReceivedTotalAdjusted);
-
+                    
                     KualiDecimal poTotalDamaged = poItem.getItemDamagedTotalQuantity();
                     if (ObjectUtils.isNull(poTotalDamaged)){
-                        poTotalDamaged = KualiDecimal.ZERO;
+                        poTotalDamaged = KualiDecimal.ZERO; 
                     }
 
                     KualiDecimal receivingItemTotalDamagedOriginal = receivingItem.getItemOriginalDamagedTotalQuantity();
                     if (ObjectUtils.isNull(receivingItemTotalDamagedOriginal)){
-                        receivingItemTotalDamagedOriginal = KualiDecimal.ZERO;
+                        receivingItemTotalDamagedOriginal = KualiDecimal.ZERO; 
                     }
-
+                    
                     KualiDecimal receivingItemTotalDamaged = receivingItem.getItemDamagedTotalQuantity();
                     if (ObjectUtils.isNull(receivingItemTotalDamaged)){
-                        receivingItemTotalDamaged = KualiDecimal.ZERO;
+                        receivingItemTotalDamaged = KualiDecimal.ZERO; 
                     }
-
+                    
                     KualiDecimal receivingItemTotalDamagedAdjusted = receivingItemTotalDamaged.subtract(receivingItemTotalDamagedOriginal);
-
+                    
                     poItem.setItemDamagedTotalQuantity(poTotalDamaged.add(receivingItemTotalDamagedAdjusted));
-
+                    
                 }
             }
         }
     }
-
+    
     /**
      * Spawns PO amendments for new unordered items on a receiving document.
-     *
+     * 
      * @param receivingDocument
      * @param po
      */
@@ -624,30 +624,30 @@
         //if receiving line document
         if (receivingDocument instanceof LineItemReceivingDocument) {
             LineItemReceivingDocument rlDoc = (LineItemReceivingDocument)receivingDocument;
-
+            
             //if a new item has been added spawn a purchase order amendment
             if( hasNewUnorderedItem((LineItemReceivingDocument)receivingDocument) ){
                 String newSessionUserId = KFSConstants.SYSTEM_USER;
-                try {
-
+                try {                    
+                    
                     LogicContainer logicToRun = new LogicContainer() {
                         @Override
                         public Object runLogic(Object[] objects) throws Exception {
                             LineItemReceivingDocument rlDoc = (LineItemReceivingDocument)objects[0];
                             String poDocNumber = (String)objects[1];
-
+                            
                             //create a PO amendment
                             PurchaseOrderAmendmentDocument amendmentPo = (PurchaseOrderAmendmentDocument) purchaseOrderService.createAndSavePotentialChangeDocument(poDocNumber, PurchaseOrderDocTypes.PURCHASE_ORDER_AMENDMENT_DOCUMENT, PurchaseOrderStatuses.APPDOC_AMENDMENT);
 
                             //add new lines to amendement
                             addUnorderedItemsToAmendment(amendmentPo, rlDoc);
-
+                            
                             //route amendment
                             documentService.routeDocument(amendmentPo, null, null);
 
                             //add note to amendment po document
                             String note = "Purchase Order Amendment " + amendmentPo.getPurapDocumentIdentifier() + " (document id " + amendmentPo.getDocumentNumber() + ") created for new unordered line items due to Receiving (document id " + rlDoc.getDocumentNumber() + ")";
-
+                            
                             Note noteObj = documentService.createNoteFromDocument(amendmentPo, note);
                             amendmentPo.addNote(noteObj);
                             noteService.save(noteObj);
@@ -655,7 +655,7 @@
                             return null;
                         }
                     };
-
+                    
                     purapService.performLogicWithFakedUserSession(newSessionUserId, logicToRun, new Object[] { rlDoc, po.getDocumentNumber() });
                 }
                 catch (WorkflowException e) {
@@ -665,20 +665,20 @@
                 catch (Exception e) {
                     throw new RuntimeException(e);
                 }
-            }
+            }           
         }
     }
-
+    
     /**
      * Checks the item list for newly added items.
-     *
+     * 
      * @param rlDoc
      * @return
      */
-    protected boolean hasNewUnorderedItem(LineItemReceivingDocument rlDoc){
-
+    public boolean hasNewUnorderedItem(LineItemReceivingDocument rlDoc){
+        
         boolean itemAdded = false;
-
+        
         for(LineItemReceivingItem rlItem: (List<LineItemReceivingItem>)rlDoc.getItems()){
             if( PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE.equals(rlItem.getItemTypeCode()) &&
                 !StringUtils.isEmpty(rlItem.getItemReasonAddedCode()) ){
@@ -686,24 +686,24 @@
                 break;
             }
         }
-
+        
         return itemAdded;
     }
-
+    
     /**
      * Adds an unordered item to a po amendment document.
-     *
+     * 
      * @param amendment
      * @param rlDoc
      */
     protected void addUnorderedItemsToAmendment(PurchaseOrderAmendmentDocument amendment, LineItemReceivingDocument rlDoc){
 
         PurchaseOrderItem poi = null;
-
+        
         for(LineItemReceivingItem rlItem: (List<LineItemReceivingItem>)rlDoc.getItems()){
             if( PurapConstants.ItemTypeCodes.ITEM_TYPE_UNORDERED_ITEM_CODE.equals(rlItem.getItemTypeCode()) &&
                 !StringUtils.isEmpty(rlItem.getItemReasonAddedCode()) ){
-
+                
                 poi = createPoItemFromReceivingLine(rlItem);
                 poi.setDocumentNumber( amendment.getDocumentNumber() );
                 
@@ -720,20 +720,20 @@
         }
 
     }
-
+    
     /**
      * Creates a PO item from a receiving line item.
-     *
+     * 
      * @param rlItem
      * @return
      */
     protected PurchaseOrderItem createPoItemFromReceivingLine(LineItemReceivingItem rlItem){
-
+        
         PurchaseOrderItem poi = new PurchaseOrderItem();
-
+                             
         poi.setItemActiveIndicator(true);
-        poi.setItemTypeCode(rlItem.getItemTypeCode());
-        poi.setItemLineNumber(rlItem.getItemLineNumber());
+        poi.setItemTypeCode(rlItem.getItemTypeCode());                
+        poi.setItemLineNumber(rlItem.getItemLineNumber());        
         poi.setItemCatalogNumber( rlItem.getItemCatalogNumber() );
         poi.setItemDescription( rlItem.getItemDescription() );
 
@@ -742,19 +742,19 @@
         }else{
             poi.setItemQuantity( rlItem.getItemReceivedTotalQuantity().subtract(rlItem.getItemReturnedTotalQuantity()) );
         }
-
+        
         poi.setItemUnitOfMeasureCode( rlItem.getItemUnitOfMeasureCode() );
         poi.setItemUnitPrice(new BigDecimal(0));
-
+        
         poi.setItemDamagedTotalQuantity( rlItem.getItemDamagedTotalQuantity() );
         poi.setItemReceivedTotalQuantity( rlItem.getItemReceivedTotalQuantity() );
-
+        
         return poi;
     }
-
+    
     /**
      * Creates a list of fiscal officers for new unordered items added to a purchase order.
-     *
+     * 
      * @param po
      * @return
      */
@@ -799,7 +799,7 @@
     }
     /**
      * Sends an FYI to fiscal officers for new unordered items.
-     *
+     * 
      * @param po
      */
     protected void sendFyiForItems(ReceivingDocument recDoc){
@@ -807,7 +807,7 @@
         List<AdHocRoutePerson> fyiList = createFyiFiscalOfficerList(recDoc);
         String annotation = "Notification of Item exceeded Quantity or Damaged" + "(document id " + recDoc.getDocumentNumber() + ")";
         String responsibilityNote = "Please Review";
-
+        
         for(AdHocRoutePerson adHocPerson: fyiList){
             try{
                 recDoc.appSpecificRouteDocumentToUser(
@@ -833,19 +833,19 @@
     public String getReceivingDeliveryCampusCode(PurchaseOrderDocument po){
         String deliveryCampusCode = "";
         String latestDocumentNumber = "";
-
+                        
         List<LineItemReceivingView> rViews = null;
         WorkflowDocument workflowDocument = null;
         DateTime latestCreateDate = null;
 
         //get related views
-        if(ObjectUtils.isNotNull(po.getRelatedViews()) ){
+        if(ObjectUtils.isNotNull(po.getRelatedViews()) ){       
             rViews = po.getRelatedViews().getRelatedLineItemReceivingViews();
         }
-
+        
         //if not empty, then grab the latest receiving view
-        if(ObjectUtils.isNotNull(rViews) && rViews.isEmpty() == false){
-
+        if(ObjectUtils.isNotNull(rViews) && rViews.isEmpty() == false){                                    
+            
             for(LineItemReceivingView rView : rViews){
                 try{
                     workflowDocument = workflowDocumentService.loadWorkflowDocument(rView.getDocumentNumber(), GlobalVariables.getUserSession().getPerson());
@@ -857,20 +857,20 @@
                     }
                 }catch(WorkflowException we){
                     throw new RuntimeException(we);
-                }
+                }                
             }
-
+            
             //if there is a create date, a latest workflow doc was found
             if( ObjectUtils.isNotNull(latestCreateDate)){
-                try{
-                    LineItemReceivingDocument rlDoc = (LineItemReceivingDocument)documentService.getByDocumentHeaderId(latestDocumentNumber);
+                try{                                    
+                    LineItemReceivingDocument rlDoc = (LineItemReceivingDocument)documentService.getByDocumentHeaderId(latestDocumentNumber);                    
                     deliveryCampusCode = rlDoc.getDeliveryCampusCode();
                 }catch(WorkflowException we){
                     throw new RuntimeException(we);
                 }
             }
         }
-
+                
         return deliveryCampusCode;
     }
 
@@ -879,14 +879,14 @@
      */
     @Override
     public boolean isLineItemReceivingDocumentGeneratedForPurchaseOrder(Integer poId) throws RuntimeException{
-
+        
         boolean isGenerated = false;
-
+        
         List<String> docNumbers = receivingDao.getDocumentNumbersByPurchaseOrderId(poId);
         WorkflowDocument workflowDocument = null;
 
         for (String docNumber : docNumbers) {
-
+        
             try{
                 workflowDocument = workflowDocumentService.loadWorkflowDocument(docNumber, GlobalVariables.getUserSession().getPerson());
             }catch(WorkflowException we){
@@ -919,7 +919,7 @@
                     }
             }
         }
-
+        
     }
 
     /**
@@ -945,7 +945,7 @@
 
     protected void approveReceivingDoc(LineItemReceivingDocument receivingDoc){
         PurchaseOrderDocument poDoc = receivingDoc.getPurchaseOrderDocument();
-        if (purchaseOrderService.canAmendPurchaseOrder(poDoc)){
+        if (purchaseOrderService.isPurchaseOrderOpenForProcessing(poDoc)){
             try{
                 SpringContext.getBean(DocumentService.class).approveDocument(receivingDoc, "Approved by the batch job", null);
             }
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/RequisitionServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/RequisitionServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/RequisitionServiceImpl.java	(working copy)
@@ -215,6 +215,9 @@
             if (requisition.getVendorRestrictedIndicator() != null && requisition.getVendorRestrictedIndicator()) {
                 return "Selected vendor is marked as restricted.";
             }
+            if (vendorDetail.isVendorDebarred()) {
+                return "Selected vendor is marked as a debarred vendor";
+            }
             requisition.setVendorDetail(vendorDetail);
 
             if ((!PurapConstants.RequisitionSources.B2B.equals(requisitionSource)) && ObjectUtils.isNull(requisition.getVendorContractGeneratedIdentifier())) {
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/AccountsPayableServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/AccountsPayableServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/AccountsPayableServiceImpl.java	(working copy)
@@ -25,8 +25,6 @@
 import org.kuali.kfs.coa.service.AccountService;
 import org.kuali.kfs.gl.batch.ScrubberStep;
 import org.kuali.kfs.module.purap.PurapConstants;
-import org.kuali.kfs.module.purap.PurapConstants.AccountsPayableSharedStatuses;
-import org.kuali.kfs.module.purap.PurapConstants.PaymentRequestStatuses;
 import org.kuali.kfs.module.purap.PurapKeyConstants;
 import org.kuali.kfs.module.purap.PurapParameterConstants;
 import org.kuali.kfs.module.purap.businessobject.CreditMemoItem;
@@ -502,6 +500,11 @@
             //while awaiting AP approval, just call regular disapprove logic as user will have action request
             documentService.disapproveDocument(document, noteText);
         }
+        else if (document instanceof PaymentRequestDocument && PaymentRequestStatuses.AWAITING_FISCAL_REVIEW.equals(document.getStatusCode()) && ((PaymentRequestDocument)document).isPaymentRequestedCancelIndicator()) {
+            // special logic to disapprove PREQ as the fiscal officer
+            WorkflowDocument fiscalOfficerDocument = new WorkflowDocument(document.getLastActionPerformedByPersonId(), Long.valueOf(document.getDocumentNumber()));
+            fiscalOfficerDocument.disapprove("Document cancelled after requested cancel by "+GlobalVariables.getUserSession().getPrincipalName());
+        }
         else {
             UserSession originalUserSession = GlobalVariables.getUserSession();
             WorkflowDocument originalWorkflowDocument = document.getDocumentHeader().getWorkflowDocument();
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/FaxServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/FaxServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/FaxServiceImpl.java	(working copy)
@@ -64,7 +64,7 @@
      */
     public void faxPurchaseOrderPdf(PurchaseOrderDocument po, boolean isRetransmit) {
         LOG.debug("faxPurchaseOrderPdf(po,reTransmit) started");
-        String pdfFileLocation = parameterService.getParameterValueAsString(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.PDF_DIRECTORY);
+        String pdfFileLocation = getPdfFileLocation();
         if (pdfFileLocation == null) {
             throw new RuntimeException("Application Setting PDF_DIRECTORY is missing.");
         }
@@ -302,4 +302,17 @@
         this.countryService = countryService;
     }
 
+    public ImageDao getImageDao() {
+        return imageDao;
+    }
+
+    public void setImageDao(ImageDao imageDao) {
+        this.imageDao = imageDao;
+    }
+    
+    public String getPdfFileLocation() {
+        return parameterService.getParameterValueAsService(KfsParameterConstants.PURCHASING_DOCUMENT.class, PurapConstants.PDF_DIRECTORY);
+    }
+
+
 }
Index: work/src/org/kuali/kfs/module/purap/document/service/impl/PurapServiceImpl.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/impl/PurapServiceImpl.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/impl/PurapServiceImpl.java	(working copy)
@@ -29,12 +29,12 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.kuali.kfs.module.purap.PurapConstants;
-import org.kuali.kfs.module.purap.PurapConstants.PurchaseOrderStatuses;
 import org.kuali.kfs.module.purap.PurapKeyConstants;
 import org.kuali.kfs.module.purap.PurapParameterConstants;
-import org.kuali.kfs.module.purap.PurapParameterConstants.TaxParameters;
 import org.kuali.kfs.module.purap.PurapPropertyConstants;
 import org.kuali.kfs.module.purap.PurapRuleConstants;
+import org.kuali.kfs.module.purap.PurapConstants.PurchaseOrderStatuses;
+import org.kuali.kfs.module.purap.PurapParameterConstants.TaxParameters;
 import org.kuali.kfs.module.purap.businessobject.AccountsPayableItem;
 import org.kuali.kfs.module.purap.businessobject.BulkReceivingView;
 import org.kuali.kfs.module.purap.businessobject.CorrectionReceivingView;
@@ -553,8 +553,23 @@
         return value;
     }
 
-
     /**
+     * @see org.kuali.kfs.module.purap.document.service.PurapService#isPaymentRequestFullDocumentEntryCompleted(String)
+     */
+    public boolean isPaymentRequestFullDocumentEntryCompleted(String purapDocumentStatus) {
+        LOG.debug("isPaymentRequestFullDocumentEntryCompleted() started");
+        return PurapConstants.PaymentRequestStatuses.STATUS_ORDER.isFullDocumentEntryCompleted(purapDocumentStatus);
+    }
+    
+    /**
+     * @see org.kuali.kfs.module.purap.document.service.PurapService#isVendorCreditMemoFullDocumentEntryCompleted(String)
+     */
+    public boolean isVendorCreditMemoFullDocumentEntryCompleted(String purapDocumentStatus) {
+        LOG.debug("isVendorCreditMemoFullDocumentEntryCompleted() started");
+        return PurapConstants.CreditMemoStatuses.STATUS_ORDER.isFullDocumentEntryCompleted(purapDocumentStatus);
+    }
+    
+    /**
      * Main hook point for close/Reopen PO.
      * 
      * @see org.kuali.kfs.module.purap.document.service.PurapService#performLogicForCloseReopenPO(org.kuali.kfs.module.purap.document.PurchasingAccountsPayableDocument)
Index: work/src/org/kuali/kfs/module/purap/document/service/PurchaseOrderService.java
===================================================================
--- work/src/org/kuali/kfs/module/purap/document/service/PurchaseOrderService.java	(revision 37217)
+++ work/src/org/kuali/kfs/module/purap/document/service/PurchaseOrderService.java	(working copy)
@@ -449,4 +449,10 @@
      * @return
      */
     public String getPurchaseOrderAppDocStatus(Integer poId);
+
+     * 
+     * This method is to  send an FYI to fiscal officers for general ledger entries created for amend purchase order 
+     * @param po
+     */
+    public void sendFyiForGLEntries(PurchaseOrderDocument po);
 }
Index: build/properties/rice.properties
===================================================================
--- build/properties/rice.properties	(revision 37217)
+++ build/properties/rice.properties	(working copy)
@@ -27,6 +27,7 @@
 rice.output.licenses.suffix=-licenses.zip
 rice.server.war.file.name.prefix=${rice.name}-web-
 rice.server.war.file.name=${rice.server.war.file.name.prefix}${kfs.rice.version}.war
+rice.server.war.directory=${build.appserver.directory}
 
 rice.application=kr
 kew.application=kew
Index: build/project/configuration.properties
===================================================================
--- build/project/configuration.properties	(revision 37217)
+++ build/project/configuration.properties	(working copy)
@@ -261,6 +261,10 @@
 # primaryDelegatorFilterOnActionList: "Primary Delegates on Action List Page" or "Primary Delegates only on Filter Page"
 userOptions.default.primaryDelegatorFilterOnActionList=Primary Delegates on Action List Page
 
+# batch container
+staging.directory.sys.batchContainer=${staging.directory}/sys/batchContainer
+step.status.check.interval=${step.status.check.interval}
+
 ##############################################################################################################
 ## Properties from institutional.configuration.file (${institutional.configuration.file}) are appended after this point.
 ##############################################################################################################
Index: build/project/xsd/pdp/payment.xsd
===================================================================
--- build/project/xsd/pdp/payment.xsd	(revision 37217)
+++ build/project/xsd/pdp/payment.xsd	(working copy)
@@ -55,6 +55,7 @@
     <xsd:element name="payment_date" type="${xsd:date,dd:PaymentGroup.paymentDate}"/>
     <xsd:element name="invoice_date" type="${xsd:normalizedString,dd:PaymentDetail.invoiceDate}"/>
     <xsd:element name="attachment_ind" type="${xsd:normalizedString,dd:PaymentGroup.pymtAttachment}"/>
+	<xsd:element name="immediate_ind" type="${xsd:normalizedString,dd:PaymentGroup.processImmediate}"/>
     <xsd:element name="special_handling_ind" type="${xsd:normalizedString,dd:PaymentGroup.pymtSpecialHandling}"/>
     <xsd:element name="taxable_ind" type="${xsd:normalizedString,dd:PaymentGroup.taxablePayment}"/>
     <xsd:element name="orig_invoice_amt" type="${xsd:decimal,dd:PaymentDetail.origInvoiceAmount}"/>
@@ -146,6 +147,7 @@
                 <xsd:element maxOccurs="1" minOccurs="0" ref="campus_address_ind"/>
                 <xsd:element maxOccurs="1" minOccurs="0" ref="payment_date"/>
                 <xsd:element maxOccurs="1" minOccurs="0" ref="attachment_ind"/>
+				<xsd:element maxOccurs="1" minOccurs="0" ref="immediate_ind"/>
                 <xsd:element maxOccurs="1" minOccurs="0" ref="special_handling_ind"/>
                 <xsd:element maxOccurs="1" minOccurs="0" ref="taxable_ind"/>
                 <xsd:element maxOccurs="1" minOccurs="0" ref="nra_ind"/>
