<!--
 Copyright 2007-2012 The Kuali Foundation
 
 Licensed under the Educational Community License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.opensource.org/licenses/ecl2.php
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!-- CONFIGURATION MANAGEMENT TARGETS 

Tasks in this file will not be deployed with the application.  Tasks that 
are intended for use only by Kuali Foundation developers.

-->
<project name="imported">
	<!-- dummy targets to keep validation happy -->
	<target name="init-properties" />
	<target name="init-property-files" />
	<target name="dist-local" />
	<target name="clean" />
	<target name="make-source" />
	<target name="build-eclipse-classpath" />
	<target name="extract-rice-libraries" />

	<target name="init-additional-properties">
		<echo message="Reading Properties: ${properties.directory}/build-foundation.properties" />
		<property file="${properties.directory}/build-foundation.properties" />
	</target>

	<target name="modularization-test" depends="make-source,init-additional-properties">
        <javac destdir="${war.classes.directory}" debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
            <classpath refid="compile.tests.classpath" />
            <src path="${test.infrastructure.source.directory}" />
            <src path="${test.unit.source.directory}" />
            <src path="${test.integration.source.directory}" />
        </javac>
        <copy todir="${war.classes.directory}">
            <fileset dir="${test.infrastructure.source.directory}" includes="${non.java.resources}" />
            <fileset dir="${test.unit.source.directory}" includes="${non.java.resources}" />
            <fileset dir="${test.integration.source.directory}" includes="${non.java.resources}" />
        </copy>
    	<java classname="org.kuali.kfs.sys.context.CheckModularization" fork="true" resultproperty="context.test.results">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx2g" />
			<jvmarg value="-XX:MaxPermSize=256m" />
			<classpath>
				<pathelement location="${war.classes.directory}" />
				<path refid="compile.source.classpath" />
			</classpath>
		</java>
		<!--
 		<verifydesign design="work/src/design.xml">
			<path>
				<fileset dir="${war.classes.directory}/org/kuali/kfs" includes="**/*.class" excludes="**/*Test.class,**/*Fixture.class" />
      		</path>
    	</verifydesign>
		<condition property="context.test.failed" value="true">
			<equals arg1="${context.test.results}" arg2="1" />
		</condition>
		-->
	</target>

	<target name="check-modularization" depends="modularization-test">
		<fail if="context.test.failed" message="CheckModularization.java failed" />
  	</target>
  	  
	<target name="update-rice-dev" depends="update-rice-basic,extract-rice-libraries,build-eclipse-classpath,dist-local" />
  
	<target name="update-rice" depends="update-rice-dev,update-rice-extended" />
  
	<target name="update-rice-basic" depends="init-property-files,init-additional-properties,update-rice-server-war" />
  
	<target name="clean-rice-maven" depends="init-property-files,init-additional-properties" if="clean.rice">
        <maven goals="clean:clean" dir="${rice.project.directory}" />
	</target>
	
    <target name="update-rice-server-war" depends="init-property-files,init-additional-properties,clean-rice-maven">
        <maven goals="install" dir="${rice.project.directory}" />
    	<delete dir="${build.appserver.directory}" includes="${rice.server.war.file.name.prefix}*.war" />
        <copy file="${rice.project.directory}/${rice.web.module.name}/target/${rice.war.file.name}" 
        	  tofile="${build.appserver.directory}/${rice.server.war.file.name}" verbose="true" overwrite="true" failonerror="true"  />
    </target>
    
	<target name="update-rice-extended" depends="init-property-files,init-additional-properties,update-rice-kfs-dependencies,update-rice-licenses" />
  
	<target name="update-rice-kfs-dependencies" depends="init-property-files,init-additional-properties">
    	<delete verbose="true" failonerror="false">
      		<fileset dir="${dependencies.project.directory}">
      			<include name="rice-*${rice.version}-*.*" />
      			<include name="rice-*${kfs.rice.version}-*.*" />
      		</fileset>
    	</delete>
    	<maven goals="source:jar" dir="${rice.project.directory}" />
		<echo>
Copying Files from ${rice.project.directory}/**/target/rice*...
To: ${dependencies.project.directory}
Renaming from: rice-xxx-${rice.version}-xxxxx.jar
		 to  : rice-xxx-${kfs.rice.version}-xxxxx.zip
		</echo>
    	<copy todir="build/rice-sources" verbose="true" overwrite="true" >
      		<fileset dir="${rice.project.directory}">
      			<include name="**/target/rice-*-sources.jar" />
      		</fileset>
       		<flattenmapper />
    	</copy>
	</target>
  
	<target name="update-rice-licenses" depends="init-property-files,init-additional-properties">
		<echo>
	*************************************************
		NEED TO UPDATE RICE LICENSE FILES???
	*************************************************
		</echo>
		<!--
    	<delete verbose="true" failonerror="false">
      		<fileset dir="${build.project.directory}" 
      				 includes="${rice.name}*${rice.output.licenses.suffix}" />
    	</delete>
    	<zip destfile="${build.project.directory}/${rice.name}-${kfs.rice.version}-licenses.zip" 
    		 basedir="${rice.project.directory}/${licenses.directory}" />
    		 -->
  	</target>

  	<macrodef name="maven">
    	<attribute name="goals" />
    	<attribute name="options" default="" />
        <attribute name="dir" default="" />
    	<sequential>
      		<java classname="org.codehaus.plexus.classworlds.launcher.Launcher" dir="@{dir}" fork="true" failonerror="true">
      		   	<jvmarg value="-Xmx768m" />
      		    <jvmarg value="-XX:MaxPermSize=384m" />
        		<arg line="@{options} @{goals}"/>
        		<sysproperty key="classworlds.conf" value="${maven.home.directory}/bin/m2.conf"/>
        		<sysproperty key="maven.home" value="${maven.home.directory}"/>
        		<sysproperty key="skipTests" value="true"/>
        		<sysproperty key="maven.surefire.skip" value="true"/>
        		<classpath>
          			<fileset dir="${maven.home.directory}/boot">
            			<include name="plexus-classworlds-*.jar"/>
          			</fileset>
        		</classpath>
      		</java>
    	</sequential>
  	</macrodef>

<!-- 
	<target name="package" depends="prep-temp-dir,checkout-projects,replace-foundation-references,unpack-and-remove-rice-licenses,add-doc-files,make-javadoc-for-dist,zip-package"
			description="Cleans up the project, manipulates the contents slightly, and packs it up for distribution on the Kuali web site.">
    	<delete dir="${all.temp.directory}" verbose="false" />
	</target>
 -->
	<target name="prep-temp-dir" depends="init-properties,init-additional-properties">
    	<delete>
    		<fileset dir="${all.temp.directory}">
    			<include name="**/*" />
    		</fileset>
    	</delete>
	</target>

<!-- 
TODO:  SVN export to the temp dir

dataset creation - script in Ant
use export-to-svn?
svn cp development demo
svn cp development bootstrap
Target: remove-dist-db-dirs
Target: reset-dist-db-dirs
Prep - Or fully revert within Eclipse and run the clean-all Ant task
Need oracle database - properties for packaging/distribution schema
default for schema name
custom property file only loaded by this process
re-use the refresh-kfs-db target but set the properties to point to packaging
require Oracle schema - hard-code to Oracle driver class
stop from checking everything out - use project and do an SVN revert and clean-all
remove all Rice export sections
add export/import for Rice bootstrap dataset (secondary)
remove javadoc
remove reg-build / ptd / ptds
look for indiana.edu / kuali.org references in entire project
Target: import-kfs-for-packaging
Target: run demo cleanup
Target: export-demo-db
Target: run bootstrap cleanup
Target: export-bootstrap-db

knoreceipt-l@indiana.edu
 -->
	<target name="replace-foundation-references" depends="init-properties,init-additional-properties">
		<delete verbose="true">
			<fileset dir="${all.temp.directory}/kfs">
				<!-- remove the "build-foundation" build file -->
				<include name="build-foundation.xml" />
				<include name="build/properties/build-foundation.properties" />
				<!-- remove the distribution build files -->
				<!-- both these files and files we do not have the authority to distribute ourselves -->
				<include name="${build.distribution.directory}/build.xml" />
				<include name="build/properties/distribution.properties" />
				<include name="work/db/upgrades/*/temp-*/**" />
				<include name="build/svn*.jar" />
				<include name="build/ganymed.jar" />
				<include name="build/drivers/*.jar" />
			</fileset>
		</delete>
	    <!-- remove foundation-only targets import from main build file -->
    	<replace file="${all.temp.directory}/kfs/build.xml">
      		<replacefilter token="&lt;import file=&quot;build-foundation.xml&quot;/&gt;" value="" />
      		<replacefilter token="&lt;import file=&quot;build-foundation.xml&quot;/&gt;" value="" />
    		<replacefilter token="&lt;format property=&quot;build.version&quot; pattern=&quot;MM/dd/yyyy hh:mm aa&quot; /&gt;" value="&lt;format property=&quot;build.version&quot; pattern=&quot;'KFS ${release.version.number}' MM/dd/yyyy hh:mm aa&quot; /&gt;" />
    	</replace>
		<!-- replace foundation URL references -->
		<replace dir="${all.temp.directory}">
			<include name="impex/*.properties*" />
			<include name="kfs/build/external/user/kfs-build.properties" />
			<include name="kfs/build/properties/*.properties" />
			<!-- SVN -->
      		<replacefilter token="https://svn.kuali.org/repos/" value="" />
			<!-- database -->
      		<replacefilter token="mysql.datasource.url=jdbc:mysql://esdbk01.uits.indiana.edu:3306/$${datasource.username}" 
    		     value="mysql.datasource.url=jdbc:mysql://localhost:3306/$${datasource.username}" />
      		<replacefilter token="oracle.datasource.url=jdbc:oracle:thin:@esdbk02.uits.indiana.edu:1521:KUALI" 
    		     value="oracle.datasource.url=jdbc:oracle:thin:@localhost:1521:XE" />
			<!-- misc -->
			<replacefilter token="feedback.link.url=https://test.kuali.org/jira/secure/CreateIssue.jspa?pid=10091&amp;amp;issuetype=1" value="feedback.link.url=" />
			<replacefilter token="licensing.contact.email=license@kuali.org" value="licensing.contact.email=" />
      	</replace>
		<move file="${all.temp.directory}/kfs/${build.distribution.directory}/*-impex-build*.properties"
			  todir="${all.temp.directory}" failonerror="false" />
	</target>

	<target name="add-doc-files" depends="init-properties,init-additional-properties">
		<!-- get the current revision numbers for each SVN path we are including in the export -->
		<echo>${kuali.svn.root}/${kfs.dataset.svn.module}/${kfs.dataset.svn.path}</echo>
		<svn>
			<info target="${basedir.safe}"
				  propPrefix="svn.info.kfs" verbose="true" />			
		</svn>
	    <!-- dump a file with the extracted tags -->
    	<echo file="${all.temp.directory}/release-details.txt">
      		KFS URL: ${kfs.svn.module}/${kfs.svn.path} (@${svn.info.kfs.lastRev})
    	</echo>	
	</target>
	
	<target name="zip-package" depends="init-properties">
	    <!-- zip it up -->
    	<zip destfile="${release.zip.name}" basedir="${all.temp.directory}" compress="true" />
	</target>

</project>
