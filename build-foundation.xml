<!--
 Copyright 2007 The Kuali Foundation.
 
 Licensed under the Educational Community License, Version 1.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.opensource.org/licenses/ecl1.php
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!-- CONFIGURATION MANAGEMENT TARGETS 

Tasks in this file will not be deployed with the application.  Tasks that 
are intended for use only by Kuali Foundation developers.

-->
<project name="imported">
	<!-- dummy target to keep validation happy -->
	<target name="init-properties" />
	<target name="init-property-files" />
	<target name="dist-local" />
	<target name="clean" />
	<target name="make-source" />

	<target name="modularization-test" depends="make-source">
    	<java classname="org.kuali.kfs.sys.context.CheckModularization" fork="true" resultproperty="context.test.results">
			<jvmarg value="-Xms${run.tests.min.memory}" />
			<jvmarg value="-Xmx${run.tests.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
			<classpath>
				<pathelement location="${war.classes.directory}" />
				<path refid="compile.source.classpath" />
			</classpath>
		</java>
 		<verifydesign design="work/src/design.xml">
			<path>
				<fileset dir="${war.classes.directory}/org/kuali/kfs" includes="**/*.class" />
      		</path>
    	</verifydesign>
		<condition property="context.test.failed" value="true">
			<equals arg1="${context.test.results}" arg2="1" />
		</condition>
	</target>

	<target name="check-modularization" depends="modularization-test">
		<fail if="context.test.failed" message="CheckModularization.java failed" />
  	</target>
  	  
	<target name="make-javadoc-all" depends="init-properties">
    <!-- delete potential previous temp directories -->
    	<delete dir="${doc.directory}" failonerror="false" />
    	<delete dir="${all.temp.directory}" failonerror="false" />
    <!-- setup destination directories -->
    	<mkdir dir="${doc.directory}" />
    	<mkdir dir="${all.temp.directory}/kfs" />
    	<mkdir dir="${all.temp.directory}/rice/core" />
    	<mkdir dir="${all.temp.directory}/rice/kew" />
    	<mkdir dir="${all.temp.directory}/rice/kns" />
    	<mkdir dir="${all.temp.directory}/rice/ksb" />
    	<mkdir dir="${all.temp.directory}/rice/shared" />
  	<!-- create javadocs from rice project -->
  		<javadoc destdir="${all.temp.directory}/rice/core" packagenames="org.*" sourcepath="${rice.project.directory}/core/src/main/java" />
  		<javadoc destdir="${all.temp.directory}/rice/kew" packagenames="org.*" sourcepath="${rice.project.directory}/kew/src/main/java" />
  		<javadoc destdir="${all.temp.directory}/rice/kns" packagenames="org.*" sourcepath="${rice.project.directory}/kns/src/main/java" />
  		<javadoc destdir="${all.temp.directory}/rice/ksb" packagenames="org.*" sourcepath="${rice.project.directory}/ksb/src/main/java" />
  		<javadoc destdir="${all.temp.directory}/rice/shared" packagenames="org.*" sourcepath="${rice.project.directory}/shared/src/main/java" />
 	
    <!-- create javadoc target for kfs docs -->
		<javadoc destdir="${all.temp.directory}/kfs" packagenames="org.*" locale="en" useexternalfile="yes" maxmemory="512M">
      		<sourcepath><pathelement location="${source.directory}"/></sourcepath>
      		<classpath refid="compile.source.classpath"/>
    	</javadoc>
    
    <!-- create zip file from javadoc directories -->
    	<zip basedir="${all.temp.directory}" destfile="${doc.directory}/kuali-docs.zip" />
    
    <!-- clear temp directories -->
    	<delete dir="${all.temp.directory}" />
	</target>
  
	<target name="export-dataset">
		<mkdir dir="${all.temp.directory}/${name}-dataset" />
		<cvs command="export -d ${name}-dataset" dest="${all.temp.directory}" cvsroot="${release.cvs.root}" package="${release.database.cvs.module}" failonerror="true" tag="${branch}" compressionlevel="6" />
	</target>
  
	<target name="package-kfs" depends="init-properties">
    <!-- copy build file to ${all.temp.directory} dir -->
    	<delete dir="${all.temp.directory}" failonerror="false" />
    	<mkdir dir="${all.temp.directory}" />    
    	<cvspass cvsroot="${release.cvs.root}" password="${release.cvs.password}" />    
    	<antcall target="export-dataset">
      		<param name="branch" value="${release.demo.dataset.cvs.tag}" />
      		<param name="name" value="demo" />
    	</antcall>
    	<antcall target="export-dataset">
      		<param name="branch" value="${release.bootstrap.dataset.cvs.tag}" />
      		<param name="name" value="bootstrap" />
    	</antcall>
    <!-- impex tool -->
    	<mkdir dir="${all.temp.directory}/impex" />
    	<cvs command="export" dest="${all.temp.directory}" cvsroot="${release.cvs.root}" package="${release.impex.tool.cvs.module}" failonerror="true" tag="${release.impex.tool.cvs.tag}" compressionlevel="6" />
    	<ant antfile="${all.temp.directory}/${release.impex.tool.cvs.module}/impex/build.xml" inheritall="false" target="package-impex-tool" />
    	<unzip src="${all.temp.directory}/${release.impex.tool.cvs.module}/db_impex.zip" dest="${all.temp.directory}" />
    <!-- rice -->    
    	<mkdir dir="${all.temp.directory}/${release.rice.cvs.module}" />
    	<cvs command="export" dest="${all.temp.directory}" cvsroot="${release.cvs.root}" package="${release.rice.cvs.module}" failonerror="true" tag="${release.rice.cvs.tag}" compressionlevel="6" />    
    	<mkdir dir="${release.patches.dir}" />    
    <!-- KFS -->
    	<mkdir dir="${all.temp.directory}/${release.kfs.cvs.module}" />
    	<cvs command="export" dest="${all.temp.directory}" cvsroot="${release.cvs.root}" package="${release.kfs.cvs.module}" failonerror="true" tag="${release.kfs.cvs.tag}" compressionlevel="6" />
    <!-- remove foundation-only targets import -->
    	<replace file="${all.temp.directory}/kuali_project/build.xml">
      		<replacefilter token="&lt;import file=&quot;build-foundation.xml&quot;/&gt;" value="" />
    	</replace>
    <!-- replace foundation database URLs -->
    	<replace file="${all.temp.directory}/kuali_project/build/external/user/kuali-build.properties">
      		<replacefilter token="mysql.datasource.url=jdbc:mysql://esdbk01.uits.indiana.edu:3306/$${datasource.username}" 
    		     value="mysql.datasource.url=jdbc:mysql://localhost:3306/$${datasource.username}" />
      		<replacefilter token="oracle.datasource.url=jdbc:oracle:thin:@esdbk02.uits.indiana.edu:1521:KUALI" 
    		     value="oracle.datasource.url=jdbc:oracle:thin:@localhost:1521:XE" />
    	</replace>
    	<copy file="${all.temp.directory}/${release.kfs.cvs.module}/build/README.txt" todir="${all.temp.directory}" />
    <!-- dump a file with the extracted tags -->
    	<echo file="${all.temp.directory}/release-details.txt">
      		KFS Tag: ${release.kfs.cvs.tag}
      		Demo Dataset Tag: ${release.demo.dataset.cvs.tag}
      		Bootstrap Dataset Tag: ${release.bootstrap.dataset.cvs.tag}
      		Impex Tag: ${release.impex.tool.cvs.tag}
      		Rice Tag: ${release.rice.cvs.tag}
    	</echo>
    
    <!-- zip it up -->
    	<zip destfile="${release.zip.name}">
      		<zipfileset dir="${all.temp.directory}/${release.kfs.cvs.module}" prefix="financial-system">
    			<exclude name="build-foundation.xml" />
    			<exclude name=".apt_generated" />
    			<exclude name="patches" />
      		</zipfileset>
      		<zipfileset dir="${all.temp.directory}/demo-dataset" prefix="demo-data-set">
        		<exclude name=".project" />
      		</zipfileset>
      		<zipfileset dir="${all.temp.directory}/bootstrap-dataset" prefix="bootstrap-data-set">
        		<exclude name=".project" />
      		</zipfileset>
      		<zipfileset dir="${all.temp.directory}/impex" prefix="database-import-export" />
      		<zipfileset dir="${all.temp.directory}/${release.rice.cvs.module}" prefix="rice" />
      		<zipfileset dir="${release.patches.dir}" prefix="patches" />
      		<zipfileset dir="${all.temp.directory}" prefix="">
    			<include name="README.txt" />
    			<include name="release-details.txt" />
     		</zipfileset>
    	</zip>
    	<delete dir="${all.temp.directory}" verbose="false" />
	</target>
  
	<target name="setup-rice" depends="init-property-files">
    	<condition property="os.safe.driver.path" value="c:${drivers.directory}/ojdbc14.jar">
      		<os family="windows"/>
    	</condition>
    	<property name="os.safe.driver.path" value="${drivers.directory}/ojdbc14.jar" />
    	<maven goals="install:install-file" options="-U -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.2.0 -Dpackaging=jar -Dfile=${os.safe.driver.path}" />
    	<copy todir="${user.home}/kuali" overwrite="true">
      		<fileset dir="${build.user.directory}/${ant.project.name}" includes="**/**" />
      		<filterset>
        		<filter token="rice-datasource-url" value="${rice.datasource.url}" />
        		<filter token="rice-datasource-username-dev" value="${rice.datasource.username.dev}" />
        		<filter token="rice-datasource-password-dev" value="${rice.datasource.password.dev}" />
        		<filter token="rice-datasource-username-test" value="${rice.datasource.username.test}" />
        		<filter token="rice-datasource-password-test" value="${rice.datasource.password.test}" />
      		</filterset>
    	</copy>
    	<maven goals="clean:clean install source:jar javadoc:jar package" options="-U -Dpackaging=jar" />
    	<touch file="${rice.project.directory}/pom.xml" />
	</target>
  
	<target name="update-rice-dev" depends="update-rice-basic,dist-local" />
  
	<target name="update-rice" depends="update-rice-basic,update-rice-extended,dist-local" />
  
	<target name="update-rice-basic" depends="init-property-files,update-rice-jars,update-rice-web" />
  
	<target name="update-rice-jars" depends="init-property-files">
    	<delete>
      		<fileset dir="${basedir}" includes="${lib.directory}/${rice.output.file.prefix}${rice.output.lib.suffix}" />
    	</delete>
    	<maven goals="clean:clean package" />
    	<copy todir="${lib.directory}" flatten="true">
      		<fileset dir="${rice.project.directory}" includes="${rice.output.directories}${rice.output.file.prefix}${rice.version}${rice.output.lib.suffix}" excludes="${rice.excludes}" />
    	</copy>
	</target>
  
	<target name="update-rice-web" depends="init-property-files">
    	<delete>
      		<fileset dir="${build.project.directory}" includes="${rice.name}*${rice.output.web.suffix}" />
    	</delete>
    	<zip destfile="${build.project.directory}/${rice.name}-${rice.version}${rice.output.web.suffix}" basedir="${rice.web.directory}" excludes="*.*,META-INF/**/**,WEB-INF/*.*,WEB-INF/jsp/**/**,**/CVS" />
	</target>
  
	<target name="update-rice-extended" depends="init-property-files,update-rice-kuali-dependencies,update-rice-licenses" />
  
	<target name="update-rice-kuali-dependencies" depends="init-property-files">
    	<delete>
      		<fileset dir="${dependencies.project.directory}" includes="${rice.output.file.prefix}" />
    	</delete>
    	<maven goals="compile source:jar javadoc:jar" />
    	<copy todir="${dependencies.project.directory}">
      		<fileset dir="${rice.project.directory}" includes="${rice.output.directories}${rice.output.file.prefix}${rice.version}${rice.output.src.suffix},${rice.output.directories}${rice.output.file.prefix}${rice.version}${rice.output.doc.suffix}" excludes="${rice.excludes}" />
      		<chainedmapper>
        		<flattenmapper />
        		<globmapper from="*.jar" to="*.zip" />
      		</chainedmapper>
    	</copy>
	</target>
  
	<target name="update-rice-licenses" depends="init-property-files">
    	<delete>
      		<fileset dir="${build.project.directory}" includes="${rice.name}*${rice.output.licenses.suffix}" />
    	</delete>
    	<zip destfile="${build.project.directory}/${rice.name}-${rice.version}-licenses.zip" basedir="${rice.project.directory}/${licenses.directory}" excludes="**/CVS" />
  	</target>

	
	<target name="build-dd-doc" depends="init-properties" description="Builds documentation for the Data Dictionary custom tags.">
		<taskdef name="xsddoc" classname="net.sf.xframe.xsddoc.Task">
			<classpath>
				<pathelement location="build/xsddoc.jar" />
				<fileset dir="${lib.directory}">
					<include name="x*.jar"/>
				</fileset>
			</classpath>
		</taskdef>
		
    	<delete dir="${dddoc.directory}" failonerror="false" />
    <!-- setup destination directories -->
    	<mkdir dir="${dddoc.directory}" />
		<xsddoc file="work/src/org/kuali/kfs/sys/spring/datadictionary/dd.xsd"
		         out="${dddoc.directory}"
		    doctitle="Data Dictionary Custom Tags Schema"
		     verbose="true"/>
	</target>
	
  	<macrodef name="maven">
    	<attribute name="goals" />
    	<attribute name="options" default="--offline" />
    	<sequential>
      		<java classname="org.codehaus.classworlds.Launcher" dir="${rice.project.directory}" fork="true" failonerror="true">
        		<arg line="@{options} @{goals}"/>
        		<sysproperty key="classworlds.conf" value="${maven.home.directory}/bin/m2.conf"/>
        		<sysproperty key="maven.home" value="${maven.home.directory}"/>
        		<sysproperty key="maven.test.skip" value="true"/>
        		<classpath>
          			<fileset dir="${maven.home.directory}/boot">
            			<include name="classworlds-*.jar"/>
          			</fileset>
        		</classpath>
      		</java>
    	</sequential>
  	</macrodef>
</project>