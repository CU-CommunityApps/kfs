<!--
 Copyright 2007 The Kuali Foundation
 
 Licensed under the Educational Community License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.opensource.org/licenses/ecl2.php
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!-- CONFIGURATION MANAGEMENT TARGETS 

Tasks in this file will not be deployed with the application.  Tasks that 
are intended for use only by Kuali Foundation developers.

-->
<project name="imported">
	<!-- dummy targets to keep validation happy -->
	<target name="init-properties" />
	<target name="init-property-files" />
	<target name="dist-local" />
	<target name="clean" />
	<target name="make-source" />

	<target name="init-additional-properties">
		<echo message="Reading Properties: ${properties.directory}/build-foundation.properties" />
		<property file="${properties.directory}/build-foundation.properties" />
	</target>

	<target name="modularization-test" depends="make-source,init-additional-properties">
        <javac destdir="${war.classes.directory}" debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
            <classpath refid="compile.tests.classpath" />
            <src path="${test.infrastructure.source.directory}" />
            <src path="${test.unit.source.directory}" />
            <src path="${test.integration.source.directory}" />
        </javac>
        <copy todir="${war.classes.directory}">
            <fileset dir="${test.infrastructure.source.directory}" includes="${non.java.resources}" />
            <fileset dir="${test.unit.source.directory}" includes="${non.java.resources}" />
            <fileset dir="${test.integration.source.directory}" includes="${non.java.resources}" />
        </copy>
    	<java classname="org.kuali.kfs.sys.context.CheckModularization" fork="true" resultproperty="context.test.results">
			<jvmarg value="-Xms${run.tests.min.memory}" />
			<jvmarg value="-Xmx${run.tests.max.memory}" />
			<jvmarg value="-XX:MaxPermSize=${run.tests.max.permsize}" />
			<classpath>
				<pathelement location="${war.classes.directory}" />
				<path refid="compile.source.classpath" />
			</classpath>
		</java>
		<!--
 		<verifydesign design="work/src/design.xml">
			<path>
				<fileset dir="${war.classes.directory}/org/kuali/kfs" includes="**/*.class" excludes="**/*Test.class,**/*Fixture.class" />
      		</path>
    	</verifydesign>
		<condition property="context.test.failed" value="true">
			<equals arg1="${context.test.results}" arg2="1" />
		</condition>
		-->
	</target>

	<target name="check-modularization" depends="modularization-test">
		<fail if="context.test.failed" message="CheckModularization.java failed" />
  	</target>
  	  
  
	<target name="setup-rice" depends="init-property-files,init-additional-properties">
		<ant dir="${rice.project.directory}" target="retrieve-maven-dependencies" />
    	<condition property="os.safe.driver.path" value="c:${drivers.directory}/ojdbc14.jar">
      		<os family="windows"/>
    	</condition>
    	<property name="os.safe.driver.path" value="${drivers.directory}/ojdbc14.jar" />
    	<maven goals="install:install-file" options="-U -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.2.0 -Dpackaging=jar -Dfile=${os.safe.driver.path}" />
    	<maven goals="clean:clean install source:jar javadoc:jar package" options="-U -Dpackaging=jar" />
    	<touch file="${rice.project.directory}/pom.xml" />
	</target>
  
	<target name="update-rice-dev" depends="update-rice-basic,dist-local" />
  
	<target name="update-rice" depends="update-rice-basic,update-rice-extended,dist-local" />
  
	<target name="update-rice-basic" depends="init-property-files,init-additional-properties,update-rice-jars,update-rice-server-war" />
  
	<target name="update-rice-jars" depends="init-property-files,init-additional-properties">
	    <if>
	        <isset property="clean.rice" />
	        <then>
                <maven goals="clean:clean" modulePath="/${rice.api.module.name}" />
                <maven goals="clean:clean" modulePath="/${rice.impl.module.name}" />
            </then>
        </if>
        <maven goals="install" modulePath="/${rice.api.module.name}" />
        <maven goals="install" modulePath="/${rice.impl.module.name}" />
    	<delete verbose="true">
      		<fileset dir="${basedir}" includes="${lib.directory}/rice-*.jar" />
    	</delete>
    	<copy todir="${lib.directory}" flatten="true" verbose="true">
      		<fileset dir="${rice.project.directory}">
      			<include name="${rice.api.module.name}/target/${rice.name}-${rice.api.module.name}-${rice.version}.jar" />
      			<include name="${rice.impl.module.name}/target/${rice.name}-${rice.impl.module.name}-${rice.version}.jar" />
      		</fileset>
    	</copy>
	</target>
  
    <target name="update-rice-server-war" depends="init-property-files,init-additional-properties">
	    <if>
	        <isset property="clean.rice" />
	        <then>
                <maven goals="clean:clean" modulePath="/${rice.web.module.name}" />
            </then>
        </if>
        <maven goals="package" modulePath="/${rice.web.module.name}" />
        <copy file="${rice.project.directory}/${rice.web.module.name}/target/${rice.server.war.file.name}" 
        	  todir="${build.appserver.directory}" />
    </target>
    
	<target name="update-rice-extended" depends="init-property-files,init-additional-properties,update-rice-kfs-dependencies,update-rice-licenses" />
  
	<target name="update-rice-kfs-dependencies" depends="init-property-files,init-additional-properties">
    	<delete verbose="true" failonerror="false">
      		<fileset dir="${dependencies.project.directory}" includes="rice-*.zip" />
    	</delete>
    	<maven goals="compile source:jar javadoc:jar" />
    	<copy todir="${dependencies.project.directory}" verbose="true" overwrite="true">
      		<fileset dir="${rice.project.directory}">
      			<include name="**/target/rice*-sources.jar" />
      			<include name="**/target/rice*-javadoc.jar" />
      			<exclude name="**/*-kim-*" />
      			<exclude name="**/*-kns-*" />
      			<exclude name="**/*-ken-*" />
      			<exclude name="**/*-kcb-*" />
      			<exclude name="**/*-ksb-*" />
      			<exclude name="**/*-kew-*" />
      			<exclude name="**/*-web-*" />
      		</fileset>
      		<chainedmapper>
        		<flattenmapper />
        		<globmapper from="*.jar" to="*.zip" />
      		</chainedmapper>
    	</copy>
	</target>
  
	<target name="update-rice-licenses" depends="init-property-files,init-additional-properties">
    	<delete verbose="true" failonerror="false">
      		<fileset dir="${build.project.directory}" 
      				 includes="${rice.name}*${rice.output.licenses.suffix}" />
    	</delete>
    	<zip destfile="${build.project.directory}/${rice.name}-${rice.version}-licenses.zip" 
    		 basedir="${rice.project.directory}/${licenses.directory}" />
  	</target>
		
	<target name="build-dd-doc" depends="init-properties" description="Builds documentation for the Data Dictionary custom tags.">
		<taskdef name="xsddoc" classname="net.sf.xframe.xsddoc.Task">
			<classpath>
				<pathelement location="build/xsddoc.jar" />
				<fileset dir="${lib.directory}">
					<include name="x*.jar"/>
				</fileset>
			</classpath>
		</taskdef>
		
    	<delete dir="${dddoc.directory}" failonerror="false" />
    <!-- setup destination directories -->
    	<mkdir dir="${dddoc.directory}" />
		<xsddoc file="work/src/org/kuali/kfs/sys/spring/datadictionary/dd.xsd"
		         out="${dddoc.directory}"
		    doctitle="Data Dictionary Custom Tags Schema"
		     verbose="true"/>
	</target>
	
  	<macrodef name="maven">
    	<attribute name="goals" />
    	<attribute name="options" default="--offline" />
        <attribute name="modulePath" default="" />
    	<sequential>
      		<java classname="org.codehaus.classworlds.Launcher" dir="${rice.project.directory}@{modulePath}" fork="true" failonerror="true">
        		<arg line="@{options} @{goals}"/>
        		<sysproperty key="classworlds.conf" value="${maven.home.directory}/bin/m2.conf"/>
        		<sysproperty key="maven.home" value="${maven.home.directory}"/>
        		<sysproperty key="maven.test.skip" value="true"/>
        		<classpath>
          			<fileset dir="${maven.home.directory}/boot">
            			<include name="classworlds-*.jar"/>
          			</fileset>
        		</classpath>
      		</java>
    	</sequential>
  	</macrodef>
</project>
