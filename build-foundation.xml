<!--
 Copyright 2007-2012 The Kuali Foundation
 
 Licensed under the Educational Community License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.opensource.org/licenses/ecl2.php
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!-- CONFIGURATION MANAGEMENT TARGETS 

Tasks in this file will not be deployed with the application.  Tasks that 
are intended for use only by Kuali Foundation developers.

-->
<project name="imported">
	<!-- dummy targets to keep validation happy -->
	<target name="init-properties" />
	<target name="init-make-references" />
	<target name="dist-local" />
	<target name="clean" />
	<target name="clean-all" />
	<target name="make-source" />
	<target name="build-eclipse-classpath" />
	<target name="extract-rice-libraries" />
	<target name="refresh-kfs-db" />
	<target name="make-javadoc" />

	<target name="init-additional-properties" depends="init-properties">
		<echo message="Reading Properties: ${properties.directory}/build-foundation.properties" />
		<property file="${properties.directory}/build-foundation.properties" />
		<if>
			<available file="${properties.directory}/distribution.properties" />
			<then>
				<echo message="Reading Properties: ${properties.directory}/distribution.properties" />
				<property file="${properties.directory}/distribution.properties" />
			</then>
		</if>
	</target>

	<!-- REMOVE FROM DISTRIBUTION -->
	<target name="modularization-prep" depends="init-additional-properties,make-source">

		<echo message="Reading Properties: ${properties.directory}/checkmodularization.properties" />
		<property file="${properties.directory}/checkmodularization.properties" />

		<echo message="coreservice.override.spring.files: ${checkmodularization.coreservice.override.spring.files}" />
		
		<propertyfile file="${classes.directory}/${configuration.file}">
			<entry key="module.endowment.enabled" default="" operation="=" value="${checkmodularization.module.endowment.enabled}"/>
			<entry key="module.access.security.enabled" default="" operation="=" value="${checkmodularization.module.access.security.enabled}"/>
			<entry key="rice.coreservice.additionalSpringFiles" default="" operation="+" value=",${checkmodularization.coreservice.override.spring.files}"/>
			<entry key="rice.kim.additionalSpringFiles" default="" operation="+" value=",${checkmodularization.kim.override.spring.files}"/>
			<entry key="rice.kew.additionalSpringFiles" default="" operation="+" value=",${checkmodularization.kew.override.spring.files}"/>
			<entry key="rice.location.additionalSpringFiles" default="" operation="+" value=",${checkmodularization.location.override.spring.files}"/>
		</propertyfile>
		
		<!-- delete this LD override file which is an edge case (bean override with new inquiry field) and causing spring context failures -->
		<delete file="${classes.directory}/org/kuali/kfs/module/ld/businessobject/datadictionary/overrides/Account.xml" />
	</target>

	<target name="modularization-test" depends="modularization-prep">
    	<java classname="org.kuali.kfs.sys.context.CheckModularization" fork="true" resultproperty="context.test.results">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx2g" />
			<jvmarg value="-XX:MaxPermSize=256m" />
			<classpath>
				<pathelement location="${classes.directory}" />
				<pathelement location="${drivers.directory}" />
				<path refid="compile.source.classpath" />
				<path refid="database.drivers.classpath" />
			</classpath>
		</java>
		<condition property="context.test.failed" value="true">
			<equals arg1="${context.test.results}" arg2="1" />
		</condition>
	</target>

	<target name="verify-design" depends="modularization-prep">
		<verifydesign design="work/src/design.xml">
			<path>
				<fileset dir="${classes.directory}/org/kuali/kfs" includes="**/*.class" excludes="**/*Test.class,**/*Fixture.class" />
	  		</path>
		</verifydesign>
	</target>

	<target name="check-modularization" depends="modularization-test, verify-design">
		<fail if="context.test.failed" message="CheckModularization.java failed" />
  	</target>
	<!-- END REMOVE FROM DISTRIBUTION -->
  	  
	<target name="update-rice-dev" depends="update-rice-basic,extract-rice-libraries,build-eclipse-classpath,dist-local" />
  
	<target name="update-rice" depends="update-rice-dev,update-rice-extended" />
  
	<target name="update-rice-basic" depends="init-additional-properties,update-rice-server-war" />
  
	<target name="clean-rice-maven" depends="init-additional-properties" if="clean.rice">
        <maven goals="clean:clean" dir="${rice.project.directory}" />
	</target>
	
    <target name="update-rice-server-war" depends="init-additional-properties,clean-rice-maven">
        <maven goals="install" dir="${rice.project.directory}" />
    	<delete dir="${build.appserver.directory}" includes="${rice.server.war.file.name.prefix}*.war" />
        <copy file="${rice.project.directory}/${rice.web.module.name}/target/${rice.war.file.name}" 
        	  tofile="${build.appserver.directory}/${rice.server.war.file.name}" verbose="true" overwrite="true" failonerror="true"  />
    </target>
    
	<target name="update-rice-extended" depends="init-additional-properties,update-rice-sources" />
  
	<target name="update-rice-sources" depends="init-additional-properties">
    	<maven goals="source:jar" dir="${rice.project.directory}" />
		<delete verbose="true" failonerror="false">
		    <fileset dir="build/rice-sources">
	  			<include name="rice-*-sources.jar" />
	  		</fileset>
		</delete>
    	<copy todir="build/rice-sources" verbose="true" overwrite="true" >
      		<fileset dir="${rice.project.directory}">
      			<include name="**/target/rice-*-sources.jar" />
      		</fileset>
       		<flattenmapper />
    	</copy>
	</target>
  
  	<macrodef name="maven">
    	<attribute name="goals" />
    	<attribute name="options" default="" />
        <attribute name="dir" default="" />
    	<sequential>
      		<java classname="org.codehaus.plexus.classworlds.launcher.Launcher" dir="@{dir}" fork="true" failonerror="true">
      		   	<jvmarg value="-Xmx768m" />
      		    <jvmarg value="-XX:MaxPermSize=384m" />
        		<arg line="@{options} @{goals}"/>
        		<sysproperty key="classworlds.conf" value="${maven.home.directory}/bin/m2.conf"/>
        		<sysproperty key="maven.home" value="${maven.home.directory}"/>
        		<sysproperty key="skipTests" value="true"/>
        		<sysproperty key="maven.surefire.skip" value="true"/>
        		<classpath>
          			<fileset dir="${maven.home.directory}/boot">
            			<include name="plexus-classworlds-*.jar"/>
          			</fileset>
        		</classpath>
      		</java>
    	</sequential>
  	</macrodef>

	<!-- REMOVE FROM DISTRIBUTION -->
	 <typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
	 	<classpath>
	 		<fileset dir="build">
	 			<include name="svn*.jar"/>
	 			<include name="ganymed.jar"/>
	 		</fileset>
	 	</classpath>
	 </typedef>

	<target name="prep-temp-dir" depends="init-properties">
		<if>
			<available file="${all.temp.directory}" type="dir" />
			<then>
		<echo>Deleting contents of temp directory: ${all.temp.directory}</echo>
    	<delete>
    		<fileset dir="${all.temp.directory}">
    			<include name="**/*" />
    		</fileset>
    	</delete>
			</then>
		</if>
	</target>
	
	<target name="export-to-temp" depends="clean-all,prep-temp-dir">
		<echo>Exporting project to temp directory for packaging.</echo>
		<svn svnkit="false" javahl="true">
			<export srcPath="${basedir.safe}" destPath="${all.temp.directory}/kfs" />
		</svn>
	</target>

	<target name="set-temp-export-db-properties">
		<property name="datasource.ojb.platform" value="Oracle9i"/>
		<property name="datasource.url" value="jdbc:oracle:thin:@localhost:1521:ORCL"/>
		<property name="datasource.username" value="KFSTEMP"/>
		<property name="datasource.password" value="KFSTEMP"/>
		<property name="kfs.impex.import.targets" value="drop-schema create-schema import"/>
	</target>
	
	<target name="export-dev-db-to-temp" depends="set-temp-export-db-properties,init-additional-properties,init-make-references"> <!-- ,refresh-kfs-db -->
	</target>

	<target name="prepare-dataset-paths" depends="init-additional-properties">
		<!-- svn cp development to demo and bootstrap -->
		<if>
			<not><available file="${database.directory}/kfs-db/demo" type="dir" /></not>
			<then>
				<echo>Building copy of development repository for demo dataset.</echo>
				<svn svnkit="false" javahl="true">
					<copy srcPath="${database.directory}/kfs-db/development"
						 destPath="${database.directory}/kfs-db/demo"/>
				</svn>
			</then>
		</if>
		<if>
			<not><available file="${database.directory}/kfs-db/bootstrap" type="dir" /></not>
			<then>
				<echo>Building copy of development repository for bootstrap dataset.</echo>
				<svn svnkit="false" javahl="true">
					<copy srcPath="${database.directory}/kfs-db/development"
						 destPath="${database.directory}/kfs-db/bootstrap"/>
				</svn>
			</then>
		</if>
		<svn svnkit="false" javahl="true" username="${svn.username}" password="${svn.password}">
			<commit dir="${database.directory}/kfs-db" message="Copying development datasource in preparation for release dataset creation."/>
		</svn>
	</target>
	
	<target name="create-demo-dataset" depends="export-dev-db-to-temp">
		<echo>Running Script to convert development database into demo database</echo>
		<echo>No changes at present - not running script.</echo>
		<!--
        <sql driver="${real.datasource.driver.class}"
             classpathref="database.drivers.classpath"
             url="${datasource.url}"
             userid="${datasource.username}"
             password="${datasource.password}"
	         keepformat="true"
	         delimitertype="row"
	         delimiter="/" print="true" 
   	 		 src="${demo.database.cleanup.script}" />
   	 	-->			
	</target>
	
	<target name="create-and-export-demo-dataset" depends="create-demo-dataset,export-demo-dataset" />
	
	<target name="export-demo-dataset" depends="set-temp-export-db-properties,init-additional-properties,init-make-references">
		<echo>No changes at present - not running export.</echo>
		<!-- Commenting out - no changes from development to demo at present 
		<svn>
			<info target="${basedir.safe}" />
		</svn>
		<echo>${svn.info.url}</echo>
		<ant dir="${impex.directory}/export-to-svn" inheritall="false">
			<target name="init" />
			<target name="export-db" />
			<target name="merge-export-to-svn" />
			<target name="check-merge-complete" />

			<property name="db.jdbc.url" value="${datasource.url}" />
			<property name="db.username" value="${datasource.username}" />
			<property name="db.schema" value="${datasource.username}" />
			<property name="db.password" value="${datasource.password}" />
			<property name="temp.dir" location="${all.temp.directory}/db-temp"/>
			<property name="checkout.dir" location="${database.directory}/kfs-db"/>
			<property name="data.svn.module" value="bootstrap" />
			<property name="svn.base" value="${svn.info.url}"/>
			<property name="data.svn.path" value="demo"/>
		</ant>
		<delete dir="${database.directory}/kfs-db/new_export" />
		<delete file="${database.directory}/kfs-db/merge.complete" />
		-->
	</target>

	<target name="create-bootstrap-dataset" depends="create-demo-dataset">
		<echo>Running Script to convert demo database into bootstrap database</echo>
        <sql driver="${real.datasource.driver.class}"
             classpathref="database.drivers.classpath"
             url="${datasource.url}"
             userid="${datasource.username}"
             password="${datasource.password}"
	         keepformat="true"
	         delimitertype="row" 
	         delimiter="/" print="true" 
   	 		 src="${bootstrap.database.cleanup.script}" />
	</target>

	<target name="create-and-export-bootstrap-dataset" depends="create-bootstrap-dataset,export-bootstrap-dataset" />
	
	<target name="export-bootstrap-dataset" depends="set-temp-export-db-properties,init-additional-properties,init-make-references">
		<svn svnkit="false" javahl="true">
			<info target="${basedir.safe}" />
		</svn>
		<echo>${svn.info.url}</echo>
		<ant dir="${impex.directory}/export-to-svn" inheritall="false">
			<target name="init" />
			<target name="export-db" />
			<target name="merge-export-to-svn" />
			<target name="check-merge-complete" />

			<property name="db.jdbc.url" value="${datasource.url}" />
			<property name="db.username" value="${datasource.username}" />
			<property name="db.schema" value="${datasource.username}" />
			<property name="db.password" value="${datasource.password}" />
			<property name="temp.dir" location="${all.temp.directory}/db-temp"/>
			<property name="checkout.dir" location="${database.directory}/kfs-db"/>
			<property name="data.svn.module" value="bootstrap" />
			<property name="svn.base" value="${svn.info.url}"/>
			<property name="data.svn.path" value="bootstrap"/>
		</ant>
		<delete dir="${database.directory}/kfs-db/new_export" />
		<delete file="${database.directory}/kfs-db/merge.complete" />
	</target>
		
	<target name="remove-distribution-dataset-dirs" depends="init-additional-properties">
		<if>
			<available file="${database.directory}/kfs-db/demo" type="dir" />
			<then>
				<svn svnkit="false" javahl="true">
					<delete dir="${database.directory}/kfs-db/demo" force="true" />
				</svn>
			</then>
		</if>
		<if>
			<available file="${database.directory}/kfs-db/bootstrap" type="dir" />
			<then>
				<svn svnkit="false" javahl="true">
					<delete dir="${database.directory}/kfs-db/bootstrap" force="true" />
				</svn>
			</then>
		</if>
		<svn svnkit="false" javahl="true" username="${svn.username}" password="${svn.password}" failonerror="false">
			<commit dir="${database.directory}/kfs-db" message="Removing distribution datasource directories." />
		</svn>
	</target>

	<target name="commit-distribution-dataset-dirs" depends="init-additional-properties">
		<svn svnkit="false" javahl="true" username="${svn.username}" password="${svn.password}">
			<commit dir="${database.directory}/kfs-db" message="Adding distribution datasource directories."/>
		</svn>
	</target>
	
	<target name="build-distribution-datasets" depends="set-temp-export-db-properties,remove-distribution-dataset-dirs,prepare-dataset-paths,export-dev-db-to-temp,create-and-export-demo-dataset,create-and-export-bootstrap-dataset,commit-distribution-dataset-dirs" />
	
	<target name="package" depends="prep-temp-dir,export-to-temp,delete-nondistribution-files,replace-foundation-references,remove-distribution-portions-of-build-file,add-doc-files,add-javadoc,zip-package"
			description="Cleans up the project, manipulates the contents slightly, and packs it up for distribution on the Kuali web site.">
    	<delete dir="${all.temp.directory}" verbose="false" />
	</target>
	
	<target name="delete-nondistribution-files" depends="init-additional-properties">
		<delete verbose="true">
			<fileset dir="${all.temp.directory}/kfs">
				<!-- remove the distribution build files -->
				<include name="build/properties/distribution.properties" />
				<!-- remove the check modularization build files -->
				<include name="build/properties/checkmodularization.properties" />
				<!-- files we do not have the authority to distribute -->
				<include name="build/svn*.jar" />         <!-- SVN libraries -->
				<include name="build/ganymed.jar" />      <!-- SVN helper library -->
				<include name="**/mysql*.jar" />          <!-- Mysql JDBC driver -->
				<include name="**/ojdbc*.jar" />          <!-- Oracle JDBC Driver -->
				<include name="test/lib/cobertura.jar" /> <!-- Cobertura code coverarage utility -->
			</fileset>
		</delete>
		<!-- Incomplete Maven Build Files -->
		<delete dir="${all.temp.directory}/kfs/m2" />
		<!-- Groovy script for packaging -->
		<delete dir="${all.temp.directory}/kfs/build/groovy" />
		<!-- Development database contents -->
		<delete dir="${all.temp.directory}/kfs/work/db/kfs-db/development" />
		<!-- Development impex files -->
		<delete verbose="true">
			<fileset dir="${all.temp.directory}/kfs/work/db">
				<exclude name="fieldsToEncrypt.properties" />
			</fileset>
		</delete>
		<delete dir="${all.temp.directory}/kfs/work/db/kfs-db/db-impex/export-to-svn" />
		<!-- Remove all the instance build files *except* for a few examples. -->
		<delete verbose="true">
			<fileset dir="${all.temp.directory}/kfs">
				<include name="*-build.properties" />
				<exclude name="dev-build.properties"/>
				<exclude name="dev2-build.properties"/>
				<exclude name="cnv-build.properties"/>
			</fileset>
		</delete>
	</target>

	<target name="remove-distribution-portions-of-build-file" depends="init-properties">
		<groovy src="build/groovy/distribution.groovy"/>
		<move file="${all.temp.directory}/kfs/build-foundation.tmp" 
			tofile="${all.temp.directory}/kfs/build-foundation.xml"/>
	</target>

	<target name="replace-foundation-references" depends="init-additional-properties">
		<!-- replace foundation URL references -->
		<replace dir="${all.temp.directory}/kfs" summary="true" >
			<include name="**/*.properties" />
			<include name="**/*.txt" />
			<include name="**/*.sh" />
			<include name="**/*.xml" />
			<!-- SVN -->
      		<replacefilter token="https://svn.kuali.org/repos/" value="" />
      		<replacefilter token="https://svn.kuali.org/repos" value="" />
      		<replacefilter token="https://test.kuali.org/svn/" value="" />
      		<replacefilter token="https://test.kuali.org/svn" value="" />
			<!-- misc -->
      		<replacefilter token="test.kc.kuali.org" value="localhost" />
      		<replacefilter token="jdbc:oracle:thin:@oraclerds.kfs.kuali.org:1521:KFS" value="jdbc:oracle:thin:@localhost:1521:ORCL" />
      		<replacefilter token="jdbc:mysql://test.db.kfs.kuali.org:3306" value="jdbc:mysql://localhost:3306" />
			<replacefilter token="license@kuali.org" value="" />
			<replacefilter token="@kuali.org" value="@localhost" />
      		<replacefilter token="../../development" value="../../demo" />
      		<replacefilter token="kfs-db/development" value="kfs-db/demo" />
      	</replace>
		<replace dir="${all.temp.directory}/kfs" summary="true" >
			<include name="test/unit/src/org/kuali/kfs/module/purap/**/*.java" />
      		<replacefilter token="https://test.kuali.org/kfs-reg" value="http://localhost:8080/kfs-dev" />
		</replace>
	</target>

	<target name="add-doc-files" depends="init-additional-properties">
		<!-- get the current revision numbers for each SVN path we are including in the export -->
		<svn svnkit="false" javahl="true">
			<info target="${basedir.safe}"
				  propPrefix="svn.info.kfs" verbose="true" />			
		</svn>
	    <!-- dump a file with the extracted tags -->
    	<echo file="${all.temp.directory}/kfs/release-details.txt">
KFS URL: ${svn.info.kfs.url} (@${svn.info.kfs.lastRev})
Date   : ${svn.info.kfs.lastDate}
    	</echo>	
	</target>

	<target name="add-javadoc" depends="init-additional-properties, make-javadoc">
		<!-- create javadoc zip -->
		<zip destfile="kfs-javadoc.zip" basedir="${doc.directory}" compress="true" />
		<!-- move javadoc zip -->
		<move file="kfs-javadoc.zip" todir="${all.temp.directory}/kfs"/>
		<!-- cleanup doc directory -->
		<delete dir="${doc.directory}" />
	</target>
	
	<target name="zip-package" depends="init-additional-properties">
	    <!-- zip it up -->
    	<zip destfile="${release.zip.name}" basedir="${all.temp.directory}/kfs" compress="true" />
	</target>
	<!-- END REMOVE FROM DISTRIBUTION -->
	
</project>
