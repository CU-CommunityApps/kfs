<!--
 Copyright 2007-2012 The Kuali Foundation
 
 Licensed under the Educational Community License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.opensource.org/licenses/ecl2.php
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!-- CONFIGURATION MANAGEMENT TARGETS 

Tasks in this file will not be deployed with the application.  Tasks that 
are intended for use only by Kuali Foundation developers.

-->
<project name="imported">
	<!-- dummy targets to keep validation happy -->
	<target name="init-properties" />
	<target name="init-make-references" />
	<target name="dist-local" />
	<target name="clean" />
	<target name="clean-all" />
	<target name="make-source" />
	<target name="build-eclipse-classpath" />
	<target name="extract-rice-libraries" />
	<target name="refresh-kfs-db" />

	<target name="init-additional-properties" depends="init-properties">
		<echo message="Reading Properties: ${properties.directory}/build-foundation.properties" />
		<property file="${properties.directory}/build-foundation.properties" />
		<echo message="Reading Properties: ${properties.directory}/distribution.properties" />
		<property file="${properties.directory}/distribution.properties" />
	</target>

	<target name="modularization-test" depends="init-additional-properties,make-source">
        <javac destdir="${war.classes.directory}" debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
            <classpath refid="compile.tests.classpath" />
            <src path="${test.infrastructure.source.directory}" />
            <src path="${test.unit.source.directory}" />
            <src path="${test.integration.source.directory}" />
        </javac>
        <copy todir="${war.classes.directory}">
            <fileset dir="${test.infrastructure.source.directory}" includes="${non.java.resources}" />
            <fileset dir="${test.unit.source.directory}" includes="${non.java.resources}" />
            <fileset dir="${test.integration.source.directory}" includes="${non.java.resources}" />
        </copy>
    	<java classname="org.kuali.kfs.sys.context.CheckModularization" fork="true" resultproperty="context.test.results">
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx2g" />
			<jvmarg value="-XX:MaxPermSize=256m" />
			<classpath>
				<pathelement location="${war.classes.directory}" />
				<path refid="compile.source.classpath" />
			</classpath>
		</java>
		<!--
 		<verifydesign design="work/src/design.xml">
			<path>
				<fileset dir="${war.classes.directory}/org/kuali/kfs" includes="**/*.class" excludes="**/*Test.class,**/*Fixture.class" />
      		</path>
    	</verifydesign>
		<condition property="context.test.failed" value="true">
			<equals arg1="${context.test.results}" arg2="1" />
		</condition>
		-->
	</target>

	<target name="check-modularization" depends="modularization-test">
		<fail if="context.test.failed" message="CheckModularization.java failed" />
  	</target>
  	  
	<target name="update-rice-dev" depends="update-rice-basic,extract-rice-libraries,build-eclipse-classpath,dist-local" />
  
	<target name="update-rice" depends="update-rice-dev,update-rice-extended" />
  
	<target name="update-rice-basic" depends="init-additional-properties,update-rice-server-war" />
  
	<target name="clean-rice-maven" depends="init-additional-properties" if="clean.rice">
        <maven goals="clean:clean" dir="${rice.project.directory}" />
	</target>
	
    <target name="update-rice-server-war" depends="init-additional-properties,clean-rice-maven">
        <maven goals="install" dir="${rice.project.directory}" />
    	<delete dir="${build.appserver.directory}" includes="${rice.server.war.file.name.prefix}*.war" />
        <copy file="${rice.project.directory}/${rice.web.module.name}/target/${rice.war.file.name}" 
        	  tofile="${build.appserver.directory}/${rice.server.war.file.name}" verbose="true" overwrite="true" failonerror="true"  />
    </target>
    
	<target name="update-rice-extended" depends="init-additional-properties,update-rice-kfs-dependencies,update-rice-licenses" />
  
	<target name="update-rice-kfs-dependencies" depends="init-additional-properties">
    	<delete verbose="true" failonerror="false">
      		<fileset dir="${dependencies.project.directory}">
      			<include name="rice-*${rice.version}-*.*" />
      			<include name="rice-*${kfs.rice.version}-*.*" />
      		</fileset>
    	</delete>
    	<maven goals="source:jar" dir="${rice.project.directory}" />
		<echo>
Copying Files from ${rice.project.directory}/**/target/rice*...
To: ${dependencies.project.directory}
Renaming from: rice-xxx-${rice.version}-xxxxx.jar
		 to  : rice-xxx-${kfs.rice.version}-xxxxx.zip
		</echo>
		<delete verbose="true" failonerror="false">
		    <fileset dir="build/rice-sources">
	  			<include name="rice-*-sources.jar" />
	  		</fileset>
		</delete>
    	<copy todir="build/rice-sources" verbose="true" overwrite="true" >
      		<fileset dir="${rice.project.directory}">
      			<include name="**/target/rice-*-sources.jar" />
      		</fileset>
       		<flattenmapper />
    	</copy>
	</target>
  
	<target name="update-rice-licenses" depends="init-additional-properties">
		<echo>
	*************************************************
		NEED TO UPDATE RICE LICENSE FILES???
	*************************************************
		</echo>
		<!--
    	<delete verbose="true" failonerror="false">
      		<fileset dir="${build.project.directory}" 
      				 includes="${rice.name}*${rice.output.licenses.suffix}" />
    	</delete>
    	<zip destfile="${build.project.directory}/${rice.name}-${kfs.rice.version}-licenses.zip" 
    		 basedir="${rice.project.directory}/${licenses.directory}" />
    		 -->
  	</target>

  	<macrodef name="maven">
    	<attribute name="goals" />
    	<attribute name="options" default="" />
        <attribute name="dir" default="" />
    	<sequential>
      		<java classname="org.codehaus.plexus.classworlds.launcher.Launcher" dir="@{dir}" fork="true" failonerror="true">
      		   	<jvmarg value="-Xmx768m" />
      		    <jvmarg value="-XX:MaxPermSize=384m" />
        		<arg line="@{options} @{goals}"/>
        		<sysproperty key="classworlds.conf" value="${maven.home.directory}/bin/m2.conf"/>
        		<sysproperty key="maven.home" value="${maven.home.directory}"/>
        		<sysproperty key="skipTests" value="true"/>
        		<sysproperty key="maven.surefire.skip" value="true"/>
        		<classpath>
          			<fileset dir="${maven.home.directory}/boot">
            			<include name="plexus-classworlds-*.jar"/>
          			</fileset>
        		</classpath>
      		</java>
    	</sequential>
  	</macrodef>

	 <typedef resource="org/tigris/subversion/svnant/svnantlib.xml">
	 	<classpath>
	 		<fileset dir="build">
	 			<include name="svn*.jar"/>
	 			<include name="ganymed.jar"/>
	 		</fileset>
	 	</classpath>
	 </typedef>
<!-- 
	<target name="package" depends="prep-temp-dir,checkout-projects,replace-foundation-references,unpack-and-remove-rice-licenses,add-doc-files,zip-package"
			description="Cleans up the project, manipulates the contents slightly, and packs it up for distribution on the Kuali web site.">
    	<delete dir="${all.temp.directory}" verbose="false" />
	</target>
 -->
	<target name="prep-temp-dir" depends="init-properties">
		<echo>Deleting contents of temp directory: ${all.temp.directory}</echo>
    	<delete>
    		<fileset dir="${all.temp.directory}">
    			<include name="**/*" />
    		</fileset>
    	</delete>
	</target>
	
	<target name="export-to-temp" depends="clean-all,prep-temp-dir">
		<echo>Exporting project to temp directory for packaging.</echo>
		<svn>
			<export srcPath="${basedir.safe}" destPath="${all.temp.directory}/kfs" />
		</svn>
	</target>

	<target name="set-temp-export-db-properties">
		<property name="datasource.ojb.platform" value="Oracle9i"/>
		<property name="datasource.url" value="jdbc:oracle:thin:@localhost:1521:ORCL"/>
		<property name="datasource.username" value="KFSTEMP"/>
		<property name="datasource.password" value="KFSTEMP"/>
		<property name="kfs.impex.import.targets" value="drop-schema create-schema import"/>
	</target>
	
	<target name="export-dev-db-to-temp" depends="set-temp-export-db-properties,init-additional-properties,init-make-references"> <!-- ,refresh-kfs-db -->
	</target>

	<target name="prepare-dataset-paths" depends="init-additional-properties">
		<!-- svn cp development to demo and bootstrap -->
		<if>
			<not><available file="${database.directory}/kfs-db/demo" type="dir" /></not>
			<then>
				<echo>Building copy of development repository for demo dataset.</echo>
				<svn>
					<copy srcPath="${database.directory}/kfs-db/development"
						 destPath="${database.directory}/kfs-db/demo"/>
				</svn>
			</then>
		</if>
		<if>
			<not><available file="${database.directory}/kfs-db/bootstrap" type="dir" /></not>
			<then>
				<echo>Building copy of development repository for bootstrap dataset.</echo>
				<svn>
					<copy srcPath="${database.directory}/kfs-db/development"
						 destPath="${database.directory}/kfs-db/bootstrap"/>
				</svn>
			</then>
		</if>
		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${database.directory}/kfs-db" message="Copying development datasource in preparation for release dataset creation."/>
		</svn>
	</target>
	
	<target name="create-demo-dataset" depends="export-dev-db-to-temp">
		<echo>Running Script to convert development database into demo database</echo>
		<echo>No changes at present - not running script.</echo>
		<!--
        <sql driver="${real.datasource.driver.class}"
             classpathref="database.drivers.classpath"
             url="${datasource.url}"
             userid="${datasource.username}"
             password="${datasource.password}"
	         keepformat="true"
	         delimitertype="row"
	         delimiter="/" print="true" 
   	 		 src="${demo.database.cleanup.script}" />
   	 	-->			
	</target>
	
	<target name="create-and-export-demo-dataset" depends="create-demo-dataset,export-demo-dataset" />
	
	<target name="export-demo-dataset" depends="set-temp-export-db-properties,init-additional-properties,init-make-references">
		<echo>No changes at present - not running export.</echo>
		<!-- Commenting out - no changes from development to demo at present 
		<svn>
			<info target="${basedir.safe}" />
		</svn>
		<echo>${svn.info.url}</echo>
		<ant dir="${impex.directory}/export-to-svn" inheritall="false">
			<target name="init" />
			<target name="export-db" />
			<target name="merge-export-to-svn" />
			<target name="check-merge-complete" />

			<property name="db.jdbc.url" value="${datasource.url}" />
			<property name="db.username" value="${datasource.username}" />
			<property name="db.schema" value="${datasource.username}" />
			<property name="db.password" value="${datasource.password}" />
			<property name="temp.dir" location="${all.temp.directory}/db-temp"/>
			<property name="checkout.dir" location="${database.directory}/kfs-db"/>
			<property name="data.svn.module" value="bootstrap" />
			<property name="svn.base" value="${svn.info.url}"/>
			<property name="data.svn.path" value="demo"/>
		</ant>
		<delete dir="${database.directory}/new_export" />
		<delete file="${database.directory}/merge.complete" />
		-->
	</target>

	<target name="create-bootstrap-dataset" depends="create-demo-dataset">
		<echo>Running Script to convert demo database into bootstrap database</echo>
        <sql driver="${real.datasource.driver.class}"
             classpathref="database.drivers.classpath"
             url="${datasource.url}"
             userid="${datasource.username}"
             password="${datasource.password}"
	         keepformat="true"
	         delimitertype="row" 
	         delimiter="/" print="true" 
   	 		 src="${bootstrap.database.cleanup.script}" />
	</target>

	<target name="create-and-export-bootstrap-dataset" depends="create-bootstrap-dataset,export-bootstrap-dataset" />
	
	<target name="export-bootstrap-dataset" depends="set-temp-export-db-properties,init-additional-properties,init-make-references">
		<svn>
			<info target="${basedir.safe}" />
		</svn>
		<echo>${svn.info.url}</echo>
		<ant dir="${impex.directory}/export-to-svn" inheritall="false">
			<target name="init" />
			<target name="export-db" />
			<target name="merge-export-to-svn" />
			<target name="check-merge-complete" />

			<property name="db.jdbc.url" value="${datasource.url}" />
			<property name="db.username" value="${datasource.username}" />
			<property name="db.schema" value="${datasource.username}" />
			<property name="db.password" value="${datasource.password}" />
			<property name="temp.dir" location="${all.temp.directory}/db-temp"/>
			<property name="checkout.dir" location="${database.directory}/kfs-db"/>
			<property name="data.svn.module" value="bootstrap" />
			<property name="svn.base" value="${svn.info.url}"/>
			<property name="data.svn.path" value="bootstrap"/>
		</ant>
		<delete dir="${database.directory}/new_export" />
		<delete file="${database.directory}/merge.complete" />
	</target>
	
	
	<target name="remove-distribution-dataset-dirs" depends="init-additional-properties">
		<if>
			<available file="${database.directory}/kfs-db/demo" type="dir" />
			<then>
				<svn>
					<delete dir="${database.directory}/kfs-db/demo" force="true" />
				</svn>
			</then>
		</if>
		<if>
			<available file="${database.directory}/kfs-db/bootstrap" type="dir" />
			<then>
				<svn>
					<delete dir="${database.directory}/kfs-db/bootstrap" force="true" />
				</svn>
			</then>
		</if>
		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${database.directory}/kfs-db" message="Removing distribution datasource directories."/>
		</svn>
	</target>

	<target name="commit-distribution-dataset-dirs" depends="init-additional-properties">
		<svn username="${svn.username}" password="${svn.password}">
			<commit dir="${database.directory}/kfs-db" message="Adding distribution datasource directories."/>
		</svn>
	</target>
	
<!-- 
TODO:

remove all Rice export sections
	Groovy script in file - use special comment markers:
		REMOVE FROM DISTRIBUTION
		END REMOVE FROM DISTRIBUTION
remove reg-build / ptd / ptds
look for indiana.edu / kuali.org references in entire project

Check through upgrade scripts for new tables which need to not be purged in the bootstrap process.

Target: run demo cleanup
Target: export-demo-db
Target: run bootstrap cleanup
Target: export-bootstrap-db

delete of development dataset before packaging
deletion of DB drivers before packaging

Update replacements
	@kuali.org ==> @localhost
	https://test.kuali.org/svn/ ==> ""
	kfs-${build.environment}-incident@kuali.org
	jdbc:oracle:thin:@oraclerds.kfs.kuali.org:1521:KFS
	jdbc:mysql://test.db.kfs.kuali.org:3306
	https://svn.kuali.org/repos
	http://test.kc.kuali.org/kc-trunk
	test.kc.kuali.org
	license@kuali.org ==> localhost
	indiana.edu

remove the Maven build files

add sample-build.properties - copy from cnv?

knoreceipt-l@indiana.edu
 -->
	<target name="replace-foundation-references" depends="init-additional-properties">
		<delete verbose="true">
			<fileset dir="${all.temp.directory}/kfs">
				<!-- remove the "build-foundation" build file -->
				<include name="build-foundation.xml" />
				<include name="build/properties/build-foundation.properties" />
				<!-- remove the distribution build files -->
				<!-- both these files and files we do not have the authority to distribute ourselves -->
				<include name="${build.distribution.directory}/build.xml" />
				<include name="build/properties/distribution.properties" />
				<include name="work/db/upgrades/*/temp-*/**" />
				<include name="build/svn*.jar" />
				<include name="build/ganymed.jar" />
				<include name="build/drivers/*.jar" />
			</fileset>
		</delete>
	    <!-- remove foundation-only targets import from main build file -->
    	<replace file="${all.temp.directory}/kfs/build.xml">
      		<replacefilter token="&lt;import file=&quot;build-foundation.xml&quot;/&gt;" value="" />
      		<replacefilter token="&lt;import file=&quot;build-foundation.xml&quot;/&gt;" value="" />
    		<replacefilter token="&lt;format property=&quot;build.version&quot; pattern=&quot;MM/dd/yyyy hh:mm aa&quot; /&gt;" value="&lt;format property=&quot;build.version&quot; pattern=&quot;'KFS ${release.version.number}' MM/dd/yyyy hh:mm aa&quot; /&gt;" />
    	</replace>
		<!-- replace foundation URL references -->
		<replace dir="${all.temp.directory}">
			<include name="impex/*.properties*" />
			<include name="kfs/build/external/user/kfs-build.properties" />
			<include name="kfs/build/properties/*.properties" />
			<!-- SVN -->
      		<replacefilter token="https://svn.kuali.org/repos/" value="" />
			<!-- database -->
      		<replacefilter token="mysql.datasource.url=jdbc:mysql://esdbk01.uits.indiana.edu:3306/$${datasource.username}" 
    		     value="mysql.datasource.url=jdbc:mysql://localhost:3306/$${datasource.username}" />
      		<replacefilter token="oracle.datasource.url=jdbc:oracle:thin:@esdbk02.uits.indiana.edu:1521:KUALI" 
    		     value="oracle.datasource.url=jdbc:oracle:thin:@localhost:1521:XE" />
			<!-- misc -->
			<replacefilter token="feedback.link.url=https://test.kuali.org/jira/secure/CreateIssue.jspa?pid=10091&amp;amp;issuetype=1" value="feedback.link.url=" />
			<replacefilter token="licensing.contact.email=license@kuali.org" value="licensing.contact.email=" />
      	</replace>
		<move file="${all.temp.directory}/kfs/${build.distribution.directory}/*-impex-build*.properties"
			  todir="${all.temp.directory}" failonerror="false" />
	</target>

	<target name="add-doc-files" depends="init-additional-properties">
		<!-- get the current revision numbers for each SVN path we are including in the export -->
		<echo>${kuali.svn.root}/${kfs.dataset.svn.module}/${kfs.dataset.svn.path}</echo>
		<svn>
			<info target="${basedir.safe}"
				  propPrefix="svn.info.kfs" verbose="true" />			
		</svn>
	    <!-- dump a file with the extracted tags -->
    	<echo file="${all.temp.directory}/release-details.txt">
      		KFS URL: ${kfs.svn.module}/${kfs.svn.path} (@${svn.info.kfs.lastRev})
    	</echo>	
	</target>
	
	<target name="zip-package" depends="init-additional-properties">
	    <!-- zip it up -->
    	<zip destfile="${release.zip.name}" basedir="${all.temp.directory}" compress="true" />
	</target>

</project>
