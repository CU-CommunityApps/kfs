# 1. PROJECT PROPERTIES

# directories

# determines where the build will look for your database drivers
drivers.directory=/java/drivers

# determines where the build will look for your tomcat application server
appserver.home=/java/servers/apache-tomcat-5.5.20

# the base directory for external configuration files and work directories
external.config.directory=/opt
base.security.directory=${external.config.directory}/sa_forms/java
base.settings.directory=${external.config.directory}/j2ee
base.logs.directory=${external.config.directory}/logs
base.work.directory=${external.config.directory}/work
base.deploy.directory=${external.config.directory}/ears

# paths used for pulling in rice changes using the KFS Ant script
projects.directory=/java/projects
maven.home.directory=/java/tools/maven

licenses.directory=licenses
work.directory=work
source.directory=${work.directory}/src
database.directory=${work.directory}/db
webroot.directory=${work.directory}/web-root
help.directory=${webroot.directory}/static/help
webinf.directory=${webroot.directory}/WEB-INF
tags.directory=WEB-INF/tags
classes.directory=${webinf.directory}/classes
lib.directory=${webinf.directory}/lib
metainf.directory=${webroot.directory}/META-INF
test.infrastructure.source.directory=test/infrastructure/src
test.unit.source.directory=test/unit/src
test.integration.source.directory=test/integration/src
test.lib.directory=test/lib

build.directory=build
build.external.directory=${build.directory}/external
build.appserver.directory=${build.external.directory}/appserver
build.user.directory=${build.external.directory}/user
build.work.directory=${build.external.directory}/work
build.project.directory=${build.directory}/project
build.plugin.directory=${build.external.directory}/plugin

all.temp.directory=${build.directory}/temp
war.directory=${build.directory}/war
war.classes.directory=${war.directory}/WEB-INF/classes
test.directory=${build.directory}/test
test.classes.directory=${test.directory}/classes
test.xml.results.directory=${test.directory}/xml
deployDir=${build.directory}
test.html.results.directory=${deployDir}/test
doc.directory=${build.directory}/doc
dddoc.directory=${build.directory}/doc-dd-tags
rice.datadictionary.directory=${build.directory}/rice-datadictionary
plugin.directory=${all.temp.directory}/plugin
plugin.classes.directory=${plugin.directory}/classes
plugin.lib.directory=${plugin.directory}/lib

# files

context.file=context.xml
carol.file=carol.properties
log4j.file=log4j.properties
security.file=security.properties
configuration.file=configuration.properties
p6spy.file=spy.properties
web.file=web.xml
log4j.library.file=log4j-1.2.14.jar
spring.ide.support.file=.springBeans
non.java.resources=**/*.properties,**/*.dtd,**/*.xml,**/*.html,**/*.xsd,**/*.jasper,**/*.jrxml,META-INF/*

# database independence

mysql.ojb.platform=MySQL
oracle.ojb.platform=Oracle9i
datasource.ojb.platform=${oracle.ojb.platform}
mysql.driver.class=com.mysql.jdbc.Driver
oracle.driver.class=oracle.jdbc.driver.OracleDriver
p6spy.driver.class=com.p6spy.engine.spy.P6SpyDriver
mysql.ojb.sequence.manager=org.apache.ojb.broker.platforms.KualiMySQLSequenceManagerImpl
oracle.ojb.sequence.manager=org.apache.ojb.broker.util.sequence.SequenceManagerNextValImpl
mysql.workflow.datasource.platform=org.kuali.rice.database.platform.MySQLPlatform
oracle.workflow.datasource.platform=org.kuali.rice.database.platform.OraclePlatform

# miscellaneous build.xml configuration

compile.min.memory=40M
compile.max.memory=256M

run.tests.min.memory=40M
run.tests.max.memory=1024M
run.tests.max.permsize=128M

tests.includes=**/*Test.java
tests.startup.class=ContinuousIntegrationStartup
tests.shutdown.class=ContinuousIntegrationShutdown
tests.non.java.resources=${non.java.resources},**/*.txt

javadoc.max.memory=512M

plugin.lib.excludes=rice-kew-*.jar,rice-ksb-*.jar,rice-core-*.jar,rice-shared-*.jar,commons-logging*.jar,spring-2*.jar

# application dependencies

cas.application=cas
rice.application=kr
workflow.application=en
ksb.application=ksb


# 2. INSTITUTION PROPERTIES

appserver.lib.dir=${appserver.home}/common/lib
appserver.classes.dir=${appserver.home}/common/classes
appserver.deploy.dir=${appserver.home}/webapps
appserver.config.dir=${appserver.home}/conf
appserver.localhost.dir=${appserver.config.dir}/Catalina/localhost
appserver.work.dir=${appserver.home}/work/Catalina/localhost
# tells the build what the base url is for the tomcat instance where the application will be deployed
appserver.url=http://localhost:8080/

# determines what ${build.environment} the KualiConfigurationService considers your production environment
production.environment.code=prd
# used by the build to configure ojb and determine the appropriate driver and KualiDBPlatform implementations to use
datasource.ojb.platform=Oracle9i
# specify the number of connections in the pool
datasource.pool.size=25
# specify the number of prepared statements cached per connection
datasource.maximum.cached.preparedstatements=25
# specify the connection timeout
datasource.connection.timeout=10000
# specify the query used to validate connections as they're pulled from the pool
datasource.validating.query=select 1 from dual
# used in datasource configuration to force transactions to timeout after they've run too long
transaction.timeout=${datasource.connection.timeout}
# determines the mail relay server used by MailService
mail.relay.server=
# from email address for mail sent by the batch framework (JobListener and other) and to email address for job failure messages
batch.mailing.list=
# the quartz cron expression for the scheduleJobTrigger
batch.schedule.cron.expression=00 00 23 ? * *
# to/from email address for mail sent by the incident reporting framework (KualiExceptionIncident, etc.)
incident.mailing.list=
# determines how frequently the logging framework (Log4jConfigurer) will check for changes to log4j.properties
log4j.reload.minutes=5
# determines when the MemoryMonitor considers the appplication to have exceeded reasonable memory usage
memory.monitor.threshold=.85
# determines whether quartz (SchedulerService and scheduleJob) should be used for batch job scheduling and execution - impacts whether the batch scheduling ui works
use.quartz.scheduling=true
# determines whether the institutional user data is ever editable on the user document
maintain.users.locally=true
# determines whether the institutional user data is ever editable on the user document
maintain.kfs.users.locally=true
# determines whether cas requires that the application be secured via ssl
require.https=false
# determines whether the password field appears on the cas login screen and is validated
# and controls the appearance of the password field on the user document when maintain.users.locally is true
validate.password=false

# the files that define the spring context for the application - note that further configuration files may be specified in the module definitions
core.spring.source.files=SpringRiceBeans.xml,\
org/kuali/kfs/sys/spring-sys.xml,\
org/kuali/kfs/coa/spring-coa.xml,\
org/kuali/kfs/fp/spring-fp.xml,\
org/kuali/kfs/gl/spring-gl.xml,\
org/kuali/kfs/pdp/spring-pdp.xml,\
org/kuali/kfs/vnd/spring-vnd.xml,\
org/kuali/kfs/integration/SpringBeansModules.xml
optional.module.spring.source.files=,\
org/kuali/kfs/module/ar/spring-ar.xml,\
org/kuali/kfs/module/bc/spring-bc.xml,\
org/kuali/kfs/module/cam/spring-cam.xml,\
org/kuali/kfs/module/cab/spring-cab.xml,\
org/kuali/kfs/module/cg/spring-cg.xml,\
org/kuali/kfs/module/ec/spring-ec.xml,\
org/kuali/kfs/module/ld/spring-ld.xml,\
org/kuali/kfs/module/purap/spring-purap.xml
institution.spring.source.files=
spring.source.files=${core.spring.source.files}${optional.module.spring.source.files}${institution.spring.source.files}

# the files that are included in the application spring context for unit testing - Core
core.spring.test.files=SpringBeansTest.xml,org/kuali/kfs/sys/spring-sys-test.xml
# the files that are included in the application spring context for unit testing - Institution specific
institution.spring.test.files=
# the files that are included in the application spring context for unit testing - All
spring.test.files=${core.spring.test.files}${institution.spring.test.files}
# the files that are included in the application spring context when running inside of a workflow plugin
spring.plugin.files=SpringRicePluginBeans.xml
# the directory where secure application property files are located
security.directory=${base.security.directory}/${build.environment}/${ant.project.name}
# the single secure property file currently used by the application
security.property.file=${security.directory}/${security.file}
# used by the DemostrationGradeEncryptionService and the workflow EncryptionService to encrypt / decrypt data in the database
encryption.key=7IC64w6ksLU
# the directory that contains the non-secure property files that are nonetheless external to the deployed application
settings.directory=${base.settings.directory}/${build.environment}/${ant.project.name}
# the property file that contains the log4j configuration for the application
log4j.settings.file=${settings.directory}/${log4j.file}
# the core configuration property files that should be available in the KualiConfigurationService context, along with configuration.properties
core.property.files=classpath:ApplicationResources.properties,file:${security.property.file}
# the institution specific configuration property files that should be available in the KualiConfigurationService context, along with configuration.properties
institution.property.files=
# all the configuration property files that should be available in the KualiConfigurationService context, along with configuration.properties
property.files=${core.property.files}${institution.property.files}
# the configuration property files that should be added to the KualiConfigurationService context for unit testing
core.property.test.files=classpath:test-configuration.properties
# the configuration property files that should be added to the KualiConfigurationService context for unit testing
institution.property.test.files=
# the configuration property files that should be added to the KualiConfigurationService context for unit testing
property.test.files=${core.property.test.files}${institution.property.test.files}
# the file that lists the tables and columns that should be processed by the PostDataLoadEncryptionStep
encrypt.attributes.properties.file=fieldsToEncrypt.properties
# the core files that define the struts context for the application
core.struts.config.files=/WEB-INF/struts-config.xml
# the institution specific files that define the struts context for the application
institution.struts.config.files=
# all the files that define the struts context for the application
struts.config.files=${core.struts.config.files}${institution.struts.config.files}
# the core files containing user messages that will be displayed via struts tags in jsps
core.struts.message.resources=ApplicationResources
# the institution specific files containing user messages that will be displayed via struts tags in jsps
institution.struts.message.resources=
# all the files containing user messages that will be displayed via struts tags in jsps
struts.message.resources=${core.struts.message.resources}${institution.struts.message.resources}
# the core classes that wrap java constants for jsps and tags (see ApplicationInitializeListener)
core.jstl.constants.classnames=org.kuali.kfs.sys.KFSConstants,org.kuali.kfs.gl.GeneralLedgerConstants,org.kuali.kfs.module.cg.CGConstants,org.kuali.kfs.module.purap.PurapConstants,org.kuali.kfs.module.bc.BCConstants,org.kuali.kfs.module.ec.EffortConstants,org.kuali.kfs.module.cam.CamsConstants
# the institution specific classes that wrap java constants for jsps and tags (see ApplicationInitializeListener)
institution.jstl.constants.classnames=
# all the classes that wrap java constants for jsps and tags (see ApplicationInitializeListener)
jstl.constants.classnames=${core.jstl.constants.classnames}${institution.jstl.constants.classnames}
# used to determine what class from the above (jstl.constants.classnames) list is bound to the "Constants" name in JSTL
jstl.constants.main.class=org.kuali.kfs.sys.KFSConstants
# the core javascript files that should be available to every page in the application
core.javascript.files=kr/scripts/core.js,kr/scripts/dhtml.js,kr/scripts/my_common.js,kr/scripts/jscalendar-1.0/calendar.js,\
kr/scripts/jscalendar-1.0/lang/calendar-en.js,kr/scripts/jscalendar-1.0/calendar-setup.js,\
dwr/engine.js,dwr/util.js,dwr/interface/UserService.js,kr/scripts/objectInfo.js
# the institution specific javascript files that should be available to every page in the application
institution.javascript.files=
# all the javascript files that should be available to every page in the application
javascript.files=${core.javascript.files}${institution.javascript.files}
# the core css files that should be available to every page in the application
core.css.files=kr/css/kuali.css,kr/scripts/jscalendar-1.0/calendar-win2k-1.css
# the institution specific css files that should be available to every page in the application - Institution specific
institution.css.files=
# all the css files that should be available to every page in the application
css.files=${core.css.files}${institution.css.files}
# the javascript files that should be available to the portal
portal.javascript.files=kr/scripts/my_common.js
# the css files that should be available to every page in the application
portal.css.files=css/portal.css

# used as the working deployment directory by the dist target
deploy.working.directory=${base.deploy.directory}/${build.environment}/${ant.project.name}
# the directory containing the log files output by the application
logs.directory=${base.logs.directory}/${build.environment}/${ant.project.name}
# the working directory that is external to the application
external.work.directory=${base.work.directory}/${build.environment}/${ant.project.name}
# the base working directory for storage of note-associated attachments that are uploaded by users
attachments.directory=${external.work.directory}/attachments
# the base working directory for storage of batch input files
staging.directory=${external.work.directory}/staging
# a directory for temporary file storage, e.g. during pdf generation
temp.directory=${external.work.directory}/temp
# the base working directory for oltp and batch report generation
reports.directory=${external.work.directory}/reports

# the base url of the application
application.url=${appserver.url}${ant.project.name}-${build.environment}
# the base url for environment-based static content that is external to the application
htdocs.url=${appserver.url}${ant.project.name}/${build.environment}/
# the base url for the logs directory, if accessible via the web
htdocs.logs.url=${htdocs.url}logs/
# the base urls for the staging directory, if accessible via the web
htdocs.staging.url=${htdocs.url}staging/
# the base url for static content like images and help that could reside within the application or be maintained by other group(s) on other server(s)
externalizable.static.content.url=${application.url}/static
# the base url for help content
externalizable.help.url=${externalizable.static.content.url}/help/
# the base url for images that can reside outside the application
externalizable.images.url=${externalizable.static.content.url}/images/
# the base url for xml (xsd, xsl, etc.) related files that can reside outside the application
externalizable.xml.url=${externalizable.static.content.url}/xml/

# rice & workflow
# determines whether the workflow processes that would normally be performed asynchronously are asynchronous (async) or are synchronous instead
rice.message.delivery=async
# how many times the service bus will try to send a message when it is encountering an exception that may be due to a resource outage, for example
rice.route.queue.max.retry.attempts=3
# the length of time the service bus will wait before retrying after each failed attempt to send a message
rice.route.queue.time.increment=1000
# the number of threads available to process service bus messages, i.e. deal with queued workflow documents
rice.thread.pool.size=20

# the files that define the struts context for the rice struts module
rice.struts.config.files=/kr/WEB-INF/struts-config.xml
# the files that define the struts context for the workflow struts module
rice.workflow.struts.config.files=/en/WEB-INF/struts-config.xml
# the path to the file containing the log4j configuration for workflow
rice.workflow.log4j.settings.path=${log4j.settings.file}
# the files that define the struts context for the ksb struts module
rice.ksb.struts.config.files=/ksb/WEB-INF/struts-config.xml

# the directory where attachments uploaded through the workflow ui are stored
rice.workflow.attachment.directory=${attachments.directory}
# the directory where the xml files that define your workflow data should be stored when they are uploaded
rice.workflow.xml.directory=${staging.directory}/workflow
# the frequency wih which workflow checks for new files in the xml directory
rice.workflow.xml.poll.interval.secs=30
# the length of time workflow waits to do the first check of the xml directory when the application starts up
rice.workflow.xml.initial.delay.secs=10

# globally disable or enable the outbox (screen to which there is a link in the action list that shows the documents a user has taken action on)
rice.workflow.actionlist.outbox=false

# the base url for the rice struts module
rice.url=${application.url}/${rice.application}
# the base url for rice images that can reside outside the application
rice.externalizable.images.url=${application.url}/${rice.application}/static/images/
# the base url for the service bus struts module
rice.ksb.url=${application.url}/${ksb.application}
# the workflow deployment environment that this deployment of the application should use (can only differ from ${build.environment} if ${rice.use.standalone.workflow} is true)
rice.workflow.build.environment=${build.environment}
# the base url for the workflow struts module or the workflow application on the central server
rice.workflow.url=${application.url}/${workflow.application}

# are multiple applications at your institution using workflow, and do you therefore point to a central workflow deployment that they all use?
# note, many of the properties prefixed by "rice.workflow" above will not apply if this is set to true, e.g. xml polling configuration, log4j settings file, etc.
rice.use.standalone.workflow=false

# settings for the datasource used by embedded workflow when usng a standalone workflow server
rice.workflow.datasource.username=${datasource.username}
rice.workflow.datasource.password=${datasource.password}
rice.workflow.datasource.pool.size=${datasource.pool.size}
rice.workflow.datasource.connection.timeout=${datasource.connection.timeout}
rice.workflow.datasource.validating.query=${datasource.validating.query}
rice.workflow.datasource.maximum.cached.preparedstatements=${datasource.maximum.cached.preparedstatements}

# 3. CONFIGURATION MANAGEMENT PROPERTIES

rice.name=rice
rice.kns.name=kns
rice.version=0.9.4-SNAPSHOT
rice.output.directory=target
rice.output.directories=*/${rice.output.directory}/
rice.output.file.prefix=${rice.name}*
rice.output.lib.suffix=.jar
rice.output.web.suffix=-web.zip
rice.output.licenses.suffix=-licenses.zip
rice.output.src.suffix=-sources.jar
rice.output.doc.suffix=-javadoc.jar
rice.excludes=kcb*/**/**,ken*/**/**,kim*/**/**,kom*/**/**,server*/**/**,test*/**/**
rice.output.classes.directories=${rice.output.directories}classes/**/**
dependencies.project.directory=${projects.directory}/kfs-dependencies
rice.project.directory=${projects.directory}/${rice.name}
rice.sampleapp.directory=${rice.project.directory}/server/src/main/webapp


# 4. RELEASE PACKAGING PROPERTIES

release.zip.name=../kfs-release-2-2.zip
release.kfs.cvs.module=kuali_project
release.database.cvs.module=kfs-cfg-dbs
release.impex.tool.cvs.module=kul-cfg-dbs
release.rice.cvs.module=${rice.name}
release.patches.dir=patches

release.kfs.cvs.tag=kfs-release-2-2-tg
release.demo.dataset.cvs.tag=kfs-release-2-2-demo-tg
release.bootstrap.dataset.cvs.tag=kfs-release-2-2-bootstrap-tg
release.impex.tool.cvs.tag=kfs-release-2-2-tg
release.rice.cvs.tag=kfs-release-2-2-tg

release.cvs.root=
release.cvs.password=


# 5. DATA DICTIONARY SPRING SUPPORT PROPERTIES
spring.ide.support.file.prefix=<?xml version="1.0" encoding="UTF-8"?>\
\n<beansProjectDescription>\
\n\t<configExtensions>\
\n\t\t<configExtension>xml</configExtension>\
\n\t</configExtensions>\
\n\t<configs>
spring.ide.support.file.datadictionary=\
\n\t</configs>\
\n\t<configSets>\
\n\t\t<configSet>\
\n\t\t\t<name>Data Dictionary</name>\
\n\t\t\t<allowBeanDefinitionOverriding>true</allowBeanDefinitionOverriding>\
\n\t\t\t<incomplete>false</incomplete>\
\n\t\t\t<configs>
spring.ide.support.file.services=\
\n\t\t\t</configs>\
\n\t\t</configSet>\
\n\t\t<configSet>\
\n\t\t\t<name>Services</name>\
\n\t\t\t<allowBeanDefinitionOverriding>true</allowBeanDefinitionOverriding>\
\n\t\t\t<incomplete>false</incomplete>\
\n\t\t\t<configs>
spring.ide.support.file.suffix=\
\n\t\t\t</configs>\
\n\t\t</configSet>\
\n\t</configSets>\
\n\t<springVersion>2.0</springVersion>\
\n</beansProjectDescription>
spring.ide.support.file.line.prefix=\
\n\t\t\t<config>
spring.ide.support.file.line.suffix=</config>
spring.ide.support.datadictionary.files=**/datadictionary/**/*.xml