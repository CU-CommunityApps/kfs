
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.kuali.kfs.module.external.kc.service.impl;


import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.xml.namespace.QName;

import org.kuali.kfs.integration.cg.ContractsAndGrantsConstants;
import org.kuali.kfs.integration.cg.ContractsAndGrantsUnit;
import org.kuali.kfs.integration.cg.dto.HashMapElement;
import org.kuali.kfs.module.external.kc.KcConstants;
import org.kuali.kfs.module.external.kc.service.ExternalizableBusinessObjectService;
import org.kuali.kfs.module.external.kc.webService.InstitutionalUnitService;
import org.kuali.kfs.module.external.kc.webService.InstitutionalUnitSoapService;
import org.kuali.kfs.sys.KFSConstants;
import org.kuali.rice.kns.bo.ExternalizableBusinessObject;

/**
 * This class was generated by Apache CXF 2.2.10
 * Thu Sep 30 05:29:28 HST 2010
 * Generated source version: 2.2.10
 * 
 */
                      
public class UnitServiceImpl implements ExternalizableBusinessObjectService {
    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(UnitServiceImpl.class);     
     
    //@Override
    public ExternalizableBusinessObject findByPrimaryKey(Map primaryKeys) {
        InstitutionalUnitSoapService ss = new InstitutionalUnitSoapService();
        InstitutionalUnitService port = ss.getInstitutionalUnitServicePort();  
        ContractsAndGrantsUnit unitDTO  = port.getUnit((String)primaryKeys.get("unitNumber"));
        return unitDTO;        
    }


    //@Override
    public Collection findMatching(Map fieldValues) {
        java.util.List <HashMapElement> hashMapList = new ArrayList<HashMapElement>();

        for (Iterator i = fieldValues.entrySet().iterator(); i.hasNext();) {
            Map.Entry e = (Map.Entry) i.next();

            String key = (String) e.getKey();
            String val = (String) e.getValue();

            if ( KcConstants.Unit.KC_ALLOWABLE_CRITERIA_PARAMETERS.contains(key)  && (val.length() > 0)) {
                HashMapElement hashMapElement = new HashMapElement();
                hashMapElement.setKey(key);
                hashMapElement.setValue(val); 
                hashMapList.add(hashMapElement);
            }
        }
        InstitutionalUnitSoapService ss = new InstitutionalUnitSoapService();
        InstitutionalUnitService port = ss.getInstitutionalUnitServicePort();  
        List lookupUnitsReturn  = port.lookupUnits( hashMapList);
        return lookupUnitsReturn;
    }

 }
