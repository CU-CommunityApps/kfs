/*
 * Copyright 2010 The Kuali Foundation.
 *
 * Licensed under the Educational Community License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/ecl2.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.kfs.module.external.kc.service.impl;

import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import javax.xml.ws.WebServiceException;

import org.kuali.kfs.module.external.kc.KcConstants;
import org.kuali.kfs.module.external.kc.businessobject.LetterOfCreditFundGroup;
import org.kuali.kfs.module.external.kc.dto.AwardBasisOfPaymentDTO;
import org.kuali.kfs.module.external.kc.service.ExternalizableBusinessObjectService;
import org.kuali.kfs.module.external.kc.service.KfsService;
import org.kuali.kfs.module.external.kc.util.GlobalVariablesExtractHelper;
import org.kuali.kfs.module.external.kc.webService.AwardPaymentWebSoapService;
import org.kuali.kra.external.awardpayment.AwardPaymentWebService;
import org.kuali.rice.core.api.resourceloader.GlobalResourceLoader;
import org.kuali.rice.krad.bo.ExternalizableBusinessObject;

/**
 * This class was generated by Apache CXF 2.2.10
 * Thu Sep 30 05:29:28 HST 2010
 * Generated source version: 2.2.10
 *
 */

public class LetterOfCreditFundGroupServiceImpl implements ExternalizableBusinessObjectService {
    protected static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(LetterOfCreditFundGroupServiceImpl.class);

    protected AwardPaymentWebService getWebService() {
        // first attempt to get the service from the KSB - works when KFS & KC share a Rice instance
        AwardPaymentWebService awardPaymentWebService = (AwardPaymentWebService) GlobalResourceLoader.getService(KcConstants.AwardPayment.SERVICE);

        // if we couldn't get the service from the KSB, get as web service - for when KFS & KC have separate Rice instances
        if (awardPaymentWebService == null) {
            LOG.warn("Couldn't get AwardWebService from KSB, setting it up as SOAP web service - expected behavior for bundled Rice, but not when KFS & KC share a standalone Rice instance.");
            AwardPaymentWebSoapService ss =  null;
            try {
                ss = new AwardPaymentWebSoapService();
            }
            catch (MalformedURLException ex) {
                LOG.error("Could not intialize AwardPaymentWebSoapService: " + ex.getMessage());
                throw new RuntimeException("Could not intialize AwardPaymentWebSoapService: " + ex.getMessage());
            }
            awardPaymentWebService = ss.getAwardPaymentWebServicePort();
        }

        return awardPaymentWebService;
    }

    @Override
    public ExternalizableBusinessObject findByPrimaryKey(Map primaryKeys) {
        //use the proposal number as its the awardId on the KC side.
        AwardBasisOfPaymentDTO dto  = this.getWebService().getBasisOfPayment((String) primaryKeys.get("letterOfCreditFundGroupCode"));
        return fundGroupFromDTO(dto);
    }

    @Override
    public Collection findMatching(Map fieldValues) {
        AwardBasisOfPaymentDTO criteria = new AwardBasisOfPaymentDTO();
        List<AwardBasisOfPaymentDTO> result = null;
        criteria.setBasisOfPaymentCode((String) fieldValues.get("letterOfCreditFundGroupCode"));
        criteria.setDescription((String) fieldValues.get("letterOfCreditFundGroupDescription"));

        try {
          result  = this.getWebService().getMatchingBasisOfPayments(criteria);
        } catch (WebServiceException ex) {
            GlobalVariablesExtractHelper.insertError(KcConstants.WEBSERVICE_UNREACHABLE, KfsService.getWebServiceServerName());
        }

        List<LetterOfCreditFundGroup> basises = new ArrayList<LetterOfCreditFundGroup>();
        if (result != null) {
            for (AwardBasisOfPaymentDTO dto : result) {
                basises.add(fundGroupFromDTO(dto));
            }
        }
        return basises;
    }

    protected LetterOfCreditFundGroup fundGroupFromDTO(AwardBasisOfPaymentDTO basis) {
        LetterOfCreditFundGroup fundGroup = new LetterOfCreditFundGroup();
        fundGroup.setLetterOfCreditFundGroupCode(basis.getBasisOfPaymentCode());
        fundGroup.setLetterOfCreditFundGroupDescription(basis.getDescription());
        return fundGroup;
    }
 }
