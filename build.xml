<?xml version="1.0"?>
<project name="kuali" default="prepare-local-deployment" basedir=".">
	<!-- run the help task to view usage instructions -->
	<target name="prepare-local-configuration" depends="clean-local-configuration" description="Prepare local configuration files for 'dev' environment on development workstation">
		<copy file="${build.config.directory}/${oracle.library.file}" todir="${appserver.lib.directory}" overwrite="true"/>
		<copy todir="${settings.directory}" overwrite="true">
			<fileset dir="${build.settings.directory}"/>
		</copy>
		<copy todir="${security.directory}" overwrite="true">
			<fileset dir="${build.security.directory}"/>
		</copy>
		<copy todir="${logs.directory}" overwrite="true">
			<fileset dir="${build.logs.directory}"/>
		</copy>
	</target>
	
    <target name="prepare-local-deployment" if="is.local.build" depends="filter" description="Prepare tokenized resources and deploy tomcat context file on development workstation">
    	<copy file="${metainf.directory}/${tomcat.context.file}" tofile="${appserver.config.directory}/${ant.project.name}-${environment}.xml" overwrite="true"/>
	</target>
	
	<target name="dist" depends="clean,make-source" description="Build war and for remote deployment">
		<copy todir="${war.directory}">
			<fileset dir="${webroot.directory}" excludes="WEB-INF/classes/**/**"/>
		</copy>
		<jar jarfile="${ant.project.name}-${environment}.war" basedir="${war.directory}" compress="false"/>
    </target>
	
	<target name="test-all" depends="test" description="Run all project tests and format results">
		<fileset id="test.fileset" refid="all.tests.fileset"/>
		<antcall target="test"/>
	</target>

    <target name="test-fast" depends="test" description="Run fast project tests and format results">
		<fileset id="test.fileset" refid="fast.tests.fileset"/>
		<antcall target="test"/>
    </target>
	
	<target name="clean" depends="clean-local-deployment" description="Remove all build output">
    	<delete dir="${metainf.directory}"/>
		<delete file="${webinf.directory}/${web.xml.file}"/>
		<delete>
			<fileset dir="${source.directory}" includes="${tokenized.source.files}"/>
    	</delete>
		<delete file="${test.directory}/${test.spring.datasource.file}"/>
		<delete dir="${war.directory}"/>
		<delete dir="${test.directory}"/>
        <delete>
			<fileset dir=".">
				<include name="${ant.project.name}-*.war"/>
			</fileset>
		</delete>
	</target>
	
	<target name="echo-properties" depends="init-filter-set" description="Execute ant echoproperties task, thereby printing out all the properties that have been set">
		<echoproperties/>
	</target>
	
	<target name="init-local-configuration">
		<property name="environment" value="dev"/>
		<echo message="Set environment property equal to 'dev'"/>
	</target>

	<target name="init-user-properties">
    	<property file="${user.home}/${ant.project.name}-build.properties"/>
		<echo message="Loaded properties in ${user.home}/${ant.project.name}-build.properties"/>
	</target>

	<target name="init-project-properties" depends="init-user-properties">
    	<property file="build.properties"/>
		<condition property="load.institution.override.properties" value="true">
			<available file="${build.institution.overrides.file}"/>
		</condition>
		<echo message="Loaded properties in ./build.properties and set dependent properties"/>
	</target>

    <target name="init-institution-override-properties" if="load.institution.override.properties" depends="init-project-properties">
		<property file="${build.institution.overrides.file}"/>
		<echo message="Loaded properties in ${build.institution.overrides.file}"/>
    </target>

	<target name="init-institution-default-properties" depends="init-institution-override-properties">
		<property file="${build.institution.defaults.file}"/>
		<echo message="Loaded properties in ${build.institution.defaults.file}"/>
	</target>

	<target name="init-filter-set" depends="init-institution-default-properties">
		<loadfile property="webservices.keystore.password" srcFile="${webservices.keystore.passwordfile}"/>
		<condition property="context.docbase" value=' docBase="${basedir}${file.separator}work${file.separator}web-root"'>
    		<equals arg1="${is.local.build}" arg2="true"/>
		</condition>
		<property name="context.docbase" value=""/>
		<filterset id="tokenReplacements">
        	<filter token="application" value="${ant.project.name}"/>
			<filter token="institution" value="${institution}"/>
        	<filter token="environment" value="${environment}"/>
    		<filter token="settings-directory" value="${settings.directory}/"/>
			<filter token="log4j-settings-file" value="${settings.directory}/${log4j.settings.file}"/>
    		<filter token="security-directory" value="${security.directory}/"/>
			<filter token="logs-directory" value="${logs.directory}/"/>
			<filter token="base-url" value="${test.environment.url}"/>
			<filter token="web-authentication-filter" value="${web.authentication.filter}"/>
			<filter token="web-authentication-filtermapping" value="${web.authentication.filtermapping}"/>
			<filter token="webservices-keystore-password" value="${webservices.keystore.password}"/>
			<filter token="context-docbase" value="${context.docbase}"/>
			<filter token="use-p6spy" value="${use.p6spy}"/>
        </filterset>
        <echo message="Defined token filter sets"/>
   	</target>
	
    <target name="init-paths-and-sets" depends="filter">
    	<path id="compile.source.classpath">
            <fileset dir="${appserver.lib.directory}" includes="*.jar"/>
            <fileset dir="${lib.directory}" includes="*.jar"/>
        </path>
        <path id="compile.tests.classpath">
            <path refid="compile.source.classpath"/>
            <fileset dir="${test.lib.directory}" includes="*.jar"/>
        </path>
    	<fileset id="all.tests.fileset" dir="${test.source.directory}">
            <include name="**/*Test.java"/>
            <exclude name="**/TransactionalDocumentRuleTest.java"/>
        </fileset>
    	<fileset id="fast.tests.fileset" dir="${test.source.directory}">
            <include name="**/*Test.java"/>
            <exclude name="**/DocumentServiceTest.java"/>
            <exclude name="**/GeneralErrorCorrectionDocumentTest.java"/>
            <exclude name="**/KualiRuleServiceTest.java"/>
            <exclude name="**/NonCheckDisbursementDocumentTest.java"/>
            <exclude name="**/ProjectCodeMaintenanceDocumentTest.java"/>
            <exclude name="**/YearEndGeneralErrorCorrectionDocumentTest.java"/>
            <exclude name="**/YearEndTransferOfFundsDocumentTest.java"/>
            <exclude name="**/BusinessObjectEntryMapperTest.java"/>
            <exclude name="**/TransferOfFundsDocumentTest.java"/>
            <exclude name="**/TransactionalDocumentRuleTest.java"/>
            <exclude name="**/TransferOfFundsDocumentRuleTest.java"/>    		
    	</fileset>
		<patternset id="non.java.resources">
            <include name="**/*.properties"/>
            <include name="**/*.dtd"/>
            <include name="**/*.xml"/>
            <include name="**/*.html"/>
		</patternset>
		<echo message="Created classpaths, filsets, and patternsets for use by other targets"/>
    </target>
	
	<target name="filter-local" if="is.local.build" depends="init-filter-set">
    	<copy file="${build.tokenized.resources.directory}/${log4j.settings.file}" tofile="${settings.directory}/${log4j.settings.file}">
            <filterset refid="tokenReplacements"/>
    	</copy>
    </target>	

	<target name="filter" depends="filter-local">
		<mkdir dir="${metainf.directory}"/>
		<copy file="${build.tokenized.resources.directory}/${tomcat.context.file}" todir="${metainf.directory}" overwrite="true">
            <filterset refid="tokenReplacements"/>
        </copy>
		<copy file="${build.tokenized.resources.directory}/${web.xml.file}" todir="${webinf.directory}" overwrite="true">
            <filterset refid="tokenReplacements"/>
        </copy>
		<copy todir="${source.directory}" overwrite="true">
			<fileset dir="${build.tokenized.resources.directory}" includes="${tokenized.source.files}"/>
            <filterset refid="tokenReplacements"/>
    	</copy>
    	<copy file="${build.tokenized.resources.directory}/${test.spring.datasource.file}" todir="${test.source.directory}" overwrite="true">
            <filterset refid="tokenReplacements"/>
    	</copy>
		<echo message="Copied tokenized resources to appropriate locations and replaced tokens"/>
    </target>	
	
	<target name="clean-local-configuration" depends="init-local-configuration,init-project-properties" description="Remove output of prepare-local-configuration">
		<delete file="${appserver.lib.directory}/${oracle.library.file}"/>
		<!-- todo: remove this and passwords once everyone has converted to the new build process -->
		<delete file="${appserver.lib.directory}/p6spy.jar"/>
		<delete dir="${settings.directory}"/>
		<delete dir="${security.directory}"/>
		<delete dir="${logs.directory}"/>
	</target>
	
	<target name="clean-local-deployment" if="is.local.build" depends="init-project-properties">
        <delete>
			<fileset dir="${appserver.config.directory}">
				<include name="${ant.project.name}-*.xml"/>
			</fileset>
		</delete>
    </target>
	
    <target name="make-source" depends="init-paths-and-sets">
    	<mkdir dir="${war.classes.directory}"/>
    	<javac destdir="${war.classes.directory}" srcdir="${source.directory}" debug="true" deprecation="true" optimize="true">
            <classpath refid="compile.source.classpath"/>
        </javac>
    	<copy todir="${war.classes.directory}">
            <fileset dir="${source.directory}">
            	<patternset refid="non.java.resources"/>
            </fileset>
        </copy>
    </target>

    <target name="make-tests" depends="init-paths-and-sets">
    	<mkdir dir="${test.classes.directory}"/>
        <javac destdir="${test.classes.directory}" debug="true" deprecation="true" optimize="true">
            <classpath refid="compile.tests.classpath"/>
        	<src path="${source.directory}"/>
        	<src path="${test.source.directory}"/>
        </javac>
    	<copy todir="${test.classes.directory}">
            <fileset dir="${test.source.directory}">
            	<patternset refid="non.java.resources"/>
            </fileset>
        </copy>
    	<copy todir="${test.classes.directory}">
            <fileset dir="${source.directory}">
            	<patternset refid="non.java.resources"/>
            </fileset>
        </copy>
    </target>
	
    <target name="test" depends="clean,make-tests">
        <mkdir dir="${test.temp.directory}" />
    	<mkdir dir="${test.xml.results.directory}" />
        <junit printsummary="on" showoutput="true" fork="true" forkmode="once" tempdir="${test.temp.directory}">
            <classpath>
                <path refid="compile.tests.classpath" />
                <pathelement location="${test.classes.directory}" />
            </classpath>
            <formatter type="xml" />
            <batchtest todir="${test.xml.results.directory}">
                <fileset refid="test.fileset"/>
            </batchtest>
        </junit>
        <mkdir dir="${test.html.results.directory}" />
        <junitreport todir="${test.html.results.directory}">
            <fileset dir="${test.xml.results.directory}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.html.results.directory}" />
        </junitreport>
        <echo message="Generated test results: ${test.html.results.directory}/index.html" />
    </target>

	<target name="help" description="Describe public targets">
		<echo>build
	the following configuration files are involved in the build process:
			build.xml
			build.properties
			build/*
			${user.home}\${ant.project.name}-build.properties
		- copy build/configurationFiles/userHomeDirectory/${ant.project.name}-build.properties to ${user.home}
			and override the default property values to permanently customize the build process for your machine
			or temporarily customize the process for execution of a given build target
		- create a build/institutionProperties/${institution}-build.properties file to permanently customize the
			build process for ${institution}
		- the other files that are involved in the build, the .project and .classpath files, and the jars in the
			lib directories are only commitable by kuali admins.  if you would like to modify the existing files 
			or add a new one, you should send a message describing the change to kualidev@oncourse.iu.edu.
			you should discuss changes to a build/institutionProperties/${institution}-build.properties with the
			other developers associated with your institution before committing them.
	you should start using this build script as follows:
			follow the instructions associated with the prepare-local-configuration target and run that target
			run the echo-properties target and review the results
			follow the instructions associated with the prepare-local-deployment target and run that target
		</echo>
		<echo message="."/>
		<echo>prepare-local-configuration target
	description:
		deploys local configuration files for 'dev' environment on development workstation
	notes:
		this target should be run when instructed via notices sent to kualidev@oncourse.iu.edu
		tomcat should not be running when you are executing this target
		you must copy build/configurationFiles/userHomeDirectory/${ant.project.name}-build.properties to
			${user.home} and override the default values as needed before executing this target
		</echo>
		<echo message="."/>
		<echo>prepare-local-deployment target
	description:
		prepares tokenized resources and deploys tomcat context file on development workstation
	notes:
		this target must be run once each time you get a clean copy of the project, change files in build/tokenizedResources, 
			or change property values in ${user.home}\${ant.project.name}-build.properties or 
			build/institutionProperties/${institution}-build.properties
		tomcat should not be running when you are executing this target
		</echo>
		<echo message="."/>
		<echo>dist target
	description:
		builds war for remote deployment
		</echo>
		<echo message="."/>
		<echo>test-all target
	description:
		runs all project tests and generates results
		</echo>
		<echo message="."/>
		<echo>test-fast target
	description:
		runs fast project tests and generates results
		</echo>
		<echo message="."/>
		<echo>clean target
	description:
		removes all build output
		</echo>
		<echo message="."/>
		<echo>echo-properties target
	description:
		executes ant echoproperties task, thereby printing out all the properties that have been set
		</echo>
	</target>
</project>
