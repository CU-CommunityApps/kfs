<?xml version="1.0"?>
<!DOCTYPE project [ <!ENTITY FoundationTargets SYSTEM "build-foundation.xml"> ]>
<project name="kuali" default="dist-local" basedir=".">
	<!-- run the help target to view usage instructions for public targets -->
	<target name="dist-local" if="is.local.build" depends="clean,filter-project,filter-local" description="Prepare local configuration files and tokenized resources and deploy tomcat context file on development workstation">
		<copy file="${metainf.directory}/${context.file}" tofile="${appserver.localhost.dir}/${ant.project.name}-${build.environment}.xml" overwrite="true" />
	</target>

	<target name="test-local" depends="dist-local,make-tests,test" description="Run all unit tests and format results"/>

	<target name="echo-properties" depends="init-properties" description="Print all build properties that have been set">
		<echoproperties />
	</target>

	<target name="clean" depends="clean-project,clean-local" description="Remove all build output" />

	<target name="init-property-files">
		<property file="${user.home}/${ant.project.name}-build.properties" />
		<property file="${shared.external.build.properties}" />
		<echo message="${datasource.username}" />
		<property file="build.properties" />
	</target>

	<target name="init-properties" depends="init-property-files">
		<tstamp><format property="project.cvs.tag" pattern="MM/dd/yyyy hh:mm aa" /></tstamp>
		<condition property="context.docbase" value=' docBase="${basedir}${file.separator}work${file.separator}web-root"'><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="context.docbase" value="" />
		<condition property="datasource.url" value="${mysql.datasource.url}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<property name="datasource.url" value="${oracle.datasource.url}" />
		<condition property="use.p6spy.local">
			<and>
				<equals arg1="${is.local.build}" arg2="true" />
				<equals arg1="${use.p6spy}" arg2="true" />
			</and>
		</condition>
		<condition property="driver.class" value="${p6spy.driver.class}"><equals arg1="${use.p6spy.local}" arg2="true"/></condition>
		<condition property="driver.class" value="${mysql.driver.class}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<property name="driver.class" value="${oracle.driver.class}" />
		<condition property="p6spy.real.driver.class" value="${mysql.driver.class}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<property name="p6spy.real.driver.class" value="${oracle.driver.class}" />
		<condition property="datasource.ojb.sequence.manager" value="${mysql.ojb.sequence.manager}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<property name="datasource.ojb.sequence.manager" value="${oracle.ojb.sequence.manager}" />
	    <condition property="rice.workflow.datasource.platform" value="${mysql.workflow.datasource.platform}"><equals arg1="${datasource.ojb.platform}" arg2="${mysql.ojb.platform}" /></condition>
		<property name="rice.workflow.datasource.platform" value="${oracle.workflow.datasource.platform}" />
		<condition property="appenders" value="INFO, LogFile, StdOut"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="appenders" value="INFO, LogFile" />
		<condition property="use.quartz.jdbc.jobstore" value="false"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="use.quartz.jdbc.jobstore" value="true" />
		<condition property="rice.dev.mode" value="true"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="rice.dev.mode" value="false" />
		<condition property="rice.message.persistence" value="false"><equals arg1="${is.local.build}" arg2="true" /></condition>
		<property name="rice.message.persistence" value="true" />
		<condition property="rice.use.quartz.database" value="true">
			<and>
				<not><equals arg1="${use.quartz.scheduling}" arg2="true" /></not>
				<not><equals arg1="${is.local.build}" arg2="true" /></not>
			</and>
		</condition>
		<property name="rice.use.quartz.database" value="false" />
		<condition property="rice.exception.routing.immediate" value="true"><equals arg1="${use.quartz.scheduling}" arg2="false" /></condition>
		<property name="rice.exception.routing.immediate" value="false" />
		<loadfile property="configuration" srcfile="${build.project.directory}/${configuration.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="p6spy" srcfile="${build.project.directory}/${p6spy.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="web" srcfile="${build.project.directory}/${web.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="context" srcfile="${build.appserver.directory}/${context.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="log4j" srcfile="${user.home}/${log4j.file}" failonerror="false"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="log4j" srcfile="${build.external.directory}/${log4j.file}"><filterchain><expandproperties/></filterchain></loadfile>
		<loadfile property="security" srcfile="${build.external.directory}/${security.file}"><filterchain><expandproperties/></filterchain></loadfile>
	</target>

	<target name="init-make-references" depends="init-properties">
		<path id="compile.source.classpath">
			<fileset dir="${appserver.lib.dir}" includes="*.jar" />
			<fileset dir="${lib.directory}" includes="*.jar" />
		</path>
		<path id="compile.tests.classpath">
			<path refid="compile.source.classpath" />
			<fileset dir="${test.lib.directory}" includes="*.jar" />
			<pathelement location="${appserver.classes.dir}"/>
		</path>
		<patternset id="non.java.resources">
			<include name="**/*.properties" />
			<include name="**/*.dtd" />
			<include name="**/*.xml" />
			<include name="**/*.html" />
			<include name="**/*.xsd" />
		</patternset>
	</target>

	<target name="clean-project" depends="init-property-files">
		<delete failonerror="false">
			<fileset dir="${basedir}" includes="${source.directory}/${configuration.file},${source.directory}/${p6spy.file},${webinf.directory}/${web.file},${lib.directory}/${log4j.library.file},${war.directory}/**/**,${test.directory}/**/**,*.war,*.zip,${help.directory}/**/**,${webroot.directory}/${rice.application}/**/**,${webroot.directory}/${tags.directory}/${rice.application}/**/**,${webroot.directory}/${workflow.application}/**/**,${licenses.directory}/${rice.name}/**/**" />
		</delete>
	</target>

	<target name="clean-local" if="is.local.build" depends="init-property-files">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${external.config.directory}" includes="**/${ant.project.name}/"/>
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.lib.dir}">
				<or>
					<present targetdir="${build.directory}" />
					<present targetdir="${build.appserver.directory}" />
					<present targetdir="${drivers.directory}" />
				</or>
			</fileset>
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.classes.dir}">
				<present targetdir="${build.appserver.directory}" />
			</fileset>
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.localhost.dir}" includes="${ant.project.name}-*.xml" />
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.deploy.dir}" includes="${ant.project.name}-*.war,${ant.project.name}-*/**" />
		</delete>
		<!-- commenting out cause it cause things are already slow and this makes them slower
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${appserver.work.dir}" includes="${ant.project.name}-*/**" />
		</delete> -->
	</target>

	<target name="filter-project-log4j" unless="use.p6spy.local" depends="init-properties">
		<copy file="${build.directory}/${log4j.library.file}" todir="${lib.directory}"/>
	</target>

	<target name="filter-project-p6spy" if="use.p6spy.local" depends="filter-project-log4j">
		<copy file="${build.directory}/${log4j.library.file}" todir="${appserver.lib.dir}"/>
	</target>

	<target name="filter-project" depends="filter-project-p6spy">
		<unzip dest="${help.directory}" src="${build.project.directory}/help.zip" />
		<unzip dest="${webroot.directory}" src="${build.project.directory}/${rice.name}-${rice.version}${rice.output.web.suffix}" />
		<unzip dest="${licenses.directory}/${rice.name}" src="${build.project.directory}/${rice.name}-${rice.version}${rice.output.licenses.suffix}" />
		<echo file="${source.directory}/${configuration.file}" message="${configuration}" />
		<echo file="${source.directory}/${p6spy.file}" message="${p6spy}" />
		<echo file="${webinf.directory}/${web.file}" message="${web}" />
		<mkdir dir="${metainf.directory}" />
		<echo file="${metainf.directory}/${context.file}" message="${context}" />
	</target>

	<target name="filter-local" if="is.local.build" depends="init-properties">
		<copy file="${build.appserver.directory}/${carol.file}" todir="${appserver.classes.dir}" overwrite="true" />
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${build.appserver.directory}" includes="*.jar" />
		</copy>
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${drivers.directory}" />
		</copy>
		<mkdir dir="${settings.directory}" />
		<echo file="${log4j.settings.file}" message="${log4j}" />
		<mkdir dir="${security.directory}" />
		<echo file="${security.property.file}" message="${security}"  />
		<mkdir dir="${logs.directory}" />
		<echo file="${logs.directory}/${ant.project.name}.log" message="" />
		<copy todir="${external.work.directory}">
			<fileset dir="${build.work.directory}" />
		</copy>
	</target>

	<target name="make-source" depends="init-make-references,filter-project">
		<mkdir dir="${make-source.target.directory}" />
		<javac destdir="${make-source.target.directory}" srcdir="${source.directory}" debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
			<classpath refid="compile.source.classpath" />
		</javac>
		<copy todir="${make-source.target.directory}">
			<fileset dir="${source.directory}">
				<patternset refid="non.java.resources" />
			</fileset>
		</copy>
	</target>

	<target name="make-tests" depends="init-make-references,filter-project">
		<mkdir dir="${test.classes.directory}" />
		<javac destdir="${test.classes.directory}" debug="true" nowarn="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
			<classpath refid="compile.tests.classpath" />
			<src path="${source.directory}" />
			<src path="${test.source.directory}" />
		</javac>
		<copy todir="${test.classes.directory}">
			<fileset dir="${test.source.directory}">
				<patternset refid="non.java.resources" />
				<include name="**/*.txt" />
			</fileset>
		</copy>
		<copy todir="${test.classes.directory}">
			<fileset dir="${source.directory}">
				<patternset refid="non.java.resources" />
			</fileset>
		</copy>
	</target>

	<target name="init-batch-properties">
		<property file="${user.home}/build.properties" />
	</target>

	<target name="make-batch" depends="init-batch-properties,clean,dist-local,make-source" />

	<!-- please be careful if you muck with these settings - you can seriously hose the continuous integration process -->
	<target name="test">
		<mkdir dir="${test.temp.directory}" />
		<mkdir dir="${test.xml.results.directory}" />
		<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${test.temp.directory}" maxmemory="512M">
			<jvmarg value="-Dorg.kuali.test.KualiTestBase.skipOpenOrInProgressOrReopenedJiraIssues"/>
			<!-- the test classes must come first so they can override classes as necessary in
			     the loaded libraries -->
			<classpath>
				<pathelement location="${test.classes.directory}" />
				<path refid="compile.tests.classpath" />
			</classpath>
			<formatter type="xml" />
			<batchtest todir="${test.xml.results.directory}">
				<fileset dir="${test.source.directory}">
					<include name="${tests.includes}" />
					<exclude name="**/TransactionalDocumentRuleTest.java" />
					<exclude name="**/${test.spring.shutdown}.java" />
				</fileset>
			</batchtest>
			<test name="org.kuali.kfs.context.${test.spring.shutdown}" todir="${test.xml.results.directory}" />
		</junit>
		<mkdir dir="${test.html.results.directory}" />
		<junitreport todir="${test.html.results.directory}">
			<fileset dir="${test.xml.results.directory}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${test.html.results.directory}" />
		</junitreport>
		<echo message="Generated test results: ${test.html.results.directory}/index.html" />
	</target>

	<target name="dist-external" depends="init-properties">
		<echo file="${deploy.working.directory}/${log4j.file}" message="${log4j}" />
		<echo file="${deploy.working.directory}/${security.file}" message="${security}"  />
		<zip destfile="${deploy.working.directory}/settings.zip" basedir="${deploy.working.directory}" includes="${log4j.file}" />
		<zip destfile="${deploy.working.directory}/security.zip" basedir="${deploy.working.directory}" includes="${security.file}" />
		<zip destfile="${deploy.working.directory}/skel.zip" basedir="${build.work.directory}" />
	</target>

	<target name="dist" depends="make-source,dist-external">
		<copy todir="${war.directory}">
			<fileset dir="${webroot.directory}" excludes="WEB-INF/classes/**/**" />
		</copy>
		<jar jarfile="${ant.project.name}-${build.environment}.war" basedir="${war.directory}" compress="false" />
	</target>
	
	<target name="continuous-integration" depends="clean,make-tests,test">
		<fail if="tests.failed" message="Tests failed" />
	</target>

	<target name="post-load-encrypt" depends="make-source">
		<java classname="org.kuali.kfs.context.BatchStepRunner" fork="true">
			<arg value="postDataLoadEncryptionStep" />
			<classpath>
				<pathelement location="${make-source.target.directory}" />
				<path refid="compile.source.classpath" />
				<fileset dir="${appserver.classes.dir}" includes="*.jar" />
			</classpath>		
		</java>
	</target>
	
	
	<target name="help" depends="init-properties" description="Describe public targets">
		<echo>--- OVERVIEW ---

	the following configuration files are involved in the build process
			- build.xml
			- build.properties
			- build/*
			- ${ant.project.name}-build.properties in ${user.home}

	you should start using this build script as follows

			1. copy the ${ant.project.name}-build.properties from ${build.user.directory} in
			${basedir} to ${user.home}
			    - fill in the missing values in the sections related to tempoarily and permanently customizing the
			      build for your machine (you do not need to worry about the rice development section)
			    - override other property values in ${user.home}/${ant.project.name}-build.properties as needed
			    - save your changes
			
			2. run the echo-properties target and review the results

			3. follow the instructions associated with the dist-local target and run that target
						
			4. right click on the root project directory and select "Refresh"
			
			5. click the "Run/Stop/Restart MyEclipse Application Servers" button in the "Java (default)" perspective in
			eclipse to start tomcat
			
			6. launch a browser and access http://localhost:8080/kuali-dev

	you can override the default log4j settings for your local deployments by copying
		${basedir}/${build.external.directory}/${log4j.file} to
			${user.home}/${log4j.file} and modifying as desired.  you will also need to run the dist-local target
			for this change to take effect.

			--- TARGETS ---

			dist-local: prepares tokenized resources and local configuration files and deploys tomcat context file on development workstation
			- this target should be run each time you update the project, change property values in ${user.home}/${ant.project.name}-build.properties,
			or make a change that you want to apply to the application workflow plugin
			- tomcat should not be running when you are executing this target

			test-local: runs all project tests and generates results
             - criteria for running dist-local must be met before running this target
			- you can customize the set of tests that run by modifying the value of tests.includes in ${user.home}/${ant.project.name}-build.propertie
			- tomcat should not be running when you execute this target

			echo-properties: executes ant echoproperties task, thereby printing out all the properties that have been set

			clean: removes all build output
		</echo>
	</target>
	
	&FoundationTargets;

</project>