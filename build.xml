<?xml version="1.0"?>
<project name="kuali" default="dist-local" basedir=".">
<!-- test -->
	<!-- run the help task to view usage instructions -->	
	<target name="dist-local" if="is.local.build" depends="clean,filter" description="Prepare local configuration files and tokenized resources and deploy tomcat context file on development workstation">
    	<copy file="${metainf.directory}/${tomcat.context.file}" tofile="${appserver.config.dir}/${ant.project.name}-${build.environment}.xml" overwrite="true"/>
    </target>

	<target name="echo-properties" depends="init-filter-sets" description="Print all build properties that have been set">
		<echoproperties/>
	</target>

	<target name="test-all" depends="init-test-all,test" description="Run all project tests and format results"/>

    <target name="test-fast" depends="init-test-fast,test" description="Run fast project tests and format results"/>
	
	<target name="clean" depends="clean-config" description="Remove all build output">
    	<delete dir="${metainf.directory}"/>
		<delete file="${webinf.directory}/${web.xml.file}"/>
		<delete>
			<fileset dir="${source.directory}" includes="${tokenized.source.files}"/>
    	</delete>
		<delete dir="${war.directory}"/>
		<delete dir="${test.directory}"/>
		<delete dir="${plugin.directory}"/>
		<delete>
			<fileset dir="." includes="*.war"/>
		</delete>
	</target>
	
	<target name="dist" depends="clean,make-source" description="Build war and for remote deployment">
		<copy todir="${war.directory}">
			<fileset dir="${webroot.directory}" excludes="WEB-INF/classes/**/**"/>
		</copy>
		<jar jarfile="${ant.project.name}-${build.environment}.war" basedir="${war.directory}" compress="false"/>
    </target>
	
	<target name="dist-plugin" depends="make-plugin" description="Build plugin zip for remote deployment">
		<zip destfile="en-plugins.zip" basedir="${plugin.directory}"/>
	</target>
	
	<target name="dist-batch" depends="clean,make-source" description="Build batch zip for remote deployment">
		<copy todir="${batch.directory}">
			<fileset dir="${batch.script.directory}"/>
		</copy>
		<jar jarfile="${batch.directory}/${ant.project.name}.jar" basedir="${war.classes.directory}" compress="false"/>
		<copy todir="${batch.lib.directory}">
			<fileset dir="${lib.directory}"/>
			<fileset file="${appserver.lib.dir}/servlet-api.jar"/>
			<fileset file="${appserver.lib.dir}/${oracle.library.file}"/>
		</copy>
		<zip basedir="${batch.directory}" destfile="${ant.project.name}-${build.environment}.zip"/>
	</target>

	<target name="continuous-integration" depends="test-all" description="Run all tests and fail if there are failures or errors">
		<fail if="tests.failed" message="Tests failed"/>
	</target>
			
	<target name="init-user-properties">
    	<property file="${user.home}/${ant.project.name}-build.properties"/>
		<echo message="Loaded properties in ${user.home}/${ant.project.name}-build.properties"/>
	</target>

	<target name="init-project-properties" depends="init-user-properties">
    	<property file="build.properties"/>
		<condition property="load.institution.override.properties" value="true">
			<available file="${build.institution.overrides.file}"/>
		</condition>
		<echo message="Loaded properties in ./build.properties and set dependent properties"/>
	</target>

    <target name="init-institution-override-properties" if="load.institution.override.properties" depends="init-project-properties">
		<property file="${build.institution.overrides.file}"/>
		<echo message="Loaded properties in ${build.institution.overrides.file}"/>
    </target>

	<target name="init-institution-default-properties" depends="init-institution-override-properties">
		<property file="${build.institution.defaults.file}"/>
		<echo message="Loaded properties in ${build.institution.defaults.file}"/>
	</target>

	<target name="init-filter-sets" depends="init-institution-default-properties">
		<condition property="context.docbase" value=' docBase="${basedir}${file.separator}work${file.separator}web-root"'>
    		<equals arg1="${is.local.build}" arg2="true"/>
		</condition>
		<property name="context.docbase" value=""/>
		<condition property="workflow.url" value="${local.environment.url}">
    		<equals arg1="${is.local.workflow.build}" arg2="true"/>
		</condition>
		<property name="workflow.url" value="${test.environment.url}"/>
		<condition property="standard.out.appender" value='StdOut, '>
    		<equals arg1="${is.local.build}" arg2="true"/>
		</condition>
		<property name="standard.out.appender" value=""/>
		<filterset id="general.filterset">
        	<filter token="application" value="${ant.project.name}"/>
			<filter token="institution" value="${institution}"/>
        	<filter token="environment" value="${build.environment}"/>
    		<filter token="settings-directory" value="${settings.directory}/"/>
			<filter token="log4j-settings-file" value="${settings.directory}/${log4j.settings.file}"/>
    		<filter token="security-directory" value="${security.directory}/"/>
			<filter token="logs-directory" value="${logs.directory}/"/>
        	<filter token="attachments-root-directory" value="${attachments.root.directory}"/>
			<filter token="base-url" value="${test.environment.url}"/>
			<filter token="workflow-url" value="${workflow.url}" />			
			<filter token="web-authentication-filter" value="${web.authentication.filter}"/>
			<filter token="web-authentication-filtermapping" value="${web.authentication.filtermapping}"/>
			<filter token="webservices-keystore-password" value="${webservices.keystore.password}"/>
			<filter token="use-p6spy" value="${use.p6spy}"/>
			<filter token="context-docbase" value="${context.docbase}"/>
			<filter token="standard-out-appender" value="${standard.out.appender}"/>
			<filter token="variable-ojb-properties" value="${application.ojb.properties}"/>
		</filterset>
		<filterset id="security.filterset">
	    	<filter token="datasource-url" value="${datasource.url}"/>
	    	<filter token="datasource-username" value="${datasource.username}"/>
	    	<filter token="datasource-password" value="${datasource.password}"/>
			<filter token="keystore-password" value="${keystore.password}"/>
		</filterset>
		<filterset id="plugin.filterset">
			<filter token="variable-ojb-properties" value="${plugin.ojb.properties}"/>
		</filterset>		
   	</target>

	<target name="clean-config" if="is.local.build" depends="init-project-properties">
		<delete file="${appserver.lib.dir}/${oracle.library.file}" failonerror="false"/>
		<delete dir="${settings.directory}" failonerror="false"/>
		<delete dir="${security.directory}" failonerror="false"/>
		<delete dir="${logs.directory}" failonerror="false"/>
		<delete failonerror="false">
			<fileset dir="${plugin.deploy.directory}"/>
		</delete>		
        <delete failonerror="false">
			<fileset dir="." includes="*.zip"/>
		</delete>
        <delete failonerror="false">
			<fileset dir="${appserver.config.dir}" includes="${ant.project.name}-*.xml"/>
		</delete>
	</target>	

	<target name="filter" depends="init-filter-sets,filter-config">
		<mkdir dir="${metainf.directory}"/>
		<copy file="${build.tokenized.resources.directory}/${tomcat.context.file}" todir="${metainf.directory}" overwrite="true">
            <filterset refid="general.filterset"/>
        </copy>
		<copy file="${build.tokenized.resources.directory}/${web.xml.file}" todir="${webinf.directory}" overwrite="true">
            <filterset refid="general.filterset"/>
        </copy>
		<copy todir="${source.directory}" overwrite="true">
			<fileset dir="${build.tokenized.resources.directory}" includes="${tokenized.source.files}"/>
            <filterset refid="general.filterset"/>
    	</copy>
    </target>
	
	<target name="filter-config" if="is.local.build" depends="init-project-properties">
		<mkdir dir="${attachments.root.directory}/${build.environment}"/>
		<copy file="${build.config.directory}/${oracle.library.file}" todir="${appserver.lib.dir}" overwrite="true"/>
		<copy file="${user.home}/${log4j.settings.file}" todir="${settings.directory}" failonerror="false">
			<filterset refid="general.filterset"/>
		</copy>
		<copy todir="${settings.directory}">
			<fileset dir="${build.settings.directory}"/>
			<filterset refid="general.filterset"/>
		</copy>
		<copy todir="${security.directory}" overwrite="true">
			<fileset dir="${build.security.directory}" excludes="${webservices.keystore.file}"/>
			<filterset refid="security.filterset"/>
		</copy>
		<copy file="${build.security.directory}/${webservices.keystore.file}" todir="${security.directory}" overwrite="true"/>
    	<copy todir="${logs.directory}" overwrite="true">
			<fileset dir="${build.logs.directory}"/>
		</copy>
        <zip destfile="settings.zip" basedir="${settings.directory}"/>
		<zip destfile="security.zip" basedir="${security.directory}"/>
	</target>
	
    <target name="init-make-references" depends="filter">
    	<path id="compile.source.classpath">
            <fileset dir="${appserver.lib.dir}" includes="*.jar"/>
            <fileset dir="${lib.directory}" includes="*.jar"/>
        </path>
        <path id="compile.tests.classpath">
            <path refid="compile.source.classpath"/>
            <fileset dir="${test.lib.directory}" includes="*.jar"/>
        </path>
		<patternset id="non.java.resources">
            <include name="**/*.properties"/>
            <include name="**/*.dtd"/>
            <include name="**/*.xml"/>
            <include name="**/*.html"/>
		</patternset>
    </target>

	<target name="make-source" depends="init-make-references">
    	<mkdir dir="${war.classes.directory}"/>
    	<javac destdir="${war.classes.directory}" srcdir="${source.directory}" debug="true" deprecation="true" optimize="true">
            <classpath refid="compile.source.classpath"/>
        </javac>
    	<copy todir="${war.classes.directory}">
            <fileset dir="${source.directory}">
            	<patternset refid="non.java.resources"/>
            </fileset>
        </copy>
    </target>

    <target name="make-tests" depends="init-make-references">
    	<mkdir dir="${test.classes.directory}"/>
        <javac destdir="${test.classes.directory}" debug="true" deprecation="true" optimize="true">
            <classpath refid="compile.tests.classpath"/>
        	<src path="${source.directory}"/>
        	<src path="${test.source.directory}"/>
        </javac>
    	<copy todir="${test.classes.directory}">
            <fileset dir="${test.source.directory}">
            	<patternset refid="non.java.resources"/>
            </fileset>
        </copy>
    	<copy todir="${test.classes.directory}">
            <fileset dir="${source.directory}">
            	<patternset refid="non.java.resources"/>
            </fileset>
        </copy>
    </target>
	
	<target name="init-test-all" depends="init-project-properties">
    	<fileset id="test.fileset" dir="${test.source.directory}">
            <include name="**/*Test.java"/>
            <exclude name="**/TransactionalDocumentRuleTest.java"/>
    		<exclude name="**/${test.spring.shutdown}.java"/>
        </fileset>
	</target>
	
	<target name="init-test-fast" depends="init-project-properties">
		<fileset id="test.fileset" dir="${test.source.directory}">
	        <include name="**/*Test.java"/>
			<exclude name="**/DocumentServiceTest.java"/>
	        <exclude name="**/GeneralErrorCorrectionDocumentTest.java"/>
	        <exclude name="**/KualiRuleServiceTest.java"/>
	        <exclude name="**/NonCheckDisbursementDocumentTest.java"/>
	        <exclude name="**/ProjectCodeMaintenanceDocumentTest.java"/>
	        <exclude name="**/YearEndGeneralErrorCorrectionDocumentTest.java"/>
	        <exclude name="**/YearEndTransferOfFundsDocumentTest.java"/>
	        <exclude name="**/BusinessObjectEntryMapperTest.java"/>
	        <exclude name="**/TransferOfFundsDocumentTest.java"/>
	        <exclude name="**/TransactionalDocumentRuleTest.java"/>
	        <exclude name="**/TransferOfFundsDocumentRuleTest.java"/>
    		<exclude name="**/${test.spring.shutdown}.java"/>
		</fileset>
	</target>
    	
	<!-- please be careful if you muck with these settings - you can seriously hose the continuous integration process -->
    <target name="test" depends="clean,make-tests">
        <mkdir dir="${test.temp.directory}" />
    	<mkdir dir="${test.xml.results.directory}" />
        <junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${test.temp.directory}" maxmemory="512M">
            <classpath>
                <path refid="compile.tests.classpath" />
                <pathelement location="${test.classes.directory}" />
            </classpath>
            <formatter type="xml"/>
			<batchtest todir="${test.xml.results.directory}">
	            <fileset refid="test.fileset"/>
	        </batchtest>
        	<test name="org.kuali.${test.spring.shutdown}" todir="${test.xml.results.directory}"/>
        </junit>
    	<mkdir dir="${test.html.results.directory}" />
        <junitreport todir="${test.html.results.directory}">
            <fileset dir="${test.xml.results.directory}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.html.results.directory}" />
        </junitreport>
        <echo message="Generated test results: ${test.html.results.directory}/index.html" />
    </target>
	
	<target name="make-plugin" depends="clean,make-source">
		<copy todir="${plugin.lib.directory}">
			<fileset dir="${lib.directory}" excludes="${workflow.exclude.library.list}"/>
		</copy>
		<copy todir="${plugin.classes.directory}">
			<fileset dir="${war.classes.directory}"/>
		</copy>
		<copy file="${build.tokenized.resources.directory}/OJB.properties" todir="${plugin.classes.directory}" overwrite="true">
            <filterset refid="plugin.filterset"/>
    	</copy>
		<replaceregexp file="${plugin.classes.directory}/workflow-config.properties" flags="-s" match=".+" replace=""/>
		<copy todir="${plugin.metainf.directory}">
			<fileset file="${build.workflow.directory}/workflow.xml"/>
		</copy>
	</target>

	<target name="dist-plugin-local" depends="make-plugin">
		<copy todir="${plugin.deploy.directory}">
			<fileset dir="${plugin.directory}"/>
		</copy>
	</target>
	
	<target name="help" description="Describe public targets">
		<echo>overview
	the following configuration files are involved in the build process
			build.xml
			build.properties
			build/*
			${user.home}\${ant.project.name}-build.properties
	you should start using this build script as follows
			- copy build/configurationFiles/userHomeDirectory/${ant.project.name}-build.properties to ${user.home}
			- obtain the values for ${datasource.username}, ${datasource.password}, and ${webservices.keystore.password}
			  for the dev environment from someone on the project, and put them in
			  ${user.home}\${ant.project.name}-build.properties
			- override other property values in ${user.home}\${ant.project.name}-build.properties to permanently
			  customize the build process for your machine or temporarily customize the process for execution of a
			  given build target
			- follow the instructions associated with the dist-local target and run that target
			- run the echo-properties target and review the results
	if you are interested in doing the following once you are more familiar with ${ant.project.name}, you should
		bring the change up with your development manager, send a note to kualidev@oncourse.iu.edu, or ask that
		the change be discussed at a developer meeting before committing
			- create a build/institutionProperties/${institution}-build.properties file to permanently customize the
			  build process for ${institution}
			- modify the other files involved in the build, the .project file, the .classpath file, or the jars in the
			  lib directories
	you can override the default log4j settings for your local deployments by copying 
		build/configurationFiles/externalConfigDirectory/settings/${log4j.settings.file} to
		${user.home}/${log4j.settings.file} and modifying as desired.  you will also need to run the dist-local target for this
		change to take effect.
		</echo>
		<echo message="."/>
		<echo>dist-local target
	description:
		prepares tokenized resources and local configuration files and deploys tomcat context file on development workstation
	notes:
		this target should be run each time you update the project from cvs, change files in build/tokenizedResources, 
			or change property values in ${user.home}\${ant.project.name}-build.properties or 
			build/institutionProperties/${institution}-build.properties
		tomcat should not be running when you are executing this target
		</echo>
		<echo message="."/>
		<echo>echo-properties target
	description:
		executes ant echoproperties task, thereby printing out all the properties that have been set
		</echo>
		<echo message="."/>
		<echo>test-all target
	description:
		runs all project tests and generates results
		</echo>
		<echo message="."/>
		<echo>test-fast target
	description:
		runs fast project tests and generates results
	notes:
		to exclude a new test that is taking a long time to run, add an entry to the test.fileset defined in the
			init-test-fast target
		</echo>
		<echo message="."/>
		<echo>clean target
	description:
		removes all build output
		</echo>
		<echo message="."/>
		<echo>dist target
	description:
		builds war for remote deployment
		</echo>
		<echo message="."/>
		<echo>dist-plugin target
	description:
		builds plugin zip for remote deployment
		</echo>
		<echo message="."/>
		<echo>dist-batch target
	description:
		builds batch zip for remote deployment
		</echo>
		<echo message="."/>
		<echo>continuous-integration target
	description:
		runs all project tests and fails if there are failures or errors
		</echo>
	</target>
</project>
