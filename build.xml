<?xml version="1.0"?>
<project name="kuali" default="dist-local" basedir=".">
	<!-- run the help task to view usage instructions -->
	<target name="dist-local" if="is.local.build" depends="clean,filter-project,filter-local,dist-workflow-local" description="Prepare local configuration files and tokenized resources and deploy tomcat context file on development workstation">
		<copy file="${metainf.directory}/${tomcat.context.file}" tofile="${appserver.localhost.dir}/${ant.project.name}-${build.environment}.xml" overwrite="true" />
	</target>

	<target name="echo-properties" depends="init-filter-sets" description="Print all build properties that have been set">
		<echoproperties />
	</target>
	
	<target name="dist-test-local" depends="dist-local,make-tests" description="Prepare local configuration and tokenized resources and compile tests on a development workstation" />
	
	<target name="test-local" depends="init-project-properties,test" description="Run all unit tests and format results"/>

	<target name="clean" depends="clean-project,clean-local,clean-workflow-local" description="Remove all build output" />

	<target name="init-user-properties">
		<property file="${user.home}/${ant.project.name}-build.properties" />
		<condition property="use.p6spy.local">
			<and>
				<equals arg1="${is.local.build}" arg2="true" />
				<equals arg1="${use.p6spy}" arg2="true" />
			</and>
		</condition>
		<condition property="dist.workflow.local">
			<equals arg1="${is.local.workflow.build}" arg2="true" />
		</condition>
		<echo message="Loaded properties in ${user.home}/${ant.project.name}-build.properties" />
	</target>

	<target name="init-project-properties" depends="init-user-properties">
		<property file="build.properties" />
		<condition property="load.institution.override.properties">
			<available file="${build.institution.overrides.file}" />
		</condition>
		<echo message="Loaded properties in ./build.properties and set dependent properties" />
	</target>

	<target name="init-institution-override-properties" if="load.institution.override.properties" depends="init-project-properties">
		<property file="${build.institution.overrides.file}" />
		<echo message="Loaded properties in ${build.institution.overrides.file}" />
	</target>

	<target name="init-institution-default-properties" depends="init-institution-override-properties">
		<property file="${build.institution.defaults.file}" />
		<echo message="Loaded properties in ${build.institution.defaults.file}" />
	</target>

	<target name="init-filter-sets" depends="init-institution-default-properties">
		<tstamp>
			<format property="project.cvs.tag" pattern="MM/dd/yyyy hh:mm aa" />
		</tstamp>
		<condition property="context.docbase" value=' docBase="${basedir}${file.separator}work${file.separator}web-root"'>
			<equals arg1="${is.local.build}" arg2="true" />
		</condition>
		<property name="context.docbase" value="" />
		<condition property="base.application.url" value="${local.environment.url}">
			<equals arg1="${is.local.build}" arg2="true" />
		</condition>
		<condition property="base.htdocs.url" value="${local.environment.url}">
			<equals arg1="${is.local.build}" arg2="true" />
		</condition>
		<condition property="base.cas.url" value="${local.environment.url}">
			<equals arg1="${is.local.cas.build}" arg2="true" />
		</condition>
		<condition property="base.workflow.url" value="${local.environment.url}">
			<equals arg1="${is.local.workflow.build}" arg2="true" />
		</condition>
		<condition property="base.application.url" value="${prod.environment.url}">
			<or>
				<equals arg1="${build.environment}" arg2="ptd" />
				<equals arg1="${build.environment}" arg2="gl" />
			</or>
		</condition>
		<condition property="base.htdocs.url" value="${prod.environment.url}">
			<or>
				<equals arg1="${build.environment}" arg2="ptd" />
				<equals arg1="${build.environment}" arg2="gl" />
			</or>
		</condition>
		<condition property="base.cas.url" value="${prod.environment.url}">
			<or>
				<equals arg1="${build.environment}" arg2="ptd" />
				<equals arg1="${build.environment}" arg2="gl" />
			</or>
		</condition>
		<condition property="base.workflow.url" value="${prod.environment.url}">
			<or>
				<equals arg1="${build.environment}" arg2="ptd" />
				<equals arg1="${build.environment}" arg2="gl" />
			</or>
		</condition>
		<property name="base.application.url" value="${test.environment.url}" />
		<property name="base.htdocs.url" value="${test.environment.url}" />
		<property name="htdocs.url" value="${base.htdocs.url}${ant.project.name}/${build.environment}/" />
		<property name="base.cas.url" value="${test.environment.url}" />
		<property name="base.workflow.url" value="${test.environment.url}" />
		<condition property="local.plugin.classes" value="${local.plugin.classes.token}">
			<equals arg1="${is.local.build}" arg2="true" />
		</condition>
		<property name="local.plugin.classes" value="" />
		<condition property="local.plugin.lib" value="${local.plugin.lib.token}">
			<equals arg1="${is.local.build}" arg2="true" />
		</condition>
		<property name="local.plugin.lib" value="" />
		<condition property="driver.class" value="${p6spy.driver.class}">
			<equals arg1="${use.p6spy.local}" arg2="true"/>
		</condition>
		<property name="driver.class" value="${oracle.driver.class}" />
		<condition property="appenders" value="INFO, LogFile, StdOut">
			<equals arg1="${is.local.build}" arg2="true" />
		</condition>
		<property name="appenders" value="INFO, LogFile" />
		<condition property="scheduler.spring.beans.import" value="${scheduler.spring.beans.import.value}">
			<equals arg1="${use.quartz.scheduling}" arg2="true" />
		</condition>
		<condition property="institution.spring.beans.import" value="${institution.spring.beans.import.value}">
			<available file="${institution.spring.beans.file}" />
		</condition>
		<property name="institution.spring.beans.import" value="" />
		<property name="scheduler.spring.beans.import" value="" />
		<condition property="scheduler.spring.jobstore.properties" value="${scheduler.spring.ram.jobstore.properties}">
			<equals arg1="${is.local.build}" arg2="true" />			
		</condition>
		<property name="scheduler.spring.jobstore.properties" value="${scheduler.spring.jdbc.jobstore.properties}" />
		<filterset id="external.config.filterset">
			<filter token="settings-root-directory" value="${settings.root.directory}" />
			<filter token="security-root-directory" value="${security.root.directory}" />			
			<filter token="log4j-settings-file" value="${settings.directory}/${log4j.settings.file}" />
			<filter token="security-directory" value="${security.directory}" />
			<filter token="settings-directory" value="${settings.directory}" />
			<filter token="logs-directory" value="${logs.directory}" />
			<filter token="staging-directory" value="${staging.directory}" />
			<filter token="attachments-directory" value="${attachments.directory}" />
			<filter token="reports-directory" value="${reports.directory}" />
			<filter token="plugin-deploy-root-directory" value="${plugin.deploy.root.directory}" />
			<filter token="local-plugin-classes" value="${local.plugin.classes}"/>
			<filter token="local-plugin-lib" value="${local.plugin.lib}"/>
			<filter token="workflow-web-authentication-filter" value="${workflow.web.authentication.filter}" />
		</filterset>
		<filterset id="general.filterset">
			<filterset refid="external.config.filterset" />
			<filter token="application" value="${ant.project.name}" />
			<filter token="institution" value="${institution}" />
			<filter token="environment" value="${build.environment}" />
			<filter token="version" value="${project.cvs.tag}" />
			<filter token="application-url" value="${base.application.url}${ant.project.name}-${build.environment}" />
			<filter token="htdocs-url" value="${htdocs.url}" />
			<filter token="htdocs-logs-url" value="${htdocs.url}logs/" />
			<filter token="htdocs-staging-url" value="${htdocs.url}staging/" />
			<filter token="cas-url" value="${base.cas.url}${ant.project.name}-${build.environment}/cas" />
			<filter token="base-workflow-url" value="${base.workflow.url}" />
			<filter token="workflow-url" value="${base.workflow.url}${workflow.application}-${build.environment}" />
			<filter token="web-authentication-filter" value="${web.authentication.filter}" />
			<filter token="driver-class" value="${driver.class}" />
			<filter token="datasource-url" value="${datasource.url}" />
			<filter token="datasource-username" value="${datasource.username}" />
			<filter token="datasource-password" value="${datasource.password}" />
			<filter token="webservices-keystore-password" value="${webservices.keystore.password}" />
			<filter token="workflow-webservices-keystore-password" value="${workflow.webservices.keystore.password}" />
			<filter token="encryption-key" value="${encryption.key}" />
			<filter token="context-docbase" value="${context.docbase}" />
			<filter token="appenders" value="${appenders}" />
			<filter token="mail-relay-server" value="${mail.relay.server}" />
			<filter token="batch-mailing-list" value="${batch.mailing.list}" />
			<filter token="institution-spring-beans-import" value="${institution.spring.beans.import}" />
			<filter token="scheduler-spring-beans-import" value="${scheduler.spring.beans.import}" />
			<filter token="scheduler-spring-jobstore-properties" value="${scheduler.spring.jobstore.properties}" />
			<filter token="variable-ojb-properties" value="${application.ojb.properties}" />
			<filter token="use-auto-commit" value="1" />
		</filterset>
		<filterset id="plugin.filterset">
			<filter token="variable-ojb-properties" value="${plugin.ojb.properties}" />
			<filter token="use-auto-commit" value="0" />
		</filterset>
	</target>
	
	<target name="init-make-references" depends="init-filter-sets">
		<path id="compile.source.classpath">
			<fileset dir="${appserver.lib.dir}" includes="*.jar" />
			<fileset dir="${lib.directory}" includes="*.jar" />
		</path>
		<path id="compile.tests.classpath">
			<path refid="compile.source.classpath" />
			<fileset dir="${test.lib.directory}" includes="*.jar" />
		</path>
		<patternset id="non.java.resources">
			<include name="**/*.properties" />
			<include name="**/*.dtd" />
			<include name="**/*.xml" />
			<include name="**/*.html" />
		</patternset>
	</target>

	<target name="init-source-only-package">
		<property name="package.type" value="source" />	
	</target>

	<target name="init-binary-only-package">
		<property name="package.type" value="binary" />
	</target>
	
	<target name="init-binary-and-source-package">
		<property name="package.type" value="both" />
	</target>
			
	<target name="init-package-directories" depends="init-project-properties">
		<delete dir="${packaging.contents.directory}" />
		<mkdir dir="${packaging.contents.directory}" />
		<get dest="${packaging.server.zip.file}" src="https://test.kuali.org/confluence/download/attachments/9969/${appserver}.zip" />
		<unzip src="${packaging.server.zip.file}" dest="${packaging.contents.directory}" />
	</target>

	<target name="clean-project" depends="init-project-properties">
		<delete dir="${metainf.directory}" />
		<delete file="${webinf.directory}/${web.xml.file}" />
		<delete failonerror="false">
			<fileset dir="${source.directory}" includes="${tokenized.source.files}" />
		</delete>
		<delete file="${lib.directory}/${log4j.library}" />
		<delete dir="${war.directory}" />
		<delete dir="${test.directory}" />
		<delete dir="${plugin.directory}" />
		<delete>
			<fileset dir="." includes="*.war" />
		</delete>
		<delete>
			<fileset dir="." includes="*.zip" />
		</delete>
	</target>

	<target name="clean-local" if="is.local.build" depends="init-project-properties">
		<delete failonerror="false">
			<fileset dir="${appserver.lib.dir}" includes="${appserver.library.list}" />
		</delete>
		<delete file="${appserver.lib.dir}/${log4j.library}"/>
		<delete failonerror="false">
			<fileset dir="${appserver.localhost.dir}" includes="${ant.project.name}-*.xml" />
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.deploy.dir}" includes="${ant.project.name}-*.war" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${appserver.deploy.dir}" includes="${ant.project.name}-*/**" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${settings.root.directory}" includes="*/${ant.project.name}/"/>
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${security.root.directory}" includes="*/${ant.project.name}/"/>
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${logs.root.directory}" includes="*/${ant.project.name}/"/>
		</delete>
		<delete dir="${static.root.directory}" failonerror="false" />
	</target>

	<target name="clean-workflow-local" if="is.local.build" depends="init-project-properties">
		<delete failonerror="false">
			<fileset dir="${appserver.classes.dir}" includes="${workflow.appserver.classes.list}" />
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.lib.dir}" includes="${workflow.appserver.library.list}" />
		</delete>
		<delete failonerror="false">
			<fileset dir="${appserver.localhost.dir}" includes="${workflow.application}-*" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${appserver.deploy.dir}" includes="${workflow.application}-*/**" />
		</delete>
		<delete file="${workflow.usr.directory}/workflow.xml" />
		<delete dir="${plugin.deploy.directory}" failonerror="false" />
	</target>
	
	<!-- wrapper based on naming convention required by workflow build script -->
	<target name="clean-plugin" depends="clean"/>

	<target name="filter-project-log4j" unless="use.p6spy.local" depends="init-filter-sets">
		<copy file="${build.appserver.directory}/${log4j.library}" todir="${lib.directory}"/>
	</target>
	
	<target name="filter-project-p6spy" if="use.p6spy.local" depends="filter-project-log4j">
		<copy file="${build.appserver.directory}/${log4j.library}" todir="${appserver.lib.dir}"/>
	</target>
	
	<target name="filter-project" depends="filter-project-p6spy">
		<mkdir dir="${metainf.directory}" />
		<copy file="${build.tokenized.resources.directory}/${tomcat.context.file}" todir="${metainf.directory}" overwrite="true">
			<filterset refid="general.filterset" />
		</copy>
		<copy file="${build.tokenized.resources.directory}/${web.xml.file}" todir="${webinf.directory}" overwrite="true">
			<filterset refid="general.filterset" />
		</copy>
		<copy todir="${source.directory}" overwrite="true">
			<fileset dir="${build.tokenized.resources.directory}" includes="${tokenized.source.files}" />
			<filterset refid="general.filterset" />
		</copy>
	</target>

	<target name="filter-local" if="is.local.build" depends="init-filter-sets">
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${build.appserver.directory}" includes="${appserver.library.list}" />
		</copy>
		<copy todir="${settings.directory}" overwrite="true">
			<fileset dir="${build.settings.directory}" />
			<filterset refid="general.filterset" />
		</copy>
		<copy file="${user.home}/${log4j.settings.file}" todir="${settings.directory}" failonerror="false" overwrite="true">
			<filterset refid="general.filterset" />
		</copy>
		<copy todir="${security.directory}" overwrite="true">
			<fileset dir="${build.security.directory}" excludes="${webservices.keystore.files}" />
			<filterset refid="general.filterset" />
		</copy>
		<copy todir="${security.directory}" overwrite="true">
			<fileset dir="${build.security.directory}" includes="${webservices.keystore.files}" />
		</copy>
		<copy todir="${logs.directory}" overwrite="true">
			<fileset dir="${build.logs.directory}" />
		</copy>
		<copy todir="${static.directory}" overwrite="true">
			<fileset dir="${build.static.directory}" />
			<filterset refid="general.filterset" />
		</copy>
	</target>
	
	<target name="filter-workflow-local" if="dist.workflow.local" depends="init-filter-sets">
		<copy todir="${appserver.classes.dir}" overwrite="true">
			<fileset dir="${build.workflow.appserver.directory}" includes="${workflow.appserver.classes.list}" />
		</copy>
		<copy todir="${appserver.lib.dir}" overwrite="true">
			<fileset dir="${build.workflow.appserver.directory}" includes="${workflow.appserver.library.list}" />
		</copy>
		<copy todir="${workflow.usr.directory}" overwrite="true">
			<fileset dir="${build.workflow.usr.directory}" />
			<filterset refid="general.filterset" />
		</copy>
	</target>

	<target name="make-source" depends="init-make-references,filter-project">
		<mkdir dir="${make-source.target.directory}" />
		<javac destdir="${make-source.target.directory}" srcdir="${source.directory}" debug="true" deprecation="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
			<classpath refid="compile.source.classpath" />
		</javac>
		<copy todir="${make-source.target.directory}">
			<fileset dir="${source.directory}">
				<patternset refid="non.java.resources" />
			</fileset>
		</copy>
	</target>

	<target name="make-tests" depends="init-make-references,filter-project">
		<mkdir dir="${test.classes.directory}" />
		<javac destdir="${test.classes.directory}" debug="true" deprecation="true" optimize="true" fork="true" memoryinitialsize="${compile.min.memory}" memorymaximumsize="${compile.max.memory}">
			<classpath refid="compile.tests.classpath" />
			<src path="${source.directory}" />
			<src path="${test.source.directory}" />
		</javac>
		<copy todir="${test.classes.directory}">
			<fileset dir="${test.source.directory}">
				<patternset refid="non.java.resources" />
				<include name="**/*.txt" />
			</fileset>
		</copy>
		<copy todir="${test.classes.directory}">
			<fileset dir="${source.directory}">
				<patternset refid="non.java.resources" />
			</fileset>
		</copy>
	</target>
	
	<target name="make-plugin-remote" depends="init-make-references,filter-project">
		<copy todir="${plugin.classes.directory}">
			<fileset dir="${war.classes.directory}" />
		</copy>
	</target>

	<target name="make-plugin" depends="init-project-properties">
		<copy todir="${plugin.lib.directory}">
			<fileset dir="${lib.directory}" excludes="${workflow.exclude.library.list}" />
		</copy>
		<copy file="${build.tokenized.resources.directory}/${ojb.properties.file}" todir="${plugin.classes.directory}" overwrite="true">
			<filterset refid="plugin.filterset" />
		</copy>
		<copy file="${build.tokenized.resources.directory}/${ojb.repository.file}" todir="${plugin.classes.directory}" overwrite="true">
			<filterset refid="plugin.filterset" />
		</copy>
		<copy file="${build.workflow.directory}/plugin/workflow.xml" todir="${plugin.metainf.directory}"/>
	</target>
	
	<target name="make-plugin-local" depends="init-project-properties">
		<copy todir="${plugin.classes.directory}">
			<fileset dir="${source.directory}" includes="**/*repository*" />
		</copy>
	</target>
	
	<target name="make-zips" depends="filter-local,filter-workflow-local">
		<zip destfile="settings.zip" basedir="${settings.directory}" />
		<zip destfile="security.zip" basedir="${security.directory}" />
		<zip destfile="skel.zip" basedir="${static.directory}" />
	</target>
	
	<target name="make-source-only-package" depends="init-package-directories">
		<copy todir="${packaging.distribution.directory}" includeemptydirs="false">
			<fileset dir="${basedir}" excludes="**/*.class,${packaged.build.properties.files}" />
		</copy>
	</target>
	
	<target name="make-javadoc" depends="init-project-properties">
		<mkdir dir="${packaging.javadoc.directory}"/>
	    <javadoc destdir="${packaging.javadoc.directory}" packagenames="org.*" locale="en" useexternalfile="yes" maxmemory="512M">
	        <sourcepath>
	        		<pathelement location="${source.directory}"/>
	        </sourcepath>
	    		<classpath refid="compile.source.classpath"/>
	    </javadoc>
	</target>

	<target name="make-binary-only-package" depends="init-package-directories,dist,make-javadoc">
		<copy file="${ant.project.name}-${build.environment}.war" todir="${build.appserver.directory}" />
		<ant target="clean-project" />
		<copy todir="${packaging.distribution.directory}" includeemptydirs="false">
			<fileset dir="${basedir}" includes="*.*,licenses/**/*,build/**/*" excludes="${packaged.build.properties.files}" />
		</copy>
	</target>
	
	<target name="make-binary-and-source-package" depends="make-source-only-package,make-binary-only-package" />
	
	<!-- please be careful if you muck with these settings - you can seriously hose the continuous integration process -->
	<target name="test">
		<mkdir dir="${test.temp.directory}" />
		<mkdir dir="${test.xml.results.directory}" />
		<junit showoutput="true" fork="true" forkmode="once" failureproperty="tests.failed" errorproperty="tests.errored" tempdir="${test.temp.directory}" maxmemory="512M">
			<jvmarg value="-Dorg.kuali.test.KualiTestBase.skipOpenOrInProgressOrReopenedJiraIssues"/> 
			<classpath>
				<path refid="compile.tests.classpath" />
				<pathelement location="${test.classes.directory}" />
			</classpath>
			<formatter type="xml" />
			<batchtest todir="${test.xml.results.directory}">
				<fileset dir="${test.source.directory}">
					<include name="**/*Test.java" />
					<exclude name="**/TransactionalDocumentRuleTest.java" />
					<exclude name="**/${test.spring.shutdown}.java" />
				</fileset>
			</batchtest>
			<test name="org.kuali.${test.spring.shutdown}" todir="${test.xml.results.directory}" />
		</junit>
		<mkdir dir="${test.html.results.directory}" />
		<junitreport todir="${test.html.results.directory}">
			<fileset dir="${test.xml.results.directory}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${test.html.results.directory}" />
		</junitreport>
		<echo message="Generated test results: ${test.html.results.directory}/index.html" />
	</target>
	
	<target name="dist" depends="make-source">
		<copy todir="${war.directory}">
			<fileset dir="${webroot.directory}" excludes="WEB-INF/classes/**/**" />
		</copy>
		<jar jarfile="${ant.project.name}-${build.environment}.war" basedir="${war.directory}" compress="false" />
	</target>

	<target name="dist-plugin" depends="make-source,make-plugin-remote,make-plugin">
		<zip destfile="en-plugins.zip" basedir="${plugin.directory}" />
	</target>

	<target name="dist-workflow-local" if="dist.workflow.local" depends="filter-workflow-local,make-plugin,make-plugin-local">
		<ant target="update-war">
			<property name="source.war.directory" value="${build.workflow.appserver.directory}" />
			<property name="application" value="${workflow.application}" />
		</ant>
		<copy todir="${plugin.deploy.directory}">
			<fileset dir="${plugin.directory}" excludes="**/*.jar"/>
		</copy>
	</target>
	
	<target name="dist-package" depends="init-package-directories">
		<copy todir="${packaging.distribution.directory}">
			<fileset dir="${basedir}" includes="${packaged.build.properties.files}" />
			<filterset>
				<filter token="package-type" value="${package.type}" />
				<filter token="classes-directory" value="${classes.directory}" />
			</filterset>
		</copy>
		<delete file="${packaging.contents.directory}-${package.type}.zip" />
		<zip basedir="${packaging.contents.directory}" destfile="${packaging.contents.directory}-${package.type}.zip" />
	</target>

	<target name="dist-source-only-package" depends="init-source-only-package,make-source-only-package,dist-package"/>
		
	<target name="dist-binary-only-package" depends="init-binary-only-package,make-binary-only-package,dist-package"/>
	
	<target name="dist-binary-and-source-package" depends="init-binary-and-source-package,make-binary-and-source-package,dist-package" />
		
	<target name="continuous-integration" depends="clean,make-tests,test">
		<fail if="tests.failed" message="Tests failed" />
	</target>

	<target name="update-workflow" depends="init-project-properties">
		<property name="${workflow.application}.workflow.environment" value="${build.environment}" />
		<property name="${workflow.application}.tomcat5.home" value="${appserver.home}" />
		<property name="${workflow.application}.plugin.dir" value="${basedir}" />
		<property name="${workflow.application}.institution" value="${ant.project.name}" />
		<property name="${workflow.application}.src.dist.loc" value="${workflow.project.directory}/dist" />
		<propertyset id="en-properties">
		  <propertyref prefix="${workflow.application}."/>
		  <mapper type="glob" from="${workflow.application}.*" to="*"/>
		</propertyset>
		<ant dir="${workflow.project.directory}" target="clean" inheritall="false"/>
		<ant dir="${workflow.project.directory}" target="dist" inheritall="false">
			<propertyset refid="en-properties" />
		</ant>
		<copy file="${workflow.project.directory}/${workflow.application}-${build.environment}.war" todir="${build.workflow.appserver.directory}" overwrite="true" />
		<ant dir="${workflow.project.directory}" target="dist-client-not-iu" inheritall="false">
			<propertyset refid="${workflow.application}-properties" />
		</ant>
		<copy file="${workflow.project.directory}/dist/workflow-client-${workflow.version}.jar" todir="${lib.directory}" overwrite="true" />
		<!--<ant dir="${workflow.project.directory}" target="bundle-workflow" inheritall="false">
			<propertyset refid="${workflow.application}-properties" />
		</ant>
		<copy file="${workflow.project.directory}/dist/workflow_${workflow.version}.zip" tofile="${dependencies.project.directory}/workflow-${workflow.version}-src.zip" overwrite="true"/>
		<ant dir="${workflow.project.directory}" target="clean" inheritall="false"/>
		<ant dir="${workflow.project.directory}" target="javadoc" inheritall="false">
			<propertyset refid="${workflow.application}-properties" />
		</ant>
		<zip destfile="${dependencies.project.directory}/workflow-${workflow.version}-doc.zip" basedir="${workflow.project.directory}/dist/api" />-->
	</target>
	
	<target name="update-war">
		<property name="temp.directory" value="temp" />
		<mkdir dir="${temp.directory}"/>
		<unjar src="${source.war.directory}/${application}-dev.war" dest="${temp.directory}" />
		<copy file="${source.war.directory}/${tomcat.context.file}" todir="${temp.directory}/META-INF" overwrite="true">
			<filterset refid="general.filterset" />
		</copy>
		<replaceregexp file="${temp.directory}/WEB-INF/classes/META-INF/workflow.xml" match="\bdev\b" replace="${build.environment}" byline="true" flags="g" />
		<jar jarfile="${appserver.deploy.dir}/${application}-${build.environment}.war" basedir="${temp.directory}"  />
		<delete dir="${temp.directory}" />
	</target>
	
	<target name="help" description="Describe public targets">
		<echo>--- OVERVIEW ---
			 
	the following configuration files are involved in the build process
			- build.xml
			- build.properties
			- build/*
			- ${user.home}\${ant.project.name}-build.properties
			
	you should start using this build script as follows
			- copy build/configurationFiles/userHomeDirectory/${ant.project.name}-build.properties to ${user.home}
			- obtain the values for ${datasource.username}, ${datasource.password}, ${webservices.keystore.password}
			  and ${encryption.key} for the dev environment from someone on the project, and put them in
			  ${user.home}\${ant.project.name}-build.properties
			- override other property values in ${user.home}\${ant.project.name}-build.properties to permanently
			  customize the build process for your machine or temporarily customize the process for execution of a
			  given build target
			- follow the instructions associated with the dist-local target and run that target
			- run the echo-properties target and review the results
			- click the "Run/Stop/Restart MyEclipse Application Servers" button in the "Java (default)" perspective in
			eclipse to start tomcat
			- launch a browser and access http://localhost:8080/kuali-dev
			
	you can override the default log4j settings for your local deployments by copying 
		build/configurationFiles/externalConfigDirectory/settings/${log4j.settings.file} to
			${user.home}/${log4j.settings.file} and modifying as desired.  you will also need to run the dist-local target
			for this change to take effect.
			
			if you would like to suggest a configuration change, enter a Jira issue in the KULCFG project with the details
			
			--- TARGETS ---

			dist-local: prepares tokenized resources and local configuration files and deploys tomcat context file on development workstation
			- this target should be run each time you update the project, change property values in ${user.home}\${ant.project.name}-build.properties,
			or make a change that you want to apply to the application workflow plugin
			- tomcat should not be running when you are executing this target
			
			echo-properties: executes ant echoproperties task, thereby printing out all the properties that have been set

			dist-test-local: runs dist-local and make-tests to prepare for running the tests locally without disturbing cas and workflow, if they
			are running in tomcat locally
			
			test-local: runs all project tests and generates results
			- you should run dist-test-local before running this target, if the criteria listed above for runinng dist-local are met
			- if you are running cas or workflow locally, you need to start tomcat after running dist-test-local and before running this target
			
			clean: removes all build output
		</echo>
	</target>
</project>