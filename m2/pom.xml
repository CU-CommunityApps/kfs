<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright 2005-2012 The Kuali Foundation Licensed under the Educational 
	Community License, Version 2.0 (the "License"); you may not use this file 
	except in compliance with the License. You may obtain a copy of the License 
	at http://www.opensource.org/licenses/ecl2.php Unless required by applicable 
	law or agreed to in writing, software distributed under the License is distributed 
	on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
	express or implied. See the License for the specific language governing permissions 
	and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.kuali.pom</groupId>
		<artifactId>kuali-common</artifactId>
		<version>1.1.7</version>
	</parent>
	<groupId>org.kuali.kfs</groupId>
	<artifactId>kfs</artifactId>
	<packaging>pom</packaging>
	<name>Kuali Financial System</name>
	<inceptionYear>2004</inceptionYear>
	<version>5.0-SNAPSHOT</version>
	<description>
  </description>

	<ciManagement>
		<url>https://ci.kfs.kuali.org</url>
	</ciManagement>

	<properties>
		<!-- application properties -->
		<application.id>${project.artifactId}</application.id>
	
		<!-- Maven build paths -->
		<classes.output.dir>../../work/web-root/WEB-INF/classes</classes.output.dir>
		<optional.module.base.path>org/kuali/kfs/module</optional.module.base.path>
	
		<!-- optional module switches (changed by profiles - do not change manually) -->
		<module.labor.distribution.enabled>false</module.labor.distribution.enabled>
		<module.endowment.enabled>false</module.endowment.enabled>
		<module.capital.asset.enabled>false</module.capital.asset.enabled>		
		<module.accounts.receivable.enabled>false</module.accounts.receivable.enabled>
		<module.purchasing.enabled>false</module.purchasing.enabled>
		<module.contracts.and.grants.enabled>false</module.contracts.and.grants.enabled>
		<module.external.kuali.coeus.enabled>false</module.external.kuali.coeus.enabled>
	
	
		<contracts.and.grants.spring.files></contracts.and.grants.spring.files>
		<core.spring.source.files>classpath:net/bull/javamelody/monitoring-spring.xml,classpath:org/kuali/kfs/sys/spring-sys.xml,classpath:org/kuali/kfs/coa/spring-coa.xml,classpath:org/kuali/kfs/fp/spring-fp.xml,classpath:org/kuali/kfs/gl/spring-gl.xml,classpath:org/kuali/kfs/pdp/spring-pdp.xml,classpath:org/kuali/kfs/vnd/spring-vnd.xml</core.spring.source.files>

		<external.config.directory>/opt</external.config.directory>
		<base.security.directory>${external.config.directory}/security</base.security.directory>
		<base.settings.directory>${external.config.directory}/settings</base.settings.directory>
		<base.logs.directory>${external.config.directory}/logs</base.logs.directory>
		<base.work.directory>${external.config.directory}/work</base.work.directory>

		<security.directory>${base.security.directory}/${build.environment}/kfs</security.directory>
		<!-- the directory that contains the non-secure property files that are nonetheless external to the deployed application -->
		<settings.directory>${base.settings.directory}/${build.environment}/kfs</settings.directory>
		<!-- the directory containing the log files output by the application -->
		<logs.directory>${base.logs.directory}/${build.environment}/kfs</logs.directory>
		<!-- the working directory that is external to the application -->
		<external.work.directory>${base.work.directory}/${build.environment}/kfs</external.work.directory>
		<!-- the base working directory for storage of note-associated attachments that are uploaded by users -->
		<attachments.directory>${external.work.directory}/attachments</attachments.directory>
		<!-- the base working directory for storage of batch input files -->
		<staging.directory>${external.work.directory}/staging</staging.directory>
		<!-- a directory for temporary file storage, e.g. during pdf generation -->
		<temp.directory>${external.work.directory}/temp</temp.directory>
		<!-- the base working directory for oltp and batch report generation -->
		<reports.directory>${external.work.directory}/reports</reports.directory>

		
		<!-- library versions -->
		<rice.version>2.0.2-SNAPSHOT</rice.version>
		<servlet-api.version>2.5</servlet-api.version>
		<jsp-api.version>2.1</jsp-api.version>
	</properties>

	<profiles>
		<profile><!-- ar -->
			<id>ar</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.accounts.receivable.enabled>true</module.accounts.receivable.enabled>
			</properties>
		</profile>
		<profile><!-- cg -->
			<id>cg</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.contracts.and.grants.enabled>true</module.contracts.and.grants.enabled>
				<contracts.and.grants.spring.files>,classpath:org/kuali/kfs/module/cg/spring-cg.xml</contracts.and.grants.spring.files>
			</properties>
		</profile>
		<profile><!-- cam -->
			<id>cam</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.capital.asset.enabled>true</module.capital.asset.enabled>
			</properties>
		</profile>
		<profile><!-- cab -->
			<id>cab</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.capital.asset.enabled>true</module.capital.asset.enabled>
				<module.purchasing.enabled>true</module.purchasing.enabled>
			</properties>
		</profile>
		<profile>
			<id>bc</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.labor.distribution.enabled>true</module.labor.distribution.enabled>			
			</properties>
		</profile>
		<profile>
			<id>ec</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.labor.distribution.enabled>true</module.labor.distribution.enabled>			
			</properties>
		</profile>
		<profile>
			<id>endow</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.endowment.enabled>true</module.endowment.enabled>
			</properties>
		</profile>
		<profile>
			<id>ld</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.labor.distribution.enabled>true</module.labor.distribution.enabled>			
			</properties>
		</profile>
		<profile>
			<id>purap</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<module.purchasing.enabled>true</module.purchasing.enabled>
			</properties>
		</profile>
		<profile>
			<id>local</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<external.config.directory>../../temp/opt</external.config.directory>
				<security.directory>${base.security.directory}</security.directory>
				<!-- the directory that contains the non-secure property files that are nonetheless external to the deployed application -->
				<settings.directory>${base.settings.directory}</settings.directory>
				<!-- the directory containing the log files output by the application -->
				<logs.directory>${base.logs.directory}</logs.directory>
				<!-- the working directory that is external to the application -->
				<external.work.directory>${base.work.directory}</external.work.directory>
				<!-- the base working directory for storage of note-associated attachments that are uploaded by users -->
				<attachments.directory>${external.work.directory}/attachments</attachments.directory>
				<!-- the base working directory for storage of batch input files -->
				<staging.directory>${external.work.directory}/staging</staging.directory>
				<!-- a directory for temporary file storage, e.g. during pdf generation -->
				<temp.directory>${external.work.directory}/temp</temp.directory>
				<!-- the base working directory for oltp and batch report generation -->
				<reports.directory>${external.work.directory}/reports</reports.directory>
			</properties>
		</profile>
	</profiles>

	<build>
		<testResources>
			<!-- NOTE: Because Maven test runs can be spawned in a new JVM, the system 
				properties on the initial Maven command line are not necessarily propagated 
				to the spawned test run. This means we cannot automatically use System property 
				definitions to override configuration parameters. To work around this, we 
				have configured the test resources to be pre-filtered by maven prior to running, 
				which results in config parameter tokens being replaced by System property 
				definitions (because the ${token} syntax happens to be the same. So. If you 
				need to introduce a new configuration property that needs to be overridable 
				by Bamboo/CI, make sure to set the property in one of the below config files, 
				so that it can be pre-emptively replaced by Maven prior to kicking off the 
				test run. E.g. <param name="my.new.param">${my.new.param}</param> -->
			<!-- <testResource> <filtering>true</filtering> <directory>${basedir}/src/test/resources/META-INF</directory> 
				<includes> <include>${project.name}-test-config.xml</include> <include>sample-app-test-config.xml</include> 
				</includes> </testResource> <testResource> <directory>${basedir}/src/test/resources</directory> 
				</testResource> -->
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-changes-plugin</artifactId>
					<version>2.6</version>
				</plugin>
				<plugin><!-- maven-enforcer-plugin -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>1.0.1</version>
					<!-- This plugin helps enforce that excluded dependencies stay excluded 
						and don't sneak back in through another dependency (a global ban). Here are 
						a few common situations this plugin helps with: 1) multiple implementations 
						of a dependency - you only want to use one implementation (ex: commons-logging 
						vs jcl-over-slf4j, javax.mail vs geronimo-javamail_1.4_spec) 2) similar maven 
						artifacts are produced for the same project - you only need to include one 
						(ex: cglib vs cglib-nodep) 3) an artifact's group id or artifact id has been 
						renamed - maven considers these different artifacts and you only want to 
						include one (ex: opensymphony:quartz vs org.opensymphony.quartz:quartz vs 
						org.quartz-scheduler:quartz) 4) an artifact was added to the container and 
						no longer is needed (ex: jaxb in java 6) This plugin also helps enforce consistent 
						a consistent Java & Maven version are used. This helps the stability of builds 
						across systems. This plugin also enforces that plugins specify a version 
						number. Using meta version tags or not specifing a version on a plugin is 
						a decrecated feature as it leads to build instability. Finally, the DependencyConvergence 
						rule helps ensure that all of our submodules are resolving the same versions 
						of artifacts by making sure that all deps converge. This managed at the dep 
						management section which is critical. -->
					<executions>
						<execution>
							<id>enforce-banned-dependencies</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<phase>${enforcer.phase}</phase>
							<configuration>
								<rules>
									<requireJavaVersion>
										<version>1.6</version>
									</requireJavaVersion>
									<requireMavenVersion>
										<version>[3.0,4.0)</version>
									</requireMavenVersion>
									<!-- has problems with snapshots <DependencyConvergence /> -->

									<!-- Maven 3 Migration: This rule is not supported by Maven 3. See: 
										http://jira.codehaus.org/browse/MENFORCER-98 -->
									<!-- <requirePluginVersions> <message>Specifying a plugin w/o a 
										version is a deprecated feature b/c it can cause non-reproducible builds</message> 
										<banLatest>true</banLatest> <banRelease>true</banRelease> <banSnapshots>true</banSnapshots> 
										<phases>clean,deploy,site</phases> </requirePluginVersions> -->

									<bannedDependencies>
										<excludes>
											<!-- using the kuali version of ojb -->
											<exclude>ojb</exclude>

											<!-- renamed (decrecated) groupids -->
											<exclude>struts</exclude>
											<exclude>wss4j</exclude>
											<exclude>acegisecurity</exclude>
											<exclude>xstream</exclude>
											<exclude>uk.ltd.getahead</exclude>
											<exclude>quartz</exclude>
											<exclude>jdom</exclude>
											<exclude>groovy</exclude>
											<exclude>bouncycastle</exclude>
											<exclude>org.opensymphony.quartz</exclude>
											<exclude>opensymphony:quartz</exclude>
											<exclude>javassist</exclude>
											<exclude>org.jasig.cas</exclude>
											<exclude>com.google.code.google-collections</exclude>
											<exclude>com.google.collections</exclude>

											<!-- jcl-over-slf4j is an alternate implementation of commons-logging 
												- excluding commons-logging -->
											<exclude>commons-logging</exclude>
											<!-- already including a different jcl-over-slf4j -->
											<exclude>org.slf4j:jcl104-over-slf4j</exclude>
											<!-- excluding all slf4j -->
											<exclude>org.slf4j</exclude>

											<!-- already including cglib-nodep -->
											<exclude>cglib:cglib</exclude>
											<!-- already including the jdk16 version -->
											<exclude>org.bouncycastle:bcprov-jdk14</exclude>
											<!-- already including the jdk16 version -->
											<exclude>org.bouncycastle:bcprov-jdk15</exclude>

											<!-- excluding old jstl implementations which can cause hard-to-detect 
												errors -->
											<exclude>taglibs:standard</exclude>
											<exclude>javax.servlet:jstl</exclude>
											<!-- allowing (including) a specific version below -->

											<!-- already including javax.mail -->
											<exclude>javamail</exclude>
											<exclude>geronimo:geronimo-mail</exclude>
											<exclude>org.apache.geronimo.javamail:geronimo-javamail_1.4_mail</exclude>
											<exclude>org.apache.geronimo.javamail:geronimo-javamail_1.3.1_mail</exclude>
											<exclude>org.apache.geronimo.modules:geronimo-mail</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-javamail_1.4_spec</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-javamail_1.3.1_spec</exclude>

											<!-- already including javax.transation -->
											<exclude>org.apache.geronimo.specs:geronimo-jta_1.1_spec</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-jta_1.0.1B_spec</exclude>
											<exclude>geronimo-spec:geronimo-spec-jta</exclude>
											<exclude>org.ow2.spec.ee:ow2-jta-1.1-spec</exclude>
											<exclude>jta</exclude>

											<!-- aleady including the hibernate implementation -->
											<exclude>javax.persistence</exclude>

											<!-- activation apis - in jdk 6 -->
											<exclude>javax.activation</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-activation_1.0.2_spec</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-activation_1.1_spec</exclude>

											<!-- metadata apis - in jdk 6 -->
											<exclude>javax.jws</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-ws-metadata_2.0_spec</exclude>

											<!-- These are repackaged parser apis - some of these apis are 
												included in jdk 6. The non-jdk parsers can be added indivually if needed. -->
											<exclude>xerces:xmlParserAPIs</exclude>
											<exclude>xml-apis</exclude>

											<!-- group ids for many sun xml apis - in jdk 6 -->
											<exclude>javax.xml</exclude>
											<exclude>com.sun.xml</exclude>

											<!-- jaxb apis - in jdk 6 -->
											<exclude>javax.xml.bind</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-jaxb_2.1_spec</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-jaxb_2.2_spec</exclude>

											<!-- jaxws apis - in jdk 6 -->
											<exclude>javax.xml.ws</exclude>
											<exclude>com.sun.xml.ws</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-jaxws_2.1_spec</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-jaxws_2.2_spec</exclude>

											<!-- stax apis - in jdk 6 -->
											<exclude>javax.xml.stream</exclude>
											<exclude>com.sun.xml.stream</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-stax-api_1.0_spec</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-stax-api_1.2_spec</exclude>
											<exclude>stax</exclude>

											<!-- jaxp apis - in jdk 6 -->
											<exclude>javax.xml.parsers</exclude>
											<exclude>com.sun.xml.parsers</exclude>
											<exclude>org.apace.servicemix.specs:org.apache.servicemix.specs.jaxp-api-1.4
											</exclude>
											<exclude>
												org.apache.servicemix.specs:org.apache.servicemix.specs.jaxp-api-1.3
											</exclude>

											<!-- saaj apis - in jdk 6 -->
											<exclude>javax.xml.soap</exclude>
											<exclude>javax.xml.soap:saaj-api</exclude>
											<exclude>javax.xml.soap:saaj-impl</exclude>
											<exclude>com.sun.xml.messaging.saaj</exclude>
											<exclude>org.apache.geronimo.specs:geronimo-saaj_1.3_spec</exclude>
											<exclude>geronimo-spec:geronimo-spec-saaj</exclude>
											<exclude>org.apache.servicemix.specs:org.apache.servicemix.specs.saaj-api-1.3</exclude>

											<!-- excluding standard release - we are using a patches kuali 
												version because of http://bugs.sun.com/view_bug.do?bug_id=6528714 https://issues.apache.org/jira/browse/BEANUTILS-340 -->
											<exclude>commons-beanutils:commons-beanutils</exclude>
											<exclude>org.apache.commons:commons-beanutils</exclude>

											<!-- exclude eh cache in general - only allow at a specific scope -->
											<exclude>net.sf.ehcache</exclude>
										</excludes>

										<includes>
											<!-- only allow in this specific version -->
											<include>javax.servlet:jstl:${jstl.version}</include>
											<include>org.slf4j:*:${slf4j.version}</include>
											<include>net.sf.ehcache:*:${ehcache.version}:jar:runtime</include>
										</includes>
									</bannedDependencies>
								</rules>
								<fail>true</fail>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin><!-- maven-compiler-plugin -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<!-- impl module is huge and requires at least 768m to compile -->
						<fork>true</fork>
						<meminitial>256</meminitial>
						<maxmem>1024</maxmem>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.6</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>tomcat-maven-plugin</artifactId>
					<version>1.1</version>
					<configuration>
						<port>${appserver.port}</port>
						<path>${web.launch.context.path}</path>
						<systemProperties>
							<web.bootstrap.spring.file>${bootstrap.spring.file}</web.bootstrap.spring.file>
						</systemProperties>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>com.oracle</groupId>
							<artifactId>${oracle.jdbc.artifactId}</artifactId>
							<version>${oracle.jdbc.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>mysql</groupId>
							<artifactId>${mysql.jdbc.artifactId}</artifactId>
							<version>${mysql.jdbc.version}</version>
							<scope>runtime</scope>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>1.2</version>
				</plugin>
				<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-surefire-plugin</artifactId> 
					<version>${surefire.plugin.version}</version> <configuration> <skip>${maven.surefire.skip}</skip> 
					<useFile>false</useFile> <failIfNoTests>false</failIfNoTests> <includes> 
					<include>${maven.surefire.includes}</include> </includes> <reportFormat>plain</reportFormat> 
					</configuration> </plugin> -->
			</plugins>
		</pluginManagement>

		<plugins>
			<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>cobertura-maven-plugin</artifactId> 
				</plugin> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-surefire-plugin</artifactId> 
				</plugin> -->
		</plugins>

	</build>
	<modules>
		<module>core</module>
		<module>optional</module>
		<module>web</module>
	</modules>

	<repositories>
		<repository>
			<id>kuali.nexus</id>
			<name>Nexus Repository Manager</name>
			<url>http://nexus.kuali.org/content/groups/public</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>${servlet-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>jsp-api</artifactId>
				<version>${jsp-api.version}</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krms-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-location-web</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-location-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-kew-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-ksb-web</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-kns</artifactId>
			<version>${rice.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<scope>provided</scope>
		</dependency>

	</dependencies>

</project>
