Index: work/src/org/kuali/rice/kim/service/impl/IdentityManagementServiceImpl.java
===================================================================
--- work/src/org/kuali/rice/kim/service/impl/IdentityManagementServiceImpl.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/service/impl/IdentityManagementServiceImpl.java	(revision 32112)
@@ -18,10 +18,11 @@
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.log4j.Logger;
 import org.kuali.rice.core.api.criteria.QueryByCriteria;
+import org.kuali.rice.kim.api.common.assignee.Assignee;
 import org.kuali.rice.kim.api.group.Group;
 import org.kuali.rice.kim.api.group.GroupService;
 import org.kuali.rice.kim.api.identity.IdentityService;
-import org.kuali.rice.kim.api.identity.Type;
+import org.kuali.rice.kim.api.identity.CodedAttribute;
 import org.kuali.rice.kim.api.identity.affiliation.EntityAffiliationType;
 import org.kuali.rice.kim.api.identity.entity.Entity;
 import org.kuali.rice.kim.api.identity.entity.EntityDefault;
@@ -30,14 +31,12 @@
 import org.kuali.rice.kim.api.identity.external.EntityExternalIdentifierType;
 import org.kuali.rice.kim.api.identity.principal.Principal;
 import org.kuali.rice.kim.api.permission.Permission;
+import org.kuali.rice.kim.api.permission.PermissionService;
 import org.kuali.rice.kim.api.responsibility.Responsibility;
 import org.kuali.rice.kim.api.responsibility.ResponsibilityAction;
 import org.kuali.rice.kim.api.responsibility.ResponsibilityService;
 import org.kuali.rice.kim.api.services.IdentityManagementService;
 import org.kuali.rice.kim.api.services.KimApiServiceLocator;
-import org.kuali.rice.kim.api.common.assignee.Assignee;
-import org.kuali.rice.kim.api.permission.PermissionService;
-import org.kuali.rice.kim.bo.role.dto.PermissionAssigneeInfo;
 
 import java.util.HashMap;
 import java.util.List;
@@ -144,7 +143,8 @@
 
     @Override
     public boolean isPermissionDefinedForTemplateName(String namespaceCode, String permissionTemplateName, Map<String, String> permissionDetails) {
-        return getPermissionService().isPermissionDefinedForTemplateName(namespaceCode, permissionTemplateName, permissionDetails);
+        return getPermissionService().isPermissionDefinedByTemplateName(namespaceCode, permissionTemplateName,
+                permissionDetails);
     }
 
     @Override
@@ -158,8 +158,8 @@
 	public List<Assignee> getPermissionAssigneesForTemplateName(String namespaceCode,
 			String permissionTemplateName, Map<String, String> permissionDetails,
 			Map<String, String> qualification) {
-		return this.permissionService.getPermissionAssigneesForTemplateName( namespaceCode,
-				permissionTemplateName, new HashMap<String, String>(permissionDetails), new HashMap<String, String>(qualification) );
+		return this.permissionService.getPermissionAssigneesByTemplateName(namespaceCode, permissionTemplateName,
+                new HashMap<String, String>(permissionDetails), new HashMap<String, String>(qualification));
 	}
 
     // GROUP SERVICE
@@ -188,19 +188,19 @@
 	}
     @Override
     public List<String> getGroupIdsForPrincipal(String principalId) {
-		return getGroupService().getGroupIdsForPrincipal(principalId);
+		return getGroupService().getGroupIdsByPrincipalId(principalId);
 	}
     @Override
     public List<String> getGroupIdsForPrincipal(String principalId, String namespaceCode ) {
-		return getGroupService().getGroupIdsForPrincipalByNamespace(principalId, namespaceCode );
+		return getGroupService().getGroupIdsByPrincipalIdAndNamespaceCode(principalId, namespaceCode);
 	}
     @Override
     public List<Group> getGroupsForPrincipal(String principalId) {
-		return getGroupService().getGroupsForPrincipal(principalId);
+		return getGroupService().getGroupsByPrincipalId(principalId);
 	}
     @Override
     public List<Group> getGroupsForPrincipal(String principalId, String namespaceCode ) {
-		return getGroupService().getGroupsForPrincipalByNamespace(principalId, namespaceCode );
+		return getGroupService().getGroupsByPrincipalIdAndNamespaceCode(principalId, namespaceCode);
 	}
     @Override
     public List<String> getMemberGroupIds(String groupId) {
@@ -216,7 +216,7 @@
 	}
     @Override
     public Group getGroupByName(String namespaceCode, String groupName) {
-		return getGroupService().getGroupByName( namespaceCode, groupName );
+		return getGroupService().getGroupByNameAndNamespaceCode(namespaceCode, groupName);
     }
     @Override
     public List<String> getParentGroupIds(String groupId) {
@@ -322,12 +322,12 @@
     }
 
     @Override
-	public Type getAddressType( String code ) {
+	public CodedAttribute getAddressType( String code ) {
 		return getIdentityService().getAddressType(code);
 	}
 
     @Override
-    public Type getEmailType( String code ) {
+    public CodedAttribute getEmailType( String code ) {
 		return getIdentityService().getEmailType(code);
 	}
 
@@ -337,23 +337,23 @@
 	}
 
     @Override
-	public Type getCitizenshipStatus( String code ) {
-			return Type.Builder.create(getIdentityService().getCitizenshipStatus(code)).build();
+	public CodedAttribute getCitizenshipStatus( String code ) {
+			return CodedAttribute.Builder.create(getIdentityService().getCitizenshipStatus(code)).build();
 	}
     @Override
-	public Type getEmploymentStatus( String code ) {
+	public CodedAttribute getEmploymentStatus( String code ) {
 			return getIdentityService().getEmploymentStatus(code);
 	}
     @Override
-	public Type getEmploymentType( String code ) {
+	public CodedAttribute getEmploymentType( String code ) {
 			return getIdentityService().getEmploymentType(code);
 	}
     @Override
-	public Type getEntityNameType( String code ) {
+	public CodedAttribute getEntityNameType( String code ) {
 			return getIdentityService().getNameType(code);
 	}
     @Override
-	public Type getEntityType( String code ) {
+	public CodedAttribute getEntityType( String code ) {
 		return getIdentityService().getEntityType(code);
 	}
     @Override
@@ -361,7 +361,7 @@
 			return getIdentityService().getExternalIdentifierType(code);
 	}
     @Override
-	public Type getPhoneType( String code ) {
+	public CodedAttribute getPhoneType( String code ) {
 			return getIdentityService().getPhoneType(code);
 	}
 
Index: work/src/org/kuali/rice/kim/impl/jaxb/RoleXmlUtil.java
===================================================================
--- work/src/org/kuali/rice/kim/impl/jaxb/RoleXmlUtil.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/impl/jaxb/RoleXmlUtil.java	(revision 32112)
@@ -16,23 +16,27 @@
 package org.kuali.rice.kim.impl.jaxb;
 
 import org.apache.commons.lang.StringUtils;
+import org.joda.time.DateTime;
+import org.kuali.rice.core.api.criteria.QueryByCriteria;
 import org.kuali.rice.core.util.jaxb.NameAndNamespacePair;
+import org.kuali.rice.kim.api.KimConstants.KimUIConstants;
 import org.kuali.rice.kim.api.group.GroupContract;
 import org.kuali.rice.kim.api.identity.principal.PrincipalContract;
 import org.kuali.rice.kim.api.permission.PermissionContract;
 import org.kuali.rice.kim.api.role.RoleContract;
+import org.kuali.rice.kim.api.role.RoleMember;
 import org.kuali.rice.kim.api.role.RoleMemberContract;
 import org.kuali.rice.kim.api.role.RoleService;
 import org.kuali.rice.kim.api.services.KimApiServiceLocator;
-import org.kuali.rice.kim.util.KimConstants.KimUIConstants;
 
 import javax.xml.bind.UnmarshalException;
-import java.sql.Date;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Set;
 
+import static org.kuali.rice.core.api.criteria.PredicateFactory.equal;
+
 /**
  * Helper class containing static methods for aiding in parsing role XML.
  * 
@@ -62,11 +66,6 @@
         // Validate the role and (if applicable) retrieve the ID from an existing matching role.
         validateAndPrepareRole(newRole);
         
-        // If necessary, assign a new role ID.
-        if (StringUtils.isBlank(newRole.getRoleId())) {
-            newRole.setRoleId(KimApiServiceLocator.getRoleService().getNextAvailableRoleId());
-        }
-        
         // Save the role.
         KimApiServiceLocator.getRoleService().saveRole(newRole.getRoleId(), newRole.getRoleName(), newRole.getRoleDescription(), newRole.getActive().booleanValue(),
                 newRole.getKimTypeId(), newRole.getNamespaceCode());
@@ -112,8 +111,8 @@
         RoleMemberContract newMember = KimApiServiceLocator.getRoleService().saveRoleMemberForRole(
                 null, newRoleMember.getMemberId(), newRoleMember.getMemberTypeCode(),
                         newRoleMember.getRoleId(), newRoleMember.getQualifications(),
-                                (newRoleMember.getActiveFromDate() != null) ? new Date(newRoleMember.getActiveFromDate().getMillis()) : null,
-                                (newRoleMember.getActiveToDate() != null) ? new Date(newRoleMember.getActiveToDate().getMillis()) : null);
+                                (newRoleMember.getActiveFromDate() != null) ? new DateTime(newRoleMember.getActiveFromDate().getMillis()) : null,
+                                (newRoleMember.getActiveToDate() != null) ? new DateTime(newRoleMember.getActiveToDate().getMillis()) : null);
         
         return newMember.getRoleMemberId();
     }
@@ -157,7 +156,8 @@
         }
         
         // Remove any role members whose IDs are not in the set.
-        List<? extends RoleMemberContract> roleMembers = KimApiServiceLocator.getRoleService().findRoleMembers(Collections.singletonMap("roleId", roleId));
+        List<RoleMember> roleMembers = KimApiServiceLocator.getRoleService().findRoleMembers(
+                QueryByCriteria.Builder.fromPredicates(equal("roleId", roleId))).getResults();
         if (roleMembers != null && !roleMembers.isEmpty()) {
             for (RoleMemberContract roleMember : roleMembers) {
                 if (!existingRoleMemberIds.contains(roleMember.getRoleMemberId())) {
@@ -192,7 +192,8 @@
         }
         
         // Attempt to find an existing matching role, and assign its ID to the validated role if it exists.
-        String matchingId = KimApiServiceLocator.getRoleService().getRoleIdByName(newRole.getNamespaceCode(), newRole.getRoleName());
+        String matchingId = KimApiServiceLocator.getRoleService().getRoleIdByNameAndNamespaceCode(
+                newRole.getNamespaceCode(), newRole.getRoleName());
         if (StringUtils.isNotBlank(matchingId)) {
             newRole.setRoleId(matchingId);
         }
@@ -207,7 +208,8 @@
             RoleMemberXmlDTO.OutsideOfRole standaloneMember = (RoleMemberXmlDTO.OutsideOfRole) newRoleMember;
             if (standaloneMember.getRoleNameAndNamespace() != null) {
                 // If a name + namespace combo is given, verify that the combo maps to an existing role.
-                String existingId = KimApiServiceLocator.getRoleService().getRoleIdByName(standaloneMember.getRoleNamespaceCode(), standaloneMember.getRoleName());
+                String existingId = KimApiServiceLocator.getRoleService().getRoleIdByNameAndNamespaceCode(
+                        standaloneMember.getRoleNamespaceCode(), standaloneMember.getRoleName());
                 if (StringUtils.isBlank(existingId)) {
                     throw new UnmarshalException("Cannot create role member for role with name \"" + standaloneMember.getRoleName() + "\" and namespace \"" +
                             standaloneMember.getRoleNamespaceCode() + "\" because such a role does not exist");
@@ -288,7 +290,7 @@
             } else if (KimUIConstants.MEMBER_TYPE_GROUP_CODE.equals(memberTypeCode)) {
                 // If the member is a group, ensure that the group exists and does not conflict with any existing group ID information.
                 NameAndNamespacePair groupNameAndNamespace = newRoleMember.getGroupName();
-                GroupContract tempGroup = KimApiServiceLocator.getGroupService().getGroupByName(
+                GroupContract tempGroup = KimApiServiceLocator.getGroupService().getGroupByNameAndNamespaceCode(
                         groupNameAndNamespace.getNamespaceCode(), groupNameAndNamespace.getName());
                 if (tempGroup == null) {
                     throw new UnmarshalException("Cannot create group role member with namespace \"" + groupNameAndNamespace.getNamespaceCode() +
@@ -304,7 +306,7 @@
             } else if (KimUIConstants.MEMBER_TYPE_ROLE_CODE.equals(memberTypeCode)) {
                 // If the member is another role, ensure that the role exists, does not conflict with any existing role ID information, and is not the member's role.
                 NameAndNamespacePair roleNameAndNamespace = newRoleMember.getRoleNameAsMember();
-                RoleContract tempRole = KimApiServiceLocator.getRoleService().getRoleByName(
+                RoleContract tempRole = KimApiServiceLocator.getRoleService().getRoleByNameAndNamespaceCode(
                         roleNameAndNamespace.getNamespaceCode(), roleNameAndNamespace.getName());
                 if (tempRole == null) {
                     throw new UnmarshalException("Cannot use role with namespace \"" + roleNameAndNamespace.getNamespaceCode() +
@@ -341,7 +343,7 @@
             RolePermissionXmlDTO.OutsideOfRole standaloneRolePerm = (RolePermissionXmlDTO.OutsideOfRole) newRolePermission;
             if (standaloneRolePerm.getRoleNameAndNamespace() != null) {
                 // If a role name + namespace is given, assign or validate the role ID accordingly.
-                String tempRoleId = KimApiServiceLocator.getRoleService().getRoleIdByName(
+                String tempRoleId = KimApiServiceLocator.getRoleService().getRoleIdByNameAndNamespaceCode(
                         standaloneRolePerm.getRoleNamespaceCode(), standaloneRolePerm.getRoleName());
                 if (StringUtils.isBlank(tempRoleId)) {
                     throw new UnmarshalException("Cannot assign permission to role with namespace \"" + standaloneRolePerm.getRoleNamespaceCode() +
@@ -370,7 +372,7 @@
         
         // If the permission is being identified by name and namespace, derive or validate its permission ID accordingly.
         if (newRolePermission.getPermissionNameAndNamespace() != null) {
-            PermissionContract permission = KimApiServiceLocator.getPermissionService().getPermissionByName(
+            PermissionContract permission = KimApiServiceLocator.getPermissionService().findPermByNamespaceCodeAndName(
                     newRolePermission.getPermissionNamespaceCode(), newRolePermission.getPermissionName());
             if (permission == null) {
                 throw new UnmarshalException("Cannot get role assigned to permission with namespace \"" + newRolePermission.getPermissionNamespaceCode() +
Index: work/src/org/kuali/rice/kim/impl/jaxb/RoleMemberXmlDTO.java
===================================================================
--- work/src/org/kuali/rice/kim/impl/jaxb/RoleMemberXmlDTO.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/impl/jaxb/RoleMemberXmlDTO.java	(revision 32112)
@@ -20,13 +20,14 @@
 import org.kuali.rice.core.api.util.jaxb.DateTimeAdapter;
 import org.kuali.rice.core.util.jaxb.NameAndNamespacePair;
 import org.kuali.rice.core.util.jaxb.NameAndNamespacePairValidatingAdapter;
+import org.kuali.rice.kim.api.KimConstants.KimUIConstants;
 import org.kuali.rice.kim.api.group.GroupContract;
 import org.kuali.rice.kim.api.identity.principal.PrincipalContract;
 import org.kuali.rice.kim.api.jaxb.QualificationListAdapter;
 import org.kuali.rice.kim.api.role.RoleContract;
+import org.kuali.rice.kim.api.role.RoleMember;
 import org.kuali.rice.kim.api.role.RoleMemberContract;
 import org.kuali.rice.kim.api.services.KimApiServiceLocator;
-import org.kuali.rice.kim.util.KimConstants.KimUIConstants;
 
 import javax.xml.bind.Unmarshaller;
 import javax.xml.bind.annotation.XmlAccessType;
@@ -103,7 +104,7 @@
      * the member principal/group/role name and (if applicable) namespace will get populated.
      * @throws IllegalArgumentException if roleMember is null, has an invalid member type code, or refers to a nonexistent principal/group/role.
      */
-    public RoleMemberXmlDTO(RoleMemberContract roleMember, boolean populateMemberId) {
+    public RoleMemberXmlDTO(RoleMember roleMember, boolean populateMemberId) {
         if (roleMember == null) {
             throw new IllegalArgumentException("roleMember cannot be null");
         }
@@ -404,7 +405,7 @@
             super();
         }
         
-        public OutsideOfRole(RoleMemberContract roleMember, boolean populateMemberId) {
+        public OutsideOfRole(RoleMember roleMember, boolean populateMemberId) {
             super(roleMember, populateMemberId);
             this.roleId = roleMember.getRoleId();
             RoleContract tempRole = KimApiServiceLocator.getRoleService().getRole(roleId);
@@ -485,7 +486,7 @@
             super();
         }
         
-        public WithinRole(RoleMemberContract roleMember, boolean populateMemberId) {
+        public WithinRole(RoleMember roleMember, boolean populateMemberId) {
             super(roleMember, populateMemberId);
             this.roleId = roleMember.getRoleId();
         }
Index: work/src/org/kuali/rice/kim/impl/jaxb/RoleMembersXmlDTO.java
===================================================================
--- work/src/org/kuali/rice/kim/impl/jaxb/RoleMembersXmlDTO.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/impl/jaxb/RoleMembersXmlDTO.java	(revision 32112)
@@ -31,13 +31,17 @@
 import javax.xml.bind.annotation.XmlTransient;
 import javax.xml.bind.annotation.XmlType;
 
+import org.kuali.rice.core.api.criteria.QueryByCriteria;
 import org.kuali.rice.core.util.jaxb.RiceXmlExportList;
 import org.kuali.rice.core.util.jaxb.RiceXmlImportList;
 import org.kuali.rice.core.util.jaxb.RiceXmlListAdditionListener;
 import org.kuali.rice.core.util.jaxb.RiceXmlListGetterListener;
+import org.kuali.rice.kim.api.role.RoleMember;
 import org.kuali.rice.kim.api.role.RoleMemberContract;
 import org.kuali.rice.kim.api.services.KimApiServiceLocator;
 
+import static org.kuali.rice.core.api.criteria.PredicateFactory.equal;
+
 /**
  * Base class representing an unmarshalled &lt;roleMembers&gt; element.
  * Refer to the static inner classes for more information about the specific contexts.
@@ -203,7 +207,8 @@
         }
         
         void beforeMarshal(Marshaller marshaller) {
-            List<? extends RoleMemberContract> tempMembers = KimApiServiceLocator.getRoleService().findRoleMembers(Collections.singletonMap("roleId", roleId));
+            List<RoleMember> tempMembers = KimApiServiceLocator.getRoleService().findRoleMembers(
+                    QueryByCriteria.Builder.fromPredicates(equal("roleId", roleId))).getResults();
             if (tempMembers != null && !tempMembers.isEmpty()) {
                 List<String> roleMemberIds = new ArrayList<String>();
                 
@@ -228,8 +233,7 @@
          */
         @Override
         public RoleMemberXmlDTO.WithinRole gettingNextItem(String nextItem, int index) {
-            return new RoleMemberXmlDTO.WithinRole(KimApiServiceLocator.getRoleService().findRoleMembers(
-                    Collections.singletonMap("roleMemberId", nextItem)).get(0), false);
+            return new RoleMemberXmlDTO.WithinRole(KimApiServiceLocator.getRoleService().findRoleMembers(QueryByCriteria.Builder.fromPredicates(equal("roleMemberId", nextItem))).getResults().get(0), false);
         }
     }
 }
Index: work/src/org/kuali/rice/kim/impl/jaxb/RolePermissionsXmlDTO.java
===================================================================
--- work/src/org/kuali/rice/kim/impl/jaxb/RolePermissionsXmlDTO.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/impl/jaxb/RolePermissionsXmlDTO.java	(revision 32112)
@@ -156,7 +156,7 @@
         
         void beforeMarshal(Marshaller marshaller) {
             // TODO: Use new API method once it becomes available!!!!
-            List<String> permissionIds = new ArrayList<String>();// KIMServiceLocator.getPermissionService().getRoleIdsForPermissionId(permissionId);
+            List<String> permissionIds = new ArrayList<String>();// KIMServiceLocator.getPermissionService().getRoleIdsForPermission(permissionId);
             if (permissionIds != null && !permissionIds.isEmpty()) {
                 setRolePermissions(new RiceXmlExportList<RolePermissionXmlDTO.WithinRole,String>(permissionIds, this));
             }
Index: work/src/org/kuali/rice/kim/impl/jaxb/PermissionXmlUtil.java
===================================================================
--- work/src/org/kuali/rice/kim/impl/jaxb/PermissionXmlUtil.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/impl/jaxb/PermissionXmlUtil.java	(revision 32112)
@@ -18,7 +18,6 @@
 import javax.xml.bind.UnmarshalException;
 
 import org.apache.commons.lang.StringUtils;
-import org.kuali.rice.kim.api.common.template.Template;
 import org.kuali.rice.kim.api.permission.Permission;
 import org.kuali.rice.kim.api.permission.PermissionContract;
 import org.kuali.rice.kim.api.services.KimApiServiceLocator;
@@ -76,7 +75,8 @@
         }
         
         // If another permission with that name and namespace exists, use its ID on the new permission.
-        PermissionContract permission = KimApiServiceLocator.getPermissionService().getPermissionByName(newPermission.getNamespaceCode(), newPermission.getPermissionName());
+        PermissionContract permission = KimApiServiceLocator.getPermissionService().findPermByNamespaceCodeAndName(
+                newPermission.getNamespaceCode(), newPermission.getPermissionName());
         if (permission != null) {
             newPermission.setPermissionId(permission.getId());
         }
Index: work/src/org/kuali/rice/kim/api/role/PassThruRoleTypeServiceBase.java
===================================================================
--- work/src/org/kuali/rice/kim/api/role/PassThruRoleTypeServiceBase.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/role/PassThruRoleTypeServiceBase.java	(revision 32112)
@@ -120,10 +120,18 @@
     }
 
     public boolean supportsAttributes(List<String> attributeNames) {
+        if (attributeNames == null) {
+            throw new RiceIllegalArgumentException("attributeNames was null");
+        }
+
         return true;
     }
 
     public Map<String, String> translateInputAttributes(Map<String, String> inputAttributes) {
+        if (inputAttributes == null) {
+            throw new RiceIllegalArgumentException("inputAttributes was null");
+        }
+
         return inputAttributes;
     }
 
Index: work/src/org/kuali/rice/kim/api/services/IdentityManagementService.java
===================================================================
--- work/src/org/kuali/rice/kim/api/services/IdentityManagementService.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/services/IdentityManagementService.java	(revision 32112)
@@ -18,7 +18,7 @@
 import org.kuali.rice.core.api.criteria.QueryByCriteria;
 import org.kuali.rice.kim.api.common.assignee.Assignee;
 import org.kuali.rice.kim.api.group.Group;
-import org.kuali.rice.kim.api.identity.Type;
+import org.kuali.rice.kim.api.identity.CodedAttribute;
 import org.kuali.rice.kim.api.identity.affiliation.EntityAffiliationType;
 import org.kuali.rice.kim.api.identity.entity.Entity;
 import org.kuali.rice.kim.api.identity.entity.EntityDefault;
@@ -76,16 +76,16 @@
 
 	EntityQueryResults findEntities(QueryByCriteria queryByCriteria);
 
-	Type getAddressType( String code);
+	CodedAttribute getAddressType( String code);
 	EntityAffiliationType getAffiliationType( String code);
-	Type getCitizenshipStatus( String code);
-	Type getEmailType( String code);
-	Type getEmploymentStatus( String code);
-	Type getEmploymentType( String code);
-	Type getEntityNameType( String code);
-	Type getEntityType( String code);
+	CodedAttribute getCitizenshipStatus( String code);
+	CodedAttribute getEmailType( String code);
+	CodedAttribute getEmploymentStatus( String code);
+	CodedAttribute getEmploymentType( String code);
+	CodedAttribute getEntityNameType( String code);
+	CodedAttribute getEntityType( String code);
 	EntityExternalIdentifierType getExternalIdentifierType( String code);
-	Type getPhoneType( String code);
+	CodedAttribute getPhoneType( String code);
 
 	// *******************************
 	// GroupService
Index: work/src/org/kuali/rice/kim/api/jaxb/QualificationList.java
===================================================================
--- work/src/org/kuali/rice/kim/api/jaxb/QualificationList.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/jaxb/QualificationList.java	(revision 32112)
@@ -15,7 +15,7 @@
  */
 package org.kuali.rice.kim.api.jaxb;
 
-import org.kuali.rice.core.api.util.jaxb.StringMapEntry;
+import org.kuali.rice.core.api.util.jaxb.MapStringStringAdapter;
 
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
@@ -39,30 +39,30 @@
     private static final long serialVersionUID = 1L;
     
     @XmlElement(name="qualification")
-    private List<StringMapEntry> qualifications;
+    private List<MapStringStringAdapter.StringMapEntry> qualifications;
     
     public QualificationList () {
-        qualifications = new ArrayList<StringMapEntry>();
+        qualifications = new ArrayList<MapStringStringAdapter.StringMapEntry>();
     }
     
     public QualificationList(Map<String, String> map) {
         this();
         for (Map.Entry<String,String> tempEntry : map.entrySet()) {
-            qualifications.add(new StringMapEntry(tempEntry));
+            qualifications.add(new MapStringStringAdapter.StringMapEntry(tempEntry));
         }
     }
 
     /**
      * @return the qualifications
      */
-    public List<StringMapEntry> getQualifications() {
+    public List<MapStringStringAdapter.StringMapEntry> getQualifications() {
         return this.qualifications;
     }
 
     /**
      * @param qualifications the qualifications to set
      */
-    public void setQualifications(List<StringMapEntry> qualifications) {
+    public void setQualifications(List<MapStringStringAdapter.StringMapEntry> qualifications) {
         this.qualifications = qualifications;
     }
 
Index: work/src/org/kuali/rice/kim/api/jaxb/QualificationListAdapter.java
===================================================================
--- work/src/org/kuali/rice/kim/api/jaxb/QualificationListAdapter.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/jaxb/QualificationListAdapter.java	(revision 32112)
@@ -16,7 +16,7 @@
 package org.kuali.rice.kim.api.jaxb;
 
 import org.apache.commons.lang.StringUtils;
-import org.kuali.rice.core.api.util.jaxb.StringMapEntry;
+import org.kuali.rice.core.api.util.jaxb.MapStringStringAdapter;
 
 import javax.xml.bind.UnmarshalException;
 import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
@@ -42,7 +42,7 @@
         if (v != null) {
             NormalizedStringAdapter normalizedStringAdapter = new NormalizedStringAdapter();
             Map<String, String> map = new HashMap<String, String>();
-            for (StringMapEntry stringMapEntry : v.getQualifications()) {
+            for (MapStringStringAdapter.StringMapEntry stringMapEntry : v.getQualifications()) {
                 String tempKey = normalizedStringAdapter.unmarshal(stringMapEntry.getKey());
                 if (StringUtils.isBlank(tempKey)) {
                     throw new UnmarshalException("Cannot create a qualification entry with a blank key");
Index: work/src/org/kuali/rice/kim/api/jaxb/PermissionDetailList.java
===================================================================
--- work/src/org/kuali/rice/kim/api/jaxb/PermissionDetailList.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/jaxb/PermissionDetailList.java	(revision 32112)
@@ -15,7 +15,7 @@
  */
 package org.kuali.rice.kim.api.jaxb;
 
-import org.kuali.rice.core.api.util.jaxb.StringMapEntry;
+import org.kuali.rice.core.api.util.jaxb.MapStringStringAdapter;
 
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
@@ -39,30 +39,30 @@
     private static final long serialVersionUID = 1L;
     
     @XmlElement(name="permissionDetail")
-    private List<StringMapEntry> permissionDetails;
+    private List<MapStringStringAdapter.StringMapEntry> permissionDetails;
     
     public PermissionDetailList() {
-        this.permissionDetails = new ArrayList<StringMapEntry>();
+        this.permissionDetails = new ArrayList<MapStringStringAdapter.StringMapEntry>();
     }
     
     public PermissionDetailList(Map<String, String> map) {
         this();
         for (Map.Entry<String,String> tempEntry : map.entrySet()) {
-            permissionDetails.add(new StringMapEntry(tempEntry));
+            permissionDetails.add(new MapStringStringAdapter.StringMapEntry(tempEntry));
         }
     }
 
     /**
      * @return the permissionDetails
      */
-    public List<StringMapEntry> getPermissionDetails() {
+    public List<MapStringStringAdapter.StringMapEntry> getPermissionDetails() {
         return this.permissionDetails;
     }
 
     /**
      * @param permissionDetails the permissionDetails to set
      */
-    public void setPermissionDetails(List<StringMapEntry> permissionDetails) {
+    public void setPermissionDetails(List<MapStringStringAdapter.StringMapEntry> permissionDetails) {
         this.permissionDetails = permissionDetails;
     }
     
Index: work/src/org/kuali/rice/kim/api/jaxb/PermissionDetailListAdapter.java
===================================================================
--- work/src/org/kuali/rice/kim/api/jaxb/PermissionDetailListAdapter.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/jaxb/PermissionDetailListAdapter.java	(revision 32112)
@@ -16,7 +16,7 @@
 package org.kuali.rice.kim.api.jaxb;
 
 import org.apache.commons.lang.StringUtils;
-import org.kuali.rice.core.api.util.jaxb.StringMapEntry;
+import org.kuali.rice.core.api.util.jaxb.MapStringStringAdapter;
 
 import javax.xml.bind.UnmarshalException;
 import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
@@ -42,7 +42,7 @@
         if (v != null) {
             NormalizedStringAdapter normalizedStringAdapter = new NormalizedStringAdapter();
             Map<String, String> map = new HashMap<String, String>();
-            for (StringMapEntry stringMapEntry : v.getPermissionDetails()) {
+            for (MapStringStringAdapter.StringMapEntry stringMapEntry : v.getPermissionDetails()) {
                 String tempKey = normalizedStringAdapter.unmarshal(stringMapEntry.getKey());
                 if (StringUtils.isBlank(tempKey)) {
                     throw new UnmarshalException("Cannot create a permission detail entry with a blank key");
Index: work/src/org/kuali/rice/kim/api/jaxb/NameAndNamespacePairToPermTemplateIdAdapter.java
===================================================================
--- work/src/org/kuali/rice/kim/api/jaxb/NameAndNamespacePairToPermTemplateIdAdapter.java	(revision 32111)
+++ work/src/org/kuali/rice/kim/api/jaxb/NameAndNamespacePairToPermTemplateIdAdapter.java	(revision 32112)
@@ -37,7 +37,7 @@
     @Override
     public String unmarshal(NameAndNamespacePair v) throws Exception {
         if (v != null) {
-            Template permissionTemplate = KimApiServiceLocator.getPermissionService().getPermissionTemplateByName(
+            Template permissionTemplate = KimApiServiceLocator.getPermissionService().findPermTemplateByNamespaceCodeAndName(
                     v.getNamespaceCode(), new NormalizedStringAdapter().unmarshal(v.getName()));
             if (permissionTemplate == null) {
                 throw new UnmarshalException("Cannot find permission template with namespace \"" + v.getNamespaceCode() + "\" and name \"" + v.getName() + "\"");
Index: work/src/org/kuali/rice/krad/web/filter/SetResponseBufferSizeFilter.java
===================================================================
--- work/src/org/kuali/rice/krad/web/filter/SetResponseBufferSizeFilter.java	(revision 0)
+++ work/src/org/kuali/rice/krad/web/filter/SetResponseBufferSizeFilter.java	(revision 32112)
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2006-2008 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.krad.web.filter;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import java.io.IOException;
+
+/**
+ * This class can be used to increase the response buffer size so that if there is a late exception, Tomcat's ErrorReportValve can
+ * display it on the page and return an error status in the HTTP reponse header. This filter must be configured early in the chain
+ * in web.xml, before another filter writes anything to the response.
+ * 
+ * There's no configuration option for this already?
+ * 
+ * 
+ */
+public class SetResponseBufferSizeFilter implements Filter {
+
+    private Log log;
+    private int bufferSize;
+
+    /**
+     * Initializes this Filter with the required parameter, bufferSize.
+     * 
+     * @throws ServletException if the bufferSize parameter is missing or does not contain an integer.
+     * @see Filter#init
+     */
+    public void init(FilterConfig filterConfig) throws ServletException {
+        log = LogFactory.getLog(SetResponseBufferSizeFilter.class);
+        String bufferSizeParam = filterConfig.getInitParameter("bufferSize");
+        if (log.isDebugEnabled()) {
+            log.debug("bufferSizeParam=" + bufferSizeParam);
+        }
+        if (bufferSizeParam == null) {
+            throw new ServletException("bufferSize parameter is required");
+        }
+        try {
+            bufferSize = Integer.parseInt(bufferSizeParam);
+        }
+        catch (NumberFormatException e) {
+            throw new ServletException("bufferSize parameter is not an integer", e);
+        }
+        log.info("Filter initialized. Response buffer size is " + bufferSize);
+    }
+
+    /**
+     * Sets the bufferSize of the response.
+     * 
+     * @see Filter#doFilter
+     */
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
+        if (log.isDebugEnabled()) {
+            log.debug("setting response buffer size to " + bufferSize);
+        }
+        servletResponse.setBufferSize(bufferSize);
+        filterChain.doFilter(servletRequest, servletResponse);
+    }
+
+    /**
+     * Does nothing.
+     * 
+     * @see Filter#destroy
+     */
+    public void destroy() {
+        // nothing to destroy
+    }
+}

Property changes on: work/src/org/kuali/rice/krad/web/filter/SetResponseBufferSizeFilter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/krad/web/filter/SessionFilter.java
===================================================================
--- work/src/org/kuali/rice/krad/web/filter/SessionFilter.java	(revision 0)
+++ work/src/org/kuali/rice/krad/web/filter/SessionFilter.java	(revision 32112)
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2006-2007 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.krad.web.filter;
+
+import org.apache.log4j.Logger;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import java.io.IOException;
+
+public class SessionFilter implements Filter {
+    private static final Logger LOG = Logger.getLogger(SessionFilter.class);
+
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {
+        try {
+            ((HttpServletRequest) request).getSession();
+        }
+        catch (IllegalStateException ise) {
+            LOG.info("A user was denied a session");
+            throw new IllegalStateException(new StringBuffer("Thank you for visiting Kuali Test Drive!\n\n").append("To ensure that test drivers of the Kuali System demo site have a safe and uneventful trip, we must limit the number of concurrent users and, unfortunately, that number has been reached.\n\n").append("Please check back later.\n\n").append("Questions can be submitted to the Kuali Test Drive listserv at mailto:kualitestdrive@oncourse.iu.edu").toString());
+        }
+        filterChain.doFilter(request, response);
+    }
+
+    public void init(FilterConfig filterConfig) throws ServletException {
+        LOG.info("Initialized");
+    }
+
+    public void destroy() {
+        LOG.info("Destroyed");
+    }
+}

Property changes on: work/src/org/kuali/rice/krad/web/filter/SessionFilter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/krad/exception/InactiveDocumentTypeAuthorizationException.java
===================================================================
--- work/src/org/kuali/rice/krad/exception/InactiveDocumentTypeAuthorizationException.java	(revision 0)
+++ work/src/org/kuali/rice/krad/exception/InactiveDocumentTypeAuthorizationException.java	(revision 32112)
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2006-2008 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.krad.exception;
+
+import org.kuali.rice.core.api.util.RiceKeyConstants;
+
+import java.util.Collections;
+
+/**
+ * This class represents an exception that is thrown when a given user is not authorized to take a given action on the given
+ * document type.
+ * 
+ * 
+ */
+public class InactiveDocumentTypeAuthorizationException extends DocumentTypeAuthorizationException {
+    private static final long serialVersionUID = 1L;
+
+    public InactiveDocumentTypeAuthorizationException(String action, String documentType) {
+        super("anybody", action, documentType, Collections.<String, Object>emptyMap());
+    }
+
+    /**
+     * @see AuthorizationException#getErrorMessageKey()
+     */
+    public String getErrorMessageKey() {
+        return RiceKeyConstants.AUTHORIZATION_ERROR_INACTIVE_DOCTYPE;
+    }
+}

Property changes on: work/src/org/kuali/rice/krad/exception/InactiveDocumentTypeAuthorizationException.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/impl/parameter/AlwaysSucceedParameterEvaluatorImpl.java
===================================================================
--- work/src/org/kuali/rice/core/impl/parameter/AlwaysSucceedParameterEvaluatorImpl.java	(revision 0)
+++ work/src/org/kuali/rice/core/impl/parameter/AlwaysSucceedParameterEvaluatorImpl.java	(revision 32112)
@@ -0,0 +1,66 @@
+/*
+ * Copyright 2007-2009 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.impl.parameter;
+
+
+import org.kuali.rice.core.api.parameter.ParameterEvaluator;
+
+/**
+ * This implementation of ParameterEvaluator is returned by ParameterServiceImpl when evaluation involves a constraining value and
+ * neither the allow nor deny parameter have restrictions for that value.
+ */
+public class AlwaysSucceedParameterEvaluatorImpl implements ParameterEvaluator {
+    private static final AlwaysSucceedParameterEvaluatorImpl instance = new AlwaysSucceedParameterEvaluatorImpl();
+
+    public static ParameterEvaluator getInstance() {
+        return instance;
+    }
+
+    private AlwaysSucceedParameterEvaluatorImpl() {
+    }
+
+    public boolean constraintIsAllow() {
+        return Boolean.TRUE;
+    }
+
+
+    public boolean evaluateAndAddError(Class businessObjectOrDocumentClass, String constrainedPropertyName, String userEditablePropertyName) {
+        return evaluationSucceeds();
+    }
+
+    public boolean evaluateAndAddError(Class businessObjectOrDocumentClass, String constrainedPropertyName) {
+        return evaluationSucceeds();
+    }
+
+    public boolean evaluationSucceeds() {
+        return Boolean.TRUE;
+    }
+
+    public String getName() {
+        return AlwaysSucceedParameterEvaluatorImpl.class.getName();
+    }
+
+    public String getParameterValuesForMessage() {
+        return AlwaysSucceedParameterEvaluatorImpl.class.getName();
+    }
+
+    public String getValue() {
+        return AlwaysSucceedParameterEvaluatorImpl.class.getName();
+    }
+
+    public void setConstrainedValue(String constrainedValue) {
+    }
+}

Property changes on: work/src/org/kuali/rice/core/impl/parameter/AlwaysSucceedParameterEvaluatorImpl.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorImpl.java
===================================================================
--- work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorImpl.java	(revision 0)
+++ work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorImpl.java	(revision 32112)
@@ -0,0 +1,152 @@
+/*
+ * Copyright 2007-2009 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.impl.parameter;
+
+import org.kuali.rice.core.api.parameter.Parameter;
+import org.kuali.rice.core.api.parameter.ParameterEvaluator;
+import org.kuali.rice.core.api.util.RiceKeyConstants;
+import org.kuali.rice.krad.service.DataDictionaryService;
+import org.kuali.rice.krad.service.KRADServiceLocatorWeb;
+import org.kuali.rice.krad.util.GlobalVariables;
+
+import java.util.List;
+
+public class ParameterEvaluatorImpl implements ParameterEvaluator {
+	private static final long serialVersionUID = -758645169354452022L;
+	private Parameter parameter;
+	private boolean constraintIsAllow;
+	private String constrainedValue;
+	private List<String> values;
+
+	private static DataDictionaryService dataDictionaryService;
+	
+	/**
+	 * If the constraint is allow and the constrainedValue is in the list of
+	 * allowed values specified by the parameter this will return true, and if
+	 * the constraint is deny and the constrainedValue is not in the list of
+	 * denied values specified by the parameter this method will return true.
+	 * 
+	 * @return boolean indicating whether the constrained value adheres to the
+	 *         restriction specified by the combination of the parameter
+	 *         constraint and the parameter value
+	 */
+	public boolean evaluationSucceeds() {
+		if (constraintIsAllow()) {
+			return values.contains(constrainedValue);
+		} else {
+			return !values.contains(constrainedValue);
+		}
+	}
+
+	public boolean evaluateAndAddError(Class<? extends Object> businessObjectOrDocumentClass, String constrainedPropertyName) {
+		return evaluateAndAddError(businessObjectOrDocumentClass, constrainedPropertyName, constrainedPropertyName);
+	}
+
+	/**
+	 * This method uses the evaluationSucceeds method to evaluate the
+	 * constrainedValue. If evaluation does not succeed, it adds an error to
+	 * GlobalVariables.getErrorMap(). The businessObjectOrDocumentClass,
+	 * nameOfConstrainedProperty and userEditablePropertyName are used to
+	 * retrieve the appropriate labels from the DataDictionary.
+	 * 
+	 * @param businessObjectOrDocumentClass
+	 * @return boolean indicating whether evaluation succeeded (see
+	 *         evaluationSucceeds)
+	 */
+	public boolean evaluateAndAddError(Class<? extends Object> businessObjectOrDocumentClass,
+			String constrainedPropertyName, String userEditablePropertyName) {
+		if (!evaluationSucceeds()) {
+			GlobalVariables.getMessageMap().putError(
+					userEditablePropertyName,
+					constraintIsAllow() ? RiceKeyConstants.ERROR_DOCUMENT_INVALID_VALUE_ALLOWED_VALUES_PARAMETER : RiceKeyConstants.ERROR_DOCUMENT_INVALID_VALUE_DENIED_VALUES_PARAMETER,
+					new String[] {
+							getDataDictionaryService().getAttributeLabel( businessObjectOrDocumentClass, constrainedPropertyName),
+							constrainedValue,
+							toStringForMessage(),
+							getParameterValuesForMessage(),
+							getDataDictionaryService().getAttributeLabel( businessObjectOrDocumentClass, userEditablePropertyName) 
+							} );
+			return false;
+		}
+		return true;
+	}
+
+	public boolean constraintIsAllow() {
+		return constraintIsAllow;
+	}
+
+	/**
+	 * This method uses the List toString method and eliminates the [].
+	 * 
+	 * @return user-friendly String representation of Parameter values
+	 */
+	public String getParameterValuesForMessage() {
+		return values.toString().replace("[", "").replace("]", "");
+	}
+
+	public String getValue() {
+		return parameter.getValue();
+	}
+
+	public String toString() {
+		return new StringBuffer("ParameterEvaluator").append("\n\tParameter: ")
+				.append("module=").append(parameter.getNamespaceCode())
+				.append(", component=").append(parameter.getComponentCode())
+				.append(", name=").append(parameter.getName())
+				.append(", value=").append(parameter.getValue())
+				.append("\n\tConstraint Is Allow: ").append(constraintIsAllow)
+				.append("\n\tConstrained Value: ").append(constrainedValue)
+				.append("\n\tValues: ").append(values.toString())
+				.toString();
+	}
+
+	private String toStringForMessage() {
+		return new StringBuffer("parameter: ").append(parameter.getName())
+				.append(", module: ").append(parameter.getNamespaceCode())
+				.append(", component: ").append(parameter.getComponentCode())
+				.toString();
+	}
+
+	public String getModuleAndComponent() {
+		return parameter.getNamespaceCode() + ": " + parameter.getComponentCode();
+	}
+
+	public void setConstrainedValue(String constrainedValue) {
+		this.constrainedValue = constrainedValue;
+	}
+
+	public void setConstraintIsAllow(boolean constraintIsAllow) {
+		this.constraintIsAllow = constraintIsAllow;
+	}
+
+	public void setParameter(Parameter parameter) {
+		this.parameter = parameter;
+	}
+
+	public void setValues(List<String> values) {
+		this.values = values;
+	}
+
+	/**
+	 * @return the dataDictionaryService
+	 */
+	protected DataDictionaryService getDataDictionaryService() {
+		if ( dataDictionaryService == null ) {
+			dataDictionaryService = KRADServiceLocatorWeb.getDataDictionaryService();
+		}
+		return dataDictionaryService;
+	}
+}

Property changes on: work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorImpl.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorServiceImpl.java
===================================================================
--- work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorServiceImpl.java	(revision 0)
+++ work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorServiceImpl.java	(revision 32112)
@@ -0,0 +1,187 @@
+/*
+ * Copyright 2006-2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl2.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.kuali.rice.core.impl.parameter;
+
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.rice.core.api.parameter.EvaluationOperator;
+import org.kuali.rice.core.api.parameter.Parameter;
+import org.kuali.rice.core.api.parameter.ParameterEvaluator;
+import org.kuali.rice.core.api.parameter.ParameterEvaluatorService;
+import org.kuali.rice.core.framework.parameter.ParameterService;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+public class ParameterEvaluatorServiceImpl implements ParameterEvaluatorService {
+
+    private ParameterService parameterService;
+
+    public void setParameterService(ParameterService parameterService) {
+        this.parameterService = parameterService;
+    }
+
+    /**
+	 * This method will return an instance of the parameterEvaluator bean defined in Spring, initialized with the Parameter
+	 * corresponding to the specified componentClass and parameterName and the values of the Parameter.
+	 *
+	 * @param componentClass
+	 * @param parameterName
+	 * @return ParameterEvaluator instance initialized with the Parameter corresponding to the specified componentClass and
+	 *         parameterName and the values of the Parameter
+	 */
+	@Override
+	public ParameterEvaluator getParameterEvaluator(Class componentClass, String parameterName) {
+	    return getParameterEvaluator(parameterService.getParameter(componentClass, parameterName));
+	}
+
+	/**
+     * This method will return an instance of the parameterEvaluator bean defined in Spring, initialized with the Parameter
+     * corresponding to the specified componentClass and parameterName and the values of the Parameter.
+     *
+     * @param namespaceCode
+     * @param detailTypeCode
+     * @param parameterName
+     * @return ParameterEvaluator instance initialized with the Parameter corresponding to the specified componentClass and
+     *         parameterName and the values of the Parameter
+     */
+    @Override
+	public ParameterEvaluator getParameterEvaluator(String namespaceCode, String detailTypeCode, String parameterName) {
+        return getParameterEvaluator(parameterService.getParameter(namespaceCode, detailTypeCode, parameterName));
+    }
+
+	/**
+	 * This method will return an instance of the parameterEvaluator bean defined in Spring, initialized with the Parameter
+	 * corresponding to the specified componentClass and parameterName, the values of the Parameter, the knowledge of whether the
+	 * values are allowed or denied, and the constrainedValue.
+	 *
+	 * @param componentClass
+	 * @param parameterName
+	 * @return ParameterEvaluator instance initialized with the Parameter corresponding to the specified componentClass and
+	 *         parameterName, the values of the Parameter, the knowledge of whether the values are allowed or denied, and the
+	 *         constrainedValue
+	 */
+	@Override
+	public ParameterEvaluator getParameterEvaluator(Class componentClass, String parameterName, String constrainedValue) {
+	    return getParameterEvaluator(parameterService.getParameter(componentClass, parameterName), constrainedValue);
+	}
+
+	/**
+     * This method will return an instance of the parameterEvaluator bean defined in Spring, initialized with the Parameter
+     * corresponding to the specified componentClass and parameterName and the values of the Parameter.
+     *
+     * @param namespaceCode
+     * @param detailTypeCode
+     * @param parameterName
+     * @return ParameterEvaluator instance initialized with the Parameter corresponding to the specified componentClass and
+     *         parameterName and the values of the Parameter
+     */
+	@Override
+    public ParameterEvaluator getParameterEvaluator(String namespaceCode, String detailTypeCode, String parameterName, String constrainedValue) {
+        return getParameterEvaluator(parameterService.getParameter(namespaceCode, detailTypeCode, parameterName), constrainedValue);
+    }
+
+	/**
+	 * This method will return an instance of the parameterEvaluator bean defined in Spring, initialized with the Parameter
+	 * corresponding to the specified componentClass and parameterName, the values of the Parameter that correspond to the specified
+	 * constrainingValue, the knowledge of whether the values are allowed or denied, and the constrainedValue.
+	 *
+	 * @param componentClass
+	 * @param parameterName
+	 * @return ParameterEvaluator instance initialized with the Parameter corresponding to the specified componentClass and
+	 *         parameterName, the values of the Parameter that correspond to the specified constrainingValue, the knowledge of
+	 *         whether the values are allowed or denied, and the constrainedValue
+	 */
+	@Override
+	public ParameterEvaluator getParameterEvaluator(Class componentClass, String parameterName, String constrainingValue,
+			String constrainedValue) {
+			    return getParameterEvaluator(parameterService.getParameter(componentClass, parameterName), constrainingValue, constrainedValue);
+			}
+
+	/**
+	 * This method will return an instance of the parameterEvaluator bean defined in Spring, initialized with the Parameter
+	 * corresponding to the specified componentClass and allowParameterName or to the specified componentClass and denyParameterName
+	 * (depending on which restricts based on the constraining value) or an instance of AlwaysSucceedParameterEvaluatorImpl if
+	 * neither restricts, the values of the Parameter that correspond to the specified constrainingValue, the knowledge of whether
+	 * the values are allowed or denied, and the constrainedValue.
+	 *
+	 * @param componentClass
+	 * @param allowParameterName
+	 * @param denyParameterName
+	 * @param constrainingValue
+	 * @param constrainedValue
+	 * @return AlwaysSucceedParameterEvaluatorImpl or ParameterEvaluator instance initialized with the Parameter that corresponds to
+	 *         the constrainingValue restriction, the values of the Parameter that correspond to the specified constrainingValue,
+	 *         the knowledge of whether the values are allowed or denied, and the constrainedValue
+	 */
+	@Override
+	public ParameterEvaluator getParameterEvaluator(Class componentClass, String allowParameterName, String denyParameterName,
+			String constrainingValue, String constrainedValue) {
+			    Parameter allowParameter = parameterService.getParameter(componentClass, allowParameterName);
+			    Parameter denyParameter = parameterService.getParameter(componentClass, denyParameterName);
+			    if (!getParameterValues(allowParameter, constrainingValue).isEmpty() && !getParameterValues(denyParameter, constrainingValue).isEmpty()) {
+			        throw new IllegalArgumentException("The getParameterEvaluator(Class componentClass, String allowParameterName, String denyParameterName, String constrainingValue, String constrainedValue) method of ParameterServiceImpl does not facilitate evaluation of combination allow and deny parameters that both have values for the constraining value: " + allowParameterName + " / " + denyParameterName + " / " + constrainingValue);
+			    }
+			    if (getParameterValues(allowParameter, constrainingValue).isEmpty() && getParameterValues(denyParameter, constrainingValue).isEmpty()) {
+			        return AlwaysSucceedParameterEvaluatorImpl.getInstance();
+			    }
+			    return getParameterEvaluator(getParameterValues(denyParameter, constrainingValue).isEmpty() ? allowParameter : denyParameter, constrainingValue, constrainedValue);
+	}
+
+    protected List<String> getParameterValues(Parameter parameter, String constrainingValue) {
+	    List<String> constraintValuePairs = getParameterValues(parameter);
+	    for (String pair : constraintValuePairs) {
+	        if (StringUtils.equals(constrainingValue, StringUtils.substringBefore(pair, "="))) {
+	            return Arrays.asList(StringUtils.substringAfter(pair, "=").split(","));
+	        }
+	    }
+	    return Collections.emptyList();
+	}
+
+    private List<String> getParameterValues(Parameter parameter) {
+	    if (parameter == null || StringUtils.isBlank(parameter.getValue())) {
+	        return Collections.emptyList();
+	    }
+	    return Arrays.asList(parameter.getValue().split(";"));
+	}
+
+    protected ParameterEvaluatorImpl getParameterEvaluator(Parameter parameter) {
+	    ParameterEvaluatorImpl parameterEvaluator = new ParameterEvaluatorImpl();
+	    parameterEvaluator.setParameter(parameter);
+	    parameterEvaluator.setConstraintIsAllow(constraintIsAllow(parameter));
+	    parameterEvaluator.setValues(getParameterValues(parameter));
+	    return parameterEvaluator;
+	}
+
+	protected ParameterEvaluatorImpl getParameterEvaluator(Parameter parameter, String constrainedValue) {
+	    ParameterEvaluatorImpl parameterEvaluator = getParameterEvaluator(parameter);
+	    parameterEvaluator.setConstrainedValue(constrainedValue);
+	    return parameterEvaluator;
+	}
+
+	protected ParameterEvaluatorImpl getParameterEvaluator(Parameter parameter, String constrainingValue,
+			String constrainedValue) {
+	    ParameterEvaluatorImpl parameterEvaluator = getParameterEvaluator(parameter, constrainedValue);
+	    parameterEvaluator.setValues(getParameterValues(parameter, constrainingValue));
+	    return parameterEvaluator;
+	}
+
+    private boolean constraintIsAllow(Parameter parameter) {
+	    return EvaluationOperator.ALLOW.equals(parameter.getEvaluationOperator());
+	}
+}

Property changes on: work/src/org/kuali/rice/core/impl/parameter/ParameterEvaluatorServiceImpl.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/impl/jaxb/DataXmlDTO.java
===================================================================
--- work/src/org/kuali/rice/core/impl/jaxb/DataXmlDTO.java	(revision 0)
+++ work/src/org/kuali/rice/core/impl/jaxb/DataXmlDTO.java	(revision 32112)
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.impl.jaxb;
+
+import java.util.List;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAnyElement;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlType;
+
+import org.kuali.rice.core.api.CoreConstants;
+import org.kuali.rice.core.api.mo.AbstractDataTransferObject;
+import org.kuali.rice.core.util.jaxb.RiceXmlListAdditionListener;
+import org.kuali.rice.kim.impl.jaxb.PermissionDataXmlDTO;
+import org.kuali.rice.kim.impl.jaxb.RoleDataXmlDTO;
+import org.w3c.dom.Element;
+
+/**
+ * This class represents the root &lt;data&gt; XML element.
+ * 
+ * <p>Please see the Javadocs for PermissionDataXmlDTO and RoleDataXmlDTO for more information
+ * on their expected structure.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+@XmlRootElement(name="data")
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name="DataType", propOrder={"permissionData", "roleData", CoreConstants.CommonElements.FUTURE_ELEMENTS})
+public class DataXmlDTO  extends AbstractDataTransferObject implements RiceXmlListAdditionListener<Element> {
+
+    private static final long serialVersionUID = 1L;
+    
+    @XmlElement(name="permissionData")
+    private PermissionDataXmlDTO permissionData;
+    
+    @XmlElement(name="roleData")
+    private RoleDataXmlDTO roleData;
+    
+    @XmlAnyElement
+    private final List<Element> _futureElements = null;
+    
+    public DataXmlDTO() {}
+    
+    public DataXmlDTO(PermissionDataXmlDTO permissionData, RoleDataXmlDTO roleData) {
+        this.permissionData = permissionData;
+        this.roleData = roleData;
+    }
+
+    /**
+     * @return the permissionData
+     */
+    public PermissionDataXmlDTO getPermissionData() {
+        return this.permissionData;
+    }
+
+    /**
+     * @param permissionData the permissionData to set
+     */
+    public void setPermissionData(PermissionDataXmlDTO permissionData) {
+        this.permissionData = permissionData;
+    }
+
+    /**
+     * @return the roleData
+     */
+    public RoleDataXmlDTO getRoleData() {
+        return this.roleData;
+    }
+
+    /**
+     * @param roleData the roleData to set
+     */
+    public void setRoleData(RoleDataXmlDTO roleData) {
+        this.roleData = roleData;
+    }
+
+    /**
+     * @see org.kuali.rice.core.util.jaxb.RiceXmlListAdditionListener#newItemAdded(java.lang.Object)
+     */
+    @Override
+    public void newItemAdded(Element item) {
+        // Do nothing; this class just implements the streaming unmarshalling listener so that it doesn't hold onto all the DOM elements.
+    }
+}

Property changes on: work/src/org/kuali/rice/core/impl/jaxb/DataXmlDTO.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/impl/jaxb/package-info.java
===================================================================
--- work/src/org/kuali/rice/core/impl/jaxb/package-info.java	(revision 0)
+++ work/src/org/kuali/rice/core/impl/jaxb/package-info.java	(revision 32112)
@@ -0,0 +1,22 @@
+/*
+ * Copyright 2006-2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl2.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@javax.xml.bind.annotation.XmlSchema(namespace = CoreConstants.Namespaces.CORE_NAMESPACE_2_0, elementFormDefault = XmlNsForm.QUALIFIED)
+package org.kuali.rice.core.impl.jaxb;
+
+import javax.xml.bind.annotation.XmlNsForm;
+
+import org.kuali.rice.core.api.CoreConstants;

Property changes on: work/src/org/kuali/rice/core/impl/jaxb/package-info.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/api/parameter/ParameterEvaluator.java
===================================================================
--- work/src/org/kuali/rice/core/api/parameter/ParameterEvaluator.java	(revision 0)
+++ work/src/org/kuali/rice/core/api/parameter/ParameterEvaluator.java	(revision 32112)
@@ -0,0 +1,77 @@
+/*
+ * Copyright 2007-2009 The Kuali Foundation
+ * 
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl2.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.api.parameter;
+
+import java.io.Serializable;
+
+/**
+ * This is a stateful wrapper for Parameters, which provides convenient methods to evaluate a constrained value against a Parameter.
+ */
+public interface ParameterEvaluator extends Serializable {
+    /**
+     * This method determines whether the constrainedValue specified when the ParameterEvaluator was created matches the parameter.
+     * 
+     * @return boolean indicating whether the constrained value adheres to the restriction specified by the combination of the
+     *         parameter constraint and the parameter value
+     */
+    public boolean evaluationSucceeds();
+
+    /**
+     * This method uses the evaluateAndAddError method. It passes the constrainedPropertyName as both the constrainedPropertyName
+     * and the userEditablePropertyName, i.e. it should be used when they are one and the same.
+     * 
+     * @param businessObjectOrDocumentClass
+     * @param constrainedPropertyName
+     * @return boolean indicating whether evaluation succeeded (see evaluationSucceeds)
+     */
+    public boolean evaluateAndAddError(Class<? extends Object> businessObjectOrDocumentClass, String constrainedPropertyName);
+
+    /**
+     * This method uses the evaluationSucceeds method to evaluate the constrainedValue. If evaluation does not succeed, it adds an
+     * error for the user. The businessObjectOrDocumentClass, nameOfConstrainedProperty and userEditablePropertyName are used by
+     * ParameterEvaluatorImpl to retrieve user friendly labels for the error message. The constrainedPropertyName corresponds to the
+     * field that has the value that the parameter is evaluating. The userEditablePropertyName corresponds to the field that has the
+     * value the user needs to correct to resolve the error. For example, the object type may be invalid, but the user needs to
+     * change the object code in order to remedy that.
+     * 
+     * @param businessObjectOrDocumentClass
+     * @param userEditableFieldToHighlight
+     * @param nameOfconstrainedProperty
+     * @return boolean indicating whether evaluation succeeded (see evaluationSucceeds)
+     */
+    public boolean evaluateAndAddError(Class<? extends Object> businessObjectOrDocumentClass, String constrainedPropertyName, String userEditablePropertyName);
+
+    /**
+     * This method determines whether the parameter lists allowed values or denied values.
+     * 
+     * @return boolean indicating whether the parameter lists allowed values
+     */
+    public boolean constraintIsAllow();
+
+    /**
+     * This method creates a pretty String representation of parameter values for the user messages.
+     *
+     * @return user-friendly String representation of Parameter values
+     */
+    public String getParameterValuesForMessage();
+
+    /**
+     * This method returns the value of the correspnding Parameter.
+     * 
+     * @return String value of underlying Parameter
+     */
+    public String getValue();
+}

Property changes on: work/src/org/kuali/rice/core/api/parameter/ParameterEvaluator.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/api/parameter/ParameterEvaluatorService.java
===================================================================
--- work/src/org/kuali/rice/core/api/parameter/ParameterEvaluatorService.java	(revision 0)
+++ work/src/org/kuali/rice/core/api/parameter/ParameterEvaluatorService.java	(revision 32112)
@@ -0,0 +1,65 @@
+package org.kuali.rice.core.api.parameter;
+
+public interface ParameterEvaluatorService {
+        /**
+     * This method will return an instance of a ParameterEvaluator implementation that will wrap a Parameter and provide convenient
+     * evaluation methods.
+     *
+     * @param componentClass
+     * @param parameterName
+     * @return ParameterEvaluator
+     */
+    public ParameterEvaluator getParameterEvaluator(Class<? extends Object> componentClass, String parameterName);
+
+    /**
+     * This method will return an instance of a ParameterEvaluator implementation that will wrap a Parameter and provide convenient
+     * evaluation methods.
+     *
+     * @param namespaceCode
+     * @param detailTypeCode
+     * @param parameterName
+     * @return ParameterEvaluator
+     */
+    public ParameterEvaluator getParameterEvaluator(String namespaceCode, String detailTypeCode, String parameterName);
+
+    /**
+     * This method will return an instance of a ParameterEvaluator implementation that will wrap a Parameter and constrainedValue
+     * and provide convenient evaluation methods.
+     *
+     * @param componentClass
+     * @param parameterName
+     * @return ParameterEvaluator
+     */
+    public ParameterEvaluator getParameterEvaluator(Class<? extends Object> componentClass, String parameterName, String constrainedValue);
+
+    /**
+     * This method will return an instance of a ParameterEvaluator implementation that will wrap a Parameter and constrainedValue
+     * and provide convenient evaluation methods.
+     *
+     * @param namespaceCode
+     * @param detailTypeCode
+     * @param parameterName
+     * @return ParameterEvaluator
+     */
+    public ParameterEvaluator getParameterEvaluator(String namespaceCode, String detailTypeCode, String parameterName, String constrainedValue);
+
+    /**
+     * This method will return an instance of a ParameterEvaluator implementation that will wrap a Parameter, constrainingValue, and
+     * constrainedValue and provide convenient evaluation methods.
+     *
+     * @param componentClass
+     * @param parameterName
+     * @return ParameterEvaluator
+     */
+    public ParameterEvaluator getParameterEvaluator(Class<? extends Object> componentClass, String parameterName, String constrainingValue, String constrainedValue);
+
+    /**
+     * This method will return an instance of a ParameterEvaluator implementation that will wrap an allow Parameter, a deny
+     * Parameter, constrainingValue, and constrainedValue and provide convenient evaluation methods.
+     *
+     * @param componentClass
+     * @param parameterName
+     * @return ParameterEvaluator
+     */
+    public ParameterEvaluator getParameterEvaluator(Class<? extends Object> componentClass, String allowParameterName, String denyParameterName, String constrainingValue, String constrainedValue);
+}

Property changes on: work/src/org/kuali/rice/core/api/parameter/ParameterEvaluatorService.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePairValidatingAdapter.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePairValidatingAdapter.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePairValidatingAdapter.java	(revision 32112)
@@ -0,0 +1,77 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import javax.xml.bind.MarshalException;
+import javax.xml.bind.UnmarshalException;
+import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
+import javax.xml.bind.annotation.adapters.XmlAdapter;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.rice.core.api.CoreApiServiceLocator;
+
+/**
+ * An XML adapter that simply validates the NameAndNamespacePair to ensure that the name and namespace are non-blank
+ * and that the namespace code maps to a valid namespace in the system. This adapter will also pass the name to
+ * a NormalizedStringAdapter instance for marshalling/unmarshalling.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public class NameAndNamespacePairValidatingAdapter extends XmlAdapter<NameAndNamespacePair,NameAndNamespacePair> {
+
+    /**
+     * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+     */
+    @Override
+    public NameAndNamespacePair unmarshal(NameAndNamespacePair v) throws Exception {
+        if (v != null) {
+            
+            if (StringUtils.isBlank(v.getName())) {
+                throw new UnmarshalException("Cannot import a name-and-namespace pair with a blank name");
+            } else if (StringUtils.isBlank(v.getNamespaceCode())) {
+                throw new UnmarshalException("Cannot import a name-and-namespace pair with a blank namespace code");
+            } if (CoreApiServiceLocator.getNamespaceService().getNamespace(v.getNamespaceCode()) == null) {
+                throw new UnmarshalException("Cannot import a name-and-namespace pair with invalid or unknown namespace \"" +
+                        v.getNamespaceCode() + "\"");
+            }
+            
+            v.setName(new NormalizedStringAdapter().unmarshal(v.getName()));
+            v.setNamespaceCode(v.getNamespaceCode());
+        }
+        return v;
+    }
+
+    /**
+     * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+     */
+    @Override
+    public NameAndNamespacePair marshal(NameAndNamespacePair v) throws Exception {
+        if (v != null) {
+            if (StringUtils.isBlank(v.getName())) {
+                throw new MarshalException("Cannot export a name-and-namespace pair with a blank name");
+            } else if (StringUtils.isBlank(v.getNamespaceCode())) {
+                throw new MarshalException("Cannot export a name-and-namespace pair with a blank namespace code");
+            } else if (CoreApiServiceLocator.getNamespaceService().getNamespace(v.getNamespaceCode()) == null) {
+                throw new MarshalException("Cannot export a name-and-namespace pair with invalid or unknown namespace \"" + v.getNamespaceCode() + "\"");
+            }
+            
+            v.setName(new NormalizedStringAdapter().marshal(v.getName()));
+            v.setNamespaceCode(v.getNamespaceCode());
+        }
+        return v;
+    }
+
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePairValidatingAdapter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/RiceXmlListGetterListener.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/RiceXmlListGetterListener.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/RiceXmlListGetterListener.java	(revision 32112)
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.io.Serializable;
+
+/**
+ * Helper interface for use with the RiceXmlExportList class.
+ * 
+ * <p>If semi-"streaming" of child elements is desired during JAXB marshalling, then the parent element
+ * assigns an instance of RiceXmlExportList to the appropriate list field/property, and gives the
+ * list an implementation of this interface for the list to invoke whenever it needs to create a new
+ * instance of the next child element. This allows the implementation to create and then discard
+ * child elements during marshalling.
+ * 
+ * @param E The type that the list is expected to return.
+ * @param T The type that the list stores internally and passes to the listener for conversion as needed.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public interface RiceXmlListGetterListener<E,T> extends Serializable {
+        /**
+         * A listener method that converts the given item into the one expected by the list. It is invoked
+         * whenever the associated list's "get" method is called.
+         * 
+         * @param nextItem The item to convert.
+         * @param index The index being accessed on the RiceXmlExportList instance.
+         * @return The converted element that the list is expected to return.
+         */
+        public E gettingNextItem(T nextItem, int index);
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/RiceXmlListGetterListener.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/RiceXmlExportList.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/RiceXmlExportList.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/RiceXmlExportList.java	(revision 32112)
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.io.Serializable;
+import java.util.AbstractList;
+import java.util.List;
+
+/**
+ * Custom subclass of AbstractList that, whenever the "get" method is called, will pass an
+ * internally-stored list's object to the given listener for conversion into another object matching
+ * the list's type. This allows for the marshalling process to discard generated items after they
+ * have been marshalled.
+ * 
+ * <p>These lists are constructed by passing in another list containing the unconverted items,
+ * as well as a listener that will create items of this list's type upon each invocation of
+ * the "get" method.
+ * 
+ * <p>This is similar to the "streaming" unmarshalling strategy used in the RiceXmlImportList
+ * class, except that this list has been adapted for marshalling instead.
+ * 
+ * @param E The type that the list is expected to return.
+ * @param T The type that the list stores internally and passes to the listener for conversion as needed. 
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public final class RiceXmlExportList<E,T> extends AbstractList<E> implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final List<? extends T> sourceList;
+    private final RiceXmlListGetterListener<E,T> listGetterListener;
+    
+    /**
+     * Constructs a new export list that will rely on the given listener for converting the provided
+     * list's items into the appropriate type.
+     * 
+     * @param sourceList The list of objects to convert.
+     * @param listGetterListener The listener to use.
+     * @throws IllegalArgumentException if sourceList or listGetterListener are null.
+     */
+    public RiceXmlExportList(List<? extends T> sourceList, RiceXmlListGetterListener<E,T> listGetterListener) {
+        super();
+        if (sourceList == null) {
+            throw new IllegalArgumentException("sourceList cannot be null");
+        } else if (listGetterListener == null) {
+            throw new IllegalArgumentException("listGetterListener cannot be null");
+        }
+        this.sourceList = sourceList;
+        this.listGetterListener = listGetterListener;
+    }
+    
+    /**
+     * Passes the item at the given index of the internal list to the listener, and then returns
+     * the listener's result.
+     * 
+     * @param index The unconverted item's index in the internal list.
+     * @return The item converted by the listener at the given list index.
+     */
+    @Override
+    public E get(int index) {
+        return listGetterListener.gettingNextItem(sourceList.get(index), index);
+    }
+
+    /**
+     * Returns the size of the internal list.
+     * 
+     * @return The size of the internal list.
+     */
+    @Override
+    public int size() {
+        return sourceList.size();
+    }
+
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/RiceXmlExportList.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/RiceXmlListAdditionListener.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/RiceXmlListAdditionListener.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/RiceXmlListAdditionListener.java	(revision 32112)
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.io.Serializable;
+
+/**
+ * Helper interface for use with the RiceXmlStreamingList class.
+ * 
+ * <p>If "streaming" of child elements is desired during JAXB unmarshalling, then the parent element
+ * assigns an instance of RiceXmlStreamingList to the appropriate list field/property, and gives the
+ * list an implementation of this interface for the list to invoke whenever it receives a 
+ * newly-unmarshalled child element. This allows the implementation to process the new element and then
+ * discard it.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public interface RiceXmlListAdditionListener<T> extends Serializable {
+    /**
+     * This method is invoked whenever the associated RiceXmlStreamingList instance receives
+     * a newly-unmarshalled child element.
+     * 
+     * @param item The unmarshalled element (or adapter-generated object) to be processed.
+     */
+    public void newItemAdded(T item);
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/RiceXmlListAdditionListener.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/JaxbDateAdapter.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/JaxbDateAdapter.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/JaxbDateAdapter.java	(revision 32112)
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2007-2009 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl2.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.util.Date;
+
+import javax.xml.bind.annotation.adapters.XmlAdapter;
+
+/**
+ * Marshall/unmarshall java.util.Date
+ * 
+ * @author Kuali Rice Team (kuali-rice@googlegroups.com)
+ *
+ */
+public class JaxbDateAdapter extends XmlAdapter<String, Date> {
+
+	/**
+	 * This overridden method ...
+	 * 
+	 * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+	 */
+	@Override
+	public String marshal(Date date) throws Exception {
+		return (null != date ? Long.toString(date.getTime()) : null);
+	}
+
+	/**
+	 * This overridden method ...
+	 * 
+	 * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+	 */
+	@Override
+	public Date unmarshal(String dateStr) throws Exception {
+		return (null != dateStr ? new Date(Long.parseLong(dateStr)) : null);
+	}
+
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/JaxbDateAdapter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/package-info.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/package-info.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/package-info.java	(revision 32112)
@@ -0,0 +1,21 @@
+/*
+ * Copyright 2006-2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl2.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+@javax.xml.bind.annotation.XmlSchema(namespace = CoreConstants.Namespaces.CORE_NAMESPACE_2_0, elementFormDefault = XmlNsForm.QUALIFIED)
+package org.kuali.rice.core.util.jaxb;
+import javax.xml.bind.annotation.XmlNsForm;
+
+import org.kuali.rice.core.api.CoreConstants;
\ No newline at end of file

Property changes on: work/src/org/kuali/rice/core/util/jaxb/package-info.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/StringToDateTimeAdapter.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/StringToDateTimeAdapter.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/StringToDateTimeAdapter.java	(revision 32112)
@@ -0,0 +1,49 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.util.Date;
+
+import javax.xml.bind.annotation.adapters.XmlAdapter;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.rice.core.api.CoreApiServiceLocator;
+
+/**
+ * An XML Adapter that relies on the DateTimeService to marshal and unmarshal datetime values in String form.
+ * Converts Strings to java.util.Date instances and vice versa.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public class StringToDateTimeAdapter extends XmlAdapter<String,Date> {
+
+    /**
+     * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+     */
+    @Override
+    public Date unmarshal(String v) throws Exception {
+        return (v != null) ? CoreApiServiceLocator.getDateTimeService().convertToDateTime(StringUtils.trim(v)) : null;
+    }
+
+    /**
+     * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+     */
+    @Override
+    public String marshal(Date v) throws Exception {
+        return (v != null) ? CoreApiServiceLocator.getDateTimeService().toDateTimeString(v) : null;
+    }
+
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/StringToDateTimeAdapter.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/RiceXmlImportList.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/RiceXmlImportList.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/RiceXmlImportList.java	(revision 32112)
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.io.Serializable;
+import java.util.AbstractList;
+
+/**
+ * Custom subclass of AbstractList that, when adding new items, will pass them on to a listener instead of
+ * storing them internally.
+ * 
+ * <p>This is based off of the JAXB "streaming" unmarshalling strategy, which is briefly mentioned here:
+ * 
+ * <p>http://jaxb.java.net/guide/Dealing_with_large_documents.html
+ * 
+ * <p>and is presented in the example code available here:
+ * 
+ * <p>http://jaxb.java.net/2.2.4/
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public final class RiceXmlImportList<E> extends AbstractList<E> implements Serializable {
+    
+    private static final long serialVersionUID = 1L;
+    
+    /** The listener that this list will pass new items to. */
+    private final RiceXmlListAdditionListener<E> listAdditionListener;
+    
+    /**
+     * Constructs a new streaming list that will pass new items to the given listener instead of storing them.
+     * 
+     * @param listAdditionListener The listener to use.
+     * @throws IllegalArgumentException if listAdditionListener is null.
+     */
+    public RiceXmlImportList(RiceXmlListAdditionListener<E> listAdditionListener) {
+        super();
+        if (listAdditionListener == null) {
+            throw new IllegalArgumentException("listAdditionListener cannot be null");
+        }
+        this.listAdditionListener = listAdditionListener;
+    }
+    
+    /**
+     * Instead of adding the item to the list, simply invoke the appropriate listener.
+     * 
+     * <p>This is based off of the "streaming" unmarshalling strategy used in one of the JAXB sample apps.
+     * 
+     * @return false, since the list never gets altered as a result of invoking this method.
+     */
+    @Override
+    public boolean add(E e) {
+        listAdditionListener.newItemAdded(e);
+        return false;
+    }
+    
+    /**
+     * This method always throws an exception, since the list never contains any items.
+     * 
+     * @throws IndexOutOfBoundsException
+     */
+    @Override
+    public E get(int index) {
+        throw new IndexOutOfBoundsException();
+    }
+
+    /**
+     * This method always returns zero, since items are never actually added to the list.
+     * 
+     * @return zero.
+     */
+    @Override
+    public int size() {
+        return 0;
+    }
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/RiceXmlImportList.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePair.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePair.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePair.java	(revision 32112)
@@ -0,0 +1,69 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import java.io.Serializable;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlType;
+import javax.xml.bind.annotation.XmlValue;
+import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+
+/**
+ * An XML element that stores a name and namespace pair in its simple content and "namespaceCode" attribute.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+@XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(name="NameAndNamespaceType")
+public class NameAndNamespacePair implements Serializable {
+    
+    private static final long serialVersionUID = 1L;
+
+    @XmlAttribute(name="namespaceCode", required=true)
+    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
+    private String namespaceCode;
+    
+    @XmlValue
+    private String name;
+    
+    public NameAndNamespacePair() {}
+    
+    public NameAndNamespacePair(String namespaceCode, String name) {
+        this.namespaceCode = namespaceCode;
+        this.name = name;
+    }
+    
+    public String getNamespaceCode() {
+        return namespaceCode;
+    }
+
+    public void setNamespaceCode(String namespaceCode) {
+        this.namespaceCode = namespaceCode;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/NameAndNamespacePair.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: work/src/org/kuali/rice/core/util/jaxb/StringTrimmingAdapter.java
===================================================================
--- work/src/org/kuali/rice/core/util/jaxb/StringTrimmingAdapter.java	(revision 0)
+++ work/src/org/kuali/rice/core/util/jaxb/StringTrimmingAdapter.java	(revision 32112)
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2011 The Kuali Foundation
+ *
+ * Licensed under the Educational Community License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.opensource.org/licenses/ecl1.php
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.core.util.jaxb;
+
+import javax.xml.bind.annotation.adapters.XmlAdapter;
+
+import org.apache.commons.lang.StringUtils;
+
+/**
+ * An XML adapter that simply performs a null-safe trim on the value to be marshalled or unmarshalled.
+ * 
+ * <p>Only use this adapter when it is necessary for the remaining whitespace-related characters to
+ * remain as-is.
+ * 
+ * @author Kuali Rice Team (rice.collab@kuali.org)
+ */
+public class StringTrimmingAdapter extends XmlAdapter<String,String> {
+
+    /**
+     * @see javax.xml.bind.annotation.adapters.XmlAdapter#unmarshal(java.lang.Object)
+     */
+    @Override
+    public String unmarshal(String v) throws Exception {
+        return StringUtils.trim(v);
+    }
+
+    /**
+     * @see javax.xml.bind.annotation.adapters.XmlAdapter#marshal(java.lang.Object)
+     */
+    @Override
+    public String marshal(String v) throws Exception {
+        return StringUtils.trim(v);
+    }
+
+}

Property changes on: work/src/org/kuali/rice/core/util/jaxb/StringTrimmingAdapter.java
___________________________________________________________________
Added: svn:eol-style
   + native

