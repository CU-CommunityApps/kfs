
#############################
##  Deployment properties
##     These properties affect the nature of deployment by the build script.
#############################

#is.local.build=true

is.clustered=false

# Set the property below to add additional properties to the 
# configuration.properties file that is deployed with the application.
# It will be tokenized using the same properties available to 
# build/project/configuration.properties.
institutional.configuration.file=

# allows insertion of custom content into the tomcat context file
custom.context.content=


# the core configuration property files that should be available in the KualiConfigurationService context, along with configuration.properties
core.property.files=classpath:KR-ApplicationResources.properties,classpath:ApplicationResources.properties
# the institution specific configuration property files that should be available in the KualiConfigurationService context, along with configuration.properties
institution.property.files=
# all the configuration property files that should be available in the KualiConfigurationService context, along with configuration.properties
property.files=${core.property.files}${institution.property.files}

# the core configuration property files that should be added to the KualiConfigurationService context for unit testing
core.property.test.files=classpath:test-configuration.properties
# the institution specific configuration property files that should be added to the KualiConfigurationService context for unit testing
institution.property.test.files=
# all the configuration property files that should be added to the KualiConfigurationService context for unit testing
property.test.files=${core.property.test.files}${institution.property.test.files}

feedback.link.url=https://test.kuali.org/jira/secure/CreateIssue.jspa?pid=10091&amp;issuetype=1
licensing.contact.email=license@kuali.org


#########################
##  Various properties used by the build process
#########################

non.java.resources=**/*.properties,**/*.dtd,**/*.xml,**/*.html,**/*.xsd,**/*.jasper,**/*.jrxml,META-INF/*
tests.non.java.resources=${non.java.resources},**/*.txt,**/*.sql

# miscellaneous build.xml configuration

compile.min.memory=128M
compile.max.memory=512M

run.tests.min.memory=384M
run.tests.max.memory=1024M
run.tests.max.permsize=128M

run.postloadencrypt.min.memory=384M
run.postloadencrypt.max.memory=1024M
run.postloadencrypt.max.permsize=256M

tests.includes=**/*Test.java
tests.startup.class=ContinuousIntegrationStartup
tests.shutdown.class=ContinuousIntegrationShutdown

tests.compile.includes=**/*.java
tests.compile.excludes=

javadoc.max.memory=512M

# determines what ${build.environment} the KualiConfigurationService considers your production environment
production.environment.code=prd

# KFS Report Writer Service
report.writer.service.new.line.characters=\\n

# indicates whether schema files should be rebuilt or not
#dont.filter.project.schema=

# indicates whether schema validation should be built from data dictionary, otherwise validation is basic xsd types only
use.dd.schema.validation=false

nonproduction.notification.mailing.list=${batch.mailing.list}


classpath.prefix=<?xml version="1.0" encoding="UTF-8"?>\n\
<classpath>\n\
\t<classpathentry kind="src" path="work/src"/>\n\
\t<classpathentry kind="src" output="test/classes" path="test/infrastructure/src"/>\n\
\t<classpathentry kind="src" output="test/classes" path="test/unit/src"/>\n\
\t<classpathentry kind="src" output="test/classes" path="test/integration/src"/>\n\
\t<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">\n\
\t\t<accessrules>\n\
\t\t\t<accessrule kind="nonaccessible" pattern="com/**"/>\n\
\t\t\t<accessrule kind="nonaccessible" pattern="sun/**"/>\n\
\t\t\t<accessrule kind="nonaccessible" pattern="sunw/**"/>\n\
\t\t</accessrules>\n\
\t</classpathentry>\n
	
classpath.suffix=\t<classpathentry kind="output" path="work/web-root/WEB-INF/classes"/>\n\
</classpath>\n

# These are JAR files which we want to exclude from the Rice project because they
# either:
#   1) are old (unused even by Rice)
#   2) are problems with the Rice classpath we don't want to inherit
#   3) are older than the version that KFS is currently using
rice.lib.jars.to.exclude=**/rice-*,**/cas-2*,**/casclient-2*,**/cas-server*,\
**/acegi*,**/commons-digester*,**/dwr*,**/log4j*,**/xml-apis-*,**/derby*,\
**/commons-pool-*,**/commons-dbcp-*

# These are libraries which should not be referenced in KFS code.  They need to be
# there for runtime testing, but their classes should not be referenced in KFS code.
runtime.only.jars=jasper-*.jar,ojdbc*.jar,mysql*.jar,commons-el*.jar,p6spy*.jar,activation*.jar,\
commons-dbcp-*.jar,commons-httpclient-*.jar,commons-pool-*.jar,jdom*.jar,jotm*.jar,xapool*.jar,\
jboss*.jar,geronimo*.jar,cglib*.jar,xml-resolver*.jar,wsdl4j*.jar,jaxen*.jar,XmlSchema*.jar,\
xpp3*.jar,hibernate*.jar,asm*.jar,avalon*.jar,batik*.jar,cas*.jar,opensaml*.jar,saaj-impl*.jar,\
struts-el*.jar,taglibs*.jar,wstx*.jar,xalan-serializer*.jar,xmlsec*.jar,connector-api*.jar,\
abdera*.jar,backport*.jar,bcprov*.jar,wss4j*.jar,aopalliance*.jar
